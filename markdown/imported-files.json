[
    {
        "path": "\/markdown\/explanations\/history.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">History<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A set of links and resources covering the history of the Gutenberg project, how it got started, sources of inspiration, and initial thinking.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Inspiration<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A community <a href=\"https:\/\/make.wordpress.org\/core\/2017\/04\/07\/editor-experience-survey-results\/\">Editor Experience Survey<\/a> was conducted in early 2017, which reinforced the need for a new editing experience in WordPress.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is a list of historical articles and products that influenced the Gutenberg project and the creation of the Block Editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/intenseminimalism.com\/2017\/parrot-an-integrated-site-builder-and-editor-concept-for-wordpress\/\">Parrot: an integrated site builder and editor concept for WordPress<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>LivingDocs<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Apple Keynote<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Slack<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Google Sites v2<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Gutenberg updates and feature overviews<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/wordpress.tv\/2021\/01\/21\/eileen-violini-themes-of-the-future-the-new-frontier-of-gutenberg-block-based-themes-and-theme-development\/\">Themes of the Future<\/a>, Eileen Violini (January 2021)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/make.wordpress.org\/core\/2020\/12\/10\/status-check-site-editing-and-customization\/\">Status Check: Site Editing &amp; Customization<\/a>, Mat\u00edas Ventura Bausero (December 2020)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/youtu.be\/QI3qCoiuG3w?t=1279\">State of the Word 2020 FSE Demo<\/a>, Matt Mullenweg (December 2020)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/riad.blog\/2020\/01\/28\/embrace-the-modularity\/\">Embrace the Modularity<\/a>, Riad Benguella (January 2020)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/www.youtube.com\/watch?v=LezbkeV059Q\">State of the Word 2019 Gutenberg Demo<\/a>, Matt Mullenweg (December 2019)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/gziolo.pl\/2019\/07\/15\/growing-javascript-skills-with-wordpress\/\">Growing JavaScript Skills with WordPress<\/a> at JavaScript for WordPress conference (July 2019)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/wordpress.tv\/2018\/07\/09\/matias-ventura-beyond-gutenberg\/\">Beyond Gutenberg<\/a>, Mat\u00edas Ventura Bausero (July 2018)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/wordpress.tv\/2018\/07\/08\/tammie-lister-anatomy-of-a-block-gutenberg-design-patterns\/\">Anatomy of a block: Gutenberg design patterns<\/a>, Tammie Lister (July 2018)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/lamda.blog\/2018\/04\/22\/the-language-of-gutenberg\/\">The Language of Gutenberg<\/a>, Miguel Fonseca (April 2018)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/youtu.be\/XOY3ZUO6P0k?t=2100\">State of the Word 2017 Gutenberg Demo<\/a>, Matt Mullenweg with demo by Mat\u00edas Ventura Bausero (December 2017)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/matiasventura.com\/post\/gutenberg-or-the-ship-of-theseus\/\">Gutenberg, or the Ship of Theseus<\/a>, Mat\u00edas Ventura Bausero (October 2017)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/ma.tt\/2017\/08\/we-called-it-gutenberg-for-a-reason\/\">We Called It Gutenberg for a Reason<\/a>, Matt Mullenweg (August 2017)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/riad.blog\/2017\/10\/06\/how-gutenberg-is-changing-wordpress-development\/\">How Gutenberg is Changing WordPress Development<\/a>, Riad Benguella (October 2017)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/make.wordpress.org\/core\/2017\/08\/11\/revised-suggested-roadmap-for-gutenberg-and-customization\/\">Revised suggested roadmap for Gutenberg and Customization<\/a>, Tammie Lister (August 2017)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/make.wordpress.org\/core\/2017\/08\/08\/discovering-gutenberg-and-next-steps\/\">Discovering Gutenberg and next steps<\/a>, Tammie Lister (August 2017)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/www.linkedin.com\/pulse\/gutenberg-morten-rand-hendriksen\/\">How Gutenberg Will Shape the Future of WordPress<\/a>, Morten Rand-Henrikson (August 2017)<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>You can also view this <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/references\/keeping-up-with-gutenberg-index\/\">Index of Gutenberg related posts<\/a> for more resources.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# History\n\nA set of links and resources covering the history of the Gutenberg project, how it got started, sources of inspiration, and initial thinking.\n\n## Inspiration\n\nA community [Editor Experience Survey](https:\/\/make.wordpress.org\/core\/2017\/04\/07\/editor-experience-survey-results\/) was conducted in early 2017, which reinforced the need for a new editing experience in WordPress.\n\nThis is a list of historical articles and products that influenced the Gutenberg project and the creation of the Block Editor.\n\n-   [Parrot: an integrated site builder and editor concept for WordPress](https:\/\/intenseminimalism.com\/2017\/parrot-an-integrated-site-builder-and-editor-concept-for-wordpress\/)\n-   LivingDocs\n-   Apple Keynote\n-   Slack\n-   Google Sites v2\n\n### Gutenberg updates and feature overviews\n\n-   [Themes of the Future](https:\/\/wordpress.tv\/2021\/01\/21\/eileen-violini-themes-of-the-future-the-new-frontier-of-gutenberg-block-based-themes-and-theme-development\/), Eileen Violini (January 2021)\n-   [Status Check: Site Editing & Customization](https:\/\/make.wordpress.org\/core\/2020\/12\/10\/status-check-site-editing-and-customization\/), Mat\u00edas Ventura Bausero (December 2020)\n-   [State of the Word 2020 FSE Demo](https:\/\/youtu.be\/QI3qCoiuG3w?t=1279), Matt Mullenweg (December 2020)\n-   [Embrace the Modularity](https:\/\/riad.blog\/2020\/01\/28\/embrace-the-modularity\/), Riad Benguella (January 2020)\n-   [State of the Word 2019 Gutenberg Demo](https:\/\/www.youtube.com\/watch?v=LezbkeV059Q), Matt Mullenweg (December 2019)\n-   [Growing JavaScript Skills with WordPress](https:\/\/gziolo.pl\/2019\/07\/15\/growing-javascript-skills-with-wordpress\/) at JavaScript for WordPress conference (July 2019)\n-   [Beyond Gutenberg](https:\/\/wordpress.tv\/2018\/07\/09\/matias-ventura-beyond-gutenberg\/), Mat\u00edas Ventura Bausero (July 2018)\n-   [Anatomy of a block: Gutenberg design patterns](https:\/\/wordpress.tv\/2018\/07\/08\/tammie-lister-anatomy-of-a-block-gutenberg-design-patterns\/), Tammie Lister (July 2018)\n-   [The Language of Gutenberg](https:\/\/lamda.blog\/2018\/04\/22\/the-language-of-gutenberg\/), Miguel Fonseca (April 2018)\n-   [State of the Word 2017 Gutenberg Demo](https:\/\/youtu.be\/XOY3ZUO6P0k?t=2100), Matt Mullenweg with demo by Mat\u00edas Ventura Bausero (December 2017)\n-   [Gutenberg, or the Ship of Theseus](https:\/\/matiasventura.com\/post\/gutenberg-or-the-ship-of-theseus\/), Mat\u00edas Ventura Bausero (October 2017)\n-   [We Called It Gutenberg for a Reason](https:\/\/ma.tt\/2017\/08\/we-called-it-gutenberg-for-a-reason\/), Matt Mullenweg (August 2017)\n-   [How Gutenberg is Changing WordPress Development](https:\/\/riad.blog\/2017\/10\/06\/how-gutenberg-is-changing-wordpress-development\/), Riad Benguella (October 2017)\n-   [Revised suggested roadmap for Gutenberg and Customization](https:\/\/make.wordpress.org\/core\/2017\/08\/11\/revised-suggested-roadmap-for-gutenberg-and-customization\/), Tammie Lister (August 2017)\n-   [Discovering Gutenberg and next steps](https:\/\/make.wordpress.org\/core\/2017\/08\/08\/discovering-gutenberg-and-next-steps\/), Tammie Lister (August 2017)\n-   [How Gutenberg Will Shape the Future of WordPress](https:\/\/www.linkedin.com\/pulse\/gutenberg-morten-rand-hendriksen\/), Morten Rand-Henrikson (August 2017)\n\nYou can also view this [Index of Gutenberg related posts](https:\/\/make.wordpress.org\/core\/handbook\/references\/keeping-up-with-gutenberg-index\/) for more resources."
    },
    {
        "path": "\/markdown\/explanations\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Explanations<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"\/docs\/explanations\/architecture\/README.md\">Architecture<\/a><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/explanations\/architecture\/key-concepts.md\">Key Concepts<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/explanations\/architecture\/data-flow.md\">Data Format And Data Flow<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/explanations\/architecture\/modularity.md\">Modularity and WordPress Packages<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/explanations\/architecture\/performance.md\">Block Editor Performance<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>What are the decision decisions behind the Data Module?<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/explanations\/architecture\/automated-testing.md\">Why is Puppeteer the tool of choice for end-to-end tests?<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/explanations\/architecture\/modularity.md\/#whats-the-difference-between-the-different-editor-packages-whats-the-purpose-of-each-package\">What\u2019s the difference between the different editor packages? What\u2019s the purpose of each package?<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/explanations\/architecture\/full-site-editing-templates.md\">Template and template parts flows<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Explanations\n\n## [Architecture](\/docs\/explanations\/architecture\/README.md)\n\n-   [Key Concepts](\/docs\/explanations\/architecture\/key-concepts.md)\n-   [Data Format And Data Flow](\/docs\/explanations\/architecture\/data-flow.md)\n-   [Modularity and WordPress Packages](\/docs\/explanations\/architecture\/modularity.md).\n-   [Block Editor Performance](\/docs\/explanations\/architecture\/performance.md).\n-   What are the decision decisions behind the Data Module?\n-   [Why is Puppeteer the tool of choice for end-to-end tests?](\/docs\/explanations\/architecture\/automated-testing.md)\n-   [What\u2019s the difference between the different editor packages? What\u2019s the purpose of each package?](\/docs\/explanations\/architecture\/modularity.md\/#whats-the-difference-between-the-different-editor-packages-whats-the-purpose-of-each-package)\n-   [Template and template parts flows](\/docs\/explanations\/architecture\/full-site-editing-templates.md)\n"
    },
    {
        "path": "\/markdown\/explanations\/user-interface\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">User Interface<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The Block Editor<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The block editor\u2019s general layout uses a bar at the top, with content below.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/cldup.com\/VWA_jMcIRw-3000x3000.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Editor Interface<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>The <strong>Toolbar<\/strong> contains document-level actions: Editor\/Select modes, save status, global actions for undo\/redo\/insert, the settings toggle, and publish options.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <strong>Content Area<\/strong> contains the document itself.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <strong>Settings Sidebar<\/strong> contains additional settings for the document (tags, categories, schedule etc.) and for blocks in the \u201cBlock\u201d tab. A cog button in the toolbar hides the Settings Sidebar, allowing the user to enjoy a more immersive writing experience. On small screens, the sidebar is hidden by default.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The Block<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The block itself is the most basic unit of the editor. Generally speaking, everything is a block. Users build posts and pages using blocks, mimicking the vertical flow of the underlying HTML markup.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>By surfacing each section of the document as a manipulatable block, we surface block-specific features contextually. This is inspired by desktop app conventions, and allows for a breadth of advanced features without weighing down the UI.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A selected block shows a number of contextual actions:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/cldup.com\/3tQqIncKPB-3000x3000.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Block Interface<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>The block interface has basic actions. The block editor aims for good, common defaults, so users should be able to create a complete document without actually needing the advanced actions in the Settings Sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>The Block Toolbar<\/strong> highlights commonly-used actions. The <strong>Block Icon<\/strong> lives in the block toolbar, and contains high-level controls for the selected block. It primarily allows users to transform a block into another type of compatible block. Some blocks also use the block icon for users to choose from a set of alternate block styles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <strong>Block Formatting<\/strong> options let users adjust block-level settings, and the <strong>Inline Formatting<\/strong> options allow adjustments to elements inside the block. When a block is long, the block toolbar pins itself to the top of the screen as the user scrolls down the page.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Blocks can be moved up and down via the <strong>Block Mover<\/strong> icons. Additional block actions are available via an ellipsis menu: deleting and duplicating blocks, as well as <strong>advanced actions<\/strong> like \u201cEdit as HTML\u201d and \u201cConvert to Reusable Block.\u201d<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>An unselected block does not show the block toolbar or any other contextual controls. In effect, an unselected block is a preview of the content itself:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/cldup.com\/DH9HZnEgwH-3000x3000.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Unselected Block<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Please note that selection and focus can be different. An image block can be selected while the focus is on the caption field.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Settings Sidebar<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/cldup.com\/iAqrn6Gc8o-3000x3000.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Settings Sidebar<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>The sidebar has two tabs, Document and Block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The <strong>Document Tab<\/strong> shows metadata and settings for the post or page being edited.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The <strong>Block Tab<\/strong> shows metadata and settings for the currently selected block.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Each tab has sets of editable fields (<strong>Sidebar Sections<\/strong>) that users can toggle open or closed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If a block requires advanced configuration, those settings should live in the Settings Sidebar. Don\u2019t put anything in the sidebar block tab that is necessary for the basic operation of your block; your user might dismiss the sidebar for an immersive writing experience. Pick good defaults, and make important actions available in the block toolbar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Actions that could go in the block tab of the sidebar could be:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Drop cap, for text<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Number of columns for galleries<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Number of posts, or category, in the \u201cLatest Posts\u201d block<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Any configuration that you don\u2019t need access to in order to perform basic tasks<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block Library<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/cldup.com\/7QoQIoLk-A-3000x3000.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Block Library<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>The <strong>Block Library<\/strong> appears when someone inserts a block, whether via the toolbar, or contextually within the content area. Inside, blocks are organized into expandable sections. The block library\u2019s search bar auto-filters the list of blocks as the user types. Users can choose a block by selecting the <strong>Block Button<\/strong> or the <strong>Block Name<\/strong>.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# User Interface\n\n## The Block Editor\n\nThe block editor\u2019s general layout uses a bar at the top, with content below.\n\n![Editor Interface](https:\/\/cldup.com\/VWA_jMcIRw-3000x3000.png)\n\nThe **Toolbar** contains document-level actions: Editor\/Select modes, save status, global actions for undo\/redo\/insert, the settings toggle, and publish options.\n\nThe **Content Area** contains the document itself.\n\nThe **Settings Sidebar** contains additional settings for the document (tags, categories, schedule etc.) and for blocks in the \u201cBlock\u201d tab. A cog button in the toolbar hides the Settings Sidebar, allowing the user to enjoy a more immersive writing experience. On small screens, the sidebar is hidden by default.\n\n## The Block\n\nThe block itself is the most basic unit of the editor. Generally speaking, everything is a block. Users build posts and pages using blocks, mimicking the vertical flow of the underlying HTML markup.\n\nBy surfacing each section of the document as a manipulatable block, we surface block-specific features contextually. This is inspired by desktop app conventions, and allows for a breadth of advanced features without weighing down the UI.\n\nA selected block shows a number of contextual actions:\n\n![Block Interface](https:\/\/cldup.com\/3tQqIncKPB-3000x3000.png)\n\nThe block interface has basic actions. The block editor aims for good, common defaults, so users should be able to create a complete document without actually needing the advanced actions in the Settings Sidebar.\n\n**The Block Toolbar** highlights commonly-used actions. The **Block Icon** lives in the block toolbar, and contains high-level controls for the selected block. It primarily allows users to transform a block into another type of compatible block. Some blocks also use the block icon for users to choose from a set of alternate block styles.\n\nThe **Block Formatting** options let users adjust block-level settings, and the **Inline Formatting** options allow adjustments to elements inside the block. When a block is long, the block toolbar pins itself to the top of the screen as the user scrolls down the page.\n\nBlocks can be moved up and down via the **Block Mover** icons. Additional block actions are available via an ellipsis menu: deleting and duplicating blocks, as well as **advanced actions** like \u201cEdit as HTML\u201d and \u201cConvert to Reusable Block.\u201d\n\nAn unselected block does not show the block toolbar or any other contextual controls. In effect, an unselected block is a preview of the content itself:\n\n![Unselected Block](https:\/\/cldup.com\/DH9HZnEgwH-3000x3000.png)\n\nPlease note that selection and focus can be different. An image block can be selected while the focus is on the caption field.\n\n## Settings Sidebar\n\n![Settings Sidebar](https:\/\/cldup.com\/iAqrn6Gc8o-3000x3000.png)\n\nThe sidebar has two tabs, Document and Block:\n\n-   The **Document Tab** shows metadata and settings for the post or page being edited.\n-   The **Block Tab** shows metadata and settings for the currently selected block.\n\nEach tab has sets of editable fields (**Sidebar Sections**) that users can toggle open or closed.\n\nIf a block requires advanced configuration, those settings should live in the Settings Sidebar. Don\u2019t put anything in the sidebar block tab that is necessary for the basic operation of your block; your user might dismiss the sidebar for an immersive writing experience. Pick good defaults, and make important actions available in the block toolbar.\n\nActions that could go in the block tab of the sidebar could be:\n\n-   Drop cap, for text\n-   Number of columns for galleries\n-   Number of posts, or category, in the \u201cLatest Posts\u201d block\n-   Any configuration that you don\u2019t need access to in order to perform basic tasks\n\n## Block Library\n\n![Block Library](https:\/\/cldup.com\/7QoQIoLk-A-3000x3000.png)\n\nThe **Block Library** appears when someone inserts a block, whether via the toolbar, or contextually within the content area. Inside, blocks are organized into expandable sections. The block library\u2019s search bar auto-filters the list of blocks as the user types. Users can choose a block by selecting the **Block Button** or the **Block Name**.\n"
    },
    {
        "path": "\/markdown\/explanations\/user-interface\/animation.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Animation<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Animation can help reinforce a sense of hierarchy and spatial orientation. This document goes into principles you should follow when you add animation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Principles<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Point of Origin<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Animation can help anchor an interface element. For example a menu can scale up from the button that opened it.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Animation can help give a sense of place; for example a sidebar can animate in from the side, implying it was always hidden off-screen.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Design your animations as if you're working with real-world materials. Imagine your user interface elements are made of real materials \u2014 when not on screen, where are they? Use animation to help express that.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Speed<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Animations should never block a user interaction. They should be fast, almost always complete in less than 0.2 seconds.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>A user should not have to wait for an animation to finish before they can interact.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Animations should be performant. Use <code>transform<\/code> CSS properties when you can, these render elements on the GPU, making them smooth.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If an animation can't be made fast &amp; performant, leave it out.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Simple<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Don't bounce if the material isn't made of rubber.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Don't rotate, fold, or animate on a curved path. Keep it simple.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Consistency<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In creating consistent animations, we have to establish physical rules for how elements behave when animated. When all animations follow these rules, they feel consistent, related, and predictable. An animation should match user expectations, if it doesn't, it's probably not the right animation for the job.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reuse animations if one already exists for your task.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Accessibility Considerations<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Animations should be subtle. Be cognizant of users with <a href=\"https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/29017000\">vestibular disorders triggered by motion<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Don't animate elements that are currently reporting content to adaptive technology (e.g., an <code>aria-live<\/code> region that's receiving updates). This can cause confusion wherein the technology tries to parse a region that's actively changing.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Avoid animations that aren't directly triggered by user behaviors.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Whenever possible, ensure that animations respect the OS-level \"Reduce Motion\" settings. This can be done by utilizing the <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/@media\/prefers-reduced-motion\"><code>prefers-reduced-motion<\/code><\/a> media query. Gutenberg includes a <code>@reduce-motion<\/code> mixin for this, to be used alongside rules that include a CSS <code>animate<\/code> property.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Inventory of Reused Animations<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The generic <code>Animate<\/code> component is used to animate different parts of the interface. See <a href=\"\/packages\/components\/src\/animate\/README.md\">the component documentation<\/a> for more details about the available animations.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Animation\n\nAnimation can help reinforce a sense of hierarchy and spatial orientation. This document goes into principles you should follow when you add animation.\n\n## Principles\n\n### Point of Origin\n\n-   Animation can help anchor an interface element. For example a menu can scale up from the button that opened it.\n-   Animation can help give a sense of place; for example a sidebar can animate in from the side, implying it was always hidden off-screen.\n-   Design your animations as if you're working with real-world materials. Imagine your user interface elements are made of real materials \u2014 when not on screen, where are they? Use animation to help express that.\n\n### Speed\n\n-   Animations should never block a user interaction. They should be fast, almost always complete in less than 0.2 seconds.\n-   A user should not have to wait for an animation to finish before they can interact.\n-   Animations should be performant. Use `transform` CSS properties when you can, these render elements on the GPU, making them smooth.\n-   If an animation can't be made fast & performant, leave it out.\n\n### Simple\n\n-   Don't bounce if the material isn't made of rubber.\n-   Don't rotate, fold, or animate on a curved path. Keep it simple.\n\n### Consistency\n\nIn creating consistent animations, we have to establish physical rules for how elements behave when animated. When all animations follow these rules, they feel consistent, related, and predictable. An animation should match user expectations, if it doesn't, it's probably not the right animation for the job.\n\nReuse animations if one already exists for your task.\n\n## Accessibility Considerations\n\n-   Animations should be subtle. Be cognizant of users with [vestibular disorders triggered by motion](https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/29017000).\n-   Don't animate elements that are currently reporting content to adaptive technology (e.g., an `aria-live` region that's receiving updates). This can cause confusion wherein the technology tries to parse a region that's actively changing.\n-   Avoid animations that aren't directly triggered by user behaviors.\n-   Whenever possible, ensure that animations respect the OS-level \"Reduce Motion\" settings. This can be done by utilizing the [`prefers-reduced-motion`](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/@media\/prefers-reduced-motion) media query. Gutenberg includes a `@reduce-motion` mixin for this, to be used alongside rules that include a CSS `animate` property.\n\n## Inventory of Reused Animations\n\nThe generic `Animate` component is used to animate different parts of the interface. See [the component documentation](\/packages\/components\/src\/animate\/README.md) for more details about the available animations.\n"
    },
    {
        "path": "\/markdown\/explanations\/user-interface\/design-resources.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Resources<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Figma<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/make.wordpress.org\/design\/\">WordPress Design team<\/a> uses <a href=\"https:\/\/www.figma.com\/\">Figma<\/a> to collaborate and share work. If you'd like to contribute, join the <a href=\"https:\/\/app.slack.com\/client\/T024MFP4J\/C02S78ZAL\">#design channel<\/a> in <a href=\"https:\/\/make.wordpress.org\/chat\/\">Slack<\/a> and ask the team to set you up with a free Figma account. This will give you access to a helpful library of components used in WordPress. They are stable, fully supported, up to date, and ready for use in designs and prototypes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">How to contribute<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Resources for learning how to use Figma<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/help.figma.com\/category\/9-getting-started\">Getting started with Figma<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/medium.com\/quick-design\/top-online-tutorials-to-learn-figma-for-ui-ux-design-4e9c6721a72d\">Top Online Tutorials to Learn Figma for UI\/UX Design<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/help.figma.com\/article\/12-getting-familiar-with-figma\">Take a Tour Around Figma<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Learning how to use files and projects<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/help.figma.com\/article\/298-getting-started-with-files-and-projects\">Getting started with Figma files and projects<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/help.figma.com\/article\/298-getting-started-with-files-and-projects#files\">What are files?<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/help.figma.com\/article\/298-getting-started-with-files-and-projects#projects\">What are projects?<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/www.youtube.com\/watch?v=c5HS6smhq2E\">Video tutorial<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/help.figma.com\/article\/298-getting-started-with-files-and-projects#faq\">FAQ<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Learning how to use components<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/help.figma.com\/article\/66-components\">Getting started with components<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/help.figma.com\/article\/66-components#components\">What are components?<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/help.figma.com\/article\/66-components#videos\">Video tutorial<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Learning how to use WordPress Figma libraries<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>How to turn on the WordPress Components library in Figma<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/wordpress.org\/gutenberg\/files\/2019\/08\/figma-howtoturnonlibraries.gif\" alt=\"\"\/><figcaption class=\"wp-element-caption\">How to turn on Figma libraries gif<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Click the <strong>Team Library<\/strong> icon in the <strong>Assets<\/strong> Panel:<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/wordpress.org\/gutenberg\/files\/2019\/08\/figma-turn-on-libraries-e1564770916643.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Hovering over the team library icon<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\" class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The <strong>Library<\/strong> modal will open and allow you to view a list of available libraries. Toggle to <em>Enable<\/em> or <em>Disable<\/em> a specific library:<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/wordpress.org\/gutenberg\/files\/2019\/08\/figma-libraries-e1564770879415.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Switching on the WordPress components library in Figma<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>How to refine or contribute to the WordPress components React library <em>(Coming soon)<\/em><\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>WordPress components in Figma mirror the live React components. Documentation for how to refine or contribute to WordPress components in React is coming soon.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you have questions, please don\u2019t hesitate to ask in the #design channel on the WordPress community Slack.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Resources\n\n## Figma\n\nThe [WordPress Design team](https:\/\/make.wordpress.org\/design\/) uses [Figma](https:\/\/www.figma.com\/) to collaborate and share work. If you'd like to contribute, join the [#design channel](https:\/\/app.slack.com\/client\/T024MFP4J\/C02S78ZAL) in [Slack](https:\/\/make.wordpress.org\/chat\/) and ask the team to set you up with a free Figma account. This will give you access to a helpful library of components used in WordPress. They are stable, fully supported, up to date, and ready for use in designs and prototypes.\n\n### How to contribute\n\n### Resources for learning how to use Figma\n\n[Getting started with Figma](https:\/\/help.figma.com\/category\/9-getting-started)\n\n[Top Online Tutorials to Learn Figma for UI\/UX Design](https:\/\/medium.com\/quick-design\/top-online-tutorials-to-learn-figma-for-ui-ux-design-4e9c6721a72d)\n\n[Take a Tour Around Figma](https:\/\/help.figma.com\/article\/12-getting-familiar-with-figma)\n\n### Learning how to use files and projects\n\n[Getting started with Figma files and projects](https:\/\/help.figma.com\/article\/298-getting-started-with-files-and-projects)\n\n[What are files?](https:\/\/help.figma.com\/article\/298-getting-started-with-files-and-projects#files)\n\n[What are projects?](https:\/\/help.figma.com\/article\/298-getting-started-with-files-and-projects#projects)\n\n[Video tutorial](https:\/\/www.youtube.com\/watch?v=c5HS6smhq2E)\n\n[FAQ](https:\/\/help.figma.com\/article\/298-getting-started-with-files-and-projects#faq)\n\n### Learning how to use components\n\n[Getting started with components](https:\/\/help.figma.com\/article\/66-components)\n\n[What are components?](https:\/\/help.figma.com\/article\/66-components#components)\n\n[Video tutorial](https:\/\/help.figma.com\/article\/66-components#videos)\n\n### Learning how to use WordPress Figma libraries\n\n**How to turn on the WordPress Components library in Figma**\n\n![How to turn on Figma libraries gif](https:\/\/wordpress.org\/gutenberg\/files\/2019\/08\/figma-howtoturnonlibraries.gif)\n\n1. Click the **Team Library** icon in the **Assets** Panel:\n\n![Hovering over the team library icon](https:\/\/wordpress.org\/gutenberg\/files\/2019\/08\/figma-turn-on-libraries-e1564770916643.png)\n\n2. The **Library** modal will open and allow you to view a list of available libraries. Toggle to _Enable_ or _Disable_ a specific library:\n\n![Switching on the WordPress components library in Figma](https:\/\/wordpress.org\/gutenberg\/files\/2019\/08\/figma-libraries-e1564770879415.png)\n\n**How to refine or contribute to the WordPress components React library _(Coming soon)_**\n\nWordPress components in Figma mirror the live React components. Documentation for how to refine or contribute to WordPress components in React is coming soon.\n\nIf you have questions, please don\u2019t hesitate to ask in the #design channel on the WordPress community Slack.\n"
    },
    {
        "path": "\/markdown\/explanations\/user-interface\/block-design.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Block Design<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The following are best practices for designing a new block, with recommendations and detailed descriptions of existing blocks to illustrate our approach to creating blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Best Practices<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">The primary interface for a block is the content area of the block<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Since the block itself represents what will actually appear on the site, interaction here hews closest to the principle of direct manipulation and will be most intuitive to the user. This should be thought of as the primary interface for adding and manipulating content and adjusting how it is displayed. There are two ways of interacting here:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The placeholder content in the content area of the block can be thought of as a guide or interface for users to follow a set of instructions or \u201cfill in the blanks\u201d. For example, a block that embeds content from a 3rd-party service might contain controls for signing in to that service in the placeholder.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>After the user has added content, selecting the block can reveal additional controls to adjust or edit that content. For example, a signup block might reveal a control for hiding\/showing subscriber count. However, this should be done in minimal ways, so as to avoid dramatically changing the size and display of a block when a user selects it (this could be disorienting or annoying).<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">The Block Toolbar is a secondary place for required options &amp; controls<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Basic block settings won\u2019t always make sense in the context of the placeholder\/content UI. As a secondary option, options that are critical to the functionality of a block can live in the block toolbar. The Block Toolbar is still highly contextual and visible on all screen sizes. One notable constraint with the Block Toolbar is that it is icon-based UI, so any controls that live in the Block Toolbar need to be ones that can effectively be communicated via an icon or icon group.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Group Block Toolbar controls with related items<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Block Toolbar groups controls in segments, hierarchically. The first segment contains block type controls, such as the block switcher, the drag handle, and the mover control. The second group contains common and specific block tools that affect the entire block, followed by inline formatting, and the \"More\" menu. Optionally \"Meta\" or \"Other\" groups can separate some tools in their own segment.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/make.wordpress.org\/design\/files\/2021\/03\/docs_block-toolbar-structure.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">A screenshot showing examples of block toolbar segment groupings.<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">The Settings Sidebar should only be used for advanced, tertiary controls<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Settings Sidebar is not visible by default on a small \/ mobile screen, and may also be collapsed in a desktop view. Therefore, it should not be relied on for anything that is necessary for the basic operation of the block. Pick good defaults, make important actions available in the block toolbar, and think of the Settings Sidebar as something that most users should not need to open.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In addition, use sections and headers in the Settings Sidebar if there are more than a handful of options, in order to allow users to easily scan and understand the options available.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Each Settings Sidebar comes with an \"Advanced\" section by default. This area houses an \"Additional CSS Class\" field, and should be used to house other power user controls.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Setup state vs. live preview state<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Setup states, sometimes referred to as \"placeholders\", can be used to walk users through an initial process before showing the live preview state of the block. The setup process gathers information from the user that is needed to render the block. A block\u2019s setup state is indicated with a grey background to provide clear differentiation for the user. Not all blocks have setup states \u2014 for example, the Paragraph block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/make.wordpress.org\/design\/files\/2021\/03\/docs__gallery-setup-state.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">An example of an image block\u2019s setup state on a grey background<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>A setup state is <strong>not<\/strong> necessary if:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>You can provide good default content in the block that will meet most people\u2019s needs.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>That default content is easy to edit and customize.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Use a setup state if:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>There isn\u2019t a clear default state that would work for most users.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>You need to gather input from the user that doesn\u2019t have a 1-1 relationship with the live preview of the block (for example, if you need the user to input an API key to render content).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>You need more information from the user in order to render useful default content.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For blocks that do have setup states, once the user has gone through the setup process, the placeholder is replaced with the live preview state of that block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/make.wordpress.org\/design\/files\/2018\/12\/gallery-live-preview.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">An example of the image gallery\u2019s live preview state<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>When the block is selected, additional controls may be revealed to customize the block\u2019s contents. For example, when the image gallery is selected, it reveals controls to remove or add images.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/make.wordpress.org\/design\/files\/2018\/12\/gallery-additional-controls.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">An example of additional controls being revealed on selection of a block.<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>In most cases, a block\u2019s setup state is only shown once and then further customization is done via the live preview state. However, in some cases it might be desirable to allow the user to return to the setup state \u2014 for example, if all the block content has been deleted or via a link from the block\u2019s toolbar or sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Do's and Don'ts<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block Toolbar<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Group toolbar controls in logical segments. Don't add a segment for each.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/make.wordpress.org\/design\/files\/2021\/03\/docs__block-toolbar-do-dont.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">A screenshot comparing a block toolbar with good vs. bad toolbar segment groupings.<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block identification<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block should have a straightforward, short name so users can easily find it in the block library. A block named \"YouTube\" is easy to find and understand. The same block, named \"Embedded Video (YouTube)\", would be less clear and harder to find in the block library.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When referring to a block in documentation or UI, use title case for the block title and lowercase for the \"block\" descriptor. For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Paragraph block<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Latest Posts block<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Media &amp; Text block<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Blocks should have an identifying icon, ideally using a single color. Try to avoid using the same icon used by an existing block. The core block icons are based on <a href=\"https:\/\/fonts.google.com\/icons\">Material Design Icons<\/a>. Look to that icon set, or to <a href=\"https:\/\/developer.wordpress.org\/resource\/dashicons\/\">Dashicons<\/a> for style inspiration.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img src=\"https:\/\/developer.wordpress.org\/files\/2022\/01\/blocks-do.png\">A screenshot of the block library with concise block names<br><strong>Do:<\/strong><br>Use concise block names.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img src=\"https:\/\/developer.wordpress.org\/files\/2022\/01\/blocks-dont.png\">A screenshot of the block library with long, multi-line block names<br><strong>Don't:<\/strong><br>Avoid long, multi-line block names.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block description<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Every block should include a description that clearly explains the block's function. The description will display in the Settings Sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can add a description by using the description attribute in the <a href=\"\/docs\/reference-guides\/block-api\/block-registration.md\">registerBlockType function<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Stick to a single imperative sentence with an action + subject format. Examples:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Start with the basic building block of all narrative.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Introduce new sections and organize content to help visitors (and search engines) understand the structure of your content.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create a bulleted or numbered list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><img src=\"https:\/\/developer.wordpress.org\/files\/2022\/01\/block-descriptions-do.png\">A screenshot of a short block description<br><strong>Do:<\/strong><br>Use a short, simple block description.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img src=\"https:\/\/developer.wordpress.org\/files\/2022\/01\/block-descriptions-dont.png\">A screenshot of a long block description that includes branding<br><strong>Don't:<\/strong><br>Avoid long descriptions and branding.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Placeholders<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If your block requires a user to configure some options before you can display it, you should provide an instructive placeholder state.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img src=\"https:\/\/developer.wordpress.org\/files\/2022\/01\/placeholder-do.png\">A screenshot of the Gallery block's placeholder<br><strong>Do:<\/strong><br>Provide an instructive placeholder state.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img src=\"https:\/\/developer.wordpress.org\/files\/2022\/01\/placeholder-dont.png\">An example Gallery block placeholder but with intense, distracting colors and no instructions<br><strong>Don't:<\/strong><br>Avoid branding and relying on the title alone to convey instructions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Selected and unselected states<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When unselected, your block should preview its content as closely to the front-end output as possible.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When selected, your block may surface additional options like input fields or buttons to configure the block directly, especially when they are necessary for basic operation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img src=\"https:\/\/developer.wordpress.org\/files\/2022\/01\/block-controls-do.png\">A Google Maps block with inline, always-accessible controls required for the block to function<br><strong>Do:<\/strong><br>For controls that are essential for the operation of the block, provide them directly inside the block edit view.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img src=\"https:\/\/developer.wordpress.org\/files\/2022\/01\/block-controls-dont.png\">A Google Maps block with essential controls moved to the sidebar where they can be contextually hidden<br><strong>Don't:<\/strong><br>Do not put controls that are essential to the block in the sidebar, otherwise the block will appear non-functional to mobile users or desktop users who have dismissed the sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Advanced block settings<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The \u201cBlock\u201d tab of the Settings Sidebar can contain additional block options and configuration. Keep in mind that a user can dismiss the sidebar and never use it. You should not put critical options in the Sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img src=\"https:\/\/developer.wordpress.org\/files\/2022\/01\/advanced-settings-do.png\">A screenshot of the Paragraph block's advanced settings in the sidebar<br><strong>Do:<\/strong><br>Because the Drop Cap feature is not necessary for the basic operation of the block, you can put it to the Block tab as optional configuration.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Consider mobile<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Check how your block looks, feels, and works on as many devices and screen sizes as you can.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Support Gutenberg's dark background editor scheme<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Check how your block looks with <a href=\"\/docs\/how-to-guides\/themes\/theme-support.md#dark-backgrounds\">dark backgrounds<\/a> in the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Examples<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To demonstrate some of these practices, here are a few annotated examples of default Gutenberg blocks:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Paragraph<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The most basic unit of the editor. The Paragraph block is a simple input field.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/cldup.com\/HVJe5bGZ8H-3000x3000.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Paragraph block<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Placeholder<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Simple placeholder text that reads \u201cType \/ to choose a block\u201d. The placeholder disappears when the block is selected.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Selected state<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Block Toolbar: Has a switcher to perform transformations to headings, etc.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Block Toolbar: Has basic text alignments<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Block Toolbar: Has inline formatting options, bold, italic, strikethrough, and link<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Image<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Basic image block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/cldup.com\/w6FNywNsj1-3000x3000.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Image block placeholder<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Placeholder<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>A generic gray placeholder block with options to upload an image, drag and drop an image directly on it, or pick an image from the media library.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Selected state<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Block Toolbar: Alignments, including wide and full-width if the theme supports it.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Block Toolbar: Edit Image, to open the Media Library<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Block Toolbar: Link button<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>When an image is uploaded, a caption input field appears with a \u201cWrite caption\u2026\u201d placeholder text below the image:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/cldup.com\/6YYXstl_xX-3000x3000.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Image Block<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Block settings<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Has description: \u201cThey're worth 1,000 words! Insert a single image.\u201d<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Has options for changing or adding alt text and adding additional custom CSS classes.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Future improvements to the Image block could include getting rid of the media modal in place of letting users select images directly from the placeholder itself. In general, try to avoid modals.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Latest Post<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/cldup.com\/8lyAByDpy_-3000x3000.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Latest Post Block<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Placeholder<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Has no placeholder as it works immediately upon insertion. The default inserted state shows the last 5 posts.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Selected state<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Block Toolbar: Alignments<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Block Toolbar: Options for picking list view or grid view<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Note that the Block Toolbar does not include the Block Chip in this case, since there are no similar blocks to switch to.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Block settings<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Has description: \u201cDisplay a list of your most recent posts.\u201d<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Has options for post order, narrowing the list by category, changing the default number of posts to show, and showing the post date.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Latest Posts is fully functional as soon as it\u2019s inserted because it comes with good defaults.<\/em><\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Block Design\n\nThe following are best practices for designing a new block, with recommendations and detailed descriptions of existing blocks to illustrate our approach to creating blocks.\n\n## Best Practices\n\n### The primary interface for a block is the content area of the block\n\nSince the block itself represents what will actually appear on the site, interaction here hews closest to the principle of direct manipulation and will be most intuitive to the user. This should be thought of as the primary interface for adding and manipulating content and adjusting how it is displayed. There are two ways of interacting here:\n\n1. The placeholder content in the content area of the block can be thought of as a guide or interface for users to follow a set of instructions or \u201cfill in the blanks\u201d. For example, a block that embeds content from a 3rd-party service might contain controls for signing in to that service in the placeholder.\n2. After the user has added content, selecting the block can reveal additional controls to adjust or edit that content. For example, a signup block might reveal a control for hiding\/showing subscriber count. However, this should be done in minimal ways, so as to avoid dramatically changing the size and display of a block when a user selects it (this could be disorienting or annoying).\n\n### The Block Toolbar is a secondary place for required options & controls\n\nBasic block settings won\u2019t always make sense in the context of the placeholder\/content UI. As a secondary option, options that are critical to the functionality of a block can live in the block toolbar. The Block Toolbar is still highly contextual and visible on all screen sizes. One notable constraint with the Block Toolbar is that it is icon-based UI, so any controls that live in the Block Toolbar need to be ones that can effectively be communicated via an icon or icon group.\n\n### Group Block Toolbar controls with related items\n\nThe Block Toolbar groups controls in segments, hierarchically. The first segment contains block type controls, such as the block switcher, the drag handle, and the mover control. The second group contains common and specific block tools that affect the entire block, followed by inline formatting, and the \"More\" menu. Optionally \"Meta\" or \"Other\" groups can separate some tools in their own segment.\n\n![A screenshot showing examples of block toolbar segment groupings.](https:\/\/make.wordpress.org\/design\/files\/2021\/03\/docs_block-toolbar-structure.png)\n\n### The Settings Sidebar should only be used for advanced, tertiary controls\n\nThe Settings Sidebar is not visible by default on a small \/ mobile screen, and may also be collapsed in a desktop view. Therefore, it should not be relied on for anything that is necessary for the basic operation of the block. Pick good defaults, make important actions available in the block toolbar, and think of the Settings Sidebar as something that most users should not need to open.\n\nIn addition, use sections and headers in the Settings Sidebar if there are more than a handful of options, in order to allow users to easily scan and understand the options available.\n\nEach Settings Sidebar comes with an \"Advanced\" section by default. This area houses an \"Additional CSS Class\" field, and should be used to house other power user controls.\n\n## Setup state vs. live preview state\n\nSetup states, sometimes referred to as \"placeholders\", can be used to walk users through an initial process before showing the live preview state of the block. The setup process gathers information from the user that is needed to render the block. A block\u2019s setup state is indicated with a grey background to provide clear differentiation for the user. Not all blocks have setup states \u2014 for example, the Paragraph block.\n\n![An example of an image block\u2019s setup state on a grey background](https:\/\/make.wordpress.org\/design\/files\/2021\/03\/docs__gallery-setup-state.png)\n\nA setup state is **not** necessary if:\n\n-   You can provide good default content in the block that will meet most people\u2019s needs.\n-   That default content is easy to edit and customize.\n\nUse a setup state if:\n\n-   There isn\u2019t a clear default state that would work for most users.\n-   You need to gather input from the user that doesn\u2019t have a 1-1 relationship with the live preview of the block (for example, if you need the user to input an API key to render content).\n-   You need more information from the user in order to render useful default content.\n\nFor blocks that do have setup states, once the user has gone through the setup process, the placeholder is replaced with the live preview state of that block.\n\n![An example of the image gallery\u2019s live preview state](https:\/\/make.wordpress.org\/design\/files\/2018\/12\/gallery-live-preview.png)\n\nWhen the block is selected, additional controls may be revealed to customize the block\u2019s contents. For example, when the image gallery is selected, it reveals controls to remove or add images.\n\n![An example of additional controls being revealed on selection of a block.](https:\/\/make.wordpress.org\/design\/files\/2018\/12\/gallery-additional-controls.png)\n\nIn most cases, a block\u2019s setup state is only shown once and then further customization is done via the live preview state. However, in some cases it might be desirable to allow the user to return to the setup state \u2014 for example, if all the block content has been deleted or via a link from the block\u2019s toolbar or sidebar.\n\n## Do's and Don'ts\n\n### Block Toolbar\n\nGroup toolbar controls in logical segments. Don't add a segment for each.\n\n![A screenshot comparing a block toolbar with good vs. bad toolbar segment groupings.](https:\/\/make.wordpress.org\/design\/files\/2021\/03\/docs__block-toolbar-do-dont.png)\n\n### Block identification\n\nA block should have a straightforward, short name so users can easily find it in the block library. A block named \"YouTube\" is easy to find and understand. The same block, named \"Embedded Video (YouTube)\", would be less clear and harder to find in the block library.\n\nWhen referring to a block in documentation or UI, use title case for the block title and lowercase for the \"block\" descriptor. For example:\n\n-   Paragraph block\n-   Latest Posts block\n-   Media & Text block\n\nBlocks should have an identifying icon, ideally using a single color. Try to avoid using the same icon used by an existing block. The core block icons are based on [Material Design Icons](https:\/\/fonts.google.com\/icons). Look to that icon set, or to [Dashicons](https:\/\/developer.wordpress.org\/resource\/dashicons\/) for style inspiration.\n\n![A screenshot of the block library with concise block names](https:\/\/developer.wordpress.org\/files\/2022\/01\/blocks-do.png)\n**Do:**\nUse concise block names.\n\n![A screenshot of the block library with long, multi-line block names](https:\/\/developer.wordpress.org\/files\/2022\/01\/blocks-dont.png)\n**Don't:**\nAvoid long, multi-line block names.\n\n### Block description\n\nEvery block should include a description that clearly explains the block's function. The description will display in the Settings Sidebar.\n\nYou can add a description by using the description attribute in the [registerBlockType function](\/docs\/reference-guides\/block-api\/block-registration.md).\n\nStick to a single imperative sentence with an action + subject format. Examples:\n\n-   Start with the basic building block of all narrative.\n-   Introduce new sections and organize content to help visitors (and search engines) understand the structure of your content.\n-   Create a bulleted or numbered list.\n\n![A screenshot of a short block description](https:\/\/developer.wordpress.org\/files\/2022\/01\/block-descriptions-do.png)\n**Do:**\nUse a short, simple block description.\n\n![A screenshot of a long block description that includes branding](https:\/\/developer.wordpress.org\/files\/2022\/01\/block-descriptions-dont.png)\n**Don't:**\nAvoid long descriptions and branding.\n\n### Placeholders\n\nIf your block requires a user to configure some options before you can display it, you should provide an instructive placeholder state.\n\n![A screenshot of the Gallery block's placeholder](https:\/\/developer.wordpress.org\/files\/2022\/01\/placeholder-do.png)\n**Do:**\nProvide an instructive placeholder state.\n\n![An example Gallery block placeholder but with intense, distracting colors and no instructions](https:\/\/developer.wordpress.org\/files\/2022\/01\/placeholder-dont.png)\n**Don't:**\nAvoid branding and relying on the title alone to convey instructions.\n\n### Selected and unselected states\n\nWhen unselected, your block should preview its content as closely to the front-end output as possible.\n\nWhen selected, your block may surface additional options like input fields or buttons to configure the block directly, especially when they are necessary for basic operation.\n\n![A Google Maps block with inline, always-accessible controls required for the block to function](https:\/\/developer.wordpress.org\/files\/2022\/01\/block-controls-do.png)\n**Do:**\nFor controls that are essential for the operation of the block, provide them directly inside the block edit view.\n\n![A Google Maps block with essential controls moved to the sidebar where they can be contextually hidden](https:\/\/developer.wordpress.org\/files\/2022\/01\/block-controls-dont.png)\n**Don't:**\nDo not put controls that are essential to the block in the sidebar, otherwise the block will appear non-functional to mobile users or desktop users who have dismissed the sidebar.\n\n### Advanced block settings\n\nThe \u201cBlock\u201d tab of the Settings Sidebar can contain additional block options and configuration. Keep in mind that a user can dismiss the sidebar and never use it. You should not put critical options in the Sidebar.\n\n![A screenshot of the Paragraph block's advanced settings in the sidebar](https:\/\/developer.wordpress.org\/files\/2022\/01\/advanced-settings-do.png)\n**Do:**\nBecause the Drop Cap feature is not necessary for the basic operation of the block, you can put it to the Block tab as optional configuration.\n\n### Consider mobile\n\nCheck how your block looks, feels, and works on as many devices and screen sizes as you can.\n\n### Support Gutenberg's dark background editor scheme\n\nCheck how your block looks with [dark backgrounds](\/docs\/how-to-guides\/themes\/theme-support.md#dark-backgrounds) in the editor.\n\n## Examples\n\nTo demonstrate some of these practices, here are a few annotated examples of default Gutenberg blocks:\n\n### Paragraph\n\nThe most basic unit of the editor. The Paragraph block is a simple input field.\n\n![Paragraph block](https:\/\/cldup.com\/HVJe5bGZ8H-3000x3000.png)\n\n#### Placeholder\n\n-   Simple placeholder text that reads \u201cType \/ to choose a block\u201d. The placeholder disappears when the block is selected.\n\n#### Selected state\n\n-   Block Toolbar: Has a switcher to perform transformations to headings, etc.\n-   Block Toolbar: Has basic text alignments\n-   Block Toolbar: Has inline formatting options, bold, italic, strikethrough, and link\n\n### Image\n\nBasic image block.\n\n![Image block placeholder](https:\/\/cldup.com\/w6FNywNsj1-3000x3000.png)\n\n#### Placeholder\n\n-   A generic gray placeholder block with options to upload an image, drag and drop an image directly on it, or pick an image from the media library.\n\n#### Selected state\n\n-   Block Toolbar: Alignments, including wide and full-width if the theme supports it.\n-   Block Toolbar: Edit Image, to open the Media Library\n-   Block Toolbar: Link button\n-   When an image is uploaded, a caption input field appears with a \u201cWrite caption\u2026\u201d placeholder text below the image:\n\n![Image Block](https:\/\/cldup.com\/6YYXstl_xX-3000x3000.png)\n\n#### Block settings\n\n-   Has description: \u201cThey're worth 1,000 words! Insert a single image.\u201d\n-   Has options for changing or adding alt text and adding additional custom CSS classes.\n\n_Future improvements to the Image block could include getting rid of the media modal in place of letting users select images directly from the placeholder itself. In general, try to avoid modals._\n\n### Latest Post\n\n![Latest Post Block](https:\/\/cldup.com\/8lyAByDpy_-3000x3000.png)\n\n#### Placeholder\n\nHas no placeholder as it works immediately upon insertion. The default inserted state shows the last 5 posts.\n\n#### Selected state\n\n-   Block Toolbar: Alignments\n-   Block Toolbar: Options for picking list view or grid view\n\n_Note that the Block Toolbar does not include the Block Chip in this case, since there are no similar blocks to switch to._\n\n#### Block settings\n\n-   Has description: \u201cDisplay a list of your most recent posts.\u201d\n-   Has options for post order, narrowing the list by category, changing the default number of posts to show, and showing the post date.\n\n_Latest Posts is fully functional as soon as it\u2019s inserted because it comes with good defaults._\n"
    },
    {
        "path": "\/markdown\/explanations\/architecture\/entities.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Entities and Undo\/Redo<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The WordPress editors, whether it's the Post or Site Editor, manipulate what we call entity records. These are objects that represent a post, a page, a user, a term, a template, etc. They are the data that is stored in the database, and that is manipulated by the editor. Each editor can fetch, edit, and save multiple entity records at the same time.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For instance, when opening a page in the Site Editor:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>You can edit properties of the page itself (title, content, etc.)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>You can edit properties of the template of the page (content of the template, design, etc.)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>You can edit properties of template parts (header, footer) used with the template.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The editor keeps track of all these modifications and orchestrates the saving of all these modified records. This happens within the <code>@wordpress\/core-data<\/code> package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Editing entities<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To be able to edit an entity, you need to first fetch it and load it into the <code>core-data<\/code> store. For example, the following code loads the post with ID 1 into the store. (The entity is the post, the post 1 is the entity record).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.data.select( 'core' ).getEntityRecord( 'postType', 'post', 1 );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Once the entity is loaded, you can edit it. For example, the following code sets the title of the post to \"Hello World\". For each fetched entity record, the <code>core-data<\/code> store keeps track of the following:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>The \"persisted\" record:<\/strong> The last state of the record as it was fetched from the backend.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>A list of \"edits\":<\/strong> Unsaved local modifications for one or several properties of the record.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The package also exposes a set of actions to manipulate the fetched entity records.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To edit an entity record, you can call <code>editEntityRecord<\/code>, which takes the entity type, the entity ID, and the new entity record as parameters. The following example sets the title of the post with ID 1 to \"Hello World\".<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.data.dispatch( 'core' ).editEntityRecord( 'postType', 'post', 1, { title: 'Hello World' } );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Once you have edited an entity record, you can save it. The following code saves the post with ID 1.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.data.dispatch( 'core' ).saveEditedEntityRecord( 'postType', 'post', 1 );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Undo\/Redo<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Since the WordPress editors allow multiple entity records to be edited at the same time, the <code>core-data<\/code> package keeps track of all the entity records that have been fetched and edited in a common undo\/redo stack. Each step in the undo\/redo stack contains a list of \"edits\" that should be undone or redone at the same time when calling the <code>undo<\/code> or <code>redo<\/code> action.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And to be able to perform both undo and redo operations properly, each modification in the list of edits contains the following information:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Entity kind and name:<\/strong> Each entity in core-data is identified by the pair <em>(kind, name)<\/em>. This corresponds to the identifier of the modified entity.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Entity Record ID:<\/strong> The ID of the modified record.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Property:<\/strong> The name of the modified property.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>From:<\/strong> The previous value of the property (needed to apply the undo operation).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>To:<\/strong> The new value of the property (needed to apply the redo operation).<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For example, let's say a user edits the title of a post, followed by a modification to the post slug, and then a modification of the title of a reusable block used with the post. The following information is stored in the undo\/redo stack:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>[ { kind: 'postType', name: 'post', id: 1, property: 'title', from: '', to: 'Hello World' } ]<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>[ { kind: 'postType', name: 'post', id: 1, property: 'slug', from: 'Previous slug', to: 'This is the slug of the hello world post' } ]<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>[ { kind: 'postType', name: 'wp_block', id: 2, property: 'title', from: 'Reusable Block', to: 'Awesome Reusable Block' } ]<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The store also keeps track of a \"pointer\" to the current \"undo\/redo\" step. By default, the pointer always points to the last item in the stack. This pointer is updated when the user performs an undo or redo operation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Cached changes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The undo\/redo core behavior also supports what we call \"cached modifications\". These are modifications that are not stored in the undo\/redo stack right away. For instance, when a user starts typing in a text field, the value of the field is modified in the store, but this modification is not stored in the undo\/redo stack until after the user moves to the next word or after a few milliseconds. This is done to avoid creating a new undo\/redo step for each character typed by the user.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Cached changes are kept outside the undo\/redo stack in what is called a \"cache\" of modifications, and these modifications are only stored in the undo\/redo stack when we explicitly call <code>__unstableCreateUndoLevel<\/code> or when the next modification is not a cached one.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>By default, all calls to <code>editEntityRecord<\/code> are considered \"non-cached\" unless the <code>isCached<\/code> option is passed as true. Example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.data.dispatch( 'core' ).editEntityRecord( 'postType', 'post', 1, { title: 'Hello World' }, {\u00a0isCached: true } );\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# Entities and Undo\/Redo\n\nThe WordPress editors, whether it's the Post or Site Editor, manipulate what we call entity records. These are objects that represent a post, a page, a user, a term, a template, etc. They are the data that is stored in the database, and that is manipulated by the editor. Each editor can fetch, edit, and save multiple entity records at the same time. \n\nFor instance, when opening a page in the Site Editor:\n\n - You can edit properties of the page itself (title, content, etc.)\n - You can edit properties of the template of the page (content of the template, design, etc.)\n - You can edit properties of template parts (header, footer) used with the template.\n\nThe editor keeps track of all these modifications and orchestrates the saving of all these modified records. This happens within the `@wordpress\/core-data` package.\n\n\n## Editing entities\n\nTo be able to edit an entity, you need to first fetch it and load it into the `core-data` store. For example, the following code loads the post with ID 1 into the store. (The entity is the post, the post 1 is the entity record).\n\n````js\nwp.data.select( 'core' ).getEntityRecord( 'postType', 'post', 1 );\n````\n\nOnce the entity is loaded, you can edit it. For example, the following code sets the title of the post to \"Hello World\". For each fetched entity record, the `core-data` store keeps track of the following:\n\n - **The \"persisted\" record:** The last state of the record as it was fetched from the backend.\n - **A list of \"edits\":** Unsaved local modifications for one or several properties of the record. \n \nThe package also exposes a set of actions to manipulate the fetched entity records.\n\nTo edit an entity record, you can call `editEntityRecord`, which takes the entity type, the entity ID, and the new entity record as parameters. The following example sets the title of the post with ID 1 to \"Hello World\".\n\n````js\nwp.data.dispatch( 'core' ).editEntityRecord( 'postType', 'post', 1, { title: 'Hello World' } );\n````\n\nOnce you have edited an entity record, you can save it. The following code saves the post with ID 1.\n\n````js\nwp.data.dispatch( 'core' ).saveEditedEntityRecord( 'postType', 'post', 1 );\n````\n\n## Undo\/Redo\n\nSince the WordPress editors allow multiple entity records to be edited at the same time, the `core-data` package keeps track of all the entity records that have been fetched and edited in a common undo\/redo stack. Each step in the undo\/redo stack contains a list of \"edits\" that should be undone or redone at the same time when calling the `undo` or `redo` action.\n\nAnd to be able to perform both undo and redo operations properly, each modification in the list of edits contains the following information:\n\n - **Entity kind and name:** Each entity in core-data is identified by the pair _(kind, name)_. This corresponds to the identifier of the modified entity. \n - **Entity Record ID:** The ID of the modified record.\n - **Property:** The name of the modified property.\n - **From:** The previous value of the property (needed to apply the undo operation).\n - **To:** The new value of the property (needed to apply the redo operation).\n \nFor example, let's say a user edits the title of a post, followed by a modification to the post slug, and then a modification of the title of a reusable block used with the post. The following information is stored in the undo\/redo stack:\n\n - `[ { kind: 'postType', name: 'post', id: 1, property: 'title', from: '', to: 'Hello World' } ]`\n - `[ { kind: 'postType', name: 'post', id: 1, property: 'slug', from: 'Previous slug', to: 'This is the slug of the hello world post' } ]`\n - `[ { kind: 'postType', name: 'wp_block', id: 2, property: 'title', from: 'Reusable Block', to: 'Awesome Reusable Block' } ]`\n\nThe store also keeps track of a \"pointer\" to the current \"undo\/redo\" step. By default, the pointer always points to the last item in the stack. This pointer is updated when the user performs an undo or redo operation.\n\n### Cached changes\n\nThe undo\/redo core behavior also supports what we call \"cached modifications\". These are modifications that are not stored in the undo\/redo stack right away. For instance, when a user starts typing in a text field, the value of the field is modified in the store, but this modification is not stored in the undo\/redo stack until after the user moves to the next word or after a few milliseconds. This is done to avoid creating a new undo\/redo step for each character typed by the user.\n\nCached changes are kept outside the undo\/redo stack in what is called a \"cache\" of modifications, and these modifications are only stored in the undo\/redo stack when we explicitly call `__unstableCreateUndoLevel` or when the next modification is not a cached one.\n\nBy default, all calls to `editEntityRecord` are considered \"non-cached\" unless the `isCached` option is passed as true. Example:\n\n```js\nwp.data.dispatch( 'core' ).editEntityRecord( 'postType', 'post', 1, { title: 'Hello World' }, {\u00a0isCached: true } );\n```\n"
    },
    {
        "path": "\/markdown\/explanations\/architecture\/performance.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Performance<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Performance is a key feature for editor applications and the Block editor is not an exception.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Metrics<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To ensure the block editor stays performant across releases and development, we monitor some key metrics using <a href=\"#the-performance-benchmark-job\">performance benchmark job<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some of the main important metrics are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Loading Time:<\/strong> The time it takes to load an editor page. This includes time the server takes to respond, times to first paint, first contentful paint, DOM content load complete, load complete and first block render (both in post and site).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Typing Time:<\/strong> The time it takes for the browser to respond while typing on the editor.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Block Selection Time:<\/strong> The time it takes for the browser to respond after a user selects block. (Inserting a block is also equivalent to selecting a block. Monitoring the selection is sufficient to cover both metrics).<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Key performance decisions and solutions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Data Module Async Mode<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The Data Module of the WordPress Packages and the Block Editor is based on Redux. It means the state is kept globally and whenever a change happens, the components (UI) relying on that state may update.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As the number of rendered components grows (for example on long posts), the performance suffers because of the global state acting as an event dispatcher to all components. This is a common pitfall in Redux applications and the issue is solved on Gutenberg using the Data Modules Async Mode.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The Async mode is the idea that you can decide whether to refresh\/rerender a part of the React component tree synchronously or asynchronously.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Rendering asynchronously in this context means that if a change is triggered in the global state, the subscribers (components) are not called synchronously, instead, we wait for the browser to be idle and perform the updates to React Tree.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Based on the idea that <strong>when editing a given block, it is very rare that an update to that block affects other parts of the content<\/strong>, the block editor canvas only renders the selected block is synchronous mode, all the remaining blocks are rendered asynchronously. This ensures that the editor stays responsive as the post grows.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The performance benchmark job<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A tool to compare performance across multiple branches\/tags\/commits is provided. You can run it locally like so: <code>.\/bin\/plugin\/cli.js perf [branches]<\/code>, example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>.\/bin\/plugin\/cli.js perf trunk v8.1.0 v8.0.0\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>To get the most accurate results, it's is important to use the exact same version of the tests and environment (theme...) when running the tests, the only thing that need to be different between the branches is the Gutenberg plugin version (or branch used to build the plugin).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To achieve that the command first prepares the following folder structure:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\u2502\n\u251c\u2500\u2500 tests\/packages\/e2e-tests\/specs\/performance\/*\n|   The actual performance tests to run\n\u2502\n\u251c\u2500\u2500 tests\/test\/emptytheme\n|   The theme used for the tests environment. (site editor)\n\u2502\n\u2502\u2500\u2500 envs\/branch1\/.wp-env.json\n\u2502   The wp-env config file for branch1 (similar to all other branches except the plugin folder).\n\u2502\u2500\u2500 envs\/branch1\/plugin\n\u2502   A built clone of the Gutenberg plugin for branch1 (git checkout branch1)\n\u2502\n\u2514\u2500\u2500 envs\/branchX\n    The structure of perf-envs\/branch1 is duplicated for all other branches.\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Once the directory above is in place, the performance command loop over the performance test suites (post editor and site editor) and does the following:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Start the environment for <code>branch1<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Run the performance test for the current suite<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Stop the environment for <code>branch1<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Repeat the first 3 steps for all other branches<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Compute medians for all the performance metrics of the current suite.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Once all the test suites are executed, a summary report is printed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Tracking performance using CodeVitals.<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The performance results for each commit are pushed to codevitals and can be seen on the <a href=\"https:\/\/www.codevitals.run\/project\/gutenberg\">Gutenberg dashboard there<\/a>. The graphs allow us to track the evolution of a given metric over time.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's thus very important to ensure that the metric being computed is stable. Meaning, if you run the same test twice with the same code and environment, you'll get results that are close.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Our performance job runs Github CI which means that we can't trust the consistency of the numbers that we get between two similar job runs. Github CI may allocate different CPU and memory resources for us over time for instance. To alleviate this problem, each time we run the performance job on the trunk branch, we compare the current commit's performance to a fixed reference commit hash, which allows us to track the relative difference between the current commit and the reference commit consistently regardless of environment changes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Update the reference commit<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Gutenberg supports only two WP versions, this impacts the performance job in two ways:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The base WP version used to run the performance job needs to be updated, when the minimum version supported by Gutenberg changes. In order to do that, we rely on the <code>Tested up to<\/code> flag of the plugin's <code>readme.txt<\/code> file. So each time that flag is changed, the version used for the performance job is changed as well.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Updating the WP version used for performance jobs means that there's a high chance that the reference commit used for performance test stability becomes incompatible with the WP version that is used. So every time, the <code>Tested up to<\/code> flag is updated in the <code>readme.txt<\/code> is changed, we also have to update the reference commit that is used in <code>.github\/workflows\/performance.yml<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The new reference commit hash that is chosen needs to meet the following requirements:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Be compatible with the new WP version used in the \"Tested up to\" flag.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Is already tracked on \"codevitals.run\" for all existing metrics.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>A simple way to choose commit is to pick a very recent commit on trunk with a passing performance job.<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Going further<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/riad.blog\/2020\/02\/14\/a-journey-towards-a-performant-web-editor\/\">Journey towards a performant editor<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Performance\n\nPerformance is a key feature for editor applications and the Block editor is not an exception.\n\n## Metrics\n\nTo ensure the block editor stays performant across releases and development, we monitor some key metrics using [performance benchmark job](#the-performance-benchmark-job).\n\nSome of the main important metrics are:\n\n- **Loading Time:** The time it takes to load an editor page. This includes time the server takes to respond, times to first paint, first contentful paint, DOM content load complete, load complete and first block render (both in post and site).\n- **Typing Time:** The time it takes for the browser to respond while typing on the editor.\n- **Block Selection Time:** The time it takes for the browser to respond after a user selects block. (Inserting a block is also equivalent to selecting a block. Monitoring the selection is sufficient to cover both metrics).\n\n## Key performance decisions and solutions\n\n**Data Module Async Mode**\n\nThe Data Module of the WordPress Packages and the Block Editor is based on Redux. It means the state is kept globally and whenever a change happens, the components (UI) relying on that state may update.\n\nAs the number of rendered components grows (for example on long posts), the performance suffers because of the global state acting as an event dispatcher to all components. This is a common pitfall in Redux applications and the issue is solved on Gutenberg using the Data Modules Async Mode.\n\nThe Async mode is the idea that you can decide whether to refresh\/rerender a part of the React component tree synchronously or asynchronously.\n\nRendering asynchronously in this context means that if a change is triggered in the global state, the subscribers (components) are not called synchronously, instead, we wait for the browser to be idle and perform the updates to React Tree.\n\nBased on the idea that **when editing a given block, it is very rare that an update to that block affects other parts of the content**, the block editor canvas only renders the selected block is synchronous mode, all the remaining blocks are rendered asynchronously. This ensures that the editor stays responsive as the post grows.\n\n## The performance benchmark job\n\nA tool to compare performance across multiple branches\/tags\/commits is provided. You can run it locally like so: `.\/bin\/plugin\/cli.js perf [branches]`, example:\n\n```\n.\/bin\/plugin\/cli.js perf trunk v8.1.0 v8.0.0\n```\n\nTo get the most accurate results, it's is important to use the exact same version of the tests and environment (theme...) when running the tests, the only thing that need to be different between the branches is the Gutenberg plugin version (or branch used to build the plugin).\n\nTo achieve that the command first prepares the following folder structure:\n\n    \u2502\n    \u251c\u2500\u2500 tests\/packages\/e2e-tests\/specs\/performance\/*\n    |   The actual performance tests to run\n    \u2502\n    \u251c\u2500\u2500 tests\/test\/emptytheme\n    |   The theme used for the tests environment. (site editor)\n    \u2502\n    \u2502\u2500\u2500 envs\/branch1\/.wp-env.json\n    \u2502   The wp-env config file for branch1 (similar to all other branches except the plugin folder).\n    \u2502\u2500\u2500 envs\/branch1\/plugin\n    \u2502   A built clone of the Gutenberg plugin for branch1 (git checkout branch1)\n    \u2502\n    \u2514\u2500\u2500 envs\/branchX\n        The structure of perf-envs\/branch1 is duplicated for all other branches.\n\nOnce the directory above is in place, the performance command loop over the performance test suites (post editor and site editor) and does the following:\n\n1. Start the environment for `branch1`\n2. Run the performance test for the current suite\n3. Stop the environment for `branch1`\n4. Repeat the first 3 steps for all other branches\n5. Compute medians for all the performance metrics of the current suite.\n\nOnce all the test suites are executed, a summary report is printed.\n\n## Tracking performance using CodeVitals.\n\nThe performance results for each commit are pushed to codevitals and can be seen on the [Gutenberg dashboard there](https:\/\/www.codevitals.run\/project\/gutenberg). The graphs allow us to track the evolution of a given metric over time.\n\nIt's thus very important to ensure that the metric being computed is stable. Meaning, if you run the same test twice with the same code and environment, you'll get results that are close.\n\nOur performance job runs Github CI which means that we can't trust the consistency of the numbers that we get between two similar job runs. Github CI may allocate different CPU and memory resources for us over time for instance. To alleviate this problem, each time we run the performance job on the trunk branch, we compare the current commit's performance to a fixed reference commit hash, which allows us to track the relative difference between the current commit and the reference commit consistently regardless of environment changes.\n\n### Update the reference commit\n\nGutenberg supports only two WP versions, this impacts the performance job in two ways:\n\n - The base WP version used to run the performance job needs to be updated, when the minimum version supported by Gutenberg changes. In order to do that, we rely on the `Tested up to` flag of the plugin's `readme.txt` file. So each time that flag is changed, the version used for the performance job is changed as well.\n\n - Updating the WP version used for performance jobs means that there's a high chance that the reference commit used for performance test stability becomes incompatible with the WP version that is used. So every time, the `Tested up to` flag is updated in the `readme.txt` is changed, we also have to update the reference commit that is used in `.github\/workflows\/performance.yml`. \n\nThe new reference commit hash that is chosen needs to meet the following requirements:\n\n - Be compatible with the new WP version used in the \"Tested up to\" flag.\n - Is already tracked on \"codevitals.run\" for all existing metrics.\n\n**A simple way to choose commit is to pick a very recent commit on trunk with a passing performance job.**\n\n## Going further\n\n-   [Journey towards a performant editor](https:\/\/riad.blog\/2020\/02\/14\/a-journey-towards-a-performant-web-editor\/)\n"
    },
    {
        "path": "\/markdown\/explanations\/architecture\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Architecture<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s look at the big picture and the architectural and UX principles of the block editor and the Gutenberg repository.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Editor<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/explanations\/architecture\/key-concepts.md\">Key concepts<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/explanations\/architecture\/data-flow.md\">Data format and data flow<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/explanations\/architecture\/entities.md\">Entities and undo\/redo<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/explanations\/architecture\/full-site-editing-templates.md\">Site editing templates<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/explanations\/architecture\/styles.md\">Styles in the editor<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/explanations\/architecture\/performance.md\">Performance<\/a>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Gutenberg repository<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/explanations\/architecture\/modularity.md\">Modularity and WordPress Packages<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/contributors\/folder-structure.md\">Understand the repository folder structure<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Outdated!<\/strong> <a href=\"\/docs\/explanations\/architecture\/automated-testing.md\">Why is Puppeteer the tool of choice for end-to-end tests?<\/a>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Architecture\n\nLet\u2019s look at the big picture and the architectural and UX principles of the block editor and the Gutenberg repository.\n\n## Editor\n\n-   [Key concepts](\/docs\/explanations\/architecture\/key-concepts.md).\n-   [Data format and data flow](\/docs\/explanations\/architecture\/data-flow.md).\n-   [Entities and undo\/redo](\/docs\/explanations\/architecture\/entities.md).\n-   [Site editing templates](\/docs\/explanations\/architecture\/full-site-editing-templates.md).\n-   [Styles in the editor](\/docs\/explanations\/architecture\/styles.md).\n-   [Performance](\/docs\/explanations\/architecture\/performance.md).\n\n## Gutenberg repository\n\n-   [Modularity and WordPress Packages](\/docs\/explanations\/architecture\/modularity.md).\n-   [Understand the repository folder structure](\/docs\/contributors\/folder-structure.md).\n-   **Outdated!** [Why is Puppeteer the tool of choice for end-to-end tests?](\/docs\/explanations\/architecture\/automated-testing.md).\n"
    },
    {
        "path": "\/markdown\/explanations\/architecture\/styles.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Styles in the Editor<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This document introduces the main concepts related to styles that affect the user content in the block editor. It points to the relevant reference guides and tutorials for readers to dig deeper into each one of the ideas presented. It's aimed to block authors and people working in the block editor project.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">HTML and CSS<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>By creating a post in the block editor the user is creating a number of artifacts: a HTML document plus a number of CSS stylesheets, either embedded in the document or external.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The final HTML document is the result of a few things:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>the <a href=\"https:\/\/developer.wordpress.org\/themes\/basics\/template-files\/\">WordPress templates<\/a> provided by the theme, either via PHP (classic theme) or via HTML templates (block theme) (<a href=\"https:\/\/developer.wordpress.org\/themes\/block-themes\/#differences-and-similarities-between-classic-themes-and-block-themes\">learn more<\/a> about the differences)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/core-blocks\/\">blocks<\/a> and patterns in use that come with a predefined structure (HTML markup)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>the user modifications to the content: adding content, transforming existing content (convert a given paragraph into a heading), or modifying it (attaching a class or inline styles to a block)<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The stylesheets loaded in the front end include:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Blocks<\/strong>. The stylesheets that come with the block. In the front end, you can find a single stylesheet with all block styles defined by WordPress (<code>wp-block-library-*<\/code> ) or separate stylesheets per block in use (as in <code>wp-block-group-*<\/code>, <code>wp-block-columns-*<\/code>, etc). See <a href=\"https:\/\/make.wordpress.org\/core\/2021\/07\/01\/block-styles-loading-enhancements-in-wordpress-5-8\/\">this note<\/a> for the full details.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Global styles<\/strong>. These styles are generated on the fly by using data coming from a theme.json file: see <a href=\"https:\/\/make.wordpress.org\/core\/2021\/06\/25\/introducing-theme-json-in-wordpress-5-8\/\">note<\/a>, <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/\">reference<\/a>, and <a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/themes\/global-settings-and-styles\/\">how to guide<\/a>. Specifically, it merges the contents of the theme.json from WordPress, the theme.json from the theme (if it has one), and the user data provided via the global styles sidebar in the site editor. The result of processing this data is an embedded stylesheet whose id is <code>global-styles-inline-css<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Theme<\/strong>. Historically, themes have enqueued their own stylesheets, where the id is based on the theme name, as in <code>twentytwentytwo-style-css<\/code>. In addition to having their own stylesheets they can now declare a theme.json file containing styles that will be part of the stylesheet generated by global styles.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>User<\/strong>. Some of the user actions in the editor will generate style content. This is the case for features such as duotone, layout, or link color.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Other<\/strong>. WordPress and plugins can also enqueue stylesheets.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block styles<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Since the introduction of the block editor in WordPress 5.0, there were tools for the users to \"add styles\" to specific blocks. By using these tools, the user would attach new classes or inline styles to the blocks, modifying their visual aspect.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>By default, blocks come with a given HTML markup. Think of the paragraph block, for example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In its simplest form, any style rule that targets the <code>p<\/code> selector will apply styles to this block, whether it comes from a block, a theme, etc.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The user may change the state of this block by applying different styles: a text alignment, a color, a font size, a line height, etc. These states are reflected in the HTML markup of the block in the form of HTML attributes, mainly through the <code>class<\/code> or <code>style<\/code> attributes, though it can be any other the block author sees fit.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After some user modifications to the block, the initial markup may become something like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><p class=\"has-color has-green-color has-font-size has-small-font-size my-custom-class\" <br=\"\">\tstyle=\"line-height: 1em\"><\/p>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This is what we refer to as \"user-provided block styles\", also know as \"local styles\" or \"serialized styles\". Essentially, each tool (font size, color, etc) ends up adding some classes and\/or inline styles to the block markup. The CSS styling for these classes is part of the block, global, or theme stylesheets.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The ability to modify a block state coupled with the fact that a block can live within any other block (think of a paragraph within a group), creates a vast amount of potential states and style possibilities.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">From UI controls to HTML markup<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you follow the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/block-tutorial\/\">block tutorial<\/a> you can learn up about the different parts of the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/\">block API<\/a> presented here in more detail and also build your own block. This is an introduction to the general concepts of how a block can let users edit its state.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To build an experience like the one described above a block author needs a few pieces:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>A UI control<\/strong>. It presents the user some choices, for example, to be able to change the font size of the block. The control takes care of reading the data from the block (does this block already have a font size assigned?) and other data it needs (what are the font sizes a user can use in this block?). See available <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/components\/\">component library<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>A block attribute<\/strong>. The block needs to hold data to know which modifications were applied to it: whether it has been given a font size already for example. See how blocks can define <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-attributes\/\">attributes<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Access to style data<\/strong>. A control may need external information about the styles available for a given block: the list of colors, or the list of font sizes, for example. These are called \"style presets\", as they are a preselection of styles usually defined by the theme, although WordPress provides some defaults. Check the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/theme-json-living\/#settings\">list of data<\/a> a theme can provide to the editor and how a block author can get access to it via <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-block-editor\/#usesetting\">useSetting<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Serialize the user style into HTML markup<\/strong>. Upon a user action, the block HTML markup needs to be updated accordingly (apply the proper class or inline style). This process is called serialization and it is the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/\">edit, save<\/a>, and <a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/block-tutorial\/creating-dynamic-blocks\/\">render_callback<\/a> functions' responsibility: these functions take block data and convert it into HTML.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>In essence, these are the essential mechanics a block author needs to care about for their block to be able to be styled by the user. While this can be done completely manually, there's an API that automates this process for common style needs: block supports.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block Supports API<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-supports\/\">Block Supports<\/a> is an API that allows a block to declare what features it supports. By adding some info to their <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/\">block.json file<\/a>, the block tells the system what kind of actions a user can do to it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"name\": \"core\/paragraph\",\n\t\"...\": \"...\",\n\t\"supports\": {\n\t\t\"typography\": {\n\t\t\t\"fontSize\": true\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The paragraph declares support for font size in its <code>block.json<\/code>. This means the block will show a UI control for users to tweak its font size, unless it's disabled by the theme (learn more about how themes can disable UI controls in <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/\">the <code>theme.json<\/code> reference<\/a>). The system will also take care of setting up the UI control data (the font size of the block if it has one already assigned, the list of available font sizes to show), and will serialize the block data into HTML markup upon user changes (attach classes and inline styles appropriately).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>By using the block supports mechanism via <code>block.json<\/code>, the block author is able to create the same experience as before just by writing a couple of lines. Check the tutorials for adding block supports to <a href=\"\/docs\/how-to-guides\/block-tutorial\/block-supports-in-static-blocks.md\">static<\/a> and <a href=\"\/docs\/how-to-guides\/block-tutorial\/block-supports-in-dynamic-blocks.md\">dynamic<\/a> blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Besides the benefit of having to do less work to achieve the same results, there's a few other advantages:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>the style information of the block becomes available for the native mobile apps and in the server<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>the block will use the UI controls other blocks use for the same styles, creating a more coherent user experience<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>the UI controls in use by the block will be automatically updated as they are improved, without the block author having to do anything<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Current limitations of the Block Supports API<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>While the Block Supports API provides value, it also comes with some limitations a block author needs to be aware of. To better visualize what they are, let's run with the following example of a table block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table>\t<thead>\t\t<tr>\t\t\t<th>Header<\/th>\t\t<\/tr>\t<\/thead>\t<tbody>\t\t<tr>\t\t\t<th>First<\/th>\t\t<\/tr>\t\t<tr>\t\t\t<th>Second<\/th>\t\t<\/tr>\t<\/tbody>\t<tfoot>\t\t<tr>\t\t\t<th>Footer<\/th>\t\t<\/tr>\t<\/tfoot><\/table>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Only one style type per block.<\/strong><\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>One of the limitations is that, from all the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-supports\/\">styles available<\/a>, there can be only one instance of any them in use by the block. Following the example, the table block can only have a single font size. If the block author wanted to have three different font sizes (head, body, and footer) it can't do it using the current block supports API. See <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\/33255\">this issue<\/a> for more detailed info and ways forward.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\" class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Styles are serialized to the outermost HTML node of the block, the wrapper.<\/strong><\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The block supports API only serializes the font size value to the wrapper, resulting in the following HTML <code>&lt;table class=\"has-small-font-size\"><\/code> . The current block supports API doesn't serialize this value to a different node, for example, the <code>&lt;tbody><\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is an active area of work you can follow <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\/38167\">in the tracking issue<\/a>. The linked proposal is exploring a different way to serialize the user changes: instead of each block support serializing its own data (for example, classes such as <code>has-small-font-size<\/code>, <code>has-green-color<\/code>) the idea is the block would get a single class instead (for example, <code>wp-style-UUID<\/code>) and the CSS styling for that class will be generated in the server by WordPress.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>While work continues in that proposal, there's an escape hatch, an experimental option block authors can use. Any block support can skip the serialization to HTML markup by using <code>__experimentalSkipSerialization<\/code>. For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"name\": \"core\/paragraph\",\n\t\"...\": \"...\",\n\t\"supports\": {\n\t\t\"typography\": {\n\t\t\t\"fontSize\": true,\n\t\t\t\"__experimentalSkipSerialization\": true\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This means that the typography block support will do all of the things (create a UI control, bind the block attribute to the control, etc) except serializing the user values into the HTML markup. The classes and inline styles will not be automatically applied to the wrapper and it is the block author's responsibility to implement this in the <code>edit<\/code>, <code>save<\/code>, and <code>render_callback<\/code> functions. See <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\/28913\">this issue<\/a> for examples of how it was done for some blocks provided by WordPress.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note that, if <code>__experimentalSkipSerialization<\/code> is enabled for a group (typography, color, spacing) it affects <em>all<\/em> block supports within this group. In the example above <em>all<\/em> the properties within the <code>typography<\/code> group will be affected (e.g. <code>fontSize<\/code>, <code>lineHeight<\/code>, <code>fontFamily<\/code> .etc).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To enable for a <em>single<\/em> property only, you may use an array to declare which properties are to be skipped. In the example below, only <code>fontSize<\/code> will skip serialization, leaving other items within the <code>typography<\/code> group (e.g. <code>lineHeight<\/code>, <code>fontFamily<\/code> .etc) unaffected.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"name\": \"core\/paragraph\",\n\t\"...\": \"...\",\n\t\"supports\": {\n\t\t\"typography\": {\n\t\t\t\"fontSize\": true,\n\t\t\t\"lineHeight\": true,\n\t\t\t\"__experimentalSkipSerialization\": &#91; \"fontSize\" ]\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Support for this feature was <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/pull\/36293\">added in this PR<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Global styles<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Global Styles refers to a mechanism that generates site-wide styles. Unlike the block styles described in the previous section, these are not serialized into the post content and are not attached to the block HTML. Instead, the output of this system is a new stylesheet with id <code>global-styles-inline-css<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This mechanism was <a href=\"https:\/\/make.wordpress.org\/core\/2021\/06\/25\/introducing-theme-json-in-wordpress-5-8\/\">introduced in WordPress 5.8<\/a>. At the time, it only took data from WordPress and the active theme. WordPress 5.9 expanded the system to also take style data from users.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is the general data flow:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/explanations\/architecture\/assets\/global-styles-input-output.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Data flow of Global Styles<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>The process of generating the stylesheet has, in essence, three steps:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Gather data: the <code>theme.json<\/code> file <a href=\"https:\/\/github.com\/WordPress\/wordpress-develop\/blob\/trunk\/src\/wp-includes\/theme.json\">bundled with WordPress<\/a>, the <code>theme.json<\/code> file of the active theme if it exists, and the user's styles provided via the global styles UI in the site editor.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Consolidate data: the structured information from different origins -WordPress defaults, theme, and user- is normalized and merged into a single structure.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Convert data into a stylesheet: convert the internal representation into CSS style rules and enqueue them as a stylesheet.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Gather data<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The data can come from three different origins: WordPress defaults, the active theme, or the user. All three of them use the same <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/\"><code>theme.json<\/code> format<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Data from WordPress and the active theme is retrieved from the corresponding <code>theme.json<\/code> file. Data from the user is pulled from the database, where it's stored after the user saves the changes they did via the global styles sidebar in the site editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Consolidate data<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The goal of this phase is to build a consolidated structure.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are two important processes going on in this phase. First, the system needs to normalize all the incoming data, as different origins may be using different versions of the <code>theme.json<\/code> format. For example, a theme may be using <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/theme-json-v1\/\">v1<\/a> while the WordPress base is using <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/theme-json-living\/\">the latest version<\/a>. Second, the system needs to decide how to merge the input into a single structure. This will be the focus of the following sections.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Styles<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Different parts of the incoming <code>theme.json<\/code> structure are treated differently. The data present in the <code>styles<\/code> section is blended together following this logic: user data overrides theme data, and theme data overrides WordPress data.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, if we had the following three <code>theme.json<\/code> structures coming from WordPress, the theme, and the user respectively:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"styles\": {\n\t\t\"color\": {\n\t\t\t\"background\": \"<wordpress value=\"\">\"\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"fontSize\": \"<wordpress value=\"\">\"\n\t\t}\n\t}\n}\n<\/wordpress><\/wordpress><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"styles\": {\n\t\t\"typography\": {\n\t\t\t\"fontSize\": \"<theme value=\"\">\",\n\t\t\t\"lineHeight\": \"<theme value=\"\">\"\n\t\t}\n\t}\n}\n<\/theme><\/theme><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"styles\": {\n\t\t\"typography\": {\n\t\t\t\"lineHeight\": \"<user value=\"\">\"\n\t\t}\n\t}\n}\n<\/user><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The result after the consolidation would be:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"styles\": {\n\t\t\"color\": {\n\t\t\t\"background\": \"<wordpress value=\"\">\"\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"fontSize\": \"<theme value=\"\">\",\n\t\t\t\"lineHeight\": \"<user value=\"\">\"\n\t\t}\n\t}\n}\n<\/user><\/theme><\/wordpress><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Settings<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>settings<\/code> section works differently than styles. Most of the settings are only used to configure the editor and have no effect on the global styles. Only a few of them are part of the resulting stylesheet: the presets.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Presets are the predefined styles that are shown to the user in different parts of the UI: the color palette or the font sizes, for example. They comprise the following settings: <code>color.duotone<\/code>, <code>color.gradients<\/code>, <code>color.palette<\/code>, <code>typography.fontFamilies<\/code>, <code>typography.fontSizes<\/code>. Unlike <code>styles<\/code>, presets from an origin don't override values from other origins. Instead, all of them are stored in the consolidated structure.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, if we have the following <code>theme.json<\/code> structures coming from WordPress, the theme, and the user respectively:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"palette\": &#91; \"<wordpress values=\"\">\" ],\n\t\t\t\"gradients\": &#91; \"<wordpress values=\"\">\" ]\n\t\t}\n\t}\n}\n<\/wordpress><\/wordpress><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"palette\": &#91; \"<theme values=\"\">\" ]\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"fontFamilies\": &#91; \"<theme values=\"\">\" ]\n\t\t}\n\t}\n}\n<\/theme><\/theme><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"palette\": &#91; \"<user values=\"\">\" ]\n\t\t}\n\t}\n}\n<\/user><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The result after the consolidation would be:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"palette\": {\n\t\t\t\t\"default\": &#91; \"<wordpress values=\"\">\" ],\n\t\t\t\t\"theme\": &#91; \"<theme values=\"\">\" ],\n\t\t\t\t\"user\": &#91; \"<user values=\"\">\" ]\n\t\t\t},\n\t\t\t\"gradients\": {\n\t\t\t\t\"default\": &#91; \"<wordpress values=\"\">\" ]\n\t\t\t}\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"fontFamilies\": {\n\t\t\t\t\"theme\": &#91; \"<theme values=\"\">\" ]\n\t\t\t}\n\t\t}\n\t}\n}\n<\/theme><\/wordpress><\/user><\/theme><\/wordpress><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">From data to styles<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The last phase of generating the stylesheet is converting the consolidated data into CSS style rules.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Styles to CSS rules<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>styles<\/code> section can be thought of as a structured representation of CSS rules, each chunk representing a CSS rule:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>A key\/value in theme.json maps to a CSS declaration (<code>property: value<\/code>).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The CSS selector for a given chunk is generated based on its semantics:<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The top-level section uses the <code>body<\/code> selector.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The top-level elements use an ID selector matching the HTML element they represent (for example, <code>h1<\/code> or <code>a<\/code>).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Blocks use the default class name they generate (<code>core\/group<\/code> becomes <code>.wp-block-group<\/code>) unless they explicitly set a different one using their <code>block.json<\/code> (<code>core\/paragraph<\/code> becomes <code>p<\/code>). See the \"Current limits\" section for more about this.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Elements within a block use the concatenation of the block and element selector.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For example, the following <code>theme.json<\/code> structure:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"styles\": {\n\t\t\"typography\": {\n\t\t\t\"fontSize\": \"<top-level value=\"\">\"\n\t\t},\n\t\t\"elements\": {\n\t\t\t\"h1\": {\n\t\t\t\t\"typography\": {\n\t\t\t\t\t\"fontSize\": \"<h1 value=\"\">\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/paragraph\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"text\": \"<paragraph value=\"\">\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"core\/group\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"text\": \"<group value=\"\">\"\n\t\t\t\t},\n\t\t\t\t\"elements\": {\n\t\t\t\t\t\"h1\": {\n\t\t\t\t\t\t\"color\": {\n\t\t\t\t\t\t\t\"text\": \"<h1 within=\"\" group=\"\" value=\"\">\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n<\/h1><\/group><\/paragraph><\/h1><\/top-level><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>is converted to the following CSS:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>body {\n\tfont-size: <top-level value=\"\">;\n}\nh1 {\n\tfont-size: <h1 value=\"\">;\n}\np {\n\tcolor: <paragraph value=\"\">;\n}\n.wp-block-group {\n\tcolor: <group value=\"\">;\n}\n.wp-block-group h1 {\n\tcolor: <h1 within=\"\" group=\"\" value=\"\">;\n}\n<\/h1><\/group><\/paragraph><\/h1><\/top-level><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Settings to CSS rules<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>From the <code>settings<\/code> section, all the values of any given presets will be converted to a CSS Custom Property that follows this naming structure: <code>--wp--preset--&lt;category>-&lt;slug><\/code>. The selectors follow the same rules described in the styles section above.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, the following theme.json<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"palette\": {\n\t\t\t\t\"default\": &#91;\n\t\t\t\t\t{\n\t\t\t\t\t\t\"slug\": \"vivid-red\",\n\t\t\t\t\t\t\"value\": \"#cf2e2e\",\n\t\t\t\t\t\t\"name\": \"Vivid Red\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"theme\": &#91;\n\t\t\t\t\t{\n\t\t\t\t\t\t\"slug\": \"foreground\",\n\t\t\t\t\t\t\"value\": \"#000\",\n\t\t\t\t\t\t\"name\": \"Foreground\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/site-title\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"palette\": {\n\t\t\t\t\t\t\"theme\": &#91;\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"slug\": \"foreground\",\n\t\t\t\t\t\t\t\t\"value\": \"#1a4548\",\n\t\t\t\t\t\t\t\t\"name\": \"Foreground\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Will be converted to the following CSS style rule:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>body {\n  --wp--preset--color--vivid-red: #cf2e2e;\n  --wp--preset--color--foreground: #000;\n}\n\n.wp-block-site-title {\n  --wp--preset--color--foreground: #1a4548;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In addition to the CSS Custom Properties, all presets but duotone generate CSS classes for each value. The example above will generate the following CSS classes as well:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/* vivid-red *\/\n.has-vivid-red-color { color: var(--wp--preset--color--vivid-red) !important; }\n.has-vivid-red-background-color { background-color: var(--wp--preset--color--vivid-red) !important; }\n.has-vivid-red-border-color { border-color: var(--wp--preset--color--vivid-red) !important; }\n\n\/* foreground *\/\n.has-foreground-color { color: var(--wp--preset--color--foreground) !important; }\n.has-foreground-background-color { background-color: var(--wp--preset--color--foreground) !important; }\n.has-foreground-border-color { border-color: var(--wp--preset--color--foreground) !important; }\n\n\/* foreground within site title*\/\n.wp-block-site-title .has-foreground-color { color: var(--wp--preset--color--foreground) !important; }\n.wp-block-site-title .has-foreground-background-color { background-color: var(--wp--preset--color--foreground) !important; }\n.wp-block-site-title .has-foreground-border-color { border-color: var(--wp--preset--color--foreground) !important; }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Current limitations of the Global Styles API<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">1. <strong>Setting a different CSS selector for blocks requires server-registration<\/strong><\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>By default, the selector assigned to a block is <code>.wp-block-&lt;block-name><\/code>. However, blocks can change this should they need. They can provide a CSS selector via the <code>__experimentalSelector<\/code> property in its <code>block.json<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If blocks do this, they need to be registered in the server using the <code>block.json<\/code>, otherwise, the global styles code doesn't have access to that information and will use the default CSS selector for the block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">2. <strong>Can't target different HTML nodes for different styles<\/strong><\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Every chunk of styles can only use a single selector.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is particularly relevant if the block is using <code>__experimentalSkipSerialization<\/code> to serialize the different style properties to different nodes other than the wrapper. See \"Current limitations of blocks supports\" for more.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">3. <strong>Only a single property per block<\/strong><\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Similarly to block supports, there can be only one instance of any style in use by the block. For example, the block can only have a single font size. See related \"Current limitations of block supports\".<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">4. <strong>Only blocks using block supports are shown in the Global Styles UI<\/strong><\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The global styles UI in the site editor has a screen for per-block styles. The list of blocks is generated dynamically using the block supports from the <code>block.json<\/code> of blocks. If a block wants to be listed there, it needs to use the block supports mechanism.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Layout styles<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In addition to styles at the individual block level and in global styles, there is the concept of layout styles that are output for both blocks-based and classic themes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The layout block support outputs common layout styles that are shared between blocks used for creating layouts. Layout styles are useful for providing common styling for any block that is a container for other blocks. Examples of blocks that depend on these layout styles include Group, Row, Columns, Buttons, and Social Icons. The feature is enabled in core blocks via the <code>layout<\/code> setting under <code>supports<\/code> in a block's <code>block.json<\/code> file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are two primary places where Layout styles are output:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Base layout styles<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Base layout styles are those styles that are common to all blocks that opt in to a particular layout type. Examples of common base layout styling include setting <code>display: flex<\/code> for blocks that use the Flex layout type (such as Buttons and Social Icons), and providing default max-width for constrained layouts.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Base layout styles are output from within <a href=\"https:\/\/github.com\/WordPress\/wordpress-develop\/blob\/trunk\/src\/wp-includes\/class-wp-theme-json.php\">the main PHP class<\/a> that handles global styles, and form part of the global styles stylesheet. In order to provide support for core blocks in classic themes, these styles are always output, irrespective of whether the theme provides its own <code>theme.json<\/code> file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Common layout definitions are stored in <a href=\"https:\/\/github.com\/WordPress\/wordpress-develop\/blob\/trunk\/src\/wp-includes\/block-supports\/layout.php\">the core layout block support file<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Individual layout styles<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When a block that opts in to layout support is rendered, two things are processed and added to the output via <a href=\"https:\/\/github.com\/WordPress\/wordpress-develop\/blob\/trunk\/src\/wp-includes\/block-supports\/layout.php\"><code>layout.php<\/code><\/a>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Semantic class names are added to the block markup to indicate which layout settings are in use. For example, <code>is-layout-flow<\/code> is for blocks (such as Group) that use the default\/flow layout, and <code>is-content-justification-right<\/code> is added when a user sets a block to use right justification.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Individual styles are generated for non-default layout values that are set on the individual block being rendered. These styles are attached to the block via a container class name using the form <code>wp-container-$id<\/code> where the <code>$id<\/code> is a <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_unique_id\/\">unique number<\/a>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Available layout types<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There are currently four layout types in use:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Default\/Flow: Items are stacked vertically. The parent container block is set to <code>display: flow<\/code> and the spacing between children is handled via vertical margins.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Constrained: Items are stacked vertically, using the same spacing logic as the Flow layout. Features constrained widths for child content, outputting widths for standard content size and wide size. Defaults to using global <code>contentSize<\/code> and <code>wideSize<\/code> values set in <code>settings.layout<\/code> in the <code>theme.json<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Flex: Items are displayed using a Flexbox layout. Defaults to a horizontal orientation. Spacing between children is handled via the <code>gap<\/code> CSS property.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Grid: Items are displayed using a Grid layout. Defaults to an <code>auto-fill<\/code> approach to column generation but can also be set to a fixed number of columns. Spacing between children is handled via the <code>gap<\/code> CSS property.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For controlling spacing between blocks, and enabling block spacing controls see: <a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/themes\/global-settings-and-styles\/#what-is-blockgap-and-how-can-i-use-it\">What is blockGap and how can I use it?<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Targeting layout or container blocks from themes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The layout block support is designed to enable control over layout features from within the block and site editors. Where possible, try to use the features of the blocks to determine particular layout requirements rather than relying upon additional stylesheets.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For themes that wish to target container blocks in order to add or adjust particular styles, the block's class name is often the best class name to use. Class names such as <code>wp-block-group<\/code> or <code>wp-block-columns<\/code> are usually reliable class names for targeting a particular block. In addition to block and layout classnames, there is also a classname composed of block and layout together: for example, for a Group block with a constrained layout it will be <code>wp-block-group-is-layout-constrained<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For targeting a block that uses a particular layout type, avoid targeting <code>wp-container-<\/code> as container classes may not always be present in the rendered markup.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Semantic class names<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Work is currently underway to expand stable semantic classnames in Layout block support output. The task is being discussed in <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\/38719\">this issue<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The current semantic class names that can be output by the Layout block support are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>is-layout-flow<\/code>: Blocks that use the Default\/Flow layout type.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>is-layout-constrained<\/code>: Blocks that use the Constrained layout type.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>is-layout-flex<\/code>: Blocks that use the Flex layout type.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>is-layout-grid<\/code>: Blocks that used the Grid layout type.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp-container-$id<\/code>: Where <code>$id<\/code> is a semi-random number. A container class that only exists when the block contains non-default Layout values. This class should not be used directly for any CSS targeting as it may or may not be present.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>is-horizontal<\/code>: When a block explicitly sets <code>orientation<\/code> to <code>horizontal<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>is-vertical<\/code>: When a block explicitly sets <code>orientation<\/code> to <code>vertical<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>is-content-justification-left<\/code>: When a block explicitly sets <code>justifyContent<\/code> to <code>left<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>is-content-justification-center<\/code>: When a block explicitly sets <code>justifyContent<\/code> to <code>center<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>is-content-justification-right<\/code>: When a block explicitly sets <code>justifyContent<\/code> to <code>right<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>is-content-justification-space-between<\/code>: When a block explicitly sets <code>justifyContent<\/code> to <code>space-between<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>is-nowrap<\/code>: When a block explicitly sets <code>flexWrap<\/code> to <code>nowrap<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Opting out of generated layout styles<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Layout styles output is switched on by default because the styles are required by core structural blocks. However, themes can opt out of generated block layout styles while retaining semantic class name output by using the <code>disable-layout-styles<\/code> block support. Such themes will be responsible for providing all their own layout styles. See <a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/themes\/theme-support\/#disabling-base-layout-styles\">the entry under Theme Support<\/a>.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Styles in the Editor\n\nThis document introduces the main concepts related to styles that affect the user content in the block editor. It points to the relevant reference guides and tutorials for readers to dig deeper into each one of the ideas presented. It's aimed to block authors and people working in the block editor project.\n\n## HTML and CSS\n\nBy creating a post in the block editor the user is creating a number of artifacts: a HTML document plus a number of CSS stylesheets, either embedded in the document or external.\n\nThe final HTML document is the result of a few things:\n\n-   the [WordPress templates](https:\/\/developer.wordpress.org\/themes\/basics\/template-files\/) provided by the theme, either via PHP (classic theme) or via HTML templates (block theme) ([learn more](https:\/\/developer.wordpress.org\/themes\/block-themes\/#differences-and-similarities-between-classic-themes-and-block-themes) about the differences)\n-   the [blocks](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/core-blocks\/) and patterns in use that come with a predefined structure (HTML markup)\n-   the user modifications to the content: adding content, transforming existing content (convert a given paragraph into a heading), or modifying it (attaching a class or inline styles to a block)\n\nThe stylesheets loaded in the front end include:\n\n-   **Blocks**. The stylesheets that come with the block. In the front end, you can find a single stylesheet with all block styles defined by WordPress (`wp-block-library-*` ) or separate stylesheets per block in use (as in `wp-block-group-*`, `wp-block-columns-*`, etc). See [this note](https:\/\/make.wordpress.org\/core\/2021\/07\/01\/block-styles-loading-enhancements-in-wordpress-5-8\/) for the full details.\n-   **Global styles**. These styles are generated on the fly by using data coming from a theme.json file: see [note](https:\/\/make.wordpress.org\/core\/2021\/06\/25\/introducing-theme-json-in-wordpress-5-8\/), [reference](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/), and [how to guide](https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/themes\/global-settings-and-styles\/). Specifically, it merges the contents of the theme.json from WordPress, the theme.json from the theme (if it has one), and the user data provided via the global styles sidebar in the site editor. The result of processing this data is an embedded stylesheet whose id is `global-styles-inline-css`.\n-   **Theme**. Historically, themes have enqueued their own stylesheets, where the id is based on the theme name, as in `twentytwentytwo-style-css`. In addition to having their own stylesheets they can now declare a theme.json file containing styles that will be part of the stylesheet generated by global styles.\n-   **User**. Some of the user actions in the editor will generate style content. This is the case for features such as duotone, layout, or link color.\n-   **Other**. WordPress and plugins can also enqueue stylesheets.\n\n## Block styles\n\nSince the introduction of the block editor in WordPress 5.0, there were tools for the users to \"add styles\" to specific blocks. By using these tools, the user would attach new classes or inline styles to the blocks, modifying their visual aspect.\n\nBy default, blocks come with a given HTML markup. Think of the paragraph block, for example:\n\n```html\n<p><\/p>\n```\n\nIn its simplest form, any style rule that targets the `p` selector will apply styles to this block, whether it comes from a block, a theme, etc.\n\nThe user may change the state of this block by applying different styles: a text alignment, a color, a font size, a line height, etc. These states are reflected in the HTML markup of the block in the form of HTML attributes, mainly through the `class` or `style` attributes, though it can be any other the block author sees fit.\n\nAfter some user modifications to the block, the initial markup may become something like this:\n\n```html\n<p class=\"has-color has-green-color has-font-size has-small-font-size my-custom-class\"\n\tstyle=\"line-height: 1em\"><\/p>\n```\n\nThis is what we refer to as \"user-provided block styles\", also know as \"local styles\" or \"serialized styles\". Essentially, each tool (font size, color, etc) ends up adding some classes and\/or inline styles to the block markup. The CSS styling for these classes is part of the block, global, or theme stylesheets.\n\nThe ability to modify a block state coupled with the fact that a block can live within any other block (think of a paragraph within a group), creates a vast amount of potential states and style possibilities.\n\n### From UI controls to HTML markup\n\nIf you follow the [block tutorial](https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/block-tutorial\/) you can learn up about the different parts of the [block API](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/) presented here in more detail and also build your own block. This is an introduction to the general concepts of how a block can let users edit its state.\n\nTo build an experience like the one described above a block author needs a few pieces:\n\n1. **A UI control**. It presents the user some choices, for example, to be able to change the font size of the block. The control takes care of reading the data from the block (does this block already have a font size assigned?) and other data it needs (what are the font sizes a user can use in this block?). See available [component library](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/components\/).\n2. **A block attribute**. The block needs to hold data to know which modifications were applied to it: whether it has been given a font size already for example. See how blocks can define [attributes](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-attributes\/).\n3. **Access to style data**. A control may need external information about the styles available for a given block: the list of colors, or the list of font sizes, for example. These are called \"style presets\", as they are a preselection of styles usually defined by the theme, although WordPress provides some defaults. Check the [list of data](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/theme-json-living\/#settings) a theme can provide to the editor and how a block author can get access to it via [useSetting](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-block-editor\/#usesetting).\n4. **Serialize the user style into HTML markup**. Upon a user action, the block HTML markup needs to be updated accordingly (apply the proper class or inline style). This process is called serialization and it is the [edit, save](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/), and [render_callback](https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/block-tutorial\/creating-dynamic-blocks\/) functions' responsibility: these functions take block data and convert it into HTML.\n\nIn essence, these are the essential mechanics a block author needs to care about for their block to be able to be styled by the user. While this can be done completely manually, there's an API that automates this process for common style needs: block supports.\n\n### Block Supports API\n\n[Block Supports](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-supports\/) is an API that allows a block to declare what features it supports. By adding some info to their [block.json file](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/), the block tells the system what kind of actions a user can do to it.\n\nFor example:\n\n```json\n{\n\t\"name\": \"core\/paragraph\",\n\t\"...\": \"...\",\n\t\"supports\": {\n\t\t\"typography\": {\n\t\t\t\"fontSize\": true\n\t\t}\n\t}\n}\n```\n\nThe paragraph declares support for font size in its `block.json`. This means the block will show a UI control for users to tweak its font size, unless it's disabled by the theme (learn more about how themes can disable UI controls in [the `theme.json` reference](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/)). The system will also take care of setting up the UI control data (the font size of the block if it has one already assigned, the list of available font sizes to show), and will serialize the block data into HTML markup upon user changes (attach classes and inline styles appropriately).\n\nBy using the block supports mechanism via `block.json`, the block author is able to create the same experience as before just by writing a couple of lines. Check the tutorials for adding block supports to [static](\/docs\/how-to-guides\/block-tutorial\/block-supports-in-static-blocks.md) and [dynamic](\/docs\/how-to-guides\/block-tutorial\/block-supports-in-dynamic-blocks.md) blocks.\n\nBesides the benefit of having to do less work to achieve the same results, there's a few other advantages:\n\n-   the style information of the block becomes available for the native mobile apps and in the server\n-   the block will use the UI controls other blocks use for the same styles, creating a more coherent user experience\n-   the UI controls in use by the block will be automatically updated as they are improved, without the block author having to do anything\n\n### Current limitations of the Block Supports API\n\nWhile the Block Supports API provides value, it also comes with some limitations a block author needs to be aware of. To better visualize what they are, let's run with the following example of a table block:\n\n```html\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Header<\/th>\n\t\t<\/tr>\n\t<\/thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>First<\/th>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<th>Second<\/th>\n\t\t<\/tr>\n\t<\/tbody>\n\t<tfoot>\n\t\t<tr>\n\t\t\t<th>Footer<\/th>\n\t\t<\/tr>\n\t<\/tfoot>\n<\/table>\n```\n\n1. **Only one style type per block.**\n\nOne of the limitations is that, from all the [styles available](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-supports\/), there can be only one instance of any them in use by the block. Following the example, the table block can only have a single font size. If the block author wanted to have three different font sizes (head, body, and footer) it can't do it using the current block supports API. See [this issue](https:\/\/github.com\/WordPress\/gutenberg\/issues\/33255) for more detailed info and ways forward.\n\n2. **Styles are serialized to the outermost HTML node of the block, the wrapper.**\n\nThe block supports API only serializes the font size value to the wrapper, resulting in the following HTML `<table class=\"has-small-font-size\">` . The current block supports API doesn't serialize this value to a different node, for example, the `<tbody>`.\n\nThis is an active area of work you can follow [in the tracking issue](https:\/\/github.com\/WordPress\/gutenberg\/issues\/38167). The linked proposal is exploring a different way to serialize the user changes: instead of each block support serializing its own data (for example, classes such as `has-small-font-size`, `has-green-color`) the idea is the block would get a single class instead (for example, `wp-style-UUID`) and the CSS styling for that class will be generated in the server by WordPress.\n\nWhile work continues in that proposal, there's an escape hatch, an experimental option block authors can use. Any block support can skip the serialization to HTML markup by using `__experimentalSkipSerialization`. For example:\n\n```json\n{\n\t\"name\": \"core\/paragraph\",\n\t\"...\": \"...\",\n\t\"supports\": {\n\t\t\"typography\": {\n\t\t\t\"fontSize\": true,\n\t\t\t\"__experimentalSkipSerialization\": true\n\t\t}\n\t}\n}\n```\n\nThis means that the typography block support will do all of the things (create a UI control, bind the block attribute to the control, etc) except serializing the user values into the HTML markup. The classes and inline styles will not be automatically applied to the wrapper and it is the block author's responsibility to implement this in the `edit`, `save`, and `render_callback` functions. See [this issue](https:\/\/github.com\/WordPress\/gutenberg\/issues\/28913) for examples of how it was done for some blocks provided by WordPress.\n\nNote that, if `__experimentalSkipSerialization` is enabled for a group (typography, color, spacing) it affects _all_ block supports within this group. In the example above _all_ the properties within the `typography` group will be affected (e.g. `fontSize`, `lineHeight`, `fontFamily` .etc).\n\nTo enable for a _single_ property only, you may use an array to declare which properties are to be skipped. In the example below, only `fontSize` will skip serialization, leaving other items within the `typography` group (e.g. `lineHeight`, `fontFamily` .etc) unaffected.\n\n```json\n{\n\t\"name\": \"core\/paragraph\",\n\t\"...\": \"...\",\n\t\"supports\": {\n\t\t\"typography\": {\n\t\t\t\"fontSize\": true,\n\t\t\t\"lineHeight\": true,\n\t\t\t\"__experimentalSkipSerialization\": [ \"fontSize\" ]\n\t\t}\n\t}\n}\n```\n\nSupport for this feature was [added in this PR](https:\/\/github.com\/WordPress\/gutenberg\/pull\/36293).\n\n## Global styles\n\nGlobal Styles refers to a mechanism that generates site-wide styles. Unlike the block styles described in the previous section, these are not serialized into the post content and are not attached to the block HTML. Instead, the output of this system is a new stylesheet with id `global-styles-inline-css`.\n\nThis mechanism was [introduced in WordPress 5.8](https:\/\/make.wordpress.org\/core\/2021\/06\/25\/introducing-theme-json-in-wordpress-5-8\/). At the time, it only took data from WordPress and the active theme. WordPress 5.9 expanded the system to also take style data from users.\n\nThis is the general data flow:\n\n![Data flow of Global Styles](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/explanations\/architecture\/assets\/global-styles-input-output.png)\n\nThe process of generating the stylesheet has, in essence, three steps:\n\n1. Gather data: the `theme.json` file [bundled with WordPress](https:\/\/github.com\/WordPress\/wordpress-develop\/blob\/trunk\/src\/wp-includes\/theme.json), the `theme.json` file of the active theme if it exists, and the user's styles provided via the global styles UI in the site editor.\n2. Consolidate data: the structured information from different origins -WordPress defaults, theme, and user- is normalized and merged into a single structure.\n3. Convert data into a stylesheet: convert the internal representation into CSS style rules and enqueue them as a stylesheet.\n\n### Gather data\n\nThe data can come from three different origins: WordPress defaults, the active theme, or the user. All three of them use the same [`theme.json` format](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/).\n\nData from WordPress and the active theme is retrieved from the corresponding `theme.json` file. Data from the user is pulled from the database, where it's stored after the user saves the changes they did via the global styles sidebar in the site editor.\n\n### Consolidate data\n\nThe goal of this phase is to build a consolidated structure.\n\nThere are two important processes going on in this phase. First, the system needs to normalize all the incoming data, as different origins may be using different versions of the `theme.json` format. For example, a theme may be using [v1](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/theme-json-v1\/) while the WordPress base is using [the latest version](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/theme-json-living\/). Second, the system needs to decide how to merge the input into a single structure. This will be the focus of the following sections.\n\n#### Styles\n\nDifferent parts of the incoming `theme.json` structure are treated differently. The data present in the `styles` section is blended together following this logic: user data overrides theme data, and theme data overrides WordPress data.\n\nFor example, if we had the following three `theme.json` structures coming from WordPress, the theme, and the user respectively:\n\n```json\n{\n\t\"styles\": {\n\t\t\"color\": {\n\t\t\t\"background\": \"<WordPress value>\"\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"fontSize\": \"<WordPress value>\"\n\t\t}\n\t}\n}\n```\n\n```json\n{\n\t\"styles\": {\n\t\t\"typography\": {\n\t\t\t\"fontSize\": \"<theme value>\",\n\t\t\t\"lineHeight\": \"<theme value>\"\n\t\t}\n\t}\n}\n```\n\n```json\n{\n\t\"styles\": {\n\t\t\"typography\": {\n\t\t\t\"lineHeight\": \"<user value>\"\n\t\t}\n\t}\n}\n```\n\nThe result after the consolidation would be:\n\n```json\n{\n\t\"styles\": {\n\t\t\"color\": {\n\t\t\t\"background\": \"<WordPress value>\"\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"fontSize\": \"<theme value>\",\n\t\t\t\"lineHeight\": \"<user value>\"\n\t\t}\n\t}\n}\n```\n\n#### Settings\n\nThe `settings` section works differently than styles. Most of the settings are only used to configure the editor and have no effect on the global styles. Only a few of them are part of the resulting stylesheet: the presets.\n\nPresets are the predefined styles that are shown to the user in different parts of the UI: the color palette or the font sizes, for example. They comprise the following settings: `color.duotone`, `color.gradients`, `color.palette`, `typography.fontFamilies`, `typography.fontSizes`. Unlike `styles`, presets from an origin don't override values from other origins. Instead, all of them are stored in the consolidated structure.\n\nFor example, if we have the following `theme.json` structures coming from WordPress, the theme, and the user respectively:\n\n```json\n{\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"palette\": [ \"<WordPress values>\" ],\n\t\t\t\"gradients\": [ \"<WordPress values>\" ]\n\t\t}\n\t}\n}\n```\n\n```json\n{\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"palette\": [ \"<theme values>\" ]\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"fontFamilies\": [ \"<theme values>\" ]\n\t\t}\n\t}\n}\n```\n\n```json\n{\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"palette\": [ \"<user values>\" ]\n\t\t}\n\t}\n}\n```\n\nThe result after the consolidation would be:\n\n```json\n{\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"palette\": {\n\t\t\t\t\"default\": [ \"<WordPress values>\" ],\n\t\t\t\t\"theme\": [ \"<theme values>\" ],\n\t\t\t\t\"user\": [ \"<user values>\" ]\n\t\t\t},\n\t\t\t\"gradients\": {\n\t\t\t\t\"default\": [ \"<WordPress values>\" ]\n\t\t\t}\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"fontFamilies\": {\n\t\t\t\t\"theme\": [ \"<theme values>\" ]\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### From data to styles\n\nThe last phase of generating the stylesheet is converting the consolidated data into CSS style rules.\n\n#### Styles to CSS rules\n\nThe `styles` section can be thought of as a structured representation of CSS rules, each chunk representing a CSS rule:\n\n-   A key\/value in theme.json maps to a CSS declaration (`property: value`).\n-   The CSS selector for a given chunk is generated based on its semantics:\n    -   The top-level section uses the `body` selector.\n    -   The top-level elements use an ID selector matching the HTML element they represent (for example, `h1` or `a`).\n    -   Blocks use the default class name they generate (`core\/group` becomes `.wp-block-group`) unless they explicitly set a different one using their `block.json` (`core\/paragraph` becomes `p`). See the \"Current limits\" section for more about this.\n    -   Elements within a block use the concatenation of the block and element selector.\n\nFor example, the following `theme.json` structure:\n\n```json\n{\n\t\"styles\": {\n\t\t\"typography\": {\n\t\t\t\"fontSize\": \"<top-level value>\"\n\t\t},\n\t\t\"elements\": {\n\t\t\t\"h1\": {\n\t\t\t\t\"typography\": {\n\t\t\t\t\t\"fontSize\": \"<h1 value>\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/paragraph\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"text\": \"<paragraph value>\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"core\/group\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"text\": \"<group value>\"\n\t\t\t\t},\n\t\t\t\t\"elements\": {\n\t\t\t\t\t\"h1\": {\n\t\t\t\t\t\t\"color\": {\n\t\t\t\t\t\t\t\"text\": \"<h1 within group value>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nis converted to the following CSS:\n\n```css\nbody {\n\tfont-size: <top-level value>;\n}\nh1 {\n\tfont-size: <h1 value>;\n}\np {\n\tcolor: <paragraph value>;\n}\n.wp-block-group {\n\tcolor: <group value>;\n}\n.wp-block-group h1 {\n\tcolor: <h1 within group value>;\n}\n```\n\n#### Settings to CSS rules\n\nFrom the `settings` section, all the values of any given presets will be converted to a CSS Custom Property that follows this naming structure: `--wp--preset--<category>-<slug>`. The selectors follow the same rules described in the styles section above.\n\nFor example, the following theme.json\n\n```json\n{\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"palette\": {\n\t\t\t\t\"default\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"slug\": \"vivid-red\",\n\t\t\t\t\t\t\"value\": \"#cf2e2e\",\n\t\t\t\t\t\t\"name\": \"Vivid Red\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"theme\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"slug\": \"foreground\",\n\t\t\t\t\t\t\"value\": \"#000\",\n\t\t\t\t\t\t\"name\": \"Foreground\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/site-title\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"palette\": {\n\t\t\t\t\t\t\"theme\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"slug\": \"foreground\",\n\t\t\t\t\t\t\t\t\"value\": \"#1a4548\",\n\t\t\t\t\t\t\t\t\"name\": \"Foreground\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nWill be converted to the following CSS style rule:\n\n```CSS\nbody {\n  --wp--preset--color--vivid-red: #cf2e2e;\n  --wp--preset--color--foreground: #000;\n}\n\n.wp-block-site-title {\n  --wp--preset--color--foreground: #1a4548;\n}\n```\n\nIn addition to the CSS Custom Properties, all presets but duotone generate CSS classes for each value. The example above will generate the following CSS classes as well:\n\n```CSS\n\/* vivid-red *\/\n.has-vivid-red-color { color: var(--wp--preset--color--vivid-red) !important; }\n.has-vivid-red-background-color { background-color: var(--wp--preset--color--vivid-red) !important; }\n.has-vivid-red-border-color { border-color: var(--wp--preset--color--vivid-red) !important; }\n\n\/* foreground *\/\n.has-foreground-color { color: var(--wp--preset--color--foreground) !important; }\n.has-foreground-background-color { background-color: var(--wp--preset--color--foreground) !important; }\n.has-foreground-border-color { border-color: var(--wp--preset--color--foreground) !important; }\n\n\/* foreground within site title*\/\n.wp-block-site-title .has-foreground-color { color: var(--wp--preset--color--foreground) !important; }\n.wp-block-site-title .has-foreground-background-color { background-color: var(--wp--preset--color--foreground) !important; }\n.wp-block-site-title .has-foreground-border-color { border-color: var(--wp--preset--color--foreground) !important; }\n```\n\n### Current limitations of the Global Styles API\n\n#### 1. **Setting a different CSS selector for blocks requires server-registration**\n\nBy default, the selector assigned to a block is `.wp-block-<block-name>`. However, blocks can change this should they need. They can provide a CSS selector via the `__experimentalSelector` property in its `block.json`.\n\nIf blocks do this, they need to be registered in the server using the `block.json`, otherwise, the global styles code doesn't have access to that information and will use the default CSS selector for the block.\n\n#### 2. **Can't target different HTML nodes for different styles**\n\nEvery chunk of styles can only use a single selector.\n\nThis is particularly relevant if the block is using `__experimentalSkipSerialization` to serialize the different style properties to different nodes other than the wrapper. See \"Current limitations of blocks supports\" for more.\n\n#### 3. **Only a single property per block**\n\nSimilarly to block supports, there can be only one instance of any style in use by the block. For example, the block can only have a single font size. See related \"Current limitations of block supports\".\n\n#### 4. **Only blocks using block supports are shown in the Global Styles UI**\n\nThe global styles UI in the site editor has a screen for per-block styles. The list of blocks is generated dynamically using the block supports from the `block.json` of blocks. If a block wants to be listed there, it needs to use the block supports mechanism.\n\n## Layout styles\n\nIn addition to styles at the individual block level and in global styles, there is the concept of layout styles that are output for both blocks-based and classic themes.\n\nThe layout block support outputs common layout styles that are shared between blocks used for creating layouts. Layout styles are useful for providing common styling for any block that is a container for other blocks. Examples of blocks that depend on these layout styles include Group, Row, Columns, Buttons, and Social Icons. The feature is enabled in core blocks via the `layout` setting under `supports` in a block's `block.json` file.\n\nThere are two primary places where Layout styles are output:\n\n### Base layout styles\n\nBase layout styles are those styles that are common to all blocks that opt in to a particular layout type. Examples of common base layout styling include setting `display: flex` for blocks that use the Flex layout type (such as Buttons and Social Icons), and providing default max-width for constrained layouts.\n\nBase layout styles are output from within [the main PHP class](https:\/\/github.com\/WordPress\/wordpress-develop\/blob\/trunk\/src\/wp-includes\/class-wp-theme-json.php) that handles global styles, and form part of the global styles stylesheet. In order to provide support for core blocks in classic themes, these styles are always output, irrespective of whether the theme provides its own `theme.json` file.\n\nCommon layout definitions are stored in [the core layout block support file](https:\/\/github.com\/WordPress\/wordpress-develop\/blob\/trunk\/src\/wp-includes\/block-supports\/layout.php).\n\n### Individual layout styles\n\nWhen a block that opts in to layout support is rendered, two things are processed and added to the output via [`layout.php`](https:\/\/github.com\/WordPress\/wordpress-develop\/blob\/trunk\/src\/wp-includes\/block-supports\/layout.php):\n\n-   Semantic class names are added to the block markup to indicate which layout settings are in use. For example, `is-layout-flow` is for blocks (such as Group) that use the default\/flow layout, and `is-content-justification-right` is added when a user sets a block to use right justification.\n-   Individual styles are generated for non-default layout values that are set on the individual block being rendered. These styles are attached to the block via a container class name using the form `wp-container-$id` where the `$id` is a [unique number](https:\/\/developer.wordpress.org\/reference\/functions\/wp_unique_id\/).\n\n### Available layout types\n\nThere are currently four layout types in use:\n\n-   Default\/Flow: Items are stacked vertically. The parent container block is set to `display: flow` and the spacing between children is handled via vertical margins.\n-   Constrained: Items are stacked vertically, using the same spacing logic as the Flow layout. Features constrained widths for child content, outputting widths for standard content size and wide size. Defaults to using global `contentSize` and `wideSize` values set in `settings.layout` in the `theme.json`.\n-   Flex: Items are displayed using a Flexbox layout. Defaults to a horizontal orientation. Spacing between children is handled via the `gap` CSS property.\n-   Grid: Items are displayed using a Grid layout. Defaults to an `auto-fill` approach to column generation but can also be set to a fixed number of columns. Spacing between children is handled via the `gap` CSS property.\n\nFor controlling spacing between blocks, and enabling block spacing controls see: [What is blockGap and how can I use it?](https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/themes\/global-settings-and-styles\/#what-is-blockgap-and-how-can-i-use-it).\n\n### Targeting layout or container blocks from themes\n\nThe layout block support is designed to enable control over layout features from within the block and site editors. Where possible, try to use the features of the blocks to determine particular layout requirements rather than relying upon additional stylesheets.\n\nFor themes that wish to target container blocks in order to add or adjust particular styles, the block's class name is often the best class name to use. Class names such as `wp-block-group` or `wp-block-columns` are usually reliable class names for targeting a particular block. In addition to block and layout classnames, there is also a classname composed of block and layout together: for example, for a Group block with a constrained layout it will be `wp-block-group-is-layout-constrained`.\n\nFor targeting a block that uses a particular layout type, avoid targeting `wp-container-` as container classes may not always be present in the rendered markup.\n\n#### Semantic class names\n\nWork is currently underway to expand stable semantic classnames in Layout block support output. The task is being discussed in [this issue](https:\/\/github.com\/WordPress\/gutenberg\/issues\/38719).\n\nThe current semantic class names that can be output by the Layout block support are:\n\n-   `is-layout-flow`: Blocks that use the Default\/Flow layout type.\n-   `is-layout-constrained`: Blocks that use the Constrained layout type.\n-   `is-layout-flex`: Blocks that use the Flex layout type.\n-   `is-layout-grid`: Blocks that used the Grid layout type.\n-   `wp-container-$id`: Where `$id` is a semi-random number. A container class that only exists when the block contains non-default Layout values. This class should not be used directly for any CSS targeting as it may or may not be present.\n-   `is-horizontal`: When a block explicitly sets `orientation` to `horizontal`.\n-   `is-vertical`: When a block explicitly sets `orientation` to `vertical`.\n-   `is-content-justification-left`: When a block explicitly sets `justifyContent` to `left`.\n-   `is-content-justification-center`: When a block explicitly sets `justifyContent` to `center`.\n-   `is-content-justification-right`: When a block explicitly sets `justifyContent` to `right`.\n-   `is-content-justification-space-between`: When a block explicitly sets `justifyContent` to `space-between`.\n-   `is-nowrap`: When a block explicitly sets `flexWrap` to `nowrap`.\n\n### Opting out of generated layout styles\n\nLayout styles output is switched on by default because the styles are required by core structural blocks. However, themes can opt out of generated block layout styles while retaining semantic class name output by using the `disable-layout-styles` block support. Such themes will be responsible for providing all their own layout styles. See [the entry under Theme Support](https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/themes\/theme-support\/#disabling-base-layout-styles).\n"
    },
    {
        "path": "\/markdown\/explanations\/architecture\/automated-testing.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Automated Testing<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Why is Puppeteer the tool of choice for end-to-end tests?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There exists a rich ecosystem of tooling available for web-based end-to-end automated testing. Thus, it's a common question: \"Why does Gutenberg use <a href=\"https:\/\/developers.google.com\/web\/tools\/puppeteer\/\">Puppeteer<\/a> instead of (<a href=\"https:\/\/cypress.io\/\">Cypress<\/a>, <a href=\"https:\/\/www.selenium.dev\/\">Selenium<\/a>, <a href=\"https:\/\/github.com\/microsoft\/playwright\">Playwright<\/a>, etc)?\". Given some historical unreliability of the build results associated with end-to-end tests, it's especially natural to weigh this question in considering whether our tools are providing more value than the effort required in maintaining them. While we should always be comfortable in reevaluating earlier decisions, there were and continue to be many reasons that Puppeteer is the best compromise of the options available for end-to-end testing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>These include:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Interoperability with existing testing framework<\/strong>. Puppeteer is \"just\" a tool for controlling a Chrome browser, and makes no assumptions about how it's integrated into a testing environment. While this requires some additional effort in ensuring the test environment is available, it also allows for cohesion in how it integrates with an existing setup. Gutenberg is able to consistently use Jest for both unit testing and end-to-end testing. This is contrasted with other solutions like Cypress, which provide their own testing framework and assertion library as part of an all-in-one solution.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>An expressive but predictable API<\/strong>. Puppeteer strikes a nice balance between low-level access to browser behavior, while retaining an expressive API for issuing and awaiting responses to those commands using modern JavaScript <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Learn\/JavaScript\/Asynchronous\/Async_await\"><code>async<\/code> and <code>await<\/code> syntax<\/a>. This is contrasted with other solutions, which either don't support or leverage native language async functionality, don't expose direct access to the browser, or leverage custom domain-specific language syntaxes for expressing browser commands and assertions. The fact that Puppeteer largely targets the Chrome browser is non-ideal in how it does not provide full browser coverage. On the other hand, the limited set of browser targets offers more consistent results and stronger guarantees about how code is evaluated in the browser environment.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Surfacing bugs, not obscuring them<\/strong>. Many alternative solutions offer options to automatically await settled network requests or asynchronous appearance of elements on the page. While this can serve as a convenience in accounting for unpredictable delays, it can also unknowingly cause oversight of legitimate user-facing issues. For example, if an element will only appear on the page after some network request or computation has completed, it may be easy to overlook that these delays can cause unpredictable and frustrating behavior for users (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/pull\/11287\">example<\/a>). Given that developers often test on high-end hardware and stable network connections, consideration of resiliency on low-end hardware or spotty network availability is not always on the forefront of one's considerations. Puppeteer forces us to acknowledge these delays with explicit <code>waitFor*<\/code> expressions, putting us in much greater alignment with the real-world experience of an end-user.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Debugging<\/strong>. It's important that in that case that a test fails, there should be straight-forward means to diagnose and resolve the issue. While its offerings are rather simplistic relative to the competition, Puppeteer does expose options to run tests as \"headful\" (with the browser visible) and with delayed actions. Combined with the fact that it interoperates well with native language \/ runtime features (e.g. debugger statements or breakpoints), this provides developers with sufficient debugging access.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For more context, refer to the following resources:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/contributors\/code\/testing-overview.md#end-to-end-testing\">Testing Overview: End-to-End Testing<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/pull\/5618\">Testing: Experiment with Puppeteer for E2E testing<\/a><!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>In early iterations, the contributing team opted to use Cypress for end-to-end testing. This pull request outlines problems with the approach, and proposed the initial transition to Puppeteer.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/make.wordpress.org\/core\/2020\/02\/04\/javascript-chat-summary-january-28-2020\/\">JavaScript Chat Summary: January 28, 2020<\/a><!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Playwright is a new offering created by many of the original contributors to Puppeteer. It offers increased browser coverage and improved reliability of tests. While still early in development at the time of this writing, there has been some interest in evaluating it for future use as an end-to-end testing solution.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Automated Testing\n\n## Why is Puppeteer the tool of choice for end-to-end tests?\n\nThere exists a rich ecosystem of tooling available for web-based end-to-end automated testing. Thus, it's a common question: \"Why does Gutenberg use [Puppeteer](https:\/\/developers.google.com\/web\/tools\/puppeteer\/) instead of ([Cypress](https:\/\/cypress.io\/), [Selenium](https:\/\/www.selenium.dev\/), [Playwright](https:\/\/github.com\/microsoft\/playwright), etc)?\". Given some historical unreliability of the build results associated with end-to-end tests, it's especially natural to weigh this question in considering whether our tools are providing more value than the effort required in maintaining them. While we should always be comfortable in reevaluating earlier decisions, there were and continue to be many reasons that Puppeteer is the best compromise of the options available for end-to-end testing.\n\nThese include:\n\n-   **Interoperability with existing testing framework**. Puppeteer is \"just\" a tool for controlling a Chrome browser, and makes no assumptions about how it's integrated into a testing environment. While this requires some additional effort in ensuring the test environment is available, it also allows for cohesion in how it integrates with an existing setup. Gutenberg is able to consistently use Jest for both unit testing and end-to-end testing. This is contrasted with other solutions like Cypress, which provide their own testing framework and assertion library as part of an all-in-one solution.\n-   **An expressive but predictable API**. Puppeteer strikes a nice balance between low-level access to browser behavior, while retaining an expressive API for issuing and awaiting responses to those commands using modern JavaScript [`async` and `await` syntax](https:\/\/developer.mozilla.org\/en-US\/docs\/Learn\/JavaScript\/Asynchronous\/Async_await). This is contrasted with other solutions, which either don't support or leverage native language async functionality, don't expose direct access to the browser, or leverage custom domain-specific language syntaxes for expressing browser commands and assertions. The fact that Puppeteer largely targets the Chrome browser is non-ideal in how it does not provide full browser coverage. On the other hand, the limited set of browser targets offers more consistent results and stronger guarantees about how code is evaluated in the browser environment.\n-   **Surfacing bugs, not obscuring them**. Many alternative solutions offer options to automatically await settled network requests or asynchronous appearance of elements on the page. While this can serve as a convenience in accounting for unpredictable delays, it can also unknowingly cause oversight of legitimate user-facing issues. For example, if an element will only appear on the page after some network request or computation has completed, it may be easy to overlook that these delays can cause unpredictable and frustrating behavior for users ([example](https:\/\/github.com\/WordPress\/gutenberg\/pull\/11287)). Given that developers often test on high-end hardware and stable network connections, consideration of resiliency on low-end hardware or spotty network availability is not always on the forefront of one's considerations. Puppeteer forces us to acknowledge these delays with explicit `waitFor*` expressions, putting us in much greater alignment with the real-world experience of an end-user.\n-   **Debugging**. It's important that in that case that a test fails, there should be straight-forward means to diagnose and resolve the issue. While its offerings are rather simplistic relative to the competition, Puppeteer does expose options to run tests as \"headful\" (with the browser visible) and with delayed actions. Combined with the fact that it interoperates well with native language \/ runtime features (e.g. debugger statements or breakpoints), this provides developers with sufficient debugging access.\n\nFor more context, refer to the following resources:\n\n-   [Testing Overview: End-to-End Testing](\/docs\/contributors\/code\/testing-overview.md#end-to-end-testing)\n-   [Testing: Experiment with Puppeteer for E2E testing](https:\/\/github.com\/WordPress\/gutenberg\/pull\/5618)\n    -   In early iterations, the contributing team opted to use Cypress for end-to-end testing. This pull request outlines problems with the approach, and proposed the initial transition to Puppeteer.\n-   [JavaScript Chat Summary: January 28, 2020](https:\/\/make.wordpress.org\/core\/2020\/02\/04\/javascript-chat-summary-january-28-2020\/)\n    -   Playwright is a new offering created by many of the original contributors to Puppeteer. It offers increased browser coverage and improved reliability of tests. While still early in development at the time of this writing, there has been some interest in evaluating it for future use as an end-to-end testing solution.\n"
    },
    {
        "path": "\/markdown\/explanations\/architecture\/key-concepts.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Key Concepts<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Blocks<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Blocks are an abstract unit for structuring and interacting with content. When composed together they create the content for a webpage. Everything from a paragraph, to a video, to the site title is represented as a block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Blocks come in many different forms but also provide a consistent interface. They can be inserted, moved, reordered, copied, duplicated, transformed, deleted, dragged, and combined. Blocks can also be reused, allowing them to be shared across posts and post types and\/or used multiple times in the same post. If it helps, you can think of blocks as a more graceful shortcode, with rich formatting tools for users to compose content.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The settings and content of a block can be customized in three main places: the block canvas, the block toolbar, and the block inspector.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Composability<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Blocks are meant to be combined in different ways. Blocks are hierarchical in that a block can be nested within another block. Nested blocks and its container are also called <em>children<\/em> and <em>parent<\/em> respectively. For example, a <em>Columns<\/em> block can be the parent block to multiple child blocks in each of its columns. The API that governs child block usage is named <code>InnerBlocks<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Data and attributes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Blocks understand content as attributes and are serializable to HTML. To this point, there is a new Block Grammar. Distilled, the block grammar is an HTML comment, either a self-closing tag or with a beginning tag and ending tag. In the main tag, depending on the block type and user customizations, there can be a JSON object. This raw form of the block is referred to as serialized.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n<p>Welcome to the world of blocks.<\/p>\n\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Blocks can be static or dynamic. Static blocks contain rendered content and an object of Attributes used to re-render based on changes. Dynamic blocks require server-side data and rendering while the post content is being generated (rendering).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Each block contains Attributes or configuration settings, which can be sourced from raw HTML in the content via meta or other customizable origins.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>More on <a href=\"\/docs\/explanations\/architecture\/data-flow.md\">Data format and data flow<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block transforms<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Blocks have the ability to be transformed into other block types. This allows basic operations like converting a paragraph into a heading, but also more intricate ones like multiple images becoming a gallery. Block transforms work for single blocks and for multi-block selections. Internal block variations are also possible transformation targets.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block variations<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Given a block type, a block variation is a predefined set of its initial attributes. This API allows creating a single block from which multiple configurations are possible. Variations provide different possible interfaces, including showing up as entirely new blocks in the library, or as presets when inserting a new block. Read <a href=\"\/docs\/reference-guides\/block-api\/block-registration.md#variations-optional\">the API documentation<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>More on blocks<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong><a href=\"\/docs\/reference-guides\/block-api\/README.md\">Block API<\/a><\/strong><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"\/docs\/getting-started\/devenv\/get-started-with-create-block.md\">Tutorial: Building A Custom Block<\/a><\/strong><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Reusable blocks<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A reusable blocks is <strong>an instance<\/strong> of a block (or multiple blocks) that can be inserted and edited in multiples places, remaining in sync everywhere. If a reusable block is edited in one place, those changes are reflected across all posts and pages that block is used. Examples of reusable blocks include a block consisting of a heading whose content and a custom color that would be appear on multiple pages of the site and sidebar widgets that would appear on every page.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Any edits to a reusable block will appear on every other use of that block, saving time from having to make the same edit on different posts.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Internally, reusable blocks are stored as a hidden post type (<code>wp_block<\/code>) and are dynamic blocks that \"ref\" or reference the <code>post_id<\/code> and return the <code>post_content<\/code> for that block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Patterns<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A <a href=\"\/docs\/reference-guides\/block-api\/block-patterns.md\">block pattern<\/a> is a group of blocks that have been combined together creating a design pattern. These design patterns provide a starting point for building more advanced pages and layouts quickly, instead of inserting individual blocks. A block pattern can be as small as a single block or as large as a full page of content. Unlike reusable blocks, once a pattern is inserted it doesn't remain in sync with the original content as the blocks contained are meant to be edited and customized by the user. Underneath the surface, patterns are just regular blocks composed together. Themes can register patterns to offer users quick starting points with a design language familiar to that theme's aesthetics.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Templates<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>While the post editor concentrates on the content of a post, the <a href=\"\/docs\/reference-guides\/block-api\/block-templates.md\">template<\/a> editor allows declaring and editing an entire site using blocks, from header to footer. Templates are broken down between templates (that describe a full page) and template parts (that describe reusable areas within a template, including semantic areas like header, sidebar, and footer).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>These templates and template parts can be composed together and registered by a theme. They are also entirely editable by users using the block editor; a collection of blocks that interact with different properties and settings of the site (like the site title, description, logo, navigation, etc) are especially useful when editing templates and template parts. Customized templates are saved in a <code>wp_template<\/code> post type. Block templates include both static pages and dynamic ones, like archives, singular, home, 404, etc.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note: custom post types can also be initialized with a starting <code>post_content<\/code> template that should not be confused with the theme template system described above.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>More on <a href=\"\/docs\/explanations\/architecture\/full-site-editing-templates.md\">Site editing templates<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Styles<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Styles, formerly known as Global Styles and as such referenced in the code, is both an interface that users access through the editor and a configuration system done through <a href=\"\/docs\/how-to-guides\/themes\/global-settings-and-styles.md\">a <code>theme.json<\/code> file<\/a>. This file absorbs most of the configuration aspects usually scattered through various <code>add_theme_support<\/code> calls to simplify communicating with the editor. It thus aims to improve declaring what settings should be enabled, what specific tools a theme offers (like a custom color palette), the available design tools present, and an infrastructure that allows to coordinate the styles coming from WordPress, the active theme, and the user.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Learn more about <a href=\"\/docs\/explanations\/architecture\/styles.md#global-styles\">Global Styles<\/a>.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Key Concepts\n\n## Blocks\n\nBlocks are an abstract unit for structuring and interacting with content. When composed together they create the content for a webpage. Everything from a paragraph, to a video, to the site title is represented as a block.\n\nBlocks come in many different forms but also provide a consistent interface. They can be inserted, moved, reordered, copied, duplicated, transformed, deleted, dragged, and combined. Blocks can also be reused, allowing them to be shared across posts and post types and\/or used multiple times in the same post. If it helps, you can think of blocks as a more graceful shortcode, with rich formatting tools for users to compose content.\n\nThe settings and content of a block can be customized in three main places: the block canvas, the block toolbar, and the block inspector.\n\n### Composability\n\nBlocks are meant to be combined in different ways. Blocks are hierarchical in that a block can be nested within another block. Nested blocks and its container are also called _children_ and _parent_ respectively. For example, a _Columns_ block can be the parent block to multiple child blocks in each of its columns. The API that governs child block usage is named `InnerBlocks`.\n\n### Data and attributes\n\nBlocks understand content as attributes and are serializable to HTML. To this point, there is a new Block Grammar. Distilled, the block grammar is an HTML comment, either a self-closing tag or with a beginning tag and ending tag. In the main tag, depending on the block type and user customizations, there can be a JSON object. This raw form of the block is referred to as serialized.\n\n```html\n<!-- wp:paragraph {\"key\": \"value\"} -->\n<p>Welcome to the world of blocks.<\/p>\n<!-- \/wp:paragraph -->\n```\n\nBlocks can be static or dynamic. Static blocks contain rendered content and an object of Attributes used to re-render based on changes. Dynamic blocks require server-side data and rendering while the post content is being generated (rendering).\n\nEach block contains Attributes or configuration settings, which can be sourced from raw HTML in the content via meta or other customizable origins.\n\nMore on [Data format and data flow](\/docs\/explanations\/architecture\/data-flow.md).\n\n### Block transforms\n\nBlocks have the ability to be transformed into other block types. This allows basic operations like converting a paragraph into a heading, but also more intricate ones like multiple images becoming a gallery. Block transforms work for single blocks and for multi-block selections. Internal block variations are also possible transformation targets.\n\n### Block variations\n\nGiven a block type, a block variation is a predefined set of its initial attributes. This API allows creating a single block from which multiple configurations are possible. Variations provide different possible interfaces, including showing up as entirely new blocks in the library, or as presets when inserting a new block. Read [the API documentation](\/docs\/reference-guides\/block-api\/block-registration.md#variations-optional) for more details.\n\n**More on blocks**\n\n-   **[Block API](\/docs\/reference-guides\/block-api\/README.md)**\n-   **[Tutorial: Building A Custom Block](\/docs\/getting-started\/devenv\/get-started-with-create-block.md)**\n\n## Reusable blocks\n\nA reusable blocks is **an instance** of a block (or multiple blocks) that can be inserted and edited in multiples places, remaining in sync everywhere. If a reusable block is edited in one place, those changes are reflected across all posts and pages that block is used. Examples of reusable blocks include a block consisting of a heading whose content and a custom color that would be appear on multiple pages of the site and sidebar widgets that would appear on every page.\n\nAny edits to a reusable block will appear on every other use of that block, saving time from having to make the same edit on different posts.\n\nInternally, reusable blocks are stored as a hidden post type (`wp_block`) and are dynamic blocks that \"ref\" or reference the `post_id` and return the `post_content` for that block.\n\n## Patterns\n\nA [block pattern](\/docs\/reference-guides\/block-api\/block-patterns.md) is a group of blocks that have been combined together creating a design pattern. These design patterns provide a starting point for building more advanced pages and layouts quickly, instead of inserting individual blocks. A block pattern can be as small as a single block or as large as a full page of content. Unlike reusable blocks, once a pattern is inserted it doesn't remain in sync with the original content as the blocks contained are meant to be edited and customized by the user. Underneath the surface, patterns are just regular blocks composed together. Themes can register patterns to offer users quick starting points with a design language familiar to that theme's aesthetics.\n\n## Templates\n\nWhile the post editor concentrates on the content of a post, the [template](\/docs\/reference-guides\/block-api\/block-templates.md) editor allows declaring and editing an entire site using blocks, from header to footer. Templates are broken down between templates (that describe a full page) and template parts (that describe reusable areas within a template, including semantic areas like header, sidebar, and footer).\n\nThese templates and template parts can be composed together and registered by a theme. They are also entirely editable by users using the block editor; a collection of blocks that interact with different properties and settings of the site (like the site title, description, logo, navigation, etc) are especially useful when editing templates and template parts. Customized templates are saved in a `wp_template` post type. Block templates include both static pages and dynamic ones, like archives, singular, home, 404, etc.\n\nNote: custom post types can also be initialized with a starting `post_content` template that should not be confused with the theme template system described above.\n\nMore on [Site editing templates](\/docs\/explanations\/architecture\/full-site-editing-templates.md).\n\n## Styles\n\nStyles, formerly known as Global Styles and as such referenced in the code, is both an interface that users access through the editor and a configuration system done through [a `theme.json` file](\/docs\/how-to-guides\/themes\/global-settings-and-styles.md). This file absorbs most of the configuration aspects usually scattered through various `add_theme_support` calls to simplify communicating with the editor. It thus aims to improve declaring what settings should be enabled, what specific tools a theme offers (like a custom color palette), the available design tools present, and an infrastructure that allows to coordinate the styles coming from WordPress, the active theme, and the user.\n\nLearn more about [Global Styles](\/docs\/explanations\/architecture\/styles.md#global-styles).\n"
    },
    {
        "path": "\/markdown\/explanations\/architecture\/modularity.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Modularity<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The WordPress block editor is based around the idea that you can combine independent blocks together to write your post or build your page. Blocks can also use and interact with each other. This makes it very modular and flexible.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But the Block Editor does not embrace modularity for its behavior and output only. The Gutenberg repository is also built from the ground up as several reusable and independent modules or packages, that, combined together, lead to the application and interface we all know. These modules are known as <a href=\"https:\/\/www.npmjs.com\/org\/wordpress\">WordPress packages<\/a> and are published and updated regularly on the npm package repository.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>These packages are used to power the Block Editor, but they can be used to power any page in the WordPress Admin or outside.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Why?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Using a modular architecture has several benefits for all the actors involved:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Each package is an independent unit and has a well defined public API that is used to interact with other packages and third-party code. This makes it easier for <strong>Core Contributors<\/strong> to reason about the codebase. They can focus on a single package at a time, understand it and make updates while knowing exactly how these changes could impact all the other parts relying on the given package.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>A module approach is also beneficial to the <strong>end-user<\/strong>. It allows to selectively load scripts on different WordPress Admin pages while keeping the bundle size contained. For instance, if we use the components package to power our plugin's settings page, there's no need to load the block-editor package on that page.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>This architecture also allows <strong>third-party developers<\/strong> to reuse these packages inside and outside the WordPress context by using these packages as npm or WordPress script dependencies.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Types of packages<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Almost everything in the Gutenberg repository is built into a package. We can split these packages into two different types:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Production packages<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>These are the packages that ship in WordPress itself as JavaScript scripts. These constitute the actual production code that runs on your browsers. As an example, there's a <code>components<\/code> package serving as a reusable set of React components used to prototype and build interfaces quickly. There's also an <code>api-fetch<\/code> package that can be used to call WordPress Rest APIs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Third-party developers can use these production packages in two different ways:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>If you're building a JavaScript application, website, page that runs outside of the context of WordPress, you can consume these packages like any other JavaScript package in the npm registry.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm install @wordpress\/components\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { Button } from '@wordpress\/components';\n\nfunction MyApp() {\n\treturn <button>Nice looking button<\/button>;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>If you're building a plugin that runs on WordPress, you'd probably prefer consuming the package that ships with WordPress itself. This allows multiple plugins to reuse the same packages and avoid code duplication. In WordPress, these packages are available as WordPress scripts with a handle following this format <code>wp-package-name<\/code> (e.g. <code>wp-components<\/code>). Once you add the script to your own WordPress plugin scripts dependencies, the package will be available on the <code>wp<\/code> global variable.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ myplugin.php\n\/\/ Example of script registration dependending on the \"components\" and \"element packages.\nwp_register_script( 'myscript', 'pathtomyscript.js', array ('wp-components', \"react\" ) );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Using the package in your scripts\nconst { Button } = wp.components;\n\nfunction MyApp() {\n\treturn <button>Nice looking button<\/button>;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Script dependencies definition can be a tedious task for developers. Mistakes and oversight can happen easily. If you want to learn how you can automate this task. Check the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/packages\/packages-scripts\/#build\">@wordpress\/scripts<\/a> and <a href=\"https:\/\/developer.wordpress.org\/block-editor\/packages\/packages-dependency-extraction-webpack-plugin\/\">@wordpress\/dependency-extraction-webpack-plugin<\/a> documentation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packages with stylesheets<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Some production packages provide stylesheets to function properly.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>If you're using the package as an npm dependency, the stylesheets will be available on the <code>build-style<\/code> folder of the package. Make sure to load this style file on your application.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If you're working in the context of WordPress, you'll have to enqueue these stylesheets or add them to your stylesheets dependencies. The stylesheet handles are the same as the script handles.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>In the context of existing WordPress pages, if you omit to define the scripts or styles dependencies properly, your plugin might still work properly if these scripts and styles are already loaded there by WordPress or by other plugins, but it's highly recommended to define all your dependencies exhaustively if you want to avoid potential breakage in future versions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Packages with data stores<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Some WordPress production packages define data stores to handle their state. These stores can also be used by third-party plugins and themes to retrieve data and to manipulate it. The name of these data stores is also normalized following this format <code>core\/package-name<\/code> (E.g. the <code>@wordpress\/block-editor<\/code> package defines and uses the <code>core\/block-editor<\/code> data store).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you're using one of these stores to access and manipulate WordPress data in your plugins, don't forget to add the corresponding WordPress script to your own script dependencies for your plugin to work properly. (For instance, if you're retrieving data from the <code>core\/block-editor<\/code> store, you should add the <code>wp-block-editor<\/code> package to your script dependencies like shown above).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Development packages<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>These are packages used in development mode to help developers with daily tasks to develop, build and ship JavaScript applications, WordPress plugins and themes. They include tools for linting your codebase, building it, testing it...<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Editor packages<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/explanations\/architecture\/assets\/modules.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Post Editor Modules Architecture<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">What's the difference between the different editor packages? What's the purpose of each package?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It's often surprising to new contributors to discover that the post editor is constructed as a layered abstraction of three separate packages <code>@wordpress\/edit-post<\/code>, <code>@wordpress\/editor<\/code>, and <code>@wordpress\/block-editor<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The above <a href=\"#why\">Why?<\/a> section should provide some context for how individual packages aim to satisfy specific requirements. That applies to these packages as well:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>@wordpress\/block-editor<\/code> provides components for implementing a block editor, operating on a primitive value of an array of block objects. It makes no assumptions for how this value is saved, and has no awareness (or requirement) of a WordPress site.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>@wordpress\/editor<\/code> is the enhanced version of the block editor for WordPress posts. It utilizes components from the <code>@wordpress\/block-editor<\/code> package. Having an awareness of the concept of a WordPress post, it associates the loading and saving mechanism of the value representing blocks to a post and its content. It also provides various components relevant for working with a post object in the context of an editor (e.g., a post title input component). This package can support editing posts of any post type and does not assume that rendering happens in any particular WordPress screen or layout arrangement.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>@wordpress\/edit-post<\/code> is the implementation of the \"New Post\" (\"Edit Post\") screen in the WordPress admin. It is responsible for the layout of the various components provided by <code>@wordpress\/editor<\/code> and <code>@wordpress\/block-editor<\/code>, with full awareness of how it is presented in the specific screen in the WordPress administrative dashboard.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Structured this way, these packages can be used in a variety of combinations outside the use-case of the \"New Post\" screen:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>A <code>@wordpress\/edit-site<\/code> or <code>@wordpress\/edit-widgets<\/code> package can serve as similar implementations of a \"Site Editor\" or \"Widgets Editor\", in much the same way as <code>@wordpress\/edit-post<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>@wordpress\/editor<\/code> could be used in the implementation of the \"Reusable Block\" block, since it is essentially a nested block editor associated with the post type <code>wp_block<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>@wordpress\/block-editor<\/code> could be used independently from WordPress, or with a completely different save mechanism. For example, it could be used for a comments editor for posts of a site.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Going further<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/packages.md\">Package Reference<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Modularity\n\nThe WordPress block editor is based around the idea that you can combine independent blocks together to write your post or build your page. Blocks can also use and interact with each other. This makes it very modular and flexible.\n\nBut the Block Editor does not embrace modularity for its behavior and output only. The Gutenberg repository is also built from the ground up as several reusable and independent modules or packages, that, combined together, lead to the application and interface we all know. These modules are known as [WordPress packages](https:\/\/www.npmjs.com\/org\/wordpress) and are published and updated regularly on the npm package repository.\n\nThese packages are used to power the Block Editor, but they can be used to power any page in the WordPress Admin or outside.\n\n## Why?\n\nUsing a modular architecture has several benefits for all the actors involved:\n\n-   Each package is an independent unit and has a well defined public API that is used to interact with other packages and third-party code. This makes it easier for **Core Contributors** to reason about the codebase. They can focus on a single package at a time, understand it and make updates while knowing exactly how these changes could impact all the other parts relying on the given package.\n-   A module approach is also beneficial to the **end-user**. It allows to selectively load scripts on different WordPress Admin pages while keeping the bundle size contained. For instance, if we use the components package to power our plugin's settings page, there's no need to load the block-editor package on that page.\n-   This architecture also allows **third-party developers** to reuse these packages inside and outside the WordPress context by using these packages as npm or WordPress script dependencies.\n\n## Types of packages\n\nAlmost everything in the Gutenberg repository is built into a package. We can split these packages into two different types:\n\n### Production packages\n\nThese are the packages that ship in WordPress itself as JavaScript scripts. These constitute the actual production code that runs on your browsers. As an example, there's a `components` package serving as a reusable set of React components used to prototype and build interfaces quickly. There's also an `api-fetch` package that can be used to call WordPress Rest APIs.\n\nThird-party developers can use these production packages in two different ways:\n\n-   If you're building a JavaScript application, website, page that runs outside of the context of WordPress, you can consume these packages like any other JavaScript package in the npm registry.\n\n```\nnpm install @wordpress\/components\n```\n\n```js\nimport { Button } from '@wordpress\/components';\n\nfunction MyApp() {\n\treturn <Button>Nice looking button<\/Button>;\n}\n```\n\n-   If you're building a plugin that runs on WordPress, you'd probably prefer consuming the package that ships with WordPress itself. This allows multiple plugins to reuse the same packages and avoid code duplication. In WordPress, these packages are available as WordPress scripts with a handle following this format `wp-package-name` (e.g. `wp-components`). Once you add the script to your own WordPress plugin scripts dependencies, the package will be available on the `wp` global variable.\n\n```php\n\/\/ myplugin.php\n\/\/ Example of script registration dependending on the \"components\" and \"element packages.\nwp_register_script( 'myscript', 'pathtomyscript.js', array ('wp-components', \"react\" ) );\n```\n\n```js\n\/\/ Using the package in your scripts\nconst { Button } = wp.components;\n\nfunction MyApp() {\n\treturn <Button>Nice looking button<\/Button>;\n}\n```\n\nScript dependencies definition can be a tedious task for developers. Mistakes and oversight can happen easily. If you want to learn how you can automate this task. Check the [@wordpress\/scripts](https:\/\/developer.wordpress.org\/block-editor\/packages\/packages-scripts\/#build) and [@wordpress\/dependency-extraction-webpack-plugin](https:\/\/developer.wordpress.org\/block-editor\/packages\/packages-dependency-extraction-webpack-plugin\/) documentation.\n\n#### Packages with stylesheets\n\nSome production packages provide stylesheets to function properly.\n\n-   If you're using the package as an npm dependency, the stylesheets will be available on the `build-style` folder of the package. Make sure to load this style file on your application.\n-   If you're working in the context of WordPress, you'll have to enqueue these stylesheets or add them to your stylesheets dependencies. The stylesheet handles are the same as the script handles.\n\nIn the context of existing WordPress pages, if you omit to define the scripts or styles dependencies properly, your plugin might still work properly if these scripts and styles are already loaded there by WordPress or by other plugins, but it's highly recommended to define all your dependencies exhaustively if you want to avoid potential breakage in future versions.\n\n#### Packages with data stores\n\nSome WordPress production packages define data stores to handle their state. These stores can also be used by third-party plugins and themes to retrieve data and to manipulate it. The name of these data stores is also normalized following this format `core\/package-name` (E.g. the `@wordpress\/block-editor` package defines and uses the `core\/block-editor` data store).\n\nIf you're using one of these stores to access and manipulate WordPress data in your plugins, don't forget to add the corresponding WordPress script to your own script dependencies for your plugin to work properly. (For instance, if you're retrieving data from the `core\/block-editor` store, you should add the `wp-block-editor` package to your script dependencies like shown above).\n\n### Development packages\n\nThese are packages used in development mode to help developers with daily tasks to develop, build and ship JavaScript applications, WordPress plugins and themes. They include tools for linting your codebase, building it, testing it...\n\n## Editor packages\n\n![Post Editor Modules Architecture](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/explanations\/architecture\/assets\/modules.png)\n\n### What's the difference between the different editor packages? What's the purpose of each package?\n\nIt's often surprising to new contributors to discover that the post editor is constructed as a layered abstraction of three separate packages `@wordpress\/edit-post`, `@wordpress\/editor`, and `@wordpress\/block-editor`.\n\nThe above [Why?](#why) section should provide some context for how individual packages aim to satisfy specific requirements. That applies to these packages as well:\n\n-   `@wordpress\/block-editor` provides components for implementing a block editor, operating on a primitive value of an array of block objects. It makes no assumptions for how this value is saved, and has no awareness (or requirement) of a WordPress site.\n-   `@wordpress\/editor` is the enhanced version of the block editor for WordPress posts. It utilizes components from the `@wordpress\/block-editor` package. Having an awareness of the concept of a WordPress post, it associates the loading and saving mechanism of the value representing blocks to a post and its content. It also provides various components relevant for working with a post object in the context of an editor (e.g., a post title input component). This package can support editing posts of any post type and does not assume that rendering happens in any particular WordPress screen or layout arrangement.\n-   `@wordpress\/edit-post` is the implementation of the \"New Post\" (\"Edit Post\") screen in the WordPress admin. It is responsible for the layout of the various components provided by `@wordpress\/editor` and `@wordpress\/block-editor`, with full awareness of how it is presented in the specific screen in the WordPress administrative dashboard.\n\nStructured this way, these packages can be used in a variety of combinations outside the use-case of the \"New Post\" screen:\n\n-   A `@wordpress\/edit-site` or `@wordpress\/edit-widgets` package can serve as similar implementations of a \"Site Editor\" or \"Widgets Editor\", in much the same way as `@wordpress\/edit-post`.\n-   `@wordpress\/editor` could be used in the implementation of the \"Reusable Block\" block, since it is essentially a nested block editor associated with the post type `wp_block`.\n-   `@wordpress\/block-editor` could be used independently from WordPress, or with a completely different save mechanism. For example, it could be used for a comments editor for posts of a site.\n\n## Going further\n\n-   [Package Reference](\/docs\/reference-guides\/packages.md)\n"
    },
    {
        "path": "\/markdown\/explanations\/architecture\/data-flow.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Data Flow and Data Format<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The format<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block editor post is the proper block-aware representation of a post: a collection of semantically consistent descriptions of what each block is and what its essential data is. This representation only ever exists in memory. It is the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Chase_(printing)\">chase<\/a> in the typesetter's workshop, ever-shifting as <a href=\"https:\/\/en.wikipedia.org\/wiki\/Sort_(typesetting)\">sorts<\/a> are attached and repositioned.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A block editor post is not the artifact it produces, namely the <code>post_content<\/code>. The latter is the printed page, optimized for the reader but retaining its invisible markings for later editing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The input and output of the block editor is a tree of block objects with the current format:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const value = &#91; block1, block2, block3 ];\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">The block object<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Each block object has an id, a set of attributes and potentially a list of child blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const block = {\n\tclientId, \/\/ unique string identifier.\n\ttype, \/\/ The block type (paragraph, image...)\n\tattributes, \/\/ (key, value) set of attributes representing the direct properties\/content of the current block.\n\tinnerBlocks, \/\/ An array of child blocks or inner blocks.\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note the attributes keys and types, the allowed inner blocks are defined by the block type. For example, the core quote block has a <code>cite<\/code> string attribute representing the cite content while a heading block has a numeric <code>level<\/code> attribute, representing the level of the heading (1 to 6).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>During the lifecycle of the block in the editor, the block object can receive extra metadata:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>isValid<\/code>: A boolean representing whether the block is valid or not;<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>originalContent<\/code>: The original HTML serialization of the block.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ A simple paragraph block.\nconst paragraphBlock1 = {\n\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a3',\n\ttype: 'core\/paragraph',\n\tattributes: {\n\t\tcontent: 'This is the <strong>content<\/strong> of the paragraph block',\n\t\tdropCap: true,\n\t},\n};\n\n\/\/ A separator block.\nconst separatorBlock = {\n\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a4',\n\ttype: 'core\/separator',\n\tattributes: {},\n};\n\n\/\/ A columns block with a paragraph block on each column.\nconst columnsBlock = {\n\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a7',\n\ttype: 'core\/columns',\n\tattributes: {},\n\tinnerBlocks: &#91;\n\t\t{\n\t\t\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a5',\n\t\t\ttype: 'core\/column',\n\t\t\tattributes: {},\n\t\t\tinnerBlocks: &#91; paragraphBlock1 ],\n\t\t},\n\t\t{\n\t\t\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a6',\n\t\t\ttype: 'core\/column',\n\t\t\tattributes: {},\n\t\t\tinnerBlocks: &#91; paragraphBlock2 ],\n\t\t},\n\t],\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Serialization and parsing<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/docs.google.com\/drawings\/d\/1iuownt5etcih7rMMvPvh0Mny8zUA1Z28saxjxaWmfJ0\/pub?w=1234&amp;h=453\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Diagram<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>This data model, however, is something that lives in memory while editing a post. It's not visible to the page viewer when rendered, just like a printed page has no trace of the structure of the letters that produced it in the press.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Since the whole WordPress ecosystem has an expectation for receiving HTML when rendering or editing a post, the block editor transforms its data into something that can be saved in <code>post_content<\/code> through serialization. This assures that there's a single source of truth for the content, and that this source remains readable and compatible with all the tools that interact with WordPress content at the present. Were we to store the object tree separately, we would face the risk of <code>post_content<\/code> and the tree getting out of sync and the problem of data duplication in both places.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Thus, the serialization process converts the block tree into HTML using HTML comments as explicit block delimiters\u2014which can contain the attributes in non-HTML form. This is the act of printing invisible marks on the printed page that leave a trace of the original structured intention.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is one end of the process. The other is how to recreate the collection of blocks whenever a post is to be edited again. A formal grammar defines how the serialized representation of a block editor post should be loaded, just as some basic rules define how to turn the tree into an HTML-like string. The block editor's posts aren't designed to be edited by hand; they aren't designed to be edited as HTML documents because the block editor posts aren't HTML in essence.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>They just happen, incidentally, to be stored inside of <code>post_content<\/code> in a way in which they require no transformation in order to be viewable by any legacy system. It's true that loading the stored HTML into a browser without the corresponding machinery might degrade the experience, and if it included dynamic blocks of content, the dynamic elements may not load, server-generated content may not appear, and interactive content may remain static. However, it at least protects against not being able to view block editor posts on themes and installations that are blocks-unaware, and it provides the most accessible way to the content. In other words, the post remains mostly intact even if the saved HTML is rendered as is.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Delimiters and parsing expression grammar<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We chose instead to try to find a way to keep the formality, explicitness, and unambiguity in the existing HTML syntax. Within the HTML there were a number of options.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Of these options, a novel approach was suggested: by storing data in HTML comments, we would know that we wouldn't break the rest of the HTML in the document, that browsers should ignore it, and that we could simplify our approach to parsing the document.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unique to HTML comments is the fact that they cannot legitimately exist in ambiguous places, such as inside of HTML attributes like <code>&lt;img alt='data-id=\"14\"'><\/code>. Comments are also quite permissive. Whereas HTML attributes are complicated to parse properly, comments are quite easily described by a leading <code>&lt;!--<\/code> followed by anything except <code>--<\/code> until the first <code>--><\/code>. This simplicity and permissiveness means that the parser can be implemented in several ways without needing to understand HTML properly, and we have the liberty to use more convenient syntax inside of the comment\u2014we only need to escape double-hyphen sequences. We take advantage of this in how we store block attributes: as JSON literals inside the comment.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After running this through the parser, we're left with a simple object we can manipulate idiomatically, and we don't have to worry about escaping or unescaping the data. It's handled for us through the serialization process. Because the comments are so different from other HTML tags and because we can perform a first-pass to extract the top-level blocks, we don't actually depend on having fully valid HTML!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This has dramatic implications for how simple and performant we can make our parser. These explicit boundaries also protect damage in a single block from bleeding into other blocks or tarnishing the entire document. It also allows the system to identify unrecognized blocks before rendering them.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>N.B.:<\/em> The defining aspects of blocks are their semantics and the isolation mechanism they provide: in other words, their identity. On the other hand, where their data is stored is a more liberal aspect. Blocks support more than just static local data (via JSON literals inside the HTML comment or within the block's HTML), and more mechanisms (<em>e.g.<\/em>, global blocks or otherwise resorting to storage in complementary <code>WP_Post<\/code> objects) are expected. See <a href=\"\/docs\/reference-guides\/block-api\/block-attributes.md\">attributes<\/a> for details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">The anatomy of a serialized block<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When blocks are saved to the content after the editing session, its attributes\u2014depending on the nature of the block\u2014are serialized to these explicit comment delimiters.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n<figure class=\"wp-block-image\"><img src=\"source.jpg\" alt=\"\"><\/figure>\n\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>A purely dynamic block that is to be server-rendered before display could look like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The data lifecycle<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In summary, the block editor workflow parses the saved document to an in-memory tree of blocks, using token delimiters to help. During editing, all manipulations happen within the block tree. The process ends by serializing the blocks back to the <code>post_content<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The workflow process relies on a serialization\/parser pair to persist posts. Hypothetically, the post data structure could be stored using a plugin or retrieved from a remote JSON file to be converted to the block tree.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Data Flow and Data Format\n\n## The format\n\nA block editor post is the proper block-aware representation of a post: a collection of semantically consistent descriptions of what each block is and what its essential data is. This representation only ever exists in memory. It is the [chase](<https:\/\/en.wikipedia.org\/wiki\/Chase_(printing)>) in the typesetter's workshop, ever-shifting as [sorts](<https:\/\/en.wikipedia.org\/wiki\/Sort_(typesetting)>) are attached and repositioned.\n\nA block editor post is not the artifact it produces, namely the `post_content`. The latter is the printed page, optimized for the reader but retaining its invisible markings for later editing.\n\nThe input and output of the block editor is a tree of block objects with the current format:\n\n```js\nconst value = [ block1, block2, block3 ];\n```\n\n### The block object\n\nEach block object has an id, a set of attributes and potentially a list of child blocks.\n\n```js\nconst block = {\n\tclientId, \/\/ unique string identifier.\n\ttype, \/\/ The block type (paragraph, image...)\n\tattributes, \/\/ (key, value) set of attributes representing the direct properties\/content of the current block.\n\tinnerBlocks, \/\/ An array of child blocks or inner blocks.\n};\n```\n\nNote the attributes keys and types, the allowed inner blocks are defined by the block type. For example, the core quote block has a `cite` string attribute representing the cite content while a heading block has a numeric `level` attribute, representing the level of the heading (1 to 6).\n\nDuring the lifecycle of the block in the editor, the block object can receive extra metadata:\n\n-   `isValid`: A boolean representing whether the block is valid or not;\n-   `originalContent`: The original HTML serialization of the block.\n\n**Examples**\n\n```js\n\/\/ A simple paragraph block.\nconst paragraphBlock1 = {\n\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a3',\n\ttype: 'core\/paragraph',\n\tattributes: {\n\t\tcontent: 'This is the <strong>content<\/strong> of the paragraph block',\n\t\tdropCap: true,\n\t},\n};\n\n\/\/ A separator block.\nconst separatorBlock = {\n\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a4',\n\ttype: 'core\/separator',\n\tattributes: {},\n};\n\n\/\/ A columns block with a paragraph block on each column.\nconst columnsBlock = {\n\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a7',\n\ttype: 'core\/columns',\n\tattributes: {},\n\tinnerBlocks: [\n\t\t{\n\t\t\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a5',\n\t\t\ttype: 'core\/column',\n\t\t\tattributes: {},\n\t\t\tinnerBlocks: [ paragraphBlock1 ],\n\t\t},\n\t\t{\n\t\t\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a6',\n\t\t\ttype: 'core\/column',\n\t\t\tattributes: {},\n\t\t\tinnerBlocks: [ paragraphBlock2 ],\n\t\t},\n\t],\n};\n```\n\n## Serialization and parsing\n\n![Diagram](https:\/\/docs.google.com\/drawings\/d\/1iuownt5etcih7rMMvPvh0Mny8zUA1Z28saxjxaWmfJ0\/pub?w=1234&h=453)\n\nThis data model, however, is something that lives in memory while editing a post. It's not visible to the page viewer when rendered, just like a printed page has no trace of the structure of the letters that produced it in the press.\n\nSince the whole WordPress ecosystem has an expectation for receiving HTML when rendering or editing a post, the block editor transforms its data into something that can be saved in `post_content` through serialization. This assures that there's a single source of truth for the content, and that this source remains readable and compatible with all the tools that interact with WordPress content at the present. Were we to store the object tree separately, we would face the risk of `post_content` and the tree getting out of sync and the problem of data duplication in both places.\n\nThus, the serialization process converts the block tree into HTML using HTML comments as explicit block delimiters\u2014which can contain the attributes in non-HTML form. This is the act of printing invisible marks on the printed page that leave a trace of the original structured intention.\n\nThis is one end of the process. The other is how to recreate the collection of blocks whenever a post is to be edited again. A formal grammar defines how the serialized representation of a block editor post should be loaded, just as some basic rules define how to turn the tree into an HTML-like string. The block editor's posts aren't designed to be edited by hand; they aren't designed to be edited as HTML documents because the block editor posts aren't HTML in essence.\n\nThey just happen, incidentally, to be stored inside of `post_content` in a way in which they require no transformation in order to be viewable by any legacy system. It's true that loading the stored HTML into a browser without the corresponding machinery might degrade the experience, and if it included dynamic blocks of content, the dynamic elements may not load, server-generated content may not appear, and interactive content may remain static. However, it at least protects against not being able to view block editor posts on themes and installations that are blocks-unaware, and it provides the most accessible way to the content. In other words, the post remains mostly intact even if the saved HTML is rendered as is.\n\n### Delimiters and parsing expression grammar\n\nWe chose instead to try to find a way to keep the formality, explicitness, and unambiguity in the existing HTML syntax. Within the HTML there were a number of options.\n\nOf these options, a novel approach was suggested: by storing data in HTML comments, we would know that we wouldn't break the rest of the HTML in the document, that browsers should ignore it, and that we could simplify our approach to parsing the document.\n\nUnique to HTML comments is the fact that they cannot legitimately exist in ambiguous places, such as inside of HTML attributes like `<img alt='data-id=\"14\"'>`. Comments are also quite permissive. Whereas HTML attributes are complicated to parse properly, comments are quite easily described by a leading `<!--` followed by anything except `--` until the first `-->`. This simplicity and permissiveness means that the parser can be implemented in several ways without needing to understand HTML properly, and we have the liberty to use more convenient syntax inside of the comment\u2014we only need to escape double-hyphen sequences. We take advantage of this in how we store block attributes: as JSON literals inside the comment.\n\nAfter running this through the parser, we're left with a simple object we can manipulate idiomatically, and we don't have to worry about escaping or unescaping the data. It's handled for us through the serialization process. Because the comments are so different from other HTML tags and because we can perform a first-pass to extract the top-level blocks, we don't actually depend on having fully valid HTML!\n\nThis has dramatic implications for how simple and performant we can make our parser. These explicit boundaries also protect damage in a single block from bleeding into other blocks or tarnishing the entire document. It also allows the system to identify unrecognized blocks before rendering them.\n\n_N.B.:_ The defining aspects of blocks are their semantics and the isolation mechanism they provide: in other words, their identity. On the other hand, where their data is stored is a more liberal aspect. Blocks support more than just static local data (via JSON literals inside the HTML comment or within the block's HTML), and more mechanisms (_e.g._, global blocks or otherwise resorting to storage in complementary `WP_Post` objects) are expected. See [attributes](\/docs\/reference-guides\/block-api\/block-attributes.md) for details.\n\n### The anatomy of a serialized block\n\nWhen blocks are saved to the content after the editing session, its attributes\u2014depending on the nature of the block\u2014are serialized to these explicit comment delimiters.\n\n```html\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"source.jpg\" alt=\"\" \/><\/figure>\n<!-- \/wp:image -->\n```\n\nA purely dynamic block that is to be server-rendered before display could look like this:\n\n```html\n<!-- wp:latest-posts {\"postsToShow\":4,\"displayPostDate\":true} \/-->\n```\n\n## The data lifecycle\n\nIn summary, the block editor workflow parses the saved document to an in-memory tree of blocks, using token delimiters to help. During editing, all manipulations happen within the block tree. The process ends by serializing the blocks back to the `post_content`.\n\nThe workflow process relies on a serialization\/parser pair to persist posts. Hypothetically, the post data structure could be stored using a plugin or retrieved from a remote JSON file to be converted to the block tree.\n"
    },
    {
        "path": "\/markdown\/explanations\/architecture\/full-site-editing-templates.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Site Editing Templates<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Template and template part flows<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This document will explain the internals of how templates and templates parts are rendered in the frontend and edited in the backend.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Storage<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Just like the regular templates, the block templates live initially as files in the theme folder but the main difference is that the user can edit these templates in the UI in the Site Editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When a user edits a template (or template-part), the initial theme template file is kept as is but a forked version of the template is saved to the <code>wp_template<\/code> custom post type (or <code>wp_template_part<\/code> for template parts).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>These capabilities mean that at any point in time, a mix of template files (from the theme) and CPT templates (the edited templates) are used to render the frontend of the site.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Synchronization<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order to simplify the algorithm used to edit and render the templates from two different places, we performed an operation called \"template synchronization\".<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The synchronization consists of duplicating the theme templates in the <code>wp_template<\/code> (and <code>wp_template_part<\/code>) custom templates with an <code>auto-draft<\/code> status. When a user edits these templates, the status is updated to <code>publish<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This means:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The rendering\/fetching of templates only need to consider the custom post type templates. It is not necessary to fetch the template files from the theme folder directly. The synchronization will ensure these are duplicated in the CPT.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Untouched theme templates have the <code>auto-draft<\/code> status.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Edited theme templates have the <code>publish<\/code> status.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The synchronization is important for two different flows:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>When editing the template and template parts, the site editor frontend fetches the edited and available templates through the REST API. This means that for all <code>GET<\/code> API requests performed to the <code>wp-templates<\/code> and <code>wp-template-parts<\/code> endpoint synchronization is required.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>When rendering a template (sometimes referred to as \"resolving a template\"): this is the algorithm that WordPress follows to traverse the template hierarchy and find the right template to render for the current page being loaded.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>When exporting a block theme, we need to export all its templates back as files. The synchronization is required to simplify the operation and only export the CPT templates.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Switching themes<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Since block themes make use of templates that can refer to each other and that can be saved to a custom post type, it becomes possible to mix templates and template parts from different themes. For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>A user might like the \"header\" template part of theme A and would like to use it in theme B.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>A user might like the \"contact\" template from theme A and would like to use it in theme B.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Enabling these flows will require well thought UIs and experience. For the current phase of Full-site editing, we're starting by forbidding these possibilities and making template and template-parts theme specific.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That said, it is still important to keep track of where the template and template part come from initially. From which theme, it's based. We do so by saving a <code>theme<\/code> post meta containing the theme identifier for each template and template part CPT entry.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the future, we might consider allowing the user to mix template and template parts with different <code>theme<\/code> post meta values.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Site Editing Templates\n\n## Template and template part flows\n\nThis document will explain the internals of how templates and templates parts are rendered in the frontend and edited in the backend.\n\n## Storage\n\nJust like the regular templates, the block templates live initially as files in the theme folder but the main difference is that the user can edit these templates in the UI in the Site Editor.\n\nWhen a user edits a template (or template-part), the initial theme template file is kept as is but a forked version of the template is saved to the `wp_template` custom post type (or `wp_template_part` for template parts).\n\nThese capabilities mean that at any point in time, a mix of template files (from the theme) and CPT templates (the edited templates) are used to render the frontend of the site.\n\n## Synchronization\n\nIn order to simplify the algorithm used to edit and render the templates from two different places, we performed an operation called \"template synchronization\".\n\nThe synchronization consists of duplicating the theme templates in the `wp_template` (and `wp_template_part`) custom templates with an `auto-draft` status. When a user edits these templates, the status is updated to `publish`.\n\nThis means:\n\n-   The rendering\/fetching of templates only need to consider the custom post type templates. It is not necessary to fetch the template files from the theme folder directly. The synchronization will ensure these are duplicated in the CPT.\n-   Untouched theme templates have the `auto-draft` status.\n-   Edited theme templates have the `publish` status.\n\nThe synchronization is important for two different flows:\n\n-   When editing the template and template parts, the site editor frontend fetches the edited and available templates through the REST API. This means that for all `GET` API requests performed to the `wp-templates` and `wp-template-parts` endpoint synchronization is required.\n-   When rendering a template (sometimes referred to as \"resolving a template\"): this is the algorithm that WordPress follows to traverse the template hierarchy and find the right template to render for the current page being loaded.\n-   When exporting a block theme, we need to export all its templates back as files. The synchronization is required to simplify the operation and only export the CPT templates.\n\n## Switching themes\n\nSince block themes make use of templates that can refer to each other and that can be saved to a custom post type, it becomes possible to mix templates and template parts from different themes. For example:\n\n-   A user might like the \"header\" template part of theme A and would like to use it in theme B.\n-   A user might like the \"contact\" template from theme A and would like to use it in theme B.\n\nEnabling these flows will require well thought UIs and experience. For the current phase of Full-site editing, we're starting by forbidding these possibilities and making template and template-parts theme specific.\n\nThat said, it is still important to keep track of where the template and template part come from initially. From which theme, it's based. We do so by saving a `theme` post meta containing the theme identifier for each template and template part CPT entry.\n\nIn the future, we might consider allowing the user to mix template and template parts with different `theme` post meta values.\n"
    },
    {
        "path": "\/markdown\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Block Editor Handbook<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Welcome to the Block Editor Handbook.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/wordpress.org\/gutenberg\/\"><strong>Block Editor<\/strong><\/a> is a modern paradigm for WordPress site building and publishing. It uses a modular system of <strong>blocks<\/strong> to compose and format content and is designed to create rich and flexible layouts for websites and digital products.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The Block Editor consists of several primary elements, as shown in the following figure:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/trunk\/docs\/assets\/overview-block-editor-2023.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Quick view of the Block Editor<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>The elements highlighted are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Inserter:<\/strong> A panel for inserting blocks into the content canvas<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Content canvas:<\/strong> The content editor, which holds content created with blocks<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Settings Panel<\/strong> A panel for configuring a block\u2019s settings when selected or the settings of the post<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Through the Block Editor, you create content modularly using blocks. Many <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/core-blocks\/\">blocks<\/a> are available in WordPress by default, and you can also <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/create-block\/\">create your own<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A <a href=\"https:\/\/developer.wordpress.org\/block-editor\/explanations\/architecture\/key-concepts\/#blocks\">block<\/a> is a discrete element such as a Paragraph, Heading, Media, or Embed. Each block is treated as a separate element with individual editing and format controls. When all these components are pieced together, they make up the content of the page or post, which is then <a href=\"https:\/\/developer.wordpress.org\/block-editor\/explanations\/architecture\/data-flow\/#serialization-and-parsing\">stored in the WordPress database<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The Block Editor is the result of the work done on the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/faq\/#what-is-gutenberg\"><strong>Gutenberg project<\/strong><\/a>, which aims to revolutionize the WordPress editing experience.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Besides offering an <a href=\"https:\/\/wordpress.org\/gutenberg\/\">enhanced editing experience<\/a> through visual content creation tools, the Block Editor is also a powerful developer platform with a <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/\">rich feature set of APIs<\/a> that allow it to be manipulated and extended in countless ways.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Navigating this handbook<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This handbook is focused on block development and is divided into five major sections.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/\">Getting Started<\/a>:<\/strong> For those just starting out with block development, this is where you can get set up with a <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/\">development environment<\/a> and learn the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/\">fundamentals of block development<\/a>. Its <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/quick-start-guide\/\">Quick Start Guide<\/a> and <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/tutorial\/\">Tutorial: Build your first block<\/a> are great places to start learning block development.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/\">How-to Guides<\/a>:<\/strong> Here, you can build on what you learned in the Getting Started section and learn how to solve particular problems. You will also find tutorials and example code to reuse in your own projects, such as <a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/data-basics\/\">working with WordPress data<\/a> or <a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/curating-the-editor-experience\/\">Curating the Editor Experience<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/\">Reference Guides<\/a>:<\/strong> This section is the heart of the handbook and is where you can get down to the nitty-gritty and look up the details of the particular API you\u2019re working with or need information on. Among other things, the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/\">Block API Reference<\/a> covers most of what you will want to do with a block, and each <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/components\/\">component<\/a> and <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/\">package<\/a> is also documented here. <em>Components are also documented via <a href=\"https:\/\/wordpress.github.io\/gutenberg\/?path=\/story\/docs-introduction--page\">Storybook<\/a>.<\/em><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/explanations\/\">Explanations<\/a>:<\/strong> This section enables you to go deeper and reinforce your practical knowledge with a theoretical understanding of the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/explanations\/architecture\/\">Architecture<\/a> of the Block Editor.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/contributors\/\">Contributor Guide<\/a>:<\/strong> Gutenberg is open-source software, and everyone is welcome to contribute to the project. This section details how to contribute, whether with <a href=\"https:\/\/developer.wordpress.org\/block-editor\/contributors\/code\/\">code<\/a>, <a href=\"https:\/\/developer.wordpress.org\/block-editor\/contributors\/design\/\">design<\/a>, <a href=\"https:\/\/developer.wordpress.org\/block-editor\/contributors\/documentation\/\">documentation<\/a>, or in some other way.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Further resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This handbook should be considered the canonical resource for all things related to block development. However, there are other resources that can help you.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/news\/\">WordPress Developer Blog<\/a>:<\/strong> An ever-growing resource of technical articles covering specific topics related to block development and a wide variety of use cases. The blog is also an excellent way to <a href=\"https:\/\/developer.wordpress.org\/news\/tag\/roundup\/\">keep up with the latest developments in WordPress<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/learn.wordpress.org\/\">Learn WordPress<\/a>:<\/strong> The WordPress hub for learning resources where you can find courses like <a href=\"https:\/\/learn.wordpress.org\/course\/introduction-to-block-development-build-your-first-custom-block\/\">Introduction to Block Development: Build your first custom block<\/a>, <a href=\"https:\/\/learn.wordpress.org\/course\/converting-a-shortcode-to-a-block\/\">Converting a Shortcode to a Block<\/a>, or <a href=\"https:\/\/learn.wordpress.org\/course\/using-the-wordpress-data-layer\/\">Using the WordPress Data Layer<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/wordpress.tv\/\">WordPress.tv<\/a>:<\/strong> A hub of WordPress-related videos (from talks at WordCamps to recordings of online workshops) curated and moderated by the WordPress community. You\u2019re sure to find something to aid your learning about <a href=\"https:\/\/wordpress.tv\/?s=block%20development&amp;sort=newest\">block development<\/a> or the <a href=\"https:\/\/wordpress.tv\/?s=block%20editor&amp;sort=relevance\">Block Editor<\/a> here.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/\">Gutenberg repository<\/a>:<\/strong> Development of the Block Editor takes place on GitHub. The repository contains the code of interesting packages such as <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\"><code>block-library<\/code><\/a> (core blocks) or <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/components\"><code>components<\/code><\/a> (common UI elements). <em>The <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\">block-development-examples<\/a> repository is another useful reference.<\/em><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/wordpress.org\/documentation\/\">End User Documentation<\/a>:<\/strong> This documentation site is targeted to the end user (not developers), where you can also find documentation about the <a href=\"https:\/\/wordpress.org\/documentation\/category\/block-editor\/\">Block Editor<\/a> and <a href=\"https:\/\/wordpress.org\/documentation\/article\/work-with-blocks\/\">working with blocks<\/a>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Are you in the right place?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Block Editor Handbook is designed for those looking to create and develop for the Block Editor. However, it's important to note that there are multiple other handbooks available within the <a href=\"http:\/\/developer.wordpress.org\/\">Developer Resources<\/a> that you may find beneficial:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/themes\">Theme Handbook<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/plugins\">Plugin Handbook<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/apis\">Common APIs Handbook<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/advanced-administration\">Advanced Administration Handbook<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/rest-api\/\">REST API Handbook<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/coding-standards\">Coding Standards Handbook<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Block Editor Handbook\n\nWelcome to the Block Editor Handbook.\n\nThe [**Block Editor**](https:\/\/wordpress.org\/gutenberg\/) is a modern paradigm for WordPress site building and publishing. It uses a modular system of **blocks** to compose and format content and is designed to create rich and flexible layouts for websites and digital products.\n\nThe Block Editor consists of several primary elements, as shown in the following figure:\n\n![Quick view of the Block Editor](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/trunk\/docs\/assets\/overview-block-editor-2023.png)\n\nThe elements highlighted are:\n\n1. **Inserter:** A panel for inserting blocks into the content canvas\n2. **Content canvas:** The content editor, which holds content created with blocks\n3. **Settings Panel** A panel for configuring a block\u2019s settings when selected or the settings of the post\n\nThrough the Block Editor, you create content modularly using blocks. Many [blocks](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/core-blocks\/) are available in WordPress by default, and you can also [create your own](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/create-block\/).\n\nA [block](https:\/\/developer.wordpress.org\/block-editor\/explanations\/architecture\/key-concepts\/#blocks) is a discrete element such as a Paragraph, Heading, Media, or Embed. Each block is treated as a separate element with individual editing and format controls. When all these components are pieced together, they make up the content of the page or post, which is then [stored in the WordPress database](https:\/\/developer.wordpress.org\/block-editor\/explanations\/architecture\/data-flow\/#serialization-and-parsing).\n\nThe Block Editor is the result of the work done on the [**Gutenberg project**](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/faq\/#what-is-gutenberg), which aims to revolutionize the WordPress editing experience.\n\nBesides offering an [enhanced editing experience](https:\/\/wordpress.org\/gutenberg\/) through visual content creation tools, the Block Editor is also a powerful developer platform with a [rich feature set of APIs](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/) that allow it to be manipulated and extended in countless ways.\n\n## Navigating this handbook\n\nThis handbook is focused on block development and is divided into five major sections.\n\n- **[Getting Started](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/):** For those just starting out with block development, this is where you can get set up with a [development environment](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/) and learn the [fundamentals of block development](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/). Its [Quick Start Guide](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/quick-start-guide\/) and [Tutorial: Build your first block](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/tutorial\/) are great places to start learning block development.\n\n- **[How-to Guides](https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/):** Here, you can build on what you learned in the Getting Started section and learn how to solve particular problems. You will also find tutorials and example code to reuse in your own projects, such as [working with WordPress data](https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/data-basics\/) or [Curating the Editor Experience](https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/curating-the-editor-experience\/).\n\n- **[Reference Guides](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/):** This section is the heart of the handbook and is where you can get down to the nitty-gritty and look up the details of the particular API you\u2019re working with or need information on. Among other things, the [Block API Reference](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/) covers most of what you will want to do with a block, and each [component](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/components\/) and [package](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/) is also documented here. _Components are also documented via [Storybook](https:\/\/wordpress.github.io\/gutenberg\/?path=\/story\/docs-introduction--page)._\n\n- **[Explanations](https:\/\/developer.wordpress.org\/block-editor\/explanations\/):** This section enables you to go deeper and reinforce your practical knowledge with a theoretical understanding of the [Architecture](https:\/\/developer.wordpress.org\/block-editor\/explanations\/architecture\/) of the Block Editor.\n\n- **[Contributor Guide](https:\/\/developer.wordpress.org\/block-editor\/contributors\/):** Gutenberg is open-source software, and everyone is welcome to contribute to the project. This section details how to contribute, whether with [code](https:\/\/developer.wordpress.org\/block-editor\/contributors\/code\/), [design](https:\/\/developer.wordpress.org\/block-editor\/contributors\/design\/), [documentation](https:\/\/developer.wordpress.org\/block-editor\/contributors\/documentation\/), or in some other way.\n\n## Further resources\n\nThis handbook should be considered the canonical resource for all things related to block development. However, there are other resources that can help you.\n\n- **[WordPress Developer Blog](https:\/\/developer.wordpress.org\/news\/):** An ever-growing resource of technical articles covering specific topics related to block development and a wide variety of use cases. The blog is also an excellent way to [keep up with the latest developments in WordPress](https:\/\/developer.wordpress.org\/news\/tag\/roundup\/).\n- **[Learn WordPress](https:\/\/learn.wordpress.org\/):** The WordPress hub for learning resources where you can find courses like [Introduction to Block Development: Build your first custom block](https:\/\/learn.wordpress.org\/course\/introduction-to-block-development-build-your-first-custom-block\/), [Converting a Shortcode to a Block](https:\/\/learn.wordpress.org\/course\/converting-a-shortcode-to-a-block\/), or [Using the WordPress Data Layer](https:\/\/learn.wordpress.org\/course\/using-the-wordpress-data-layer\/)\n- **[WordPress.tv](https:\/\/wordpress.tv\/):** A hub of WordPress-related videos (from talks at WordCamps to recordings of online workshops) curated and moderated by the WordPress community. You\u2019re sure to find something to aid your learning about [block development](https:\/\/wordpress.tv\/?s=block%20development&sort=newest) or the [Block Editor](https:\/\/wordpress.tv\/?s=block%20editor&sort=relevance) here.\n- **[Gutenberg repository](https:\/\/github.com\/WordPress\/gutenberg\/):** Development of the Block Editor takes place on GitHub. The repository contains the code of interesting packages such as [`block-library`](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src) (core blocks) or [`components`](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/components) (common UI elements). _The [block-development-examples](https:\/\/github.com\/WordPress\/block-development-examples) repository is another useful reference._\n- **[End User Documentation](https:\/\/wordpress.org\/documentation\/):** This documentation site is targeted to the end user (not developers), where you can also find documentation about the [Block Editor](https:\/\/wordpress.org\/documentation\/category\/block-editor\/) and [working with blocks](https:\/\/wordpress.org\/documentation\/article\/work-with-blocks\/).\n\n## Are you in the right place?\n\nThe Block Editor Handbook is designed for those looking to create and develop for the Block Editor. However, it's important to note that there are multiple other handbooks available within the [Developer Resources](http:\/\/developer.wordpress.org\/) that you may find beneficial:\n\n- [Theme Handbook](https:\/\/developer.wordpress.org\/themes)\n- [Plugin Handbook](https:\/\/developer.wordpress.org\/plugins)\n- [Common APIs Handbook](https:\/\/developer.wordpress.org\/apis)\n- [Advanced Administration Handbook](https:\/\/developer.wordpress.org\/advanced-administration)\n- [REST API Handbook](https:\/\/developer.wordpress.org\/rest-api\/)\n- [Coding Standards Handbook](https:\/\/developer.wordpress.org\/coding-standards)\n"
    },
    {
        "path": "\/markdown\/reference-guides\/core-blocks.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Core Blocks Reference<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This page lists the blocks included in the block-library package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Items marked with a strikeout (~~strikeout~~) are explicitly disabled.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Blocks marked with <strong>Experimental:<\/strong> true are only available when Gutenberg is active.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Blocks marked with <strong>Experimental:<\/strong> fse are only available in the Site Editor.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- START TOKEN Autogenerated - DO NOT EDIT -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Archives<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display a date archive of your posts. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/archives\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/archives<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> widgets<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> displayAsDropdown, showLabel, showPostCounts, type<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Audio<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Embed a simple audio player. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/audio\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/audio<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> media<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, anchor, interactivity (clientNavigation), spacing (margin, padding)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> autoplay, caption, id, loop, preload, src<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Avatar<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Add a user\u2019s avatar. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/avatar\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/avatar<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, color (~~background~~, ~~text~~), interactivity (clientNavigation), spacing (margin, padding), ~~alignWide~~, ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> isLink, linkTarget, size, userId<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Pattern<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Reuse this design across your site. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/block\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/block<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> reusable<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> interactivity (clientNavigation), ~~customClassName~~, ~~html~~, ~~inserter~~, ~~renaming~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> content, ref<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Button<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Prompt visitors to take action with a button-style link. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/button\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/button<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> design<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/buttons<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> anchor, color (background, gradients, text), interactivity (clientNavigation), shadow (), spacing (padding), typography (fontSize, lineHeight), ~~alignWide~~, ~~align~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> backgroundColor, gradient, linkTarget, placeholder, rel, tagName, text, textAlign, textColor, title, type, url, width<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Buttons<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Prompt visitors to take action with a group of button-style links. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/buttons\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/buttons<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> design<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Allowed Blocks:<\/strong> core\/button<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (full, wide), anchor, interactivity (clientNavigation), layout (default, ~~allowInheriting~~, ~~allowSwitching~~), spacing (blockGap, margin), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Calendar<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A calendar of your site\u2019s posts. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/calendar\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/calendar<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> widgets<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, color (background, link, text), interactivity (clientNavigation), typography (fontSize, lineHeight)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> month, year<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Categories List<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display a list of all categories. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/categories\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/categories<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> widgets<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> displayAsDropdown, showEmpty, showHierarchy, showOnlyTopLevel, showPostCounts<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Code<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display code snippets that respect your spacing and tabs. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/code\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/code<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> text<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (wide), anchor, color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> content<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Column<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A single column within a columns block. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/column\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/column<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> design<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/columns<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> anchor, color (background, button, gradients, heading, link, text), interactivity (clientNavigation), layout, shadow, spacing (blockGap, padding), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> allowedBlocks, templateLock, verticalAlignment, width<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Columns<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display content in multiple columns, with blocks added to each column. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/columns\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/columns<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> design<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Allowed Blocks:<\/strong> core\/column<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (full, wide), anchor, color (background, button, gradients, heading, link, text), interactivity (clientNavigation), layout (default, ~~allowEditing~~, ~~allowInheriting~~, ~~allowSwitching~~), shadow, spacing (blockGap, margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> isStackedOnMobile, templateLock, verticalAlignment<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Comment Author Avatar (deprecated)<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This block is deprecated. Please use the Avatar block instead. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comment-author-avatar\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/comment-author-avatar<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Experimental:<\/strong> fse<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Ancestor:<\/strong> core\/comment-template<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, ~~text~~), interactivity (clientNavigation), spacing (margin, padding), ~~html~~, ~~inserter~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> height, width<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Comment Author Name<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays the name of the author of the comment. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comment-author-name\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/comment-author-name<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Ancestor:<\/strong> core\/comment-template<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> isLink, linkTarget, textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Comment Content<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays the contents of a comment. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comment-content\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/comment-content<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Ancestor:<\/strong> core\/comment-template<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, link, text), spacing (padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Comment Date<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays the date on which the comment was posted. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comment-date\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/comment-date<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Ancestor:<\/strong> core\/comment-template<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> format, isLink<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Comment Edit Link<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays a link to edit the comment in the WordPress Dashboard. This link is only visible to users with the edit comment capability. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comment-edit-link\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/comment-edit-link<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Ancestor:<\/strong> core\/comment-template<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, link, ~~text~~), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> linkTarget, textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Comment Reply Link<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays a link to reply to a comment. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comment-reply-link\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/comment-reply-link<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Ancestor:<\/strong> core\/comment-template<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, link, ~~text~~), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Comment Template<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Contains the block elements used to display a comment, like the title, date, author, avatar and more. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comment-template\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/comment-template<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> design<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/comments<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Comments<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>An advanced block that allows displaying post comments using different visual configurations. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comments\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/comments<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (full, wide), color (background, gradients, heading, link, text), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> legacy, tagName<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Comments Pagination<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays a paginated navigation to next\/previous set of comments, when applicable. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comments-pagination\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/comments-pagination<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/comments<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Allowed Blocks:<\/strong> core\/comments-pagination-previous, core\/comments-pagination-numbers, core\/comments-pagination-next<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, color (background, gradients, link, text), interactivity (clientNavigation), layout (default, ~~allowInheriting~~, ~~allowSwitching~~), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> paginationArrow<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Comments Next Page<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays the next comment's page link. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comments-pagination-next\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/comments-pagination-next<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/comments-pagination<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, ~~text~~), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> label<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Comments Page Numbers<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays a list of page numbers for comments pagination. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comments-pagination-numbers\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/comments-pagination-numbers<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/comments-pagination<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, ~~text~~), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Comments Previous Page<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays the previous comment's page link. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comments-pagination-previous\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/comments-pagination-previous<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/comments-pagination<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, ~~text~~), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> label<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Comments Title<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays a title with the number of comments. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comments-title\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/comments-title<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Ancestor:<\/strong> core\/comments<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~anchor~~, ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> level, showCommentsCount, showPostTitle, textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Cover<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Add an image or video with a text overlay. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/cover\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/cover<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> media<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, anchor, color (heading, text, ~~background~~, ~~enableContrastChecker~~), dimensions (aspectRatio), interactivity (clientNavigation), layout (~~allowJustification~~), spacing (blockGap, margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> allowedBlocks, alt, backgroundType, contentPosition, customGradient, customOverlayColor, dimRatio, focalPoint, gradient, hasParallax, id, isDark, isRepeated, isUserOverlayColor, minHeight, minHeightUnit, overlayColor, tagName, templateLock, url, useFeaturedImage<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Details<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Hide and show additional content. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/details\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/details<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> text<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (full, wide), color (background, gradients, link, text), interactivity (clientNavigation), layout (~~allowEditing~~), spacing (blockGap, margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> showContent, summary<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Embed<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Add a block that displays content pulled from other sites, like Twitter or YouTube. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/embed\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/embed<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> embed<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, interactivity (clientNavigation), spacing (margin)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> allowResponsive, caption, previewable, providerNameSlug, responsive, type, url<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">File<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Add a link to a downloadable file. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/file\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/file<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> media<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, anchor, color (background, gradients, link, ~~text~~), interactivity, spacing (margin, padding)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> displayPreview, downloadButtonText, fileId, fileName, href, id, previewHeight, showDownloadButton, textLinkHref, textLinkTarget<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Footnotes<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display footnotes added to the page. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/footnotes\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/footnotes<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> text<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~, ~~inserter~~, ~~multiple~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Form<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A form. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/form\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/form<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Experimental:<\/strong> true<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> common<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Allowed Blocks:<\/strong> core\/paragraph, core\/heading, core\/form-input, core\/form-submit-button, core\/form-submission-notification, core\/group, core\/columns<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> anchor, color (background, gradients, link, text), spacing (margin, padding), typography (fontSize, lineHeight), ~~className~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> action, email, method, submissionMethod<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Input Field<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The basic building block for forms. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/form-input\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/form-input<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Experimental:<\/strong> true<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> common<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Ancestor:<\/strong> core\/form<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> anchor, spacing (margin), ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> inlineLabel, label, name, placeholder, required, type, value, visibilityPermissions<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Form Submission Notification<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Provide a notification message after the form has been submitted. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/form-submission-notification\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/form-submission-notification<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Experimental:<\/strong> true<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> common<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Ancestor:<\/strong> core\/form<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> type<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Form Submit Button<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A submission button for forms. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/form-submit-button\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/form-submit-button<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Experimental:<\/strong> true<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> common<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Ancestor:<\/strong> core\/form<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Allowed Blocks:<\/strong> core\/buttons, core\/button<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Classic<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Use the classic WordPress editor. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/freeform\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/freeform<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> text<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> ~~className~~, ~~customClassName~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> content<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Gallery<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display multiple images in a rich gallery. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/gallery\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/gallery<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> media<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Allowed Blocks:<\/strong> core\/image<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, anchor, color (background, gradients, ~~text~~), interactivity (clientNavigation), layout (default, ~~allowEditing~~, ~~allowInheriting~~, ~~allowSwitching~~), spacing (blockGap, margin, padding), units (em, px, rem, vh, vw), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> allowResize, caption, columns, fixedHeight, ids, imageCrop, images, linkTarget, linkTo, randomOrder, shortCodeTransforms, sizeSlug<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Group<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Gather blocks in a layout container. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/group\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/group<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> design<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (full, wide), anchor, ariaLabel, background (backgroundImage, backgroundSize), color (background, button, gradients, heading, link, text), dimensions (minHeight), interactivity (clientNavigation), layout (allowSizingOnChildren), position (sticky), spacing (blockGap, margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> allowedBlocks, tagName, templateLock<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Heading<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Introduce new sections and organize content to help visitors (and search engines) understand the structure of your content. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/heading\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/heading<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> text<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> __unstablePasteTextInline, align (full, wide), anchor, className, color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> content, level, placeholder, textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Home Link<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Create a link that always points to the homepage of the site. Usually not necessary if there is already a site title link present in the header. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/home-link\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/home-link<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> design<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/navigation<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> label<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Custom HTML<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Add custom HTML code and preview it as you edit. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/html\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/html<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> widgets<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> interactivity (clientNavigation), ~~className~~, ~~customClassName~~, ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> content<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Image<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Insert an image to make a visual statement. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/image\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/image<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> media<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (center, full, left, right, wide), anchor, color (~~background~~, ~~text~~), filter (duotone), interactivity, shadow ()<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> alt, aspectRatio, caption, height, href, id, lightbox, linkClass, linkDestination, linkTarget, rel, scale, sizeSlug, title, url, width<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Latest Comments<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display a list of your most recent comments. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/latest-comments\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/latest-comments<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> widgets<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> commentsToShow, displayAvatar, displayDate, displayExcerpt<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Latest Posts<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display a list of your most recent posts. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/latest-posts\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/latest-posts<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> widgets<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> addLinkToFeaturedImage, categories, columns, displayAuthor, displayFeaturedImage, displayPostContent, displayPostContentRadio, displayPostDate, excerptLength, featuredImageAlign, featuredImageSizeHeight, featuredImageSizeSlug, featuredImageSizeWidth, order, orderBy, postLayout, postsToShow, selectedAuthor<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">List<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Create a bulleted or numbered list. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/list\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/list<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> text<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Allowed Blocks:<\/strong> core\/list-item<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> __unstablePasteTextInline, anchor, color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~className~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> ordered, placeholder, reversed, start, type, values<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">List item<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Create a list item. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/list-item\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/list-item<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> text<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/list<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Allowed Blocks:<\/strong> core\/list<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~className~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> content, placeholder<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Login\/out<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Show login &amp; logout links. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/loginout\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/loginout<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> className, interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> displayLoginAsForm, redirectToCurrent<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Media &amp; Text<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Set media and words side-by-side for a richer layout. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/media-text\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/media-text<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> media<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (full, wide), anchor, color (background, gradients, heading, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> align, allowedBlocks, focalPoint, href, imageFill, isStackedOnMobile, linkClass, linkDestination, linkTarget, mediaAlt, mediaId, mediaLink, mediaPosition, mediaSizeSlug, mediaType, mediaUrl, mediaWidth, rel, useFeaturedImage, verticalAlignment<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Unsupported<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Your site doesn\u2019t include support for this block. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/missing\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/missing<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> text<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> interactivity (clientNavigation), ~~className~~, ~~customClassName~~, ~~html~~, ~~inserter~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> originalContent, originalName, originalUndelimitedContent<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">More<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Content before this block will be shown in the excerpt on your archives page. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/more\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/more<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> design<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> interactivity (clientNavigation), ~~className~~, ~~customClassName~~, ~~html~~, ~~multiple~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> customText, noTeaser<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Navigation<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A collection of blocks that allow visitors to get around your site. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/navigation\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/navigation<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Allowed Blocks:<\/strong> core\/navigation-link, core\/search, core\/social-links, core\/page-list, core\/spacer, core\/home-link, core\/site-title, core\/site-logo, core\/navigation-submenu, core\/loginout, core\/buttons<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (full, wide), ariaLabel, inserter, interactivity, layout (allowSizingOnChildren, default, ~~allowInheriting~~, ~~allowSwitching~~, ~~allowVerticalAlignment~~), spacing (blockGap, units), typography (fontSize, lineHeight), ~~html~~, ~~renaming~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> __unstableLocation, backgroundColor, customBackgroundColor, customOverlayBackgroundColor, customOverlayTextColor, customTextColor, hasIcon, icon, maxNestingLevel, openSubmenusOnClick, overlayBackgroundColor, overlayMenu, overlayTextColor, ref, rgbBackgroundColor, rgbTextColor, showSubmenuIcon, templateLock, textColor<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Custom Link<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Add a page, link, or another item to your navigation. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/navigation-link\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/navigation-link<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> design<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/navigation<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Allowed Blocks:<\/strong> core\/navigation-link, core\/navigation-submenu, core\/page-list<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~renaming~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> description, id, isTopLevelLink, kind, label, opensInNewTab, rel, title, type, url<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Submenu<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Add a submenu to your navigation. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/navigation-submenu\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/navigation-submenu<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> design<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/navigation<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> interactivity (clientNavigation), ~~html~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> description, id, isTopLevelItem, kind, label, opensInNewTab, rel, title, type, url<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Page Break<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Separate your content into a multi-page experience. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/nextpage\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/nextpage<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> design<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/post-content<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> interactivity (clientNavigation), ~~className~~, ~~customClassName~~, ~~html~~<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Page List<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display a list of all pages. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/page-list\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/page-list<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> widgets<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Allowed Blocks:<\/strong> core\/page-list-item<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> isNested, parentPageID<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Page List Item<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays a page inside a list of all pages. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/page-list-item\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/page-list-item<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> widgets<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/page-list<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> interactivity (clientNavigation), ~~html~~, ~~inserter~~, ~~lock~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> hasChildren, id, label, link, title<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Paragraph<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Start with the basic building block of all narrative. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/paragraph\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/paragraph<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> text<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> __unstablePasteTextInline, anchor, color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~className~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> align, content, direction, dropCap, placeholder<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Pattern placeholder<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Show a block pattern. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/pattern\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/pattern<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> interactivity (clientNavigation), ~~html~~, ~~inserter~~, ~~renaming~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> slug<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Author<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display post author details such as name, avatar, and bio. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-author\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/post-author<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> avatarSize, byline, isLink, linkTarget, showAvatar, showBio, textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Author Biography<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The author biography. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-author-biography\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/post-author-biography<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Author Name<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The author name. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-author-name\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/post-author-name<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> isLink, linkTarget, textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Comment (deprecated)<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This block is deprecated. Please use the Comments block instead. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-comment\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/post-comment<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Experimental:<\/strong> fse<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Allowed Blocks:<\/strong> core\/avatar, core\/comment-author-name, core\/comment-content, core\/comment-date, core\/comment-edit-link, core\/comment-reply-link<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> interactivity (clientNavigation), ~~html~~, ~~inserter~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> commentId<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Comments Count<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display a post's comments count. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-comments-count\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/post-comments-count<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Experimental:<\/strong> fse<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Comments Form<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display a post's comments form. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-comments-form\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/post-comments-form<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, heading, link, text), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Comments Link<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays the link to the current post comments. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-comments-link\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/post-comments-link<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Experimental:<\/strong> fse<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, link, ~~text~~), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Content<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays the contents of a post or page. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-content\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/post-content<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (full, wide), color (background, gradients, link, text), dimensions (minHeight), layout, spacing (blockGap), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Date<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display the publish date for an entry such as a post or page. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-date\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/post-date<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> displayType, format, isLink, textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Excerpt<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display the excerpt. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-excerpt\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/post-excerpt<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> excerptLength, moreText, showMoreOnNewLine, textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Featured Image<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display a post's featured image. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-featured-image\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/post-featured-image<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (center, full, left, right, wide), color (~~background~~, ~~text~~), interactivity (clientNavigation), shadow (), spacing (margin, padding), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> aspectRatio, customGradient, customOverlayColor, dimRatio, gradient, height, isLink, linkTarget, overlayColor, rel, scale, sizeSlug, useFirstImageFromPost, width<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Post Navigation Link<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays the next or previous post link that is adjacent to the current post. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-navigation-link\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/post-navigation-link<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, link, text), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> arrow, label, linkLabel, showTitle, taxonomy, textAlign, type<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Post Template<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Contains the block elements used to render a post, like the title, date, featured image, content or excerpt, and more. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-template\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/post-template<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/query<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (full, wide), color (background, gradients, link, text), interactivity (clientNavigation), layout, spacing (blockGap), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Post Terms<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Post terms. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-terms\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/post-terms<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> prefix, separator, suffix, term, textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Time To Read<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Show minutes required to finish reading the post. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-time-to-read\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/post-time-to-read<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Experimental:<\/strong> true<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Title<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays the title of a post, page, or any other content-type. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-title\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/post-title<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (full, wide), color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> isLink, level, linkTarget, rel, textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Preformatted<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Add text that respects your spacing and tabs, and also allows styling. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/preformatted\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/preformatted<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> text<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> anchor, color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> content<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Pullquote<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Give special visual emphasis to a quote from your text. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/pullquote\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/pullquote<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> text<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (full, left, right, wide), anchor, color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> citation, textAlign, value<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Query Loop<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>An advanced block that allows displaying post types based on different query parameters and visual configurations. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/query\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/query<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (full, wide), interactivity, layout, ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> enhancedPagination, namespace, query, queryId, tagName<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">No results<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Contains the block elements used to render content when no query results are found. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/query-no-results\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/query-no-results<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/query<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, color (background, gradients, link, text), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Pagination<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays a paginated navigation to next\/previous set of posts, when applicable. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/query-pagination\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/query-pagination<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Ancestor:<\/strong> core\/query<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Allowed Blocks:<\/strong> core\/query-pagination-previous, core\/query-pagination-numbers, core\/query-pagination-next<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, color (background, gradients, link, text), interactivity (clientNavigation), layout (default, ~~allowInheriting~~, ~~allowSwitching~~), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> paginationArrow, showLabel<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Next Page<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays the next posts page link. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/query-pagination-next\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/query-pagination-next<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/query-pagination<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, ~~text~~), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> label<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Page Numbers<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays a list of page numbers for pagination. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/query-pagination-numbers\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/query-pagination-numbers<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/query-pagination<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, ~~text~~), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> midSize<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Previous Page<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays the previous posts page link. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/query-pagination-previous\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/query-pagination-previous<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/query-pagination<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, ~~text~~), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> label<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Query Title<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display the query title. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/query-title\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/query-title<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (full, wide), color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> level, showPrefix, showSearchTerm, textAlign, type<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Quote<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Give quoted text visual emphasis. \"In quoting others, we cite ourselves.\" \u2014 Julio Cort\u00e1zar (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/quote\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/quote<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> text<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> anchor, color (background, gradients, heading, link, text), interactivity (clientNavigation), layout (~~allowEditing~~), spacing (blockGap), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> citation, textAlign, value<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Read More<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays the link of a post, page, or any other content-type. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/read-more\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/read-more<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> content, linkTarget<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">RSS<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display entries from any RSS or Atom feed. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/rss\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/rss<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> widgets<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, interactivity (clientNavigation), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> blockLayout, columns, displayAuthor, displayDate, displayExcerpt, excerptLength, feedURL, itemsToShow<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Search<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Help visitors find your content. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/search\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/search<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> widgets<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (center, left, right), color (background, gradients, text), interactivity, typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> buttonPosition, buttonText, buttonUseIcon, isSearchFieldHidden, label, placeholder, query, showLabel, width, widthUnit<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Separator<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Create a break between ideas or sections with a horizontal separator. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/separator\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/separator<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> design<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (center, full, wide), anchor, color (background, gradients, ~~enableContrastChecker~~, ~~text~~), interactivity (clientNavigation), spacing (margin)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> opacity<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Shortcode<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Insert additional custom elements with a WordPress shortcode. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/shortcode\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/shortcode<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> widgets<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> ~~className~~, ~~customClassName~~, ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> text<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Site Logo<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display an image to represent this site. Update this block and the changes apply everywhere. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/site-logo\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/site-logo<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, color (~~background~~, ~~text~~), interactivity (clientNavigation), spacing (margin, padding), ~~alignWide~~, ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> isLink, linkTarget, shouldSyncIcon, width<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Site Tagline<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Describe in a few words what the site is about. The tagline can be used in search results or when sharing on social networks even if it\u2019s not displayed in the theme design. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/site-tagline\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/site-tagline<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (full, wide), color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Site Title<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Displays the name of this site. Update the block, and the changes apply everywhere it\u2019s used. This will also appear in the browser title bar and in search results. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/site-title\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/site-title<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (full, wide), color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> isLink, level, linkTarget, textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Social Icon<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display an icon linking to a social media profile or site. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/social-link\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/social-link<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> widgets<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Parent:<\/strong> core\/social-links<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> interactivity (clientNavigation), ~~html~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> label, rel, service, url<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Social Icons<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display icons linking to your social media profiles or sites. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/social-links\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/social-links<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> widgets<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Allowed Blocks:<\/strong> core\/social-link<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (center, left, right), anchor, color (background, gradients, ~~enableContrastChecker~~, ~~text~~), interactivity (clientNavigation), layout (default, ~~allowInheriting~~, ~~allowSwitching~~, ~~allowVerticalAlignment~~), spacing (blockGap, margin, padding, units)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> customIconBackgroundColor, customIconColor, iconBackgroundColor, iconBackgroundColorValue, iconColor, iconColorValue, openInNewTab, showLabels, size<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Spacer<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Add white space between blocks and customize its height. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/spacer\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/spacer<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> design<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> anchor, interactivity (clientNavigation), spacing (margin)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> height, width<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Table<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Create structured content in rows and columns to display information. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/table\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/table<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> text<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, anchor, color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> body, caption, foot, hasFixedLayout, head<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Table of Contents<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Summarize your post with a list of headings. Add HTML anchors to Heading blocks to link them here. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/table-of-contents\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/table-of-contents<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Experimental:<\/strong> true<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> layout<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> headings, onlyIncludeCurrentPage<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Tag Cloud<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A cloud of your most used tags. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/tag-cloud\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/tag-cloud<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> widgets<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, interactivity (clientNavigation), spacing (margin, padding), typography (lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> largestFontSize, numberOfTags, showTagCounts, smallestFontSize, taxonomy<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Template Part<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Edit the different global regions of your site, like the header, footer, sidebar, or create your own. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/template-part\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/template-part<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, interactivity (clientNavigation), ~~html~~, ~~renaming~~, ~~reusable~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> area, slug, tagName, theme<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Term Description<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Display the description of categories, tags and custom taxonomies when viewing an archive. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/term-description\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/term-description<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align (full, wide), color (background, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Text Columns (deprecated)<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This block is deprecated. Please use the Columns block instead. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/text-columns\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/text-columns<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> design<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> interactivity (clientNavigation), ~~inserter~~<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> columns, content, width<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Verse<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Insert poetry. Use special spacing formats. Or quote song lyrics. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/verse\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/verse<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> text<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> anchor, color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> content, textAlign<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Video<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Embed a video from your media library or upload a new one. (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/video\">Source<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Name:<\/strong> core\/video<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Category:<\/strong> media<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Supports:<\/strong> align, anchor, interactivity (clientNavigation), spacing (margin, padding)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Attributes:<\/strong> autoplay, caption, controls, id, loop, muted, playsInline, poster, preload, src, tracks<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN Autogenerated - DO NOT EDIT -->\n<!-- \/wp:html -->",
        "markdown": "# Core Blocks Reference\n\nThis page lists the blocks included in the block-library package.\n\n-   Items marked with a strikeout (~~strikeout~~) are explicitly disabled.\n-   Blocks marked with **Experimental:** true are only available when Gutenberg is active.\n-   Blocks marked with **Experimental:** fse are only available in the Site Editor.\n\n<!-- START TOKEN Autogenerated - DO NOT EDIT -->\n\n## Archives\n\nDisplay a date archive of your posts. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/archives))\n\n-\t**Name:** core\/archives\n-\t**Category:** widgets\n-\t**Supports:** align, interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** displayAsDropdown, showLabel, showPostCounts, type\n\n## Audio\n\nEmbed a simple audio player. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/audio))\n\n-\t**Name:** core\/audio\n-\t**Category:** media\n-\t**Supports:** align, anchor, interactivity (clientNavigation), spacing (margin, padding)\n-\t**Attributes:** autoplay, caption, id, loop, preload, src\n\n## Avatar\n\nAdd a user\u2019s avatar. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/avatar))\n\n-\t**Name:** core\/avatar\n-\t**Category:** theme\n-\t**Supports:** align, color (~~background~~, ~~text~~), interactivity (clientNavigation), spacing (margin, padding), ~~alignWide~~, ~~html~~\n-\t**Attributes:** isLink, linkTarget, size, userId\n\n## Pattern\n\nReuse this design across your site. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/block))\n\n-\t**Name:** core\/block\n-\t**Category:** reusable\n-\t**Supports:** interactivity (clientNavigation), ~~customClassName~~, ~~html~~, ~~inserter~~, ~~renaming~~\n-\t**Attributes:** content, ref\n\n## Button\n\nPrompt visitors to take action with a button-style link. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/button))\n\n-\t**Name:** core\/button\n-\t**Category:** design\n-\t**Parent:** core\/buttons\n-\t**Supports:** anchor, color (background, gradients, text), interactivity (clientNavigation), shadow (), spacing (padding), typography (fontSize, lineHeight), ~~alignWide~~, ~~align~~, ~~reusable~~\n-\t**Attributes:** backgroundColor, gradient, linkTarget, placeholder, rel, tagName, text, textAlign, textColor, title, type, url, width\n\n## Buttons\n\nPrompt visitors to take action with a group of button-style links. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/buttons))\n\n-\t**Name:** core\/buttons\n-\t**Category:** design\n-\t**Allowed Blocks:** core\/button\n-\t**Supports:** align (full, wide), anchor, interactivity (clientNavigation), layout (default, ~~allowInheriting~~, ~~allowSwitching~~), spacing (blockGap, margin), typography (fontSize, lineHeight), ~~html~~\n\n## Calendar\n\nA calendar of your site\u2019s posts. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/calendar))\n\n-\t**Name:** core\/calendar\n-\t**Category:** widgets\n-\t**Supports:** align, color (background, link, text), interactivity (clientNavigation), typography (fontSize, lineHeight)\n-\t**Attributes:** month, year\n\n## Categories List\n\nDisplay a list of all categories. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/categories))\n\n-\t**Name:** core\/categories\n-\t**Category:** widgets\n-\t**Supports:** align, interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** displayAsDropdown, showEmpty, showHierarchy, showOnlyTopLevel, showPostCounts\n\n## Code\n\nDisplay code snippets that respect your spacing and tabs. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/code))\n\n-\t**Name:** core\/code\n-\t**Category:** text\n-\t**Supports:** align (wide), anchor, color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight)\n-\t**Attributes:** content\n\n## Column\n\nA single column within a columns block. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/column))\n\n-\t**Name:** core\/column\n-\t**Category:** design\n-\t**Parent:** core\/columns\n-\t**Supports:** anchor, color (background, button, gradients, heading, link, text), interactivity (clientNavigation), layout, shadow, spacing (blockGap, padding), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n-\t**Attributes:** allowedBlocks, templateLock, verticalAlignment, width\n\n## Columns\n\nDisplay content in multiple columns, with blocks added to each column. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/columns))\n\n-\t**Name:** core\/columns\n-\t**Category:** design\n-\t**Allowed Blocks:** core\/column\n-\t**Supports:** align (full, wide), anchor, color (background, button, gradients, heading, link, text), interactivity (clientNavigation), layout (default, ~~allowEditing~~, ~~allowInheriting~~, ~~allowSwitching~~), shadow, spacing (blockGap, margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** isStackedOnMobile, templateLock, verticalAlignment\n\n## Comment Author Avatar (deprecated)\n\nThis block is deprecated. Please use the Avatar block instead. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comment-author-avatar))\n\n-\t**Name:** core\/comment-author-avatar\n-\t**Experimental:** fse\n-\t**Category:** theme\n-\t**Ancestor:** core\/comment-template\n-\t**Supports:** color (background, ~~text~~), interactivity (clientNavigation), spacing (margin, padding), ~~html~~, ~~inserter~~\n-\t**Attributes:** height, width\n\n## Comment Author Name\n\nDisplays the name of the author of the comment. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comment-author-name))\n\n-\t**Name:** core\/comment-author-name\n-\t**Category:** theme\n-\t**Ancestor:** core\/comment-template\n-\t**Supports:** color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** isLink, linkTarget, textAlign\n\n## Comment Content\n\nDisplays the contents of a comment. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comment-content))\n\n-\t**Name:** core\/comment-content\n-\t**Category:** theme\n-\t**Ancestor:** core\/comment-template\n-\t**Supports:** color (background, gradients, link, text), spacing (padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** textAlign\n\n## Comment Date\n\nDisplays the date on which the comment was posted. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comment-date))\n\n-\t**Name:** core\/comment-date\n-\t**Category:** theme\n-\t**Ancestor:** core\/comment-template\n-\t**Supports:** color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** format, isLink\n\n## Comment Edit Link\n\nDisplays a link to edit the comment in the WordPress Dashboard. This link is only visible to users with the edit comment capability. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comment-edit-link))\n\n-\t**Name:** core\/comment-edit-link\n-\t**Category:** theme\n-\t**Ancestor:** core\/comment-template\n-\t**Supports:** color (background, gradients, link, ~~text~~), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** linkTarget, textAlign\n\n## Comment Reply Link\n\nDisplays a link to reply to a comment. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comment-reply-link))\n\n-\t**Name:** core\/comment-reply-link\n-\t**Category:** theme\n-\t**Ancestor:** core\/comment-template\n-\t**Supports:** color (background, gradients, link, ~~text~~), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** textAlign\n\n## Comment Template\n\nContains the block elements used to display a comment, like the title, date, author, avatar and more. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comment-template))\n\n-\t**Name:** core\/comment-template\n-\t**Category:** design\n-\t**Parent:** core\/comments\n-\t**Supports:** align, interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n\n## Comments\n\nAn advanced block that allows displaying post comments using different visual configurations. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comments))\n\n-\t**Name:** core\/comments\n-\t**Category:** theme\n-\t**Supports:** align (full, wide), color (background, gradients, heading, link, text), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** legacy, tagName\n\n## Comments Pagination\n\nDisplays a paginated navigation to next\/previous set of comments, when applicable. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comments-pagination))\n\n-\t**Name:** core\/comments-pagination\n-\t**Category:** theme\n-\t**Parent:** core\/comments\n-\t**Allowed Blocks:** core\/comments-pagination-previous, core\/comments-pagination-numbers, core\/comments-pagination-next\n-\t**Supports:** align, color (background, gradients, link, text), interactivity (clientNavigation), layout (default, ~~allowInheriting~~, ~~allowSwitching~~), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n-\t**Attributes:** paginationArrow\n\n## Comments Next Page\n\nDisplays the next comment's page link. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comments-pagination-next))\n\n-\t**Name:** core\/comments-pagination-next\n-\t**Category:** theme\n-\t**Parent:** core\/comments-pagination\n-\t**Supports:** color (background, gradients, ~~text~~), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n-\t**Attributes:** label\n\n## Comments Page Numbers\n\nDisplays a list of page numbers for comments pagination. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comments-pagination-numbers))\n\n-\t**Name:** core\/comments-pagination-numbers\n-\t**Category:** theme\n-\t**Parent:** core\/comments-pagination\n-\t**Supports:** color (background, gradients, ~~text~~), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n\n## Comments Previous Page\n\nDisplays the previous comment's page link. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comments-pagination-previous))\n\n-\t**Name:** core\/comments-pagination-previous\n-\t**Category:** theme\n-\t**Parent:** core\/comments-pagination\n-\t**Supports:** color (background, gradients, ~~text~~), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n-\t**Attributes:** label\n\n## Comments Title\n\nDisplays a title with the number of comments. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/comments-title))\n\n-\t**Name:** core\/comments-title\n-\t**Category:** theme\n-\t**Ancestor:** core\/comments\n-\t**Supports:** align, color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~anchor~~, ~~html~~\n-\t**Attributes:** level, showCommentsCount, showPostTitle, textAlign\n\n## Cover\n\nAdd an image or video with a text overlay. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/cover))\n\n-\t**Name:** core\/cover\n-\t**Category:** media\n-\t**Supports:** align, anchor, color (heading, text, ~~background~~, ~~enableContrastChecker~~), dimensions (aspectRatio), interactivity (clientNavigation), layout (~~allowJustification~~), spacing (blockGap, margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** allowedBlocks, alt, backgroundType, contentPosition, customGradient, customOverlayColor, dimRatio, focalPoint, gradient, hasParallax, id, isDark, isRepeated, isUserOverlayColor, minHeight, minHeightUnit, overlayColor, tagName, templateLock, url, useFeaturedImage\n\n## Details\n\nHide and show additional content. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/details))\n\n-\t**Name:** core\/details\n-\t**Category:** text\n-\t**Supports:** align (full, wide), color (background, gradients, link, text), interactivity (clientNavigation), layout (~~allowEditing~~), spacing (blockGap, margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** showContent, summary\n\n## Embed\n\nAdd a block that displays content pulled from other sites, like Twitter or YouTube. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/embed))\n\n-\t**Name:** core\/embed\n-\t**Category:** embed\n-\t**Supports:** align, interactivity (clientNavigation), spacing (margin)\n-\t**Attributes:** allowResponsive, caption, previewable, providerNameSlug, responsive, type, url\n\n## File\n\nAdd a link to a downloadable file. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/file))\n\n-\t**Name:** core\/file\n-\t**Category:** media\n-\t**Supports:** align, anchor, color (background, gradients, link, ~~text~~), interactivity, spacing (margin, padding)\n-\t**Attributes:** displayPreview, downloadButtonText, fileId, fileName, href, id, previewHeight, showDownloadButton, textLinkHref, textLinkTarget\n\n## Footnotes\n\nDisplay footnotes added to the page. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/footnotes))\n\n-\t**Name:** core\/footnotes\n-\t**Category:** text\n-\t**Supports:** color (background, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~, ~~inserter~~, ~~multiple~~, ~~reusable~~\n\n## Form\n\nA form. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/form))\n\n-\t**Name:** core\/form\n-\t**Experimental:** true\n-\t**Category:** common\n-\t**Allowed Blocks:** core\/paragraph, core\/heading, core\/form-input, core\/form-submit-button, core\/form-submission-notification, core\/group, core\/columns\n-\t**Supports:** anchor, color (background, gradients, link, text), spacing (margin, padding), typography (fontSize, lineHeight), ~~className~~\n-\t**Attributes:** action, email, method, submissionMethod\n\n## Input Field\n\nThe basic building block for forms. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/form-input))\n\n-\t**Name:** core\/form-input\n-\t**Experimental:** true\n-\t**Category:** common\n-\t**Ancestor:** core\/form\n-\t**Supports:** anchor, spacing (margin), ~~reusable~~\n-\t**Attributes:** inlineLabel, label, name, placeholder, required, type, value, visibilityPermissions\n\n## Form Submission Notification\n\nProvide a notification message after the form has been submitted. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/form-submission-notification))\n\n-\t**Name:** core\/form-submission-notification\n-\t**Experimental:** true\n-\t**Category:** common\n-\t**Ancestor:** core\/form\n-\t**Attributes:** type\n\n## Form Submit Button\n\nA submission button for forms. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/form-submit-button))\n\n-\t**Name:** core\/form-submit-button\n-\t**Experimental:** true\n-\t**Category:** common\n-\t**Ancestor:** core\/form\n-\t**Allowed Blocks:** core\/buttons, core\/button\n\n## Classic\n\nUse the classic WordPress editor. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/freeform))\n\n-\t**Name:** core\/freeform\n-\t**Category:** text\n-\t**Supports:** ~~className~~, ~~customClassName~~, ~~reusable~~\n-\t**Attributes:** content\n\n## Gallery\n\nDisplay multiple images in a rich gallery. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/gallery))\n\n-\t**Name:** core\/gallery\n-\t**Category:** media\n-\t**Allowed Blocks:** core\/image\n-\t**Supports:** align, anchor, color (background, gradients, ~~text~~), interactivity (clientNavigation), layout (default, ~~allowEditing~~, ~~allowInheriting~~, ~~allowSwitching~~), spacing (blockGap, margin, padding), units (em, px, rem, vh, vw), ~~html~~\n-\t**Attributes:** allowResize, caption, columns, fixedHeight, ids, imageCrop, images, linkTarget, linkTo, randomOrder, shortCodeTransforms, sizeSlug\n\n## Group\n\nGather blocks in a layout container. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/group))\n\n-\t**Name:** core\/group\n-\t**Category:** design\n-\t**Supports:** align (full, wide), anchor, ariaLabel, background (backgroundImage, backgroundSize), color (background, button, gradients, heading, link, text), dimensions (minHeight), interactivity (clientNavigation), layout (allowSizingOnChildren), position (sticky), spacing (blockGap, margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** allowedBlocks, tagName, templateLock\n\n## Heading\n\nIntroduce new sections and organize content to help visitors (and search engines) understand the structure of your content. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/heading))\n\n-\t**Name:** core\/heading\n-\t**Category:** text\n-\t**Supports:** __unstablePasteTextInline, align (full, wide), anchor, className, color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight)\n-\t**Attributes:** content, level, placeholder, textAlign\n\n## Home Link\n\nCreate a link that always points to the homepage of the site. Usually not necessary if there is already a site title link present in the header. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/home-link))\n\n-\t**Name:** core\/home-link\n-\t**Category:** design\n-\t**Parent:** core\/navigation\n-\t**Supports:** interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n-\t**Attributes:** label\n\n## Custom HTML\n\nAdd custom HTML code and preview it as you edit. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/html))\n\n-\t**Name:** core\/html\n-\t**Category:** widgets\n-\t**Supports:** interactivity (clientNavigation), ~~className~~, ~~customClassName~~, ~~html~~\n-\t**Attributes:** content\n\n## Image\n\nInsert an image to make a visual statement. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/image))\n\n-\t**Name:** core\/image\n-\t**Category:** media\n-\t**Supports:** align (center, full, left, right, wide), anchor, color (~~background~~, ~~text~~), filter (duotone), interactivity, shadow ()\n-\t**Attributes:** alt, aspectRatio, caption, height, href, id, lightbox, linkClass, linkDestination, linkTarget, rel, scale, sizeSlug, title, url, width\n\n## Latest Comments\n\nDisplay a list of your most recent comments. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/latest-comments))\n\n-\t**Name:** core\/latest-comments\n-\t**Category:** widgets\n-\t**Supports:** align, interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** commentsToShow, displayAvatar, displayDate, displayExcerpt\n\n## Latest Posts\n\nDisplay a list of your most recent posts. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/latest-posts))\n\n-\t**Name:** core\/latest-posts\n-\t**Category:** widgets\n-\t**Supports:** align, color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** addLinkToFeaturedImage, categories, columns, displayAuthor, displayFeaturedImage, displayPostContent, displayPostContentRadio, displayPostDate, excerptLength, featuredImageAlign, featuredImageSizeHeight, featuredImageSizeSlug, featuredImageSizeWidth, order, orderBy, postLayout, postsToShow, selectedAuthor\n\n## List\n\nCreate a bulleted or numbered list. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/list))\n\n-\t**Name:** core\/list\n-\t**Category:** text\n-\t**Allowed Blocks:** core\/list-item\n-\t**Supports:** __unstablePasteTextInline, anchor, color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~className~~\n-\t**Attributes:** ordered, placeholder, reversed, start, type, values\n\n## List item\n\nCreate a list item. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/list-item))\n\n-\t**Name:** core\/list-item\n-\t**Category:** text\n-\t**Parent:** core\/list\n-\t**Allowed Blocks:** core\/list\n-\t**Supports:** interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~className~~\n-\t**Attributes:** content, placeholder\n\n## Login\/out\n\nShow login & logout links. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/loginout))\n\n-\t**Name:** core\/loginout\n-\t**Category:** theme\n-\t**Supports:** className, interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight)\n-\t**Attributes:** displayLoginAsForm, redirectToCurrent\n\n## Media & Text\n\nSet media and words side-by-side for a richer layout. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/media-text))\n\n-\t**Name:** core\/media-text\n-\t**Category:** media\n-\t**Supports:** align (full, wide), anchor, color (background, gradients, heading, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** align, allowedBlocks, focalPoint, href, imageFill, isStackedOnMobile, linkClass, linkDestination, linkTarget, mediaAlt, mediaId, mediaLink, mediaPosition, mediaSizeSlug, mediaType, mediaUrl, mediaWidth, rel, useFeaturedImage, verticalAlignment\n\n## Unsupported\n\nYour site doesn\u2019t include support for this block. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/missing))\n\n-\t**Name:** core\/missing\n-\t**Category:** text\n-\t**Supports:** interactivity (clientNavigation), ~~className~~, ~~customClassName~~, ~~html~~, ~~inserter~~, ~~reusable~~\n-\t**Attributes:** originalContent, originalName, originalUndelimitedContent\n\n## More\n\nContent before this block will be shown in the excerpt on your archives page. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/more))\n\n-\t**Name:** core\/more\n-\t**Category:** design\n-\t**Supports:** interactivity (clientNavigation), ~~className~~, ~~customClassName~~, ~~html~~, ~~multiple~~\n-\t**Attributes:** customText, noTeaser\n\n## Navigation\n\nA collection of blocks that allow visitors to get around your site. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/navigation))\n\n-\t**Name:** core\/navigation\n-\t**Category:** theme\n-\t**Allowed Blocks:** core\/navigation-link, core\/search, core\/social-links, core\/page-list, core\/spacer, core\/home-link, core\/site-title, core\/site-logo, core\/navigation-submenu, core\/loginout, core\/buttons\n-\t**Supports:** align (full, wide), ariaLabel, inserter, interactivity, layout (allowSizingOnChildren, default, ~~allowInheriting~~, ~~allowSwitching~~, ~~allowVerticalAlignment~~), spacing (blockGap, units), typography (fontSize, lineHeight), ~~html~~, ~~renaming~~\n-\t**Attributes:** __unstableLocation, backgroundColor, customBackgroundColor, customOverlayBackgroundColor, customOverlayTextColor, customTextColor, hasIcon, icon, maxNestingLevel, openSubmenusOnClick, overlayBackgroundColor, overlayMenu, overlayTextColor, ref, rgbBackgroundColor, rgbTextColor, showSubmenuIcon, templateLock, textColor\n\n## Custom Link\n\nAdd a page, link, or another item to your navigation. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/navigation-link))\n\n-\t**Name:** core\/navigation-link\n-\t**Category:** design\n-\t**Parent:** core\/navigation\n-\t**Allowed Blocks:** core\/navigation-link, core\/navigation-submenu, core\/page-list\n-\t**Supports:** interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~renaming~~, ~~reusable~~\n-\t**Attributes:** description, id, isTopLevelLink, kind, label, opensInNewTab, rel, title, type, url\n\n## Submenu\n\nAdd a submenu to your navigation. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/navigation-submenu))\n\n-\t**Name:** core\/navigation-submenu\n-\t**Category:** design\n-\t**Parent:** core\/navigation\n-\t**Supports:** interactivity (clientNavigation), ~~html~~, ~~reusable~~\n-\t**Attributes:** description, id, isTopLevelItem, kind, label, opensInNewTab, rel, title, type, url\n\n## Page Break\n\nSeparate your content into a multi-page experience. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/nextpage))\n\n-\t**Name:** core\/nextpage\n-\t**Category:** design\n-\t**Parent:** core\/post-content\n-\t**Supports:** interactivity (clientNavigation), ~~className~~, ~~customClassName~~, ~~html~~\n\n## Page List\n\nDisplay a list of all pages. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/page-list))\n\n-\t**Name:** core\/page-list\n-\t**Category:** widgets\n-\t**Allowed Blocks:** core\/page-list-item\n-\t**Supports:** interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n-\t**Attributes:** isNested, parentPageID\n\n## Page List Item\n\nDisplays a page inside a list of all pages. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/page-list-item))\n\n-\t**Name:** core\/page-list-item\n-\t**Category:** widgets\n-\t**Parent:** core\/page-list\n-\t**Supports:** interactivity (clientNavigation), ~~html~~, ~~inserter~~, ~~lock~~, ~~reusable~~\n-\t**Attributes:** hasChildren, id, label, link, title\n\n## Paragraph\n\nStart with the basic building block of all narrative. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/paragraph))\n\n-\t**Name:** core\/paragraph\n-\t**Category:** text\n-\t**Supports:** __unstablePasteTextInline, anchor, color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~className~~\n-\t**Attributes:** align, content, direction, dropCap, placeholder\n\n## Pattern placeholder\n\nShow a block pattern. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/pattern))\n\n-\t**Name:** core\/pattern\n-\t**Category:** theme\n-\t**Supports:** interactivity (clientNavigation), ~~html~~, ~~inserter~~, ~~renaming~~\n-\t**Attributes:** slug\n\n## Author\n\nDisplay post author details such as name, avatar, and bio. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-author))\n\n-\t**Name:** core\/post-author\n-\t**Category:** theme\n-\t**Supports:** color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** avatarSize, byline, isLink, linkTarget, showAvatar, showBio, textAlign\n\n## Author Biography\n\nThe author biography. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-author-biography))\n\n-\t**Name:** core\/post-author-biography\n-\t**Category:** theme\n-\t**Supports:** color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight)\n-\t**Attributes:** textAlign\n\n## Author Name\n\nThe author name. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-author-name))\n\n-\t**Name:** core\/post-author-name\n-\t**Category:** theme\n-\t**Supports:** color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** isLink, linkTarget, textAlign\n\n## Comment (deprecated)\n\nThis block is deprecated. Please use the Comments block instead. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-comment))\n\n-\t**Name:** core\/post-comment\n-\t**Experimental:** fse\n-\t**Category:** theme\n-\t**Allowed Blocks:** core\/avatar, core\/comment-author-name, core\/comment-content, core\/comment-date, core\/comment-edit-link, core\/comment-reply-link\n-\t**Supports:** interactivity (clientNavigation), ~~html~~, ~~inserter~~\n-\t**Attributes:** commentId\n\n## Comments Count\n\nDisplay a post's comments count. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-comments-count))\n\n-\t**Name:** core\/post-comments-count\n-\t**Experimental:** fse\n-\t**Category:** theme\n-\t**Supports:** color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** textAlign\n\n## Comments Form\n\nDisplay a post's comments form. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-comments-form))\n\n-\t**Name:** core\/post-comments-form\n-\t**Category:** theme\n-\t**Supports:** color (background, gradients, heading, link, text), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** textAlign\n\n## Comments Link\n\nDisplays the link to the current post comments. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-comments-link))\n\n-\t**Name:** core\/post-comments-link\n-\t**Experimental:** fse\n-\t**Category:** theme\n-\t**Supports:** color (background, link, ~~text~~), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** textAlign\n\n## Content\n\nDisplays the contents of a post or page. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-content))\n\n-\t**Name:** core\/post-content\n-\t**Category:** theme\n-\t**Supports:** align (full, wide), color (background, gradients, link, text), dimensions (minHeight), layout, spacing (blockGap), typography (fontSize, lineHeight), ~~html~~\n\n## Date\n\nDisplay the publish date for an entry such as a post or page. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-date))\n\n-\t**Name:** core\/post-date\n-\t**Category:** theme\n-\t**Supports:** color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** displayType, format, isLink, textAlign\n\n## Excerpt\n\nDisplay the excerpt. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-excerpt))\n\n-\t**Name:** core\/post-excerpt\n-\t**Category:** theme\n-\t**Supports:** color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** excerptLength, moreText, showMoreOnNewLine, textAlign\n\n## Featured Image\n\nDisplay a post's featured image. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-featured-image))\n\n-\t**Name:** core\/post-featured-image\n-\t**Category:** theme\n-\t**Supports:** align (center, full, left, right, wide), color (~~background~~, ~~text~~), interactivity (clientNavigation), shadow (), spacing (margin, padding), ~~html~~\n-\t**Attributes:** aspectRatio, customGradient, customOverlayColor, dimRatio, gradient, height, isLink, linkTarget, overlayColor, rel, scale, sizeSlug, useFirstImageFromPost, width\n\n## Post Navigation Link\n\nDisplays the next or previous post link that is adjacent to the current post. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-navigation-link))\n\n-\t**Name:** core\/post-navigation-link\n-\t**Category:** theme\n-\t**Supports:** color (background, link, text), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n-\t**Attributes:** arrow, label, linkLabel, showTitle, taxonomy, textAlign, type\n\n## Post Template\n\nContains the block elements used to render a post, like the title, date, featured image, content or excerpt, and more. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-template))\n\n-\t**Name:** core\/post-template\n-\t**Category:** theme\n-\t**Parent:** core\/query\n-\t**Supports:** align (full, wide), color (background, gradients, link, text), interactivity (clientNavigation), layout, spacing (blockGap), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n\n## Post Terms\n\nPost terms. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-terms))\n\n-\t**Name:** core\/post-terms\n-\t**Category:** theme\n-\t**Supports:** color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** prefix, separator, suffix, term, textAlign\n\n## Time To Read\n\nShow minutes required to finish reading the post. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-time-to-read))\n\n-\t**Name:** core\/post-time-to-read\n-\t**Experimental:** true\n-\t**Category:** theme\n-\t**Supports:** color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** textAlign\n\n## Title\n\nDisplays the title of a post, page, or any other content-type. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/post-title))\n\n-\t**Name:** core\/post-title\n-\t**Category:** theme\n-\t**Supports:** align (full, wide), color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** isLink, level, linkTarget, rel, textAlign\n\n## Preformatted\n\nAdd text that respects your spacing and tabs, and also allows styling. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/preformatted))\n\n-\t**Name:** core\/preformatted\n-\t**Category:** text\n-\t**Supports:** anchor, color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight)\n-\t**Attributes:** content\n\n## Pullquote\n\nGive special visual emphasis to a quote from your text. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/pullquote))\n\n-\t**Name:** core\/pullquote\n-\t**Category:** text\n-\t**Supports:** align (full, left, right, wide), anchor, color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight)\n-\t**Attributes:** citation, textAlign, value\n\n## Query Loop\n\nAn advanced block that allows displaying post types based on different query parameters and visual configurations. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/query))\n\n-\t**Name:** core\/query\n-\t**Category:** theme\n-\t**Supports:** align (full, wide), interactivity, layout, ~~html~~\n-\t**Attributes:** enhancedPagination, namespace, query, queryId, tagName\n\n## No results\n\nContains the block elements used to render content when no query results are found. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/query-no-results))\n\n-\t**Name:** core\/query-no-results\n-\t**Category:** theme\n-\t**Parent:** core\/query\n-\t**Supports:** align, color (background, gradients, link, text), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n\n## Pagination\n\nDisplays a paginated navigation to next\/previous set of posts, when applicable. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/query-pagination))\n\n-\t**Name:** core\/query-pagination\n-\t**Category:** theme\n-\t**Ancestor:** core\/query\n-\t**Allowed Blocks:** core\/query-pagination-previous, core\/query-pagination-numbers, core\/query-pagination-next\n-\t**Supports:** align, color (background, gradients, link, text), interactivity (clientNavigation), layout (default, ~~allowInheriting~~, ~~allowSwitching~~), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n-\t**Attributes:** paginationArrow, showLabel\n\n## Next Page\n\nDisplays the next posts page link. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/query-pagination-next))\n\n-\t**Name:** core\/query-pagination-next\n-\t**Category:** theme\n-\t**Parent:** core\/query-pagination\n-\t**Supports:** color (background, gradients, ~~text~~), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n-\t**Attributes:** label\n\n## Page Numbers\n\nDisplays a list of page numbers for pagination. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/query-pagination-numbers))\n\n-\t**Name:** core\/query-pagination-numbers\n-\t**Category:** theme\n-\t**Parent:** core\/query-pagination\n-\t**Supports:** color (background, gradients, ~~text~~), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n-\t**Attributes:** midSize\n\n## Previous Page\n\nDisplays the previous posts page link. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/query-pagination-previous))\n\n-\t**Name:** core\/query-pagination-previous\n-\t**Category:** theme\n-\t**Parent:** core\/query-pagination\n-\t**Supports:** color (background, gradients, ~~text~~), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n-\t**Attributes:** label\n\n## Query Title\n\nDisplay the query title. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/query-title))\n\n-\t**Name:** core\/query-title\n-\t**Category:** theme\n-\t**Supports:** align (full, wide), color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** level, showPrefix, showSearchTerm, textAlign, type\n\n## Quote\n\nGive quoted text visual emphasis. \"In quoting others, we cite ourselves.\" \u2014 Julio Cort\u00e1zar ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/quote))\n\n-\t**Name:** core\/quote\n-\t**Category:** text\n-\t**Supports:** anchor, color (background, gradients, heading, link, text), interactivity (clientNavigation), layout (~~allowEditing~~), spacing (blockGap), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** citation, textAlign, value\n\n## Read More\n\nDisplays the link of a post, page, or any other content-type. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/read-more))\n\n-\t**Name:** core\/read-more\n-\t**Category:** theme\n-\t**Supports:** color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** content, linkTarget\n\n## RSS\n\nDisplay entries from any RSS or Atom feed. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/rss))\n\n-\t**Name:** core\/rss\n-\t**Category:** widgets\n-\t**Supports:** align, interactivity (clientNavigation), ~~html~~\n-\t**Attributes:** blockLayout, columns, displayAuthor, displayDate, displayExcerpt, excerptLength, feedURL, itemsToShow\n\n## Search\n\nHelp visitors find your content. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/search))\n\n-\t**Name:** core\/search\n-\t**Category:** widgets\n-\t**Supports:** align (center, left, right), color (background, gradients, text), interactivity, typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** buttonPosition, buttonText, buttonUseIcon, isSearchFieldHidden, label, placeholder, query, showLabel, width, widthUnit\n\n## Separator\n\nCreate a break between ideas or sections with a horizontal separator. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/separator))\n\n-\t**Name:** core\/separator\n-\t**Category:** design\n-\t**Supports:** align (center, full, wide), anchor, color (background, gradients, ~~enableContrastChecker~~, ~~text~~), interactivity (clientNavigation), spacing (margin)\n-\t**Attributes:** opacity\n\n## Shortcode\n\nInsert additional custom elements with a WordPress shortcode. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/shortcode))\n\n-\t**Name:** core\/shortcode\n-\t**Category:** widgets\n-\t**Supports:** ~~className~~, ~~customClassName~~, ~~html~~\n-\t**Attributes:** text\n\n## Site Logo\n\nDisplay an image to represent this site. Update this block and the changes apply everywhere. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/site-logo))\n\n-\t**Name:** core\/site-logo\n-\t**Category:** theme\n-\t**Supports:** align, color (~~background~~, ~~text~~), interactivity (clientNavigation), spacing (margin, padding), ~~alignWide~~, ~~html~~\n-\t**Attributes:** isLink, linkTarget, shouldSyncIcon, width\n\n## Site Tagline\n\nDescribe in a few words what the site is about. The tagline can be used in search results or when sharing on social networks even if it\u2019s not displayed in the theme design. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/site-tagline))\n\n-\t**Name:** core\/site-tagline\n-\t**Category:** theme\n-\t**Supports:** align (full, wide), color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** textAlign\n\n## Site Title\n\nDisplays the name of this site. Update the block, and the changes apply everywhere it\u2019s used. This will also appear in the browser title bar and in search results. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/site-title))\n\n-\t**Name:** core\/site-title\n-\t**Category:** theme\n-\t**Supports:** align (full, wide), color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** isLink, level, linkTarget, textAlign\n\n## Social Icon\n\nDisplay an icon linking to a social media profile or site. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/social-link))\n\n-\t**Name:** core\/social-link\n-\t**Category:** widgets\n-\t**Parent:** core\/social-links\n-\t**Supports:** interactivity (clientNavigation), ~~html~~, ~~reusable~~\n-\t**Attributes:** label, rel, service, url\n\n## Social Icons\n\nDisplay icons linking to your social media profiles or sites. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/social-links))\n\n-\t**Name:** core\/social-links\n-\t**Category:** widgets\n-\t**Allowed Blocks:** core\/social-link\n-\t**Supports:** align (center, left, right), anchor, color (background, gradients, ~~enableContrastChecker~~, ~~text~~), interactivity (clientNavigation), layout (default, ~~allowInheriting~~, ~~allowSwitching~~, ~~allowVerticalAlignment~~), spacing (blockGap, margin, padding, units)\n-\t**Attributes:** customIconBackgroundColor, customIconColor, iconBackgroundColor, iconBackgroundColorValue, iconColor, iconColorValue, openInNewTab, showLabels, size\n\n## Spacer\n\nAdd white space between blocks and customize its height. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/spacer))\n\n-\t**Name:** core\/spacer\n-\t**Category:** design\n-\t**Supports:** anchor, interactivity (clientNavigation), spacing (margin)\n-\t**Attributes:** height, width\n\n## Table\n\nCreate structured content in rows and columns to display information. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/table))\n\n-\t**Name:** core\/table\n-\t**Category:** text\n-\t**Supports:** align, anchor, color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight)\n-\t**Attributes:** body, caption, foot, hasFixedLayout, head\n\n## Table of Contents\n\nSummarize your post with a list of headings. Add HTML anchors to Heading blocks to link them here. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/table-of-contents))\n\n-\t**Name:** core\/table-of-contents\n-\t**Experimental:** true\n-\t**Category:** layout\n-\t**Supports:** color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** headings, onlyIncludeCurrentPage\n\n## Tag Cloud\n\nA cloud of your most used tags. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/tag-cloud))\n\n-\t**Name:** core\/tag-cloud\n-\t**Category:** widgets\n-\t**Supports:** align, interactivity (clientNavigation), spacing (margin, padding), typography (lineHeight), ~~html~~\n-\t**Attributes:** largestFontSize, numberOfTags, showTagCounts, smallestFontSize, taxonomy\n\n## Template Part\n\nEdit the different global regions of your site, like the header, footer, sidebar, or create your own. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/template-part))\n\n-\t**Name:** core\/template-part\n-\t**Category:** theme\n-\t**Supports:** align, interactivity (clientNavigation), ~~html~~, ~~renaming~~, ~~reusable~~\n-\t**Attributes:** area, slug, tagName, theme\n\n## Term Description\n\nDisplay the description of categories, tags and custom taxonomies when viewing an archive. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/term-description))\n\n-\t**Name:** core\/term-description\n-\t**Category:** theme\n-\t**Supports:** align (full, wide), color (background, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** textAlign\n\n## Text Columns (deprecated)\n\nThis block is deprecated. Please use the Columns block instead. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/text-columns))\n\n-\t**Name:** core\/text-columns\n-\t**Category:** design\n-\t**Supports:** interactivity (clientNavigation), ~~inserter~~\n-\t**Attributes:** columns, content, width\n\n## Verse\n\nInsert poetry. Use special spacing formats. Or quote song lyrics. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/verse))\n\n-\t**Name:** core\/verse\n-\t**Category:** text\n-\t**Supports:** anchor, color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight)\n-\t**Attributes:** content, textAlign\n\n## Video\n\nEmbed a video from your media library or upload a new one. ([Source](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/video))\n\n-\t**Name:** core\/video\n-\t**Category:** media\n-\t**Supports:** align, anchor, interactivity (clientNavigation), spacing (margin, padding)\n-\t**Attributes:** autoplay, caption, controls, id, loop, muted, playsInline, poster, preload, src, tracks\n\n<!-- END TOKEN Autogenerated - DO NOT EDIT -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/filters\/global-styles-filters.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Global Styles Filters<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>WordPress 6.1 has introduced some server-side filters to hook into the <code>theme.json<\/code> data provided at the different data layers:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>wp_theme_json_data_default<\/code>: hooks into the default data provided by WordPress<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp_theme_json_data_blocks<\/code>: hooks into the data provided by the blocks<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp_theme_json_data_theme<\/code>: hooks into the data provided by the theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp_theme_json_data_user<\/code>: hooks into the data provided by the user<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Each filter receives an instance of the <code>WP_Theme_JSON_Data<\/code> class with the data for the respective layer. To provide new data, the filter callback needs to use the <code>update_with( $new_data )<\/code> method, where <code>$new_data<\/code> is a valid <code>theme.json<\/code>-like structure. As with any <code>theme.json<\/code>, the new data needs to declare which <code>version<\/code> of the <code>theme.json<\/code> is using, so it can correctly be migrated to the runtime one, should it be different.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is how to pass a new color palette for the theme and disable the text color UI:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function wpdocs_filter_theme_json_theme( $theme_json ){\n\t$new_data = array(\n\t\t'version'  => 2,\n\t\t'settings' => array(\n\t\t\t'color' => array(\n\t\t\t\t'text'       => false,\n\t\t\t\t'palette'    => array( \/* New palette *\/\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'slug'  => 'foreground',\n\t\t\t\t\t\t'color' => 'black',\n\t\t\t\t\t\t'name'  => __( 'Foreground', 'theme-domain' ),\n\t\t\t\t\t),\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'slug'  => 'background',\n\t\t\t\t\t\t'color' => 'white',\n\t\t\t\t\t\t'name'  => __( 'Background', 'theme-domain' ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t),\n\t);\n\n\treturn $theme_json->update_with( $new_data );\n}\nadd_filter( 'wp_theme_json_data_theme', 'wpdocs_filter_theme_json_theme' );\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# Global Styles Filters\n\nWordPress 6.1 has introduced some server-side filters to hook into the `theme.json` data provided at the different data layers:\n\n- `wp_theme_json_data_default`: hooks into the default data provided by WordPress\n- `wp_theme_json_data_blocks`: hooks into the data provided by the blocks\n- `wp_theme_json_data_theme`: hooks into the data provided by the theme\n- `wp_theme_json_data_user`: hooks into the data provided by the user\n\nEach filter receives an instance of the `WP_Theme_JSON_Data` class with the data for the respective layer. To provide new data, the filter callback needs to use the `update_with( $new_data )` method, where `$new_data` is a valid `theme.json`-like structure. As with any `theme.json`, the new data needs to declare which `version` of the `theme.json` is using, so it can correctly be migrated to the runtime one, should it be different.\n\n_Example:_\n\nThis is how to pass a new color palette for the theme and disable the text color UI:\n\n```php\nfunction wpdocs_filter_theme_json_theme( $theme_json ){\n\t$new_data = array(\n\t\t'version'  => 2,\n\t\t'settings' => array(\n\t\t\t'color' => array(\n\t\t\t\t'text'       => false,\n\t\t\t\t'palette'    => array( \/* New palette *\/\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'slug'  => 'foreground',\n\t\t\t\t\t\t'color' => 'black',\n\t\t\t\t\t\t'name'  => __( 'Foreground', 'theme-domain' ),\n\t\t\t\t\t),\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'slug'  => 'background',\n\t\t\t\t\t\t'color' => 'white',\n\t\t\t\t\t\t'name'  => __( 'Background', 'theme-domain' ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t),\n\t);\n\n\treturn $theme_json->update_with( $new_data );\n}\nadd_filter( 'wp_theme_json_data_theme', 'wpdocs_filter_theme_json_theme' );\n```\n"
    },
    {
        "path": "\/markdown\/reference-guides\/filters\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Hooks Reference<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/developer.wordpress.org\/plugins\/hooks\/\">Hooks<\/a> are a way for one piece of code to interact\/modify another piece of code. They provide one way for plugins and themes to interact with the editor, but they\u2019re also used extensively by WordPress Core itself.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are two types of hooks: <a href=\"https:\/\/developer.wordpress.org\/plugins\/hooks\/actions\/\">Actions<\/a> and <a href=\"https:\/\/developer.wordpress.org\/plugins\/hooks\/filters\/\">Filters<\/a>. In addition to PHP actions and filters, WordPress also provides a mechanism for registering and executing hooks in JavaScript. This functionality is also available on npm as the <a href=\"https:\/\/www.npmjs.com\/package\/@wordpress\/hooks\">@wordpress\/hooks<\/a> package, for general purpose use.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can also learn more about both APIs: <a href=\"https:\/\/codex.wordpress.org\/Plugin_API\/\">PHP<\/a> and <a href=\"\/packages\/hooks\/README.md\">JavaScript<\/a>.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Hooks Reference\n\n[Hooks](https:\/\/developer.wordpress.org\/plugins\/hooks\/) are a way for one piece of code to interact\/modify another piece of code. They provide one way for plugins and themes to interact with the editor, but they\u2019re also used extensively by WordPress Core itself.\n\nThere are two types of hooks: [Actions](https:\/\/developer.wordpress.org\/plugins\/hooks\/actions\/) and [Filters](https:\/\/developer.wordpress.org\/plugins\/hooks\/filters\/). In addition to PHP actions and filters, WordPress also provides a mechanism for registering and executing hooks in JavaScript. This functionality is also available on npm as the [@wordpress\/hooks](https:\/\/www.npmjs.com\/package\/@wordpress\/hooks) package, for general purpose use.\n\nYou can also learn more about both APIs: [PHP](https:\/\/codex.wordpress.org\/Plugin_API\/) and [JavaScript](\/packages\/hooks\/README.md).\n"
    },
    {
        "path": "\/markdown\/reference-guides\/filters\/editor-filters.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Editor Hooks<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To modify the behavior of the editor experience, WordPress exposes several APIs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Editor features<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The following filters are available to extend the editor features.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>editor.PostFeaturedImage.imageSize<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Used to modify the image size displayed in the Post Featured Image component. It defaults to <code>'post-thumbnail'<\/code>, and will fail back to the <code>full<\/code> image size when the specified image size doesn't exist in the media object. It's modeled after the <code>admin_post_thumbnail_size<\/code> filter in the classic editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>var withImageSize = function ( size, mediaId, postId ) {\n\treturn 'large';\n};\n\nwp.hooks.addFilter(\n\t'editor.PostFeaturedImage.imageSize',\n\t'my-plugin\/with-image-size',\n\twithImageSize\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>editor.PostPreview.interstitialMarkup<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Filters the interstitial message shown when generating previews.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>var customPreviewMessage = function () {\n\treturn '<b>Post preview is being generated!<\/b>';\n};\n\nwp.hooks.addFilter(\n\t'editor.PostPreview.interstitialMarkup',\n\t'my-plugin\/custom-preview-message',\n\tcustomPreviewMessage\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>media.crossOrigin<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Used to set or modify the <code>crossOrigin<\/code> attribute for foreign-origin media elements (i.e <code>&lt;audio><\/code> , <code>&lt;img><\/code> , <code>&lt;link><\/code> , <code>&lt;script><\/code>, <code>&lt;video><\/code>). See this <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTML\/Attributes\/crossorigin\">article<\/a> for more information the <code>crossOrigin<\/code> attribute, its values and how it applies to each element.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>One example of it in action is in the Image block's transform feature to allow cross-origin images to be used in a <code>&lt;canvas><\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>addFilter(\n\t'media.crossOrigin',\n\t'my-plugin\/with-cors-media',\n\t\/\/ The callback accepts a second `mediaSrc` argument which references\n\t\/\/ the url to actual foreign media, useful if you want to decide\n\t\/\/ the value of crossOrigin based upon it.\n\t( crossOrigin, mediaSrc ) => {\n\t\tif ( mediaSrc.startsWith( 'https:\/\/example.com' ) ) {\n\t\t\treturn 'use-credentials';\n\t\t}\n\t\treturn crossOrigin;\n\t}\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Editor settings<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>block_editor_settings_all<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em><strong>Note:<\/strong> Before WordPress 5.8 known as <code>block_editor_settings<\/code>. In the case when you want to support older versions of WordPress you might need a way to detect which filter should be used \u2013 the deprecated one vs the new one. The recommended way to proceed is to check if the <code>WP_Block_Editor_Context<\/code> class exists.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is a PHP filter which is applied before sending settings to the WordPress block editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You may find details about this filter <a href=\"https:\/\/developer.wordpress.org\/reference\/hooks\/block_editor_settings_all\/\">on its WordPress Code Reference page<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The filter will send any setting to the initialized Editor, which means any editor setting that is used to configure the editor at initialization can be filtered by a PHP WordPress plugin before being sent.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ my-plugin.php\n\nfunction wpdocs_filter_block_editor_settings_when_post_provided( $editor_settings, $editor_context ) {\n\tif ( ! empty( $editor_context->post ) ) {\n\t\t$editor_settings&#91;'maxUploadFileSize'] = 12345;\n\t}\n\treturn $editor_settings;\n}\n\nadd_filter( 'block_editor_settings_all', 'wpdocs_filter_block_editor_settings_when_post_provided', 10, 2 );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><code>block_editor_rest_api_preload_paths<\/code><\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Filters the array of REST API paths that will be used to preloaded common data to use with the block editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ my-plugin.php\n\nfunction wpdocs_filter_block_editor_rest_api_preload_paths_when_post_provided( $preload_paths, $editor_context ) {\n\tif ( ! empty( $editor_context->post ) ) {\n\t\tarray_push( $preload_paths, array( '\/wp\/v2\/blocks', 'OPTIONS' ) );\n\t}\n\treturn $preload_paths;\n}\n\nadd_filter( 'block_editor_rest_api_preload_paths', 'wpdocs_filter_block_editor_rest_api_preload_paths_when_post_provided', 10, 2 );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Available default editor settings<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><code>richEditingEnabled<\/code><\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If it is <code>true<\/code> the user can edit the content using the visual editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It is set by default to the return value of the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/user_can_richedit\/\"><code>user_can_richedit<\/code><\/a> function. It checks if the user can access the visual editor and whether it\u2019s supported by the user\u2019s browser.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><code>codeEditingEnabled<\/code><\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Default <code>true<\/code>. Indicates whether the user can access the code editor <strong>in addition<\/strong> to the visual editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If set to false the user will not be able to switch between visual and code editor. The option in the settings menu will not be available and the keyboard shortcut for switching editor types will not fire.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Logging errors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em><strong>Note:<\/strong> Since WordPress 6.1.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A JavaScript error in a part of the UI shouldn\u2019t break the whole app. To solve this problem for users, React library uses a concept of an <a href=\"https:\/\/reactjs.org\/docs\/error-boundaries.html\">\u201cerror boundary\u201d<\/a>. Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, and display a fallback UI instead of the component tree that crashed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>editor.ErrorBoundary.errorLogged<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Allows you to hook into the <a href=\"https:\/\/reactjs.org\/docs\/error-boundaries.html\">Error Boundaries<\/a> and gives you access to the error object.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can use this action if you want to get hold of the error object that's handled by the boundaries, i.e to send them to an external error tracking tool.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example<\/em>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>addAction(\n\t'editor.ErrorBoundary.errorLogged',\n\t'mu-plugin\/error-capture-setup',\n\t( error ) => {\n\t\t\/\/ error is the exception's error object\n\t\tErrorCaptureTool.captureError( error );\n\t}\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block Directory<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Block Directory enables installing new block plugins from <a href=\"https:\/\/wordpress.org\/plugins\/browse\/block\/\">WordPress.org.<\/a> It can be disabled by removing the actions that enqueue it. In WordPress core, the function is <code>wp_enqueue_editor_block_directory_assets<\/code>. To remove the feature, use <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/remove_action\/\"><code>remove_action<\/code>,<\/a> like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ my-plugin.php\n\nremove_action( 'enqueue_block_editor_assets', 'wp_enqueue_editor_block_directory_assets' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block Patterns<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>should_load_remote_block_patterns<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Default <code>true<\/code>. The filter is checked when registering remote block patterns, set to false to disable.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, to disable use:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_filter( 'should_load_remote_block_patterns', '__return_false' );\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# Editor Hooks\n\nTo modify the behavior of the editor experience, WordPress exposes several APIs.\n\n## Editor features\n\nThe following filters are available to extend the editor features.\n\n### `editor.PostFeaturedImage.imageSize`\n\nUsed to modify the image size displayed in the Post Featured Image component. It defaults to `'post-thumbnail'`, and will fail back to the `full` image size when the specified image size doesn't exist in the media object. It's modeled after the `admin_post_thumbnail_size` filter in the classic editor.\n\n_Example:_\n\n```js\nvar withImageSize = function ( size, mediaId, postId ) {\n\treturn 'large';\n};\n\nwp.hooks.addFilter(\n\t'editor.PostFeaturedImage.imageSize',\n\t'my-plugin\/with-image-size',\n\twithImageSize\n);\n```\n\n### `editor.PostPreview.interstitialMarkup`\n\nFilters the interstitial message shown when generating previews.\n\n_Example:_\n\n```js\nvar customPreviewMessage = function () {\n\treturn '<b>Post preview is being generated!<\/b>';\n};\n\nwp.hooks.addFilter(\n\t'editor.PostPreview.interstitialMarkup',\n\t'my-plugin\/custom-preview-message',\n\tcustomPreviewMessage\n);\n```\n\n### `media.crossOrigin`\n\nUsed to set or modify the `crossOrigin` attribute for foreign-origin media elements (i.e `<audio>` , `<img>` , `<link>` , `<script>`, `<video>`). See this [article](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTML\/Attributes\/crossorigin) for more information the `crossOrigin` attribute, its values and how it applies to each element.\n\nOne example of it in action is in the Image block's transform feature to allow cross-origin images to be used in a `<canvas>`.\n\n_Example:_\n\n```js\naddFilter(\n\t'media.crossOrigin',\n\t'my-plugin\/with-cors-media',\n\t\/\/ The callback accepts a second `mediaSrc` argument which references\n\t\/\/ the url to actual foreign media, useful if you want to decide\n\t\/\/ the value of crossOrigin based upon it.\n\t( crossOrigin, mediaSrc ) => {\n\t\tif ( mediaSrc.startsWith( 'https:\/\/example.com' ) ) {\n\t\t\treturn 'use-credentials';\n\t\t}\n\t\treturn crossOrigin;\n\t}\n);\n```\n\n## Editor settings\n\n### `block_editor_settings_all`\n\n_**Note:** Before WordPress 5.8 known as `block_editor_settings`. In the case when you want to support older versions of WordPress you might need a way to detect which filter should be used \u2013 the deprecated one vs the new one. The recommended way to proceed is to check if the `WP_Block_Editor_Context` class exists._\n\nThis is a PHP filter which is applied before sending settings to the WordPress block editor.\n\nYou may find details about this filter [on its WordPress Code Reference page](https:\/\/developer.wordpress.org\/reference\/hooks\/block_editor_settings_all\/).\n\nThe filter will send any setting to the initialized Editor, which means any editor setting that is used to configure the editor at initialization can be filtered by a PHP WordPress plugin before being sent.\n\n_Example:_\n\n```php\n<?php\n\/\/ my-plugin.php\n\nfunction wpdocs_filter_block_editor_settings_when_post_provided( $editor_settings, $editor_context ) {\n\tif ( ! empty( $editor_context->post ) ) {\n\t\t$editor_settings['maxUploadFileSize'] = 12345;\n\t}\n\treturn $editor_settings;\n}\n\nadd_filter( 'block_editor_settings_all', 'wpdocs_filter_block_editor_settings_when_post_provided', 10, 2 );\n```\n\n#### `block_editor_rest_api_preload_paths`\n\nFilters the array of REST API paths that will be used to preloaded common data to use with the block editor.\n\n_Example:_\n\n```php\n<?php\n\/\/ my-plugin.php\n\nfunction wpdocs_filter_block_editor_rest_api_preload_paths_when_post_provided( $preload_paths, $editor_context ) {\n\tif ( ! empty( $editor_context->post ) ) {\n\t\tarray_push( $preload_paths, array( '\/wp\/v2\/blocks', 'OPTIONS' ) );\n\t}\n\treturn $preload_paths;\n}\n\nadd_filter( 'block_editor_rest_api_preload_paths', 'wpdocs_filter_block_editor_rest_api_preload_paths_when_post_provided', 10, 2 );\n```\n\n### Available default editor settings\n\n#### `richEditingEnabled`\n\nIf it is `true` the user can edit the content using the visual editor.\n\nIt is set by default to the return value of the [`user_can_richedit`](https:\/\/developer.wordpress.org\/reference\/functions\/user_can_richedit\/) function. It checks if the user can access the visual editor and whether it\u2019s supported by the user\u2019s browser.\n\n#### `codeEditingEnabled`\n\nDefault `true`. Indicates whether the user can access the code editor **in addition** to the visual editor.\n\nIf set to false the user will not be able to switch between visual and code editor. The option in the settings menu will not be available and the keyboard shortcut for switching editor types will not fire.\n\n## Logging errors\n\n_**Note:** Since WordPress 6.1._\n\nA JavaScript error in a part of the UI shouldn\u2019t break the whole app. To solve this problem for users, React library uses a concept of an [\u201cerror boundary\u201d](https:\/\/reactjs.org\/docs\/error-boundaries.html). Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, and display a fallback UI instead of the component tree that crashed.\n\n### `editor.ErrorBoundary.errorLogged`\n\nAllows you to hook into the [Error Boundaries](https:\/\/reactjs.org\/docs\/error-boundaries.html) and gives you access to the error object.\n\nYou can use this action if you want to get hold of the error object that's handled by the boundaries, i.e to send them to an external error tracking tool.\n\n_Example_:\n\n```js\naddAction(\n\t'editor.ErrorBoundary.errorLogged',\n\t'mu-plugin\/error-capture-setup',\n\t( error ) => {\n\t\t\/\/ error is the exception's error object\n\t\tErrorCaptureTool.captureError( error );\n\t}\n);\n```\n\n## Block Directory\n\nThe Block Directory enables installing new block plugins from [WordPress.org.](https:\/\/wordpress.org\/plugins\/browse\/block\/) It can be disabled by removing the actions that enqueue it. In WordPress core, the function is `wp_enqueue_editor_block_directory_assets`. To remove the feature, use [`remove_action`,](https:\/\/developer.wordpress.org\/reference\/functions\/remove_action\/) like this:\n\n```php\n<?php\n\/\/ my-plugin.php\n\nremove_action( 'enqueue_block_editor_assets', 'wp_enqueue_editor_block_directory_assets' );\n```\n\n## Block Patterns\n\n### `should_load_remote_block_patterns`\n\nDefault `true`. The filter is checked when registering remote block patterns, set to false to disable.\n\nFor example, to disable use:\n\n```\nadd_filter( 'should_load_remote_block_patterns', '__return_false' );\n```\n"
    },
    {
        "path": "\/markdown\/reference-guides\/filters\/i18n-filters.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">i18n Filters<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The i18n functions (<code>__()<\/code>, <code>_x()<\/code>, <code>_n()<\/code> and <code>_nx()<\/code>) provide translations of strings for use in your code. The values returned by these functions are filterable if you need to override them, using the following filters:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>i18n.gettext<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>i18n.gettext_with_context<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>i18n.ngettext<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>i18n.ngettext_with_context<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Filter Arguments<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The filters are passed the following arguments, in line with their PHP equivalents.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">i18n.gettext<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function i18nGettextCallback( translation, text, domain ) {\n\treturn translation;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">i18n.gettext_with_context<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function i18nGettextWithContextCallback( translation, text, context, domain ) {\n\treturn translation;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">i18n.ngettext<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function i18nNgettextCallback( translation, single, plural, number, domain ) {\n\treturn translation;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">i18n.ngettext_with_context<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function i18nNgettextWithContextCallback(\n\ttranslation,\n\tsingle,\n\tplural,\n\tnumber,\n\tcontext,\n\tdomain\n) {\n\treturn translation;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic Example<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Here is a simple example, using the <code>i18n.gettext<\/code> filter to override a specific translation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Define our filter callback.\nfunction myPluginGettextFilter( translation, text, domain ) {\n\tif ( text === 'Create Reusable block' ) {\n\t\treturn 'Save to MyOrg block library';\n\t}\n\treturn translation;\n}\n\n\/\/ Adding the filter\nwp.hooks.addFilter(\n\t'i18n.gettext',\n\t'my-plugin\/override-add-to-reusable-blocks-label',\n\tmyPluginGettextFilter\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Using 'text domain'-specific filters<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Filters that are specific to the text domain you're operating on are generally preferred for performance reasons (since your callback will only be run for strings in the relevant text domain).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To attach to a text domain-specific filter append an underscore and the text-domain to the standard filter name. For example, if filtering a string where the text domain is \"woocommerce\", you would use one of the following filters:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>i18n.gettext_woocommerce<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>i18n.gettext_with_context_woocommerce<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>i18n.ngettext_woocommerce<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>i18n.ngettext_with_context_woocommerce<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Define our filter callback.\nfunction myPluginGettextFilter( translation, text, domain ) {\n\tif ( text === 'You\u2019ve fulfilled all your orders' ) {\n\t\treturn 'All packed up and ready to go. Good job!';\n\t}\n\treturn translation;\n}\n\n\/\/ Adding the filter\nwp.hooks.addFilter(\n\t'i18n.gettext_woocommerce',\n\t'my-plugin\/override-fulfilled-all-orders-text',\n\tmyPluginGettextFilter\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Note<\/em>: To apply a filter where the text-domain is <code>undefined<\/code> (for example WordPress core strings), then use the name \"default\" to construct the filter name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>i18n.gettext_default<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>i18n.gettext_with_context_default<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>i18n.ngettext_default<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>i18n.ngettext_with_context_default<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# i18n Filters\n\nThe i18n functions (`__()`, `_x()`, `_n()` and `_nx()`) provide translations of strings for use in your code. The values returned by these functions are filterable if you need to override them, using the following filters:\n\n-   `i18n.gettext`\n-   `i18n.gettext_with_context`\n-   `i18n.ngettext`\n-   `i18n.ngettext_with_context`\n\n## Filter Arguments\n\nThe filters are passed the following arguments, in line with their PHP equivalents.\n\n### i18n.gettext\n\n```jsx\nfunction i18nGettextCallback( translation, text, domain ) {\n\treturn translation;\n}\n```\n\n### i18n.gettext_with_context\n\n```jsx\nfunction i18nGettextWithContextCallback( translation, text, context, domain ) {\n\treturn translation;\n}\n```\n\n### i18n.ngettext\n\n```jsx\nfunction i18nNgettextCallback( translation, single, plural, number, domain ) {\n\treturn translation;\n}\n```\n\n### i18n.ngettext_with_context\n\n```jsx\nfunction i18nNgettextWithContextCallback(\n\ttranslation,\n\tsingle,\n\tplural,\n\tnumber,\n\tcontext,\n\tdomain\n) {\n\treturn translation;\n}\n```\n\n## Basic Example\n\nHere is a simple example, using the `i18n.gettext` filter to override a specific translation.\n\n```jsx\n\/\/ Define our filter callback.\nfunction myPluginGettextFilter( translation, text, domain ) {\n\tif ( text === 'Create Reusable block' ) {\n\t\treturn 'Save to MyOrg block library';\n\t}\n\treturn translation;\n}\n\n\/\/ Adding the filter\nwp.hooks.addFilter(\n\t'i18n.gettext',\n\t'my-plugin\/override-add-to-reusable-blocks-label',\n\tmyPluginGettextFilter\n);\n```\n\n## Using 'text domain'-specific filters\n\nFilters that are specific to the text domain you're operating on are generally preferred for performance reasons (since your callback will only be run for strings in the relevant text domain).\n\nTo attach to a text domain-specific filter append an underscore and the text-domain to the standard filter name. For example, if filtering a string where the text domain is \"woocommerce\", you would use one of the following filters:\n\n-   `i18n.gettext_woocommerce`\n-   `i18n.gettext_with_context_woocommerce`\n-   `i18n.ngettext_woocommerce`\n-   `i18n.ngettext_with_context_woocommerce`\n\nFor example:\n\n```jsx\n\/\/ Define our filter callback.\nfunction myPluginGettextFilter( translation, text, domain ) {\n\tif ( text === 'You\u2019ve fulfilled all your orders' ) {\n\t\treturn 'All packed up and ready to go. Good job!';\n\t}\n\treturn translation;\n}\n\n\/\/ Adding the filter\nwp.hooks.addFilter(\n\t'i18n.gettext_woocommerce',\n\t'my-plugin\/override-fulfilled-all-orders-text',\n\tmyPluginGettextFilter\n);\n```\n\n_Note_: To apply a filter where the text-domain is `undefined` (for example WordPress core strings), then use the name \"default\" to construct the filter name.\n\n-   `i18n.gettext_default`\n-   `i18n.gettext_with_context_default`\n-   `i18n.ngettext_default`\n-   `i18n.ngettext_with_context_default`\n"
    },
    {
        "path": "\/markdown\/reference-guides\/filters\/block-filters.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Block Filters<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To modify the behavior of existing blocks, WordPress exposes several APIs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Registration<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The following filters are available to extend the settings for blocks during their registration.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>block_type_metadata<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Filters the raw metadata loaded from the <code>block.json<\/code> file when registering a block type on the server with PHP. It allows applying modifications before the metadata gets processed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The filter takes one param:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>$metadata<\/code> (<code>array<\/code>) \u2013 metadata loaded from <code>block.json<\/code> for registering a block type.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Example<\/em>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\nfunction wpdocs_filter_metadata_registration( $metadata ) {\n\t$metadata&#91;'apiVersion'] = 1;\n\treturn $metadata;\n};\nadd_filter( 'block_type_metadata', 'wpdocs_filter_metadata_registration' );\n\nregister_block_type( __DIR__ );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>block_type_metadata_settings<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Filters the settings determined from the processed block type metadata. It makes it possible to apply custom modifications using the block metadata that isn\u2019t handled by default.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The filter takes two params:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>$settings<\/code> (<code>array<\/code>) \u2013 Array of determined settings for registering a block type.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>$metadata<\/code> (<code>array<\/code>) \u2013 Metadata loaded from the <code>block.json<\/code> file.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Example:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function wpdocs_filter_metadata_registration( $settings, $metadata ) {\n\t$settings&#91;'api_version'] = $metadata&#91;'apiVersion'] + 1;\n\treturn $settings;\n};\nadd_filter( 'block_type_metadata_settings', 'wpdocs_filter_metadata_registration', 10, 2 );\n\nregister_block_type( __DIR__ );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>blocks.registerBlockType<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Used to filter the block settings when registering the block on the client with JavaScript. It receives the block settings, the name of the registered block, and either null or the deprecated block settings (when applied to a registered deprecation) as arguments. This filter is also applied to each of a block's deprecated settings.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Ensure that List blocks are saved with the canonical generated class name (<code>wp-block-list<\/code>):<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function addListBlockClassName( settings, name ) {\n\tif ( name !== 'core\/list' ) {\n\t\treturn settings;\n\t}\n\n\treturn {\n\t\t...settings,\n\t\tsupports: {\n\t\t\t...settings.supports,\n\t\t\tclassName: true,\n\t\t},\n\t};\n}\n\nwp.hooks.addFilter(\n\t'blocks.registerBlockType',\n\t'my-plugin\/class-names\/list-block',\n\taddListBlockClassName\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block Editor<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The following filters are available to change the behavior of blocks while editing in the block editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>blocks.getSaveElement<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A filter that applies to the result of a block's <code>save<\/code> function. This filter is used to replace or extend the element, for example using <code>React.cloneElement<\/code> to modify the element's props or replace its children, or returning an entirely new element.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The filter's callback receives an element, a block type definition object and the block attributes as arguments. It should return an element.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Wraps a cover block into an outer container.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function wrapCoverBlockInContainer( element, blockType, attributes ) {\n\t\/\/ skip if element is undefined\n\tif ( ! element ) {\n\t\treturn;\n\t}\n\n\t\/\/ only apply to cover blocks\n\tif ( blockType.name !== 'core\/cover' ) {\n\t\treturn element;\n\t}\n\n\t\/\/ return the element wrapped in a div\n\treturn <div classname=\"cover-block-wrapper\">{ element }<\/div>;\n}\n\nwp.hooks.addFilter(\n\t'blocks.getSaveElement',\n\t'my-plugin\/wrap-cover-block-in-container',\n\twrapCoverBlockInContainer\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>blocks.getSaveContent.extraProps<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A filter that applies to all blocks returning a WP Element in the <code>save<\/code> function. This filter is used to add extra props to the root element of the <code>save<\/code> function. For example: to add a className, an id, or any valid prop for this element.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The filter receives the current <code>save<\/code> element's props, a block type and the block attributes as arguments. It should return a props object.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Adding a background by default to all blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function addBackgroundColorStyle( props ) {\n\treturn {\n\t\t...props,\n\t\tstyle: { backgroundColor: 'red' },\n\t};\n}\n\nwp.hooks.addFilter(\n\t'blocks.getSaveContent.extraProps',\n\t'my-plugin\/add-background-color-style',\n\taddBackgroundColorStyle\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Note:<\/em> A <a href=\"\/docs\/reference-guides\/block-api\/block-edit-save.md#validation\">block validation<\/a> error will occur if this filter modifies existing content the next time the post is edited. The editor verifies that the content stored in the post matches the content output by the <code>save()<\/code> function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To avoid this validation error, use <code>render_block<\/code> server-side to modify existing post content instead of this filter. See <a href=\"https:\/\/developer.wordpress.org\/reference\/hooks\/render_block\/\">render_block documentation<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>blocks.getBlockDefaultClassName<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Generated HTML classes for blocks follow the <code>wp-block-{name}<\/code> nomenclature. This filter allows to provide an alternative class name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Our filter function\nfunction setBlockCustomClassName( className, blockName ) {\n\treturn blockName === 'core\/code' ? 'my-plugin-code' : className;\n}\n\n\/\/ Adding the filter\nwp.hooks.addFilter(\n\t'blocks.getBlockDefaultClassName',\n\t'my-plugin\/set-block-custom-class-name',\n\tsetBlockCustomClassName\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>blocks.switchToBlockType.transformedBlock<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Used to filter an individual transform result from block transformation. All of the original blocks are passed since transformations are many-to-many, not one-to-one.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>blocks.getBlockAttributes<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Called immediately after the default parsing of a block's attributes and before validation to allow a plugin to manipulate attribute values in time for validation and\/or the initial values rendering of the block in the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>editor.BlockEdit<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Used to modify the block's <code>edit<\/code> component. It receives the original block <code>BlockEdit<\/code> component and returns a new wrapped component.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const { createHigherOrderComponent } = wp.compose;\nconst { InspectorControls } = wp.blockEditor;\nconst { PanelBody } = wp.components;\n\nconst withMyPluginControls = createHigherOrderComponent( ( BlockEdit ) => {\n\treturn ( props ) => {\n\t\treturn (\n\t\t\t&lt;>\n\t\t\t\t<blockedit key=\"edit\" {=\"\" ...props=\"\" }=\"\">\n\t\t\t\t<inspectorcontrols>\n\t\t\t\t\t<panelbody>My custom control<\/panelbody>\n\t\t\t\t<\/inspectorcontrols>\n\t\t\t\n\t\t);\n\t};\n}, 'withMyPluginControls' );\n\nwp.hooks.addFilter(\n\t'editor.BlockEdit',\n\t'my-plugin\/with-inspector-controls',\n\twithMyPluginControls\n);\n<\/blockedit><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note that as this hook is run for <em>all blocks<\/em>, consuming it has potential for performance regressions particularly around block selection metrics.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To mitigate this, consider whether any work you perform can be altered to run only under certain conditions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, if you are adding components that only need to render when the block is <em>selected<\/em>, then you can use the block's \"selected\" state (<code>props.isSelected<\/code>) to conditionalize your rendering.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const withMyPluginControls = createHigherOrderComponent( ( BlockEdit ) => {\n\treturn ( props ) => {\n\t\treturn (\n\t\t\t&lt;>\n\t\t\t\t<blockedit {=\"\" ...props=\"\" }=\"\">\n\t\t\t\t{ props.isSelected &amp;&amp; {\n\t\t\t\t\t<inspectorcontrols>\n\t\t\t\t\t\t<panelbody>My custom control<\/panelbody>\n\t\t\t\t\t<\/inspectorcontrols>\n\t\t\t\t}}\n\t\t\t\n\t\t);\n\t};\n}, 'withMyPluginControls' );\n<\/blockedit><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>editor.BlockListBlock<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Used to modify the block's wrapper component containing the block's <code>edit<\/code> component and all toolbars. It receives the original <code>BlockListBlock<\/code> component and returns a new wrapped component.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const { createHigherOrderComponent } = wp.compose;\n\nconst withClientIdClassName = createHigherOrderComponent(\n\t( BlockListBlock ) => {\n\t\treturn ( props ) => {\n\t\t\treturn (\n\t\t\t\t<blocklistblock<br>\t\t\t\t\t{ ...props }\n\t\t\t\t\tclassName={ 'block-' + props.clientId }\n\t\t\t\t\/>\n\t\t\t);\n\t\t};\n\t},\n\t'withClientIdClassName'\n);\n\nwp.hooks.addFilter(\n\t'editor.BlockListBlock',\n\t'my-plugin\/with-client-id-class-name',\n\twithClientIdClassName\n);\n<\/blocklistblock<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Adding new properties to the block's wrapper component can be achieved by adding them to the <code>wrapperProps<\/code> property of the returned component.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const { createHigherOrderComponent } = wp.compose;\nconst withMyWrapperProp = createHigherOrderComponent( ( BlockListBlock ) => {\n\treturn ( props ) => {\n\t\tconst wrapperProps = {\n\t\t\t...props.wrapperProps,\n\t\t\t'data-my-property': 'the-value',\n\t\t};\n\t\treturn <blocklistblock {=\"\" ...props=\"\" }=\"\" wrapperprops=\"{\">;\n\t};\n}, 'withMyWrapperProp' );\nwp.hooks.addFilter(\n\t'editor.BlockListBlock',\n\t'my-plugin\/with-my-wrapper-prop',\n\twithMyWrapperProp\n);\n<\/blocklistblock><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Removing Blocks<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Using a deny list<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Adding blocks is easy enough, removing them is as easy. Plugin or theme authors have the possibility to \"unregister\" blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ my-plugin.js\nimport { unregisterBlockType } from '@wordpress\/blocks';\nimport domReady from '@wordpress\/dom-ready';\n\ndomReady( function () {\n\tunregisterBlockType( 'core\/verse' );\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>and load this script in the Editor<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ my-plugin.php\n\nfunction my_plugin_deny_list_blocks() {\n\twp_enqueue_script(\n\t\t'my-plugin-deny-list-blocks',\n\t\tplugins_url( 'my-plugin.js', __FILE__ ),\n\t\tarray( 'wp-blocks', 'wp-dom-ready', 'wp-edit-post' )\n\t);\n}\nadd_action( 'enqueue_block_editor_assets', 'my_plugin_deny_list_blocks' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Important:<\/strong> When unregistering a block, there can be a <a href=\"https:\/\/en.wikipedia.org\/wiki\/Race_condition\">race condition<\/a> on which code runs first: registering the block, or unregistering the block. You want your unregister code to run last. The way to do that is specify the component that is registering the block as a dependency, in this case <code>wp-edit-post<\/code>. Additionally, using <code>wp.domReady()<\/code> ensures the unregister code runs once the dom is loaded.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Using an allow list<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you want to disable all blocks except an allow list, you can adapt the script above like so:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ my-plugin.js\n\nvar allowedBlocks = &#91;\n\t'core\/paragraph',\n\t'core\/image',\n\t'core\/html',\n\t'core\/freeform',\n];\n\nwp.blocks.getBlockTypes().forEach( function ( blockType ) {\n\tif ( allowedBlocks.indexOf( blockType.name ) === -1 ) {\n\t\twp.blocks.unregisterBlockType( blockType.name );\n\t}\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Hiding blocks from the inserter<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>allowed_block_types_all<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em><strong>Note:<\/strong> Before WordPress 5.8 known as <code>allowed_block_types<\/code>. In the case when you want to support older versions of WordPress you might need a way to detect which filter should be used \u2013 the deprecated one vs the new one. The recommended way to proceed is to check if the <code>WP_Block_Editor_Context<\/code> class exists.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>On the server, you can filter the list of blocks shown in the inserter using the <code>allowed_block_types_all<\/code> filter. You can return either true (all block types supported), false (no block types supported), or an array of block type names to allow. You can also use the second provided param <code>$editor_context<\/code> to filter block types based on its content.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ my-plugin.php\n\nfunction wpdocs_filter_allowed_block_types_when_post_provided( $allowed_block_types, $editor_context ) {\n\tif ( ! empty( $editor_context->post ) ) {\n\t\treturn array( 'core\/paragraph', 'core\/heading' );\n\t}\n\treturn $allowed_block_types;\n}\n\nadd_filter( 'allowed_block_types_all', 'wpdocs_filter_allowed_block_types_when_post_provided', 10, 2 );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Managing block categories<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>block_categories_all<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em><strong>Note:<\/strong> Before WordPress 5.8 known as <code>block_categories<\/code>. In the case when you want to support older versions of WordPress you might need a way to detect which filter should be used \u2013 the deprecated one vs the new one. The recommended way to proceed is to check if the <code>WP_Block_Editor_Context<\/code> class exists.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It is possible to filter the list of default block categories using the <code>block_categories_all<\/code> filter. You can do it on the server by implementing a function which returns a list of categories. It is going to be used during blocks registration and to group blocks in the inserter. You can also use the second provided param <code>$editor_context<\/code> to filter the based on its content.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ my-plugin.php\n\nfunction wpdocs_filter_block_categories_when_post_provided( $block_categories, $editor_context ) {\n\tif ( ! empty( $editor_context->post ) ) {\n\t\tarray_push(\n\t\t\t$block_categories,\n\t\t\tarray(\n\t\t\t\t'slug'  => 'custom-category',\n\t\t\t\t'title' => __( 'Custom Category', 'custom-plugin' ),\n\t\t\t\t'icon'  => null,\n\t\t\t)\n\t\t);\n\t}\n\treturn $block_categories;\n}\n\nadd_filter( 'block_categories_all', 'wpdocs_filter_block_categories_when_post_provided', 10, 2 );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>wp.blocks.updateCategory<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You can also display an icon with your block category by setting an <code>icon<\/code> attribute. The value can be the slug of a <a href=\"https:\/\/developer.wordpress.org\/resource\/dashicons\/\">WordPress Dashicon<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can also set a custom icon in SVG format. To do so, the icon should be rendered and set on the frontend, so it can make use of WordPress SVG, allowing mobile compatibility and making the icon more accessible.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To set an SVG icon for the category shown in the previous example, add the following example JavaScript code to the editor calling <code>wp.blocks.updateCategory<\/code> e.g:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>( function () {\n\tvar el = React.createElement;\n\tvar SVG = wp.primitives.SVG;\n\tvar circle = el( 'circle', {\n\t\tcx: 10,\n\t\tcy: 10,\n\t\tr: 10,\n\t\tfill: 'red',\n\t\tstroke: 'blue',\n\t\tstrokeWidth: '10',\n\t} );\n\tvar svgIcon = el(\n\t\tSVG,\n\t\t{ width: 20, height: 20, viewBox: '0 0 20 20' },\n\t\tcircle\n\t);\n\twp.blocks.updateCategory( 'my-category', { icon: svgIcon } );\n} )();\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# Block Filters\n\nTo modify the behavior of existing blocks, WordPress exposes several APIs.\n\n## Registration\n\nThe following filters are available to extend the settings for blocks during their registration.\n\n### `block_type_metadata`\n\nFilters the raw metadata loaded from the `block.json` file when registering a block type on the server with PHP. It allows applying modifications before the metadata gets processed.\n\nThe filter takes one param:\n\n-   `$metadata` (`array`) \u2013 metadata loaded from `block.json` for registering a block type.\n\n_Example_:\n\n```php\n<?php\n\nfunction wpdocs_filter_metadata_registration( $metadata ) {\n\t$metadata['apiVersion'] = 1;\n\treturn $metadata;\n};\nadd_filter( 'block_type_metadata', 'wpdocs_filter_metadata_registration' );\n\nregister_block_type( __DIR__ );\n```\n\n### `block_type_metadata_settings`\n\nFilters the settings determined from the processed block type metadata. It makes it possible to apply custom modifications using the block metadata that isn\u2019t handled by default.\n\nThe filter takes two params:\n\n-   `$settings` (`array`) \u2013 Array of determined settings for registering a block type.\n-   `$metadata` (`array`) \u2013 Metadata loaded from the `block.json` file.\n\n_Example:_\n\n```php\nfunction wpdocs_filter_metadata_registration( $settings, $metadata ) {\n\t$settings['api_version'] = $metadata['apiVersion'] + 1;\n\treturn $settings;\n};\nadd_filter( 'block_type_metadata_settings', 'wpdocs_filter_metadata_registration', 10, 2 );\n\nregister_block_type( __DIR__ );\n```\n\n### `blocks.registerBlockType`\n\nUsed to filter the block settings when registering the block on the client with JavaScript. It receives the block settings, the name of the registered block, and either null or the deprecated block settings (when applied to a registered deprecation) as arguments. This filter is also applied to each of a block's deprecated settings.\n\n_Example:_\n\nEnsure that List blocks are saved with the canonical generated class name (`wp-block-list`):\n\n```js\nfunction addListBlockClassName( settings, name ) {\n\tif ( name !== 'core\/list' ) {\n\t\treturn settings;\n\t}\n\n\treturn {\n\t\t...settings,\n\t\tsupports: {\n\t\t\t...settings.supports,\n\t\t\tclassName: true,\n\t\t},\n\t};\n}\n\nwp.hooks.addFilter(\n\t'blocks.registerBlockType',\n\t'my-plugin\/class-names\/list-block',\n\taddListBlockClassName\n);\n```\n\n## Block Editor\n\nThe following filters are available to change the behavior of blocks while editing in the block editor.\n\n### `blocks.getSaveElement`\n\nA filter that applies to the result of a block's `save` function. This filter is used to replace or extend the element, for example using `React.cloneElement` to modify the element's props or replace its children, or returning an entirely new element.\n\nThe filter's callback receives an element, a block type definition object and the block attributes as arguments. It should return an element.\n\n_Example:_\n\nWraps a cover block into an outer container.\n\n```js\nfunction wrapCoverBlockInContainer( element, blockType, attributes ) {\n\t\/\/ skip if element is undefined\n\tif ( ! element ) {\n\t\treturn;\n\t}\n\n\t\/\/ only apply to cover blocks\n\tif ( blockType.name !== 'core\/cover' ) {\n\t\treturn element;\n\t}\n\n\t\/\/ return the element wrapped in a div\n\treturn <div className=\"cover-block-wrapper\">{ element }<\/div>;\n}\n\nwp.hooks.addFilter(\n\t'blocks.getSaveElement',\n\t'my-plugin\/wrap-cover-block-in-container',\n\twrapCoverBlockInContainer\n);\n```\n\n### `blocks.getSaveContent.extraProps`\n\nA filter that applies to all blocks returning a WP Element in the `save` function. This filter is used to add extra props to the root element of the `save` function. For example: to add a className, an id, or any valid prop for this element.\n\nThe filter receives the current `save` element's props, a block type and the block attributes as arguments. It should return a props object.\n\n_Example:_\n\nAdding a background by default to all blocks.\n\n```js\nfunction addBackgroundColorStyle( props ) {\n\treturn {\n\t\t...props,\n\t\tstyle: { backgroundColor: 'red' },\n\t};\n}\n\nwp.hooks.addFilter(\n\t'blocks.getSaveContent.extraProps',\n\t'my-plugin\/add-background-color-style',\n\taddBackgroundColorStyle\n);\n```\n\n_Note:_ A [block validation](\/docs\/reference-guides\/block-api\/block-edit-save.md#validation) error will occur if this filter modifies existing content the next time the post is edited. The editor verifies that the content stored in the post matches the content output by the `save()` function.\n\nTo avoid this validation error, use `render_block` server-side to modify existing post content instead of this filter. See [render_block documentation](https:\/\/developer.wordpress.org\/reference\/hooks\/render_block\/).\n\n### `blocks.getBlockDefaultClassName`\n\nGenerated HTML classes for blocks follow the `wp-block-{name}` nomenclature. This filter allows to provide an alternative class name.\n\n_Example:_\n\n```js\n\/\/ Our filter function\nfunction setBlockCustomClassName( className, blockName ) {\n\treturn blockName === 'core\/code' ? 'my-plugin-code' : className;\n}\n\n\/\/ Adding the filter\nwp.hooks.addFilter(\n\t'blocks.getBlockDefaultClassName',\n\t'my-plugin\/set-block-custom-class-name',\n\tsetBlockCustomClassName\n);\n```\n\n### `blocks.switchToBlockType.transformedBlock`\n\nUsed to filter an individual transform result from block transformation. All of the original blocks are passed since transformations are many-to-many, not one-to-one.\n\n### `blocks.getBlockAttributes`\n\nCalled immediately after the default parsing of a block's attributes and before validation to allow a plugin to manipulate attribute values in time for validation and\/or the initial values rendering of the block in the editor.\n\n### `editor.BlockEdit`\n\nUsed to modify the block's `edit` component. It receives the original block `BlockEdit` component and returns a new wrapped component.\n\n_Example:_\n\n\n```js\nconst { createHigherOrderComponent } = wp.compose;\nconst { InspectorControls } = wp.blockEditor;\nconst { PanelBody } = wp.components;\n\nconst withMyPluginControls = createHigherOrderComponent( ( BlockEdit ) => {\n\treturn ( props ) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<BlockEdit key=\"edit\" { ...props } \/>\n\t\t\t\t<InspectorControls>\n\t\t\t\t\t<PanelBody>My custom control<\/PanelBody>\n\t\t\t\t<\/InspectorControls>\n\t\t\t<\/>\n\t\t);\n\t};\n}, 'withMyPluginControls' );\n\nwp.hooks.addFilter(\n\t'editor.BlockEdit',\n\t'my-plugin\/with-inspector-controls',\n\twithMyPluginControls\n);\n```\n\n\nNote that as this hook is run for _all blocks_, consuming it has potential for performance regressions particularly around block selection metrics.\n\nTo mitigate this, consider whether any work you perform can be altered to run only under certain conditions.\n\nFor example, if you are adding components that only need to render when the block is _selected_, then you can use the block's \"selected\" state (`props.isSelected`) to conditionalize your rendering.\n\n```js\nconst withMyPluginControls = createHigherOrderComponent( ( BlockEdit ) => {\n\treturn ( props ) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<BlockEdit { ...props } \/>\n\t\t\t\t{ props.isSelected && {\n\t\t\t\t\t<InspectorControls>\n\t\t\t\t\t\t<PanelBody>My custom control<\/PanelBody>\n\t\t\t\t\t<\/InspectorControls>\n\t\t\t\t}}\n\t\t\t<\/>\n\t\t);\n\t};\n}, 'withMyPluginControls' );\n```\n\n### `editor.BlockListBlock`\n\nUsed to modify the block's wrapper component containing the block's `edit` component and all toolbars. It receives the original `BlockListBlock` component and returns a new wrapped component.\n\n_Example:_\n\n```js\nconst { createHigherOrderComponent } = wp.compose;\n\nconst withClientIdClassName = createHigherOrderComponent(\n\t( BlockListBlock ) => {\n\t\treturn ( props ) => {\n\t\t\treturn (\n\t\t\t\t<BlockListBlock\n\t\t\t\t\t{ ...props }\n\t\t\t\t\tclassName={ 'block-' + props.clientId }\n\t\t\t\t\/>\n\t\t\t);\n\t\t};\n\t},\n\t'withClientIdClassName'\n);\n\nwp.hooks.addFilter(\n\t'editor.BlockListBlock',\n\t'my-plugin\/with-client-id-class-name',\n\twithClientIdClassName\n);\n```\n\nAdding new properties to the block's wrapper component can be achieved by adding them to the `wrapperProps` property of the returned component.\n\n_Example:_\n\n\n```js\nconst { createHigherOrderComponent } = wp.compose;\nconst withMyWrapperProp = createHigherOrderComponent( ( BlockListBlock ) => {\n\treturn ( props ) => {\n\t\tconst wrapperProps = {\n\t\t\t...props.wrapperProps,\n\t\t\t'data-my-property': 'the-value',\n\t\t};\n\t\treturn <BlockListBlock { ...props } wrapperProps={ wrapperProps } \/>;\n\t};\n}, 'withMyWrapperProp' );\nwp.hooks.addFilter(\n\t'editor.BlockListBlock',\n\t'my-plugin\/with-my-wrapper-prop',\n\twithMyWrapperProp\n);\n```\n\n\n## Removing Blocks\n\n### Using a deny list\n\nAdding blocks is easy enough, removing them is as easy. Plugin or theme authors have the possibility to \"unregister\" blocks.\n\n\n```js\n\/\/ my-plugin.js\nimport { unregisterBlockType } from '@wordpress\/blocks';\nimport domReady from '@wordpress\/dom-ready';\n\ndomReady( function () {\n\tunregisterBlockType( 'core\/verse' );\n} );\n```\n\n\nand load this script in the Editor\n\n```php\n<?php\n\/\/ my-plugin.php\n\nfunction my_plugin_deny_list_blocks() {\n\twp_enqueue_script(\n\t\t'my-plugin-deny-list-blocks',\n\t\tplugins_url( 'my-plugin.js', __FILE__ ),\n\t\tarray( 'wp-blocks', 'wp-dom-ready', 'wp-edit-post' )\n\t);\n}\nadd_action( 'enqueue_block_editor_assets', 'my_plugin_deny_list_blocks' );\n```\n\n**Important:** When unregistering a block, there can be a [race condition](https:\/\/en.wikipedia.org\/wiki\/Race_condition) on which code runs first: registering the block, or unregistering the block. You want your unregister code to run last. The way to do that is specify the component that is registering the block as a dependency, in this case `wp-edit-post`. Additionally, using `wp.domReady()` ensures the unregister code runs once the dom is loaded.\n\n### Using an allow list\n\nIf you want to disable all blocks except an allow list, you can adapt the script above like so:\n\n```js\n\/\/ my-plugin.js\n\nvar allowedBlocks = [\n\t'core\/paragraph',\n\t'core\/image',\n\t'core\/html',\n\t'core\/freeform',\n];\n\nwp.blocks.getBlockTypes().forEach( function ( blockType ) {\n\tif ( allowedBlocks.indexOf( blockType.name ) === -1 ) {\n\t\twp.blocks.unregisterBlockType( blockType.name );\n\t}\n} );\n```\n\n## Hiding blocks from the inserter\n\n### `allowed_block_types_all`\n\n_**Note:** Before WordPress 5.8 known as `allowed_block_types`. In the case when you want to support older versions of WordPress you might need a way to detect which filter should be used \u2013 the deprecated one vs the new one. The recommended way to proceed is to check if the `WP_Block_Editor_Context` class exists._\n\nOn the server, you can filter the list of blocks shown in the inserter using the `allowed_block_types_all` filter. You can return either true (all block types supported), false (no block types supported), or an array of block type names to allow. You can also use the second provided param `$editor_context` to filter block types based on its content.\n\n```php\n<?php\n\/\/ my-plugin.php\n\nfunction wpdocs_filter_allowed_block_types_when_post_provided( $allowed_block_types, $editor_context ) {\n\tif ( ! empty( $editor_context->post ) ) {\n\t\treturn array( 'core\/paragraph', 'core\/heading' );\n\t}\n\treturn $allowed_block_types;\n}\n\nadd_filter( 'allowed_block_types_all', 'wpdocs_filter_allowed_block_types_when_post_provided', 10, 2 );\n```\n\n## Managing block categories\n\n### `block_categories_all`\n\n_**Note:** Before WordPress 5.8 known as `block_categories`. In the case when you want to support older versions of WordPress you might need a way to detect which filter should be used \u2013 the deprecated one vs the new one. The recommended way to proceed is to check if the `WP_Block_Editor_Context` class exists._\n\nIt is possible to filter the list of default block categories using the `block_categories_all` filter. You can do it on the server by implementing a function which returns a list of categories. It is going to be used during blocks registration and to group blocks in the inserter. You can also use the second provided param `$editor_context` to filter the based on its content.\n\n```php\n<?php\n\/\/ my-plugin.php\n\nfunction wpdocs_filter_block_categories_when_post_provided( $block_categories, $editor_context ) {\n\tif ( ! empty( $editor_context->post ) ) {\n\t\tarray_push(\n\t\t\t$block_categories,\n\t\t\tarray(\n\t\t\t\t'slug'  => 'custom-category',\n\t\t\t\t'title' => __( 'Custom Category', 'custom-plugin' ),\n\t\t\t\t'icon'  => null,\n\t\t\t)\n\t\t);\n\t}\n\treturn $block_categories;\n}\n\nadd_filter( 'block_categories_all', 'wpdocs_filter_block_categories_when_post_provided', 10, 2 );\n```\n\n### `wp.blocks.updateCategory`\n\nYou can also display an icon with your block category by setting an `icon` attribute. The value can be the slug of a [WordPress Dashicon](https:\/\/developer.wordpress.org\/resource\/dashicons\/).\n\nYou can also set a custom icon in SVG format. To do so, the icon should be rendered and set on the frontend, so it can make use of WordPress SVG, allowing mobile compatibility and making the icon more accessible.\n\nTo set an SVG icon for the category shown in the previous example, add the following example JavaScript code to the editor calling `wp.blocks.updateCategory` e.g:\n\n```js\n( function () {\n\tvar el = React.createElement;\n\tvar SVG = wp.primitives.SVG;\n\tvar circle = el( 'circle', {\n\t\tcx: 10,\n\t\tcy: 10,\n\t\tr: 10,\n\t\tfill: 'red',\n\t\tstroke: 'blue',\n\t\tstrokeWidth: '10',\n\t} );\n\tvar svgIcon = el(\n\t\tSVG,\n\t\t{ width: 20, height: 20, viewBox: '0 0 20 20' },\n\t\tcircle\n\t);\n\twp.blocks.updateCategory( 'my-category', { icon: svgIcon } );\n} )();\n```\n"
    },
    {
        "path": "\/markdown\/reference-guides\/filters\/parser-filters.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Parser Filters<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When the editor is interacting with blocks, these are stored in memory as data structures comprising a few basic properties and attributes. Upon saving a working post we serialize these data structures into a specific HTML structure and save the resultant string into the <code>post_content<\/code> property of the post in the WordPress database. When we load that post back into the editor we have to make the reverse transformation to build those data structures from the serialized format in HTML.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The process of loading the serialized HTML into the editor is performed by the <em>block parser<\/em>. The formal specification for this transformation is encoded in the parsing expression grammar (PEG) inside the <code>@wordpress\/block-serialization-spec-parser<\/code> package. The editor provides a default parser implementation of this grammar but there may be various reasons for replacing that implementation with a custom implementation. We can inject our own custom parser implementation through the appropriate filter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Server-side parser<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Plugins have access to the parser if they want to process posts in their structured form instead of a plain HTML-as-string representation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Client-side parser<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The editor uses the client-side parser while interactively working in a post. The plain HTML-as-string representation is sent to the browser by the backend and then the editor performs the first parse to initialize itself.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Filters<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To replace the server-side parser, use the <code>block_parser_class<\/code> filter. The filter transforms the string class name of a parser class. This class is expected to expose a <code>parse<\/code> method.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class EmptyParser {\n  public function parse( $post_content ) {\n    \/\/ return an empty document\n    return array();\n  }\n}\n\nfunction wpdocs_select_empty_parser( $prev_parser_class ) {\n    return 'EmptyParser';\n}\n\nadd_filter( 'block_parser_class', 'wpdocs_select_empty_parser', 10, 1 );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Note<\/strong>: At the present time it's not possible to replace the client-side parser.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->",
        "markdown": "# Parser Filters\n\nWhen the editor is interacting with blocks, these are stored in memory as data structures comprising a few basic properties and attributes. Upon saving a working post we serialize these data structures into a specific HTML structure and save the resultant string into the `post_content` property of the post in the WordPress database. When we load that post back into the editor we have to make the reverse transformation to build those data structures from the serialized format in HTML.\n\nThe process of loading the serialized HTML into the editor is performed by the _block parser_. The formal specification for this transformation is encoded in the parsing expression grammar (PEG) inside the `@wordpress\/block-serialization-spec-parser` package. The editor provides a default parser implementation of this grammar but there may be various reasons for replacing that implementation with a custom implementation. We can inject our own custom parser implementation through the appropriate filter.\n\n## Server-side parser\n\nPlugins have access to the parser if they want to process posts in their structured form instead of a plain HTML-as-string representation.\n\n## Client-side parser\n\nThe editor uses the client-side parser while interactively working in a post. The plain HTML-as-string representation is sent to the browser by the backend and then the editor performs the first parse to initialize itself.\n\n## Filters\n\nTo replace the server-side parser, use the `block_parser_class` filter. The filter transforms the string class name of a parser class. This class is expected to expose a `parse` method.\n\n_Example:_\n\n```php\nclass EmptyParser {\n  public function parse( $post_content ) {\n    \/\/ return an empty document\n    return array();\n  }\n}\n\nfunction wpdocs_select_empty_parser( $prev_parser_class ) {\n    return 'EmptyParser';\n}\n\nadd_filter( 'block_parser_class', 'wpdocs_select_empty_parser', 10, 1 );\n```\n\n> **Note**: At the present time it's not possible to replace the client-side parser.\n"
    },
    {
        "path": "\/markdown\/reference-guides\/filters\/autocomplete-filters.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Autocomplete<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>editor.Autocomplete.completers<\/code> filter is for extending and overriding the list of autocompleters used by blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>Autocomplete<\/code> component found in <code>@wordpress\/block-editor<\/code> applies this filter. The <code>@wordpress\/components<\/code> package provides the foundational <code>Autocomplete<\/code> component that does not apply such a filter, but blocks should generally use the component provided by <code>@wordpress\/block-editor<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Example<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Here is an example of using the <code>editor.Autocomplete.completers<\/code> filter to add an acronym completer. You can find full documentation for the autocompleter interface with the <code>Autocomplete<\/code> component in the <code>@wordpress\/components<\/code> package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Our completer\nconst acronymCompleter = {\n\tname: 'acronyms',\n\ttriggerPrefix: '::',\n\toptions: &#91;\n\t\t{ letters: 'FYI', expansion: 'For Your Information' },\n\t\t{ letters: 'AFAIK', expansion: 'As Far As I Know' },\n\t\t{ letters: 'IIRC', expansion: 'If I Recall Correctly' },\n\t],\n\tgetOptionKeywords( { letters, expansion } ) {\n\t\tconst expansionWords = expansion.split( \/\\s+\/ );\n\t\treturn &#91; letters, ...expansionWords ];\n\t},\n\tgetOptionLabel: acronym => acronym.letters,\n\tgetOptionCompletion: ( { letters, expansion } ) => (\n\t\t<abbr title=\"{\" expansion=\"\" }=\"\">{ letters }<\/abbr>,\n\t),\n};\n\n\/\/ Our filter function\nfunction appendAcronymCompleter( completers, blockName ) {\n\treturn blockName === 'my-plugin\/foo' ?\n\t\t&#91; ...completers, acronymCompleter ] :\n\t\tcompleters;\n}\n\n\/\/ Adding the filter\nwp.hooks.addFilter(\n\t'editor.Autocomplete.completers',\n\t'my-plugin\/autocompleters\/acronym',\n\tappendAcronymCompleter\n);\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# Autocomplete\n\nThe `editor.Autocomplete.completers` filter is for extending and overriding the list of autocompleters used by blocks.\n\nThe `Autocomplete` component found in `@wordpress\/block-editor` applies this filter. The `@wordpress\/components` package provides the foundational `Autocomplete` component that does not apply such a filter, but blocks should generally use the component provided by `@wordpress\/block-editor`.\n\n### Example\n\nHere is an example of using the `editor.Autocomplete.completers` filter to add an acronym completer. You can find full documentation for the autocompleter interface with the `Autocomplete` component in the `@wordpress\/components` package.\n\n\n\n```jsx\n\/\/ Our completer\nconst acronymCompleter = {\n\tname: 'acronyms',\n\ttriggerPrefix: '::',\n\toptions: [\n\t\t{ letters: 'FYI', expansion: 'For Your Information' },\n\t\t{ letters: 'AFAIK', expansion: 'As Far As I Know' },\n\t\t{ letters: 'IIRC', expansion: 'If I Recall Correctly' },\n\t],\n\tgetOptionKeywords( { letters, expansion } ) {\n\t\tconst expansionWords = expansion.split( \/\\s+\/ );\n\t\treturn [ letters, ...expansionWords ];\n\t},\n\tgetOptionLabel: acronym => acronym.letters,\n\tgetOptionCompletion: ( { letters, expansion } ) => (\n\t\t<abbr title={ expansion }>{ letters }<\/abbr>,\n\t),\n};\n\n\/\/ Our filter function\nfunction appendAcronymCompleter( completers, blockName ) {\n\treturn blockName === 'my-plugin\/foo' ?\n\t\t[ ...completers, acronymCompleter ] :\n\t\tcompleters;\n}\n\n\/\/ Adding the filter\nwp.hooks.addFilter(\n\t'editor.Autocomplete.completers',\n\t'my-plugin\/autocompleters\/acronym',\n\tappendAcronymCompleter\n);\n```\n"
    },
    {
        "path": "\/markdown\/reference-guides\/slotfills\/plugin-post-status-info.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">PluginPostStatusInfo<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This slots allows for the insertion of items in the Summary panel of the document sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Example<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerPlugin } from '@wordpress\/plugins';\nimport { PluginPostStatusInfo } from '@wordpress\/edit-post';\n\nconst PluginPostStatusInfoTest = () => (\n\t<pluginpoststatusinfo>\n\t\t<p>Post Status Info SlotFill<\/p>\n\t<\/pluginpoststatusinfo>\n);\n\nregisterPlugin( 'post-status-info-test', { render: PluginPostStatusInfoTest } );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Location<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/plugin-post-status-info-location.png?raw=true\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Location in the Summary panel<\/figcaption><\/figure>\n<!-- \/wp:image -->",
        "markdown": "# PluginPostStatusInfo\n\nThis slots allows for the insertion of items in the Summary panel of the document sidebar.\n\n## Example\n\n```js\nimport { registerPlugin } from '@wordpress\/plugins';\nimport { PluginPostStatusInfo } from '@wordpress\/edit-post';\n\nconst PluginPostStatusInfoTest = () => (\n\t<PluginPostStatusInfo>\n\t\t<p>Post Status Info SlotFill<\/p>\n\t<\/PluginPostStatusInfo>\n);\n\nregisterPlugin( 'post-status-info-test', { render: PluginPostStatusInfoTest } );\n```\n\n## Location\n\n![Location in the Summary panel](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/plugin-post-status-info-location.png?raw=true)\n"
    },
    {
        "path": "\/markdown\/reference-guides\/slotfills\/plugin-pre-publish-panel.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">PluginPrePublishPanel<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This slot allows for injecting items into the bottom of the pre-publish panel that appears to confirm publishing after the user clicks \"Publish\".<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Example<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerPlugin } from '@wordpress\/plugins';\nimport { PluginPrePublishPanel } from '@wordpress\/edit-post';\n\nconst PluginPrePublishPanelTest = () => (\n\t<pluginprepublishpanel>\n\t\t<p>Pre Publish Panel<\/p>\n\t<\/pluginprepublishpanel>\n);\n\nregisterPlugin( 'pre-publish-panel-test', {\n\trender: PluginPrePublishPanelTest,\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Location<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/plugin-pre-publish-panel.png?raw=true\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Prepublish panel<\/figcaption><\/figure>\n<!-- \/wp:image -->",
        "markdown": "# PluginPrePublishPanel\n\nThis slot allows for injecting items into the bottom of the pre-publish panel that appears to confirm publishing after the user clicks \"Publish\".\n\n## Example\n\n```js\nimport { registerPlugin } from '@wordpress\/plugins';\nimport { PluginPrePublishPanel } from '@wordpress\/edit-post';\n\nconst PluginPrePublishPanelTest = () => (\n\t<PluginPrePublishPanel>\n\t\t<p>Pre Publish Panel<\/p>\n\t<\/PluginPrePublishPanel>\n);\n\nregisterPlugin( 'pre-publish-panel-test', {\n\trender: PluginPrePublishPanelTest,\n} );\n```\n\n## Location\n\n![Prepublish panel](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/plugin-pre-publish-panel.png?raw=true)\n"
    },
    {
        "path": "\/markdown\/reference-guides\/slotfills\/plugin-more-menu-item.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">PluginMoreMenuItem<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This slot will add a new item to the More Tools &amp; Options section.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Example<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerPlugin } from '@wordpress\/plugins';\nimport { PluginMoreMenuItem } from '@wordpress\/edit-post';\nimport { image } from '@wordpress\/icons';\n\nconst MyButtonMoreMenuItemTest = () => (\n\t<pluginmoremenuitem<br>\t\ticon={ image }\n\t\tonClick={ () => {\n\t\t\talert( 'Button Clicked' );\n\t\t} }\n\t>\n\t\tMore Menu Item\n\t\n);\n\nregisterPlugin( 'more-menu-item-test', { render: MyButtonMoreMenuItemTest } );\n<\/pluginmoremenuitem<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Location<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/plugin-more-menu-item.png?raw=true\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Location<\/figcaption><\/figure>\n<!-- \/wp:image -->",
        "markdown": "# PluginMoreMenuItem\n\nThis slot will add a new item to the More Tools & Options section.\n\n## Example\n\n```js\nimport { registerPlugin } from '@wordpress\/plugins';\nimport { PluginMoreMenuItem } from '@wordpress\/edit-post';\nimport { image } from '@wordpress\/icons';\n\nconst MyButtonMoreMenuItemTest = () => (\n\t<PluginMoreMenuItem\n\t\ticon={ image }\n\t\tonClick={ () => {\n\t\t\talert( 'Button Clicked' );\n\t\t} }\n\t>\n\t\tMore Menu Item\n\t<\/PluginMoreMenuItem>\n);\n\nregisterPlugin( 'more-menu-item-test', { render: MyButtonMoreMenuItemTest } );\n```\n\n## Location\n\n![Location](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/plugin-more-menu-item.png?raw=true)\n"
    },
    {
        "path": "\/markdown\/reference-guides\/slotfills\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">SlotFills Reference<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Slot and Fill are components that have been exposed to allow developers to inject items into some predefined places in the Gutenberg admin experience.<br>Please see the <a href=\"\/packages\/components\/src\/slot-fill\/README.md\">SlotFill component docs<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order to use them, we must leverage the <a href=\"\/packages\/plugins\/README.md\">@wordpress\/plugins<\/a> api to register a plugin that will inject our items.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Usage overview<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order to access the SlotFills, we need to do four things:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Import the <code>registerPlugin<\/code> method from <code>wp.plugins<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Import the SlotFill we want from <code>wp.editPost<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Define a method to render our changes. Our changes\/additions will be wrapped in the SlotFill component we imported.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Register the plugin.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Here is an example using the <code>PluginPostStatusInfo<\/code> slotFill:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerPlugin } from '@wordpress\/plugins';\nimport { PluginPostStatusInfo } from '@wordpress\/edit-post';\n\nconst PluginPostStatusInfoTest = () => (\n\t<pluginpoststatusinfo>\n\t\t<p>Post Status Info SlotFill<\/p>\n\t<\/pluginpoststatusinfo>\n);\n\nregisterPlugin( 'post-status-info-test', { render: PluginPostStatusInfoTest } );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">How do they work?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>SlotFills are created using <code>createSlotFill<\/code>. This creates two components, <code>Slot<\/code> and <code>Fill<\/code> which are then used to create a new component that is exported on the <code>wp.plugins<\/code> global.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Definition of the <code>PluginPostStatusInfo<\/code> SlotFill<\/strong> (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/edit-post\/src\/components\/sidebar\/plugin-post-status-info\/index.js#L54\">see core code<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * Defines as extensibility slot for the Summary panel.\n *\/\n\n\/**\n * WordPress dependencies\n *\/\nimport { createSlotFill, PanelRow } from '@wordpress\/components';\n\nexport const { Fill, Slot } = createSlotFill( 'PluginPostStatusInfo' );\n\nconst PluginPostStatusInfo = ( { children, className } ) => (\n\t<fill>\n\t\t<panelrow classname=\"{\" }=\"\">{ children }<\/panelrow>\n\t<\/fill>\n);\n\nPluginPostStatusInfo.Slot = Slot;\n\nexport default PluginPostStatusInfo;\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This new Slot is then exposed in the editor. The example below is from core and represents the Summary panel.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As we can see, the <code>&lt;PluginPostStatusInfo.Slot><\/code> is wrapping all of the items that will appear in the panel.<br>Any items that have been added via the SlotFill ( see the example above ), will be included in the <code>fills<\/code> parameter and be displayed between the <code>&lt;PostAuthor\/><\/code> and <code>&lt;PostTrash\/><\/code> components.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/edit-post\/src\/components\/sidebar\/post-status\/index.js#L26\">core code<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const PostStatus = ( { isOpened, onTogglePanel } ) => (\n\t<panelbody<br>\t\tclassName=\"edit-post-post-status\"\n\t\ttitle={ __( 'Summary' ) }\n\t\topened={ isOpened }\n\t\tonToggle={ onTogglePanel }\n\t>\n\t\t<pluginpoststatusinfo.slot>\n\t\t\t{ ( fills ) => (\n\t\t\t\t&lt;>\n\t\t\t\t\t<postvisibility>\n\t\t\t\t\t<postschedule>\n\t\t\t\t\t<postformat>\n\t\t\t\t\t<poststicky>\n\t\t\t\t\t<postpendingstatus>\n\t\t\t\t\t<postauthor>\n\t\t\t\t\t{ fills }\n\t\t\t\t\t<posttrash>\n\t\t\t\t\n\t\t\t) }\n\t\t<\/posttrash><\/postauthor><\/postpendingstatus><\/poststicky><\/postformat><\/postschedule><\/postvisibility><\/pluginpoststatusinfo.slot>\n\t\n);\n<\/panelbody<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Currently available SlotFills and examples<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The following SlotFills are available in the <code>edit-post<\/code> package. Please refer to the individual items below for usage and example details:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/slotfills\/main-dashboard-button.md\">MainDashboardButton<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/slotfills\/plugin-block-settings-menu-item.md\">PluginBlockSettingsMenuItem<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/slotfills\/plugin-document-setting-panel.md\">PluginDocumentSettingPanel<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/slotfills\/plugin-more-menu-item.md\">PluginMoreMenuItem<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/slotfills\/plugin-post-publish-panel.md\">PluginPostPublishPanel<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/slotfills\/plugin-post-status-info.md\">PluginPostStatusInfo<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/slotfills\/plugin-pre-publish-panel.md\">PluginPrePublishPanel<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/slotfills\/plugin-sidebar.md\">PluginSidebar<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/slotfills\/plugin-sidebar-more-menu-item.md\">PluginSidebarMoreMenuItem<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# SlotFills Reference\n\nSlot and Fill are components that have been exposed to allow developers to inject items into some predefined places in the Gutenberg admin experience.\nPlease see the [SlotFill component docs](\/packages\/components\/src\/slot-fill\/README.md) for more details.\n\nIn order to use them, we must leverage the [@wordpress\/plugins](\/packages\/plugins\/README.md) api to register a plugin that will inject our items.\n\n## Usage overview\n\nIn order to access the SlotFills, we need to do four things:\n\n1. Import the `registerPlugin` method from `wp.plugins`.\n2. Import the SlotFill we want from `wp.editPost`.\n3. Define a method to render our changes. Our changes\/additions will be wrapped in the SlotFill component we imported.\n4. Register the plugin.\n\nHere is an example using the `PluginPostStatusInfo` slotFill:\n\n```js\nimport { registerPlugin } from '@wordpress\/plugins';\nimport { PluginPostStatusInfo } from '@wordpress\/edit-post';\n\nconst PluginPostStatusInfoTest = () => (\n\t<PluginPostStatusInfo>\n\t\t<p>Post Status Info SlotFill<\/p>\n\t<\/PluginPostStatusInfo>\n);\n\nregisterPlugin( 'post-status-info-test', { render: PluginPostStatusInfoTest } );\n```\n\n## How do they work?\n\nSlotFills are created using `createSlotFill`. This creates two components, `Slot` and `Fill` which are then used to create a new component that is exported on the `wp.plugins` global.\n\n**Definition of the `PluginPostStatusInfo` SlotFill** ([see core code](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/edit-post\/src\/components\/sidebar\/plugin-post-status-info\/index.js#L54))\n\n```js\n\/**\n * Defines as extensibility slot for the Summary panel.\n *\/\n\n\/**\n * WordPress dependencies\n *\/\nimport { createSlotFill, PanelRow } from '@wordpress\/components';\n\nexport const { Fill, Slot } = createSlotFill( 'PluginPostStatusInfo' );\n\nconst PluginPostStatusInfo = ( { children, className } ) => (\n\t<Fill>\n\t\t<PanelRow className={ className }>{ children }<\/PanelRow>\n\t<\/Fill>\n);\n\nPluginPostStatusInfo.Slot = Slot;\n\nexport default PluginPostStatusInfo;\n```\n\nThis new Slot is then exposed in the editor. The example below is from core and represents the Summary panel.\n\nAs we can see, the `<PluginPostStatusInfo.Slot>` is wrapping all of the items that will appear in the panel.\nAny items that have been added via the SlotFill ( see the example above ), will be included in the `fills` parameter and be displayed between the `<PostAuthor\/>` and `<PostTrash\/>` components.\n\nSee [core code](https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/edit-post\/src\/components\/sidebar\/post-status\/index.js#L26).\n\n```js\nconst PostStatus = ( { isOpened, onTogglePanel } ) => (\n\t<PanelBody\n\t\tclassName=\"edit-post-post-status\"\n\t\ttitle={ __( 'Summary' ) }\n\t\topened={ isOpened }\n\t\tonToggle={ onTogglePanel }\n\t>\n\t\t<PluginPostStatusInfo.Slot>\n\t\t\t{ ( fills ) => (\n\t\t\t\t<>\n\t\t\t\t\t<PostVisibility \/>\n\t\t\t\t\t<PostSchedule \/>\n\t\t\t\t\t<PostFormat \/>\n\t\t\t\t\t<PostSticky \/>\n\t\t\t\t\t<PostPendingStatus \/>\n\t\t\t\t\t<PostAuthor \/>\n\t\t\t\t\t{ fills }\n\t\t\t\t\t<PostTrash \/>\n\t\t\t\t<\/>\n\t\t\t) }\n\t\t<\/PluginPostStatusInfo.Slot>\n\t<\/PanelBody>\n);\n```\n\n## Currently available SlotFills and examples\n\nThe following SlotFills are available in the `edit-post` package. Please refer to the individual items below for usage and example details:\n\n-   [MainDashboardButton](\/docs\/reference-guides\/slotfills\/main-dashboard-button.md)\n-   [PluginBlockSettingsMenuItem](\/docs\/reference-guides\/slotfills\/plugin-block-settings-menu-item.md)\n-   [PluginDocumentSettingPanel](\/docs\/reference-guides\/slotfills\/plugin-document-setting-panel.md)\n-   [PluginMoreMenuItem](\/docs\/reference-guides\/slotfills\/plugin-more-menu-item.md)\n-   [PluginPostPublishPanel](\/docs\/reference-guides\/slotfills\/plugin-post-publish-panel.md)\n-   [PluginPostStatusInfo](\/docs\/reference-guides\/slotfills\/plugin-post-status-info.md)\n-   [PluginPrePublishPanel](\/docs\/reference-guides\/slotfills\/plugin-pre-publish-panel.md)\n-   [PluginSidebar](\/docs\/reference-guides\/slotfills\/plugin-sidebar.md)\n-   [PluginSidebarMoreMenuItem](\/docs\/reference-guides\/slotfills\/plugin-sidebar-more-menu-item.md)\n"
    },
    {
        "path": "\/markdown\/reference-guides\/slotfills\/plugin-post-publish-panel.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">PluginPostPublishPanel<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This slot allows for injecting items into the bottom of the post-publish panel that appears after a post is published.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Example<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerPlugin } from '@wordpress\/plugins';\nimport { PluginPostPublishPanel } from '@wordpress\/edit-post';\n\nconst PluginPostPublishPanelTest = () => (\n\t<pluginpostpublishpanel>\n\t\t<p>Post Publish Panel<\/p>\n\t<\/pluginpostpublishpanel>\n);\n\nregisterPlugin( 'post-publish-panel-test', {\n\trender: PluginPostPublishPanelTest,\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Location<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/plugin-post-publish-panel.png?raw=true\" alt=\"\"\/><figcaption class=\"wp-element-caption\">post publish panel<\/figcaption><\/figure>\n<!-- \/wp:image -->",
        "markdown": "# PluginPostPublishPanel\n\nThis slot allows for injecting items into the bottom of the post-publish panel that appears after a post is published.\n\n## Example\n\n```js\nimport { registerPlugin } from '@wordpress\/plugins';\nimport { PluginPostPublishPanel } from '@wordpress\/edit-post';\n\nconst PluginPostPublishPanelTest = () => (\n\t<PluginPostPublishPanel>\n\t\t<p>Post Publish Panel<\/p>\n\t<\/PluginPostPublishPanel>\n);\n\nregisterPlugin( 'post-publish-panel-test', {\n\trender: PluginPostPublishPanelTest,\n} );\n```\n\n## Location\n\n![post publish panel](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/plugin-post-publish-panel.png?raw=true)\n"
    },
    {
        "path": "\/markdown\/reference-guides\/slotfills\/plugin-document-setting-panel.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">PluginDocumentSettingPanel<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This SlotFill allows registering a UI to edit Document settings.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Available Props<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>name<\/strong> <code>string<\/code>: A string identifying the panel.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>className<\/strong> <code>string<\/code>: An optional class name added to the sidebar body.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>title<\/strong> <code>string<\/code>: Title displayed at the top of the sidebar.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>icon<\/strong> <code>(string|Element)<\/code>: The <a href=\"https:\/\/developer.wordpress.org\/resource\/dashicons\/\">Dashicon<\/a> icon slug string, or an SVG WP element.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Example<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerPlugin } from '@wordpress\/plugins';\nimport { PluginDocumentSettingPanel } from '@wordpress\/edit-post';\n\nconst PluginDocumentSettingPanelDemo = () => (\n\t<plugindocumentsettingpanel<br>\t\tname=\"custom-panel\"\n\t\ttitle=\"Custom Panel\"\n\t\tclassName=\"custom-panel\"\n\t>\n\t\tCustom Panel Contents\n\t\n);\n\nregisterPlugin( 'plugin-document-setting-panel-demo', {\n\trender: PluginDocumentSettingPanelDemo,\n\ticon: 'palmtree',\n} );\n<\/plugindocumentsettingpanel<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Accessing a panel programmatically<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Core and custom panels can be access programmatically using their panel name. The core panel names are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Summary Panel: <code>post-status<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Categories Panel: <code>taxonomy-panel-category<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Tags Panel: <code>taxonomy-panel-post_tag<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Featured Image Panel: <code>featured-image<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Excerpt Panel: <code>post-excerpt<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>DiscussionPanel: <code>discussion-panel<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Custom panels are namespaced with the plugin name that was passed to <code>registerPlugin<\/code>.<br>In order to access the panels using function such as <code>toggleEditorPanelOpened<\/code> or <code>toggleEditorPanelEnabled<\/code> be sure to prepend the namespace.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To programmatically toggle panels, use the following:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useDispatch } from '@wordpress\/data';\nimport { store as editorStore } from '@wordpress\/editor';\n\nconst Example = () => {\n\tconst { toggleEditorPanelOpened } = useDispatch( editorStore );\n\treturn (\n\t\t<button<br>\t\t\tvariant=\"primary\"\n\t\t\tonClick={ () => {\n\t\t\t\t\/\/ Toggle the Summary panel\n\t\t\t\ttoggleEditorPanelOpened( 'post-status' );\n\n\t\t\t\t\/\/ Toggle the Custom Panel introduced in the example above.\n\t\t\t\ttoggleEditorPanelOpened(\n\t\t\t\t\t'plugin-document-setting-panel-demo\/custom-panel'\n\t\t\t\t);\n\t\t\t} }\n\t\t>\n\t\t\tToggle Panels\n\t\t\n\t);\n};\n<\/button<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>It is also possible to remove panels from the admin using the <code>removeEditorPanel<\/code> function by passing the name of the registered panel.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useDispatch } from '@wordpress\/data';\nimport { store as editorStore } from '@wordpress\/editor';\n\nconst Example = () => {\n\tconst { removeEditorPanel } = useDispatch( editorStore );\n\treturn (\n\t\t<button<br>\t\t\tvariant=\"primary\"\n\t\t\tonClick={ () => {\n\t\t\t\t\/\/ Remove the Featured Image panel.\n\t\t\t\tremoveEditorPanel( 'featured-image' );\n\n\t\t\t\t\/\/ Remove the Custom Panel introduced in the example above.\n\t\t\t\tremoveEditorPanel(\n\t\t\t\t\t'plugin-document-setting-panel-demo\/custom-panel'\n\t\t\t\t);\n\t\t\t} }\n\t\t>\n\t\t\tToggle Panels\n\t\t\n\t);\n};\n<\/button<br><\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# PluginDocumentSettingPanel\n\nThis SlotFill allows registering a UI to edit Document settings.\n\n## Available Props\n\n-   **name** `string`: A string identifying the panel.\n-   **className** `string`: An optional class name added to the sidebar body.\n-   **title** `string`: Title displayed at the top of the sidebar.\n-   **icon** `(string|Element)`: The [Dashicon](https:\/\/developer.wordpress.org\/resource\/dashicons\/) icon slug string, or an SVG WP element.\n\n## Example\n\n```js\nimport { registerPlugin } from '@wordpress\/plugins';\nimport { PluginDocumentSettingPanel } from '@wordpress\/edit-post';\n\nconst PluginDocumentSettingPanelDemo = () => (\n\t<PluginDocumentSettingPanel\n\t\tname=\"custom-panel\"\n\t\ttitle=\"Custom Panel\"\n\t\tclassName=\"custom-panel\"\n\t>\n\t\tCustom Panel Contents\n\t<\/PluginDocumentSettingPanel>\n);\n\nregisterPlugin( 'plugin-document-setting-panel-demo', {\n\trender: PluginDocumentSettingPanelDemo,\n\ticon: 'palmtree',\n} );\n```\n\n## Accessing a panel programmatically\n\nCore and custom panels can be access programmatically using their panel name. The core panel names are:\n\n-   Summary Panel: `post-status`\n-   Categories Panel: `taxonomy-panel-category`\n-   Tags Panel: `taxonomy-panel-post_tag`\n-   Featured Image Panel: `featured-image`\n-   Excerpt Panel: `post-excerpt`\n-   DiscussionPanel: `discussion-panel`\n\nCustom panels are namespaced with the plugin name that was passed to `registerPlugin`.\nIn order to access the panels using function such as `toggleEditorPanelOpened` or `toggleEditorPanelEnabled` be sure to prepend the namespace.\n\nTo programmatically toggle panels, use the following:\n\n```js\nimport { useDispatch } from '@wordpress\/data';\nimport { store as editorStore } from '@wordpress\/editor';\n\nconst Example = () => {\n\tconst { toggleEditorPanelOpened } = useDispatch( editorStore );\n\treturn (\n\t\t<Button\n\t\t\tvariant=\"primary\"\n\t\t\tonClick={ () => {\n\t\t\t\t\/\/ Toggle the Summary panel\n\t\t\t\ttoggleEditorPanelOpened( 'post-status' );\n\n\t\t\t\t\/\/ Toggle the Custom Panel introduced in the example above.\n\t\t\t\ttoggleEditorPanelOpened(\n\t\t\t\t\t'plugin-document-setting-panel-demo\/custom-panel'\n\t\t\t\t);\n\t\t\t} }\n\t\t>\n\t\t\tToggle Panels\n\t\t<\/Button>\n\t);\n};\n```\n\nIt is also possible to remove panels from the admin using the `removeEditorPanel` function by passing the name of the registered panel.\n\n```js\nimport { useDispatch } from '@wordpress\/data';\nimport { store as editorStore } from '@wordpress\/editor';\n\nconst Example = () => {\n\tconst { removeEditorPanel } = useDispatch( editorStore );\n\treturn (\n\t\t<Button\n\t\t\tvariant=\"primary\"\n\t\t\tonClick={ () => {\n\t\t\t\t\/\/ Remove the Featured Image panel.\n\t\t\t\tremoveEditorPanel( 'featured-image' );\n\n\t\t\t\t\/\/ Remove the Custom Panel introduced in the example above.\n\t\t\t\tremoveEditorPanel(\n\t\t\t\t\t'plugin-document-setting-panel-demo\/custom-panel'\n\t\t\t\t);\n\t\t\t} }\n\t\t>\n\t\t\tToggle Panels\n\t\t<\/Button>\n\t);\n};\n```\n"
    },
    {
        "path": "\/markdown\/reference-guides\/slotfills\/main-dashboard-button.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">MainDashboardButton<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This slot allows replacing the default main dashboard button in the post editor and site editor.<br>It's used for returning back to main wp-admin dashboard when editor is in fullscreen mode.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Examples<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Post editor example<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This will override the W icon button in the header.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerPlugin } from '@wordpress\/plugins';\nimport { __experimentalMainDashboardButton as MainDashboardButton } from '@wordpress\/edit-post';\n\nconst MainDashboardButtonTest = () => (\n\t<maindashboardbutton>\n\t\tCustom main dashboard button content\n\t<\/maindashboardbutton>\n);\n\nregisterPlugin( 'main-dashboard-button-test', {\n\trender: MainDashboardButtonTest,\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If your goal is just to replace the icon of the existing button in<br>the post editor, that can be achieved in the following way:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerPlugin } from '@wordpress\/plugins';\nimport {\n\t__experimentalFullscreenModeClose as FullscreenModeClose,\n\t__experimentalMainDashboardButton as MainDashboardButton,\n} from '@wordpress\/edit-post';\nimport { close } from '@wordpress\/icons';\n\nconst MainDashboardButtonIconTest = () => (\n\t<maindashboardbutton>\n\t\t<fullscreenmodeclose icon=\"{\" close=\"\" }=\"\" href=\"http:\/\/wordpress.org\">\n\t<\/fullscreenmodeclose><\/maindashboardbutton>\n);\n\nregisterPlugin( 'main-dashboard-button-icon-test', {\n\trender: MainDashboardButtonIconTest,\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Site editor example<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In the site editor this slot refers to the \"back to dashboard\" button in the navigation sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerPlugin } from '@wordpress\/plugins';\nimport { __experimentalMainDashboardButton as MainDashboardButton } from '@wordpress\/edit-site';\nimport { __experimentalNavigationBackButton as NavigationBackButton } from '@wordpress\/components';\n\nconst MainDashboardButtonIconTest = () => (\n\t<maindashboardbutton>\n\t\t<navigationbackbutton<br>\t\t\tbackButtonLabel={ __( 'Back to dashboard' ) }\n\t\t\tclassName=\"edit-site-navigation-panel__back-to-dashboard\"\n\t\t\thref=\"index.php\"\n\t\t\/>\n\t<\/navigationbackbutton<br><\/maindashboardbutton>\n);\n\nregisterPlugin( 'main-dashboard-button-icon-test', {\n\trender: MainDashboardButtonIconTest,\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# MainDashboardButton\n\nThis slot allows replacing the default main dashboard button in the post editor and site editor.\nIt's used for returning back to main wp-admin dashboard when editor is in fullscreen mode.\n\n## Examples\n\n### Post editor example\n\nThis will override the W icon button in the header.\n\n```js\nimport { registerPlugin } from '@wordpress\/plugins';\nimport { __experimentalMainDashboardButton as MainDashboardButton } from '@wordpress\/edit-post';\n\nconst MainDashboardButtonTest = () => (\n\t<MainDashboardButton>\n\t\tCustom main dashboard button content\n\t<\/MainDashboardButton>\n);\n\nregisterPlugin( 'main-dashboard-button-test', {\n\trender: MainDashboardButtonTest,\n} );\n```\n\nIf your goal is just to replace the icon of the existing button in\nthe post editor, that can be achieved in the following way:\n\n```js\nimport { registerPlugin } from '@wordpress\/plugins';\nimport {\n\t__experimentalFullscreenModeClose as FullscreenModeClose,\n\t__experimentalMainDashboardButton as MainDashboardButton,\n} from '@wordpress\/edit-post';\nimport { close } from '@wordpress\/icons';\n\nconst MainDashboardButtonIconTest = () => (\n\t<MainDashboardButton>\n\t\t<FullscreenModeClose icon={ close } href=\"http:\/\/wordpress.org\" \/>\n\t<\/MainDashboardButton>\n);\n\nregisterPlugin( 'main-dashboard-button-icon-test', {\n\trender: MainDashboardButtonIconTest,\n} );\n```\n\n### Site editor example\n\nIn the site editor this slot refers to the \"back to dashboard\" button in the navigation sidebar.\n\n```js\nimport { registerPlugin } from '@wordpress\/plugins';\nimport { __experimentalMainDashboardButton as MainDashboardButton } from '@wordpress\/edit-site';\nimport { __experimentalNavigationBackButton as NavigationBackButton } from '@wordpress\/components';\n\nconst MainDashboardButtonIconTest = () => (\n\t<MainDashboardButton>\n\t\t<NavigationBackButton\n\t\t\tbackButtonLabel={ __( 'Back to dashboard' ) }\n\t\t\tclassName=\"edit-site-navigation-panel__back-to-dashboard\"\n\t\t\thref=\"index.php\"\n\t\t\/>\n\t<\/MainDashboardButton>\n);\n\nregisterPlugin( 'main-dashboard-button-icon-test', {\n\trender: MainDashboardButtonIconTest,\n} );\n```\n"
    },
    {
        "path": "\/markdown\/reference-guides\/slotfills\/plugin-sidebar-more-menu-item.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">PluginSidebarMoreMenuItem<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This slot allows the creation of a <code>&lt;PluginSidebar><\/code> with a menu item that when clicked will expand the sidebar to the appropriate Plugin section.<br>This is done by setting the <code>target<\/code> on <code>&lt;PluginSidebarMoreMenuItem><\/code> to match the <code>name<\/code> on the <code>&lt;PluginSidebar><\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Example<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerPlugin } from '@wordpress\/plugins';\nimport { PluginSidebar, PluginSidebarMoreMenuItem } from '@wordpress\/edit-post';\nimport { image } from '@wordpress\/icons';\n\nconst PluginSidebarMoreMenuItemTest = () => (\n\t&lt;>\n\t\t<pluginsidebarmoremenuitem target=\"sidebar-name\" icon=\"{\" image=\"\" }=\"\">\n\t\t\tExpanded Sidebar - More item\n\t\t<\/pluginsidebarmoremenuitem>\n\t\t<pluginsidebar name=\"sidebar-name\" icon=\"{\" image=\"\" }=\"\" title=\"My Sidebar\">\n\t\t\tContent of the sidebar\n\t\t<\/pluginsidebar>\n\t\n);\n\nregisterPlugin( 'plugin-sidebar-expanded-test', {\n\trender: PluginSidebarMoreMenuItemTest,\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Location<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/plugin-sidebar-more-menu-item.gif?raw=true\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Interaction<\/figcaption><\/figure>\n<!-- \/wp:image -->",
        "markdown": "# PluginSidebarMoreMenuItem\n\nThis slot allows the creation of a `<PluginSidebar>` with a menu item that when clicked will expand the sidebar to the appropriate Plugin section.\nThis is done by setting the `target` on `<PluginSidebarMoreMenuItem>` to match the `name` on the `<PluginSidebar>`\n\n## Example\n\n```js\nimport { registerPlugin } from '@wordpress\/plugins';\nimport { PluginSidebar, PluginSidebarMoreMenuItem } from '@wordpress\/edit-post';\nimport { image } from '@wordpress\/icons';\n\nconst PluginSidebarMoreMenuItemTest = () => (\n\t<>\n\t\t<PluginSidebarMoreMenuItem target=\"sidebar-name\" icon={ image }>\n\t\t\tExpanded Sidebar - More item\n\t\t<\/PluginSidebarMoreMenuItem>\n\t\t<PluginSidebar name=\"sidebar-name\" icon={ image } title=\"My Sidebar\">\n\t\t\tContent of the sidebar\n\t\t<\/PluginSidebar>\n\t<\/>\n);\n\nregisterPlugin( 'plugin-sidebar-expanded-test', {\n\trender: PluginSidebarMoreMenuItemTest,\n} );\n```\n\n## Location\n\n![Interaction](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/plugin-sidebar-more-menu-item.gif?raw=true)\n"
    },
    {
        "path": "\/markdown\/reference-guides\/slotfills\/plugin-sidebar.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">PluginSidebar<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This slot allows for adding items into the Gutenberg Toolbar.<br>Using this slot will add an icon to the bar that, when clicked, will open a sidebar with the content of the items wrapped in the <code>&lt;PluginSidebar \/><\/code> component.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Example<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerPlugin } from '@wordpress\/plugins';\nimport { PluginSidebar } from '@wordpress\/edit-post';\nimport { image } from '@wordpress\/icons';\n\nconst PluginSidebarTest = () => (\n\t<pluginsidebar name=\"plugin-sidebar-test\" title=\"My Plugin\" icon=\"{\" image=\"\" }=\"\">\n\t\t<p>Plugin Sidebar<\/p>\n\t<\/pluginsidebar>\n);\n\nregisterPlugin( 'plugin-sidebar-test', { render: PluginSidebarTest } );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Location<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Closed State<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/plugin-sidebar-closed-state.png?raw=true\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Closed State<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Open State<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/plugin-sidebar-open-state.png?raw=true\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Open State<\/figcaption><\/figure>\n<!-- \/wp:image -->",
        "markdown": "# PluginSidebar\n\nThis slot allows for adding items into the Gutenberg Toolbar.\nUsing this slot will add an icon to the bar that, when clicked, will open a sidebar with the content of the items wrapped in the `<PluginSidebar \/>` component.\n\n## Example\n\n```js\nimport { registerPlugin } from '@wordpress\/plugins';\nimport { PluginSidebar } from '@wordpress\/edit-post';\nimport { image } from '@wordpress\/icons';\n\nconst PluginSidebarTest = () => (\n\t<PluginSidebar name=\"plugin-sidebar-test\" title=\"My Plugin\" icon={ image }>\n\t\t<p>Plugin Sidebar<\/p>\n\t<\/PluginSidebar>\n);\n\nregisterPlugin( 'plugin-sidebar-test', { render: PluginSidebarTest } );\n```\n\n## Location\n\n### Closed State\n\n![Closed State](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/plugin-sidebar-closed-state.png?raw=true)\n\n### Open State\n\n![Open State](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/plugin-sidebar-open-state.png?raw=true)\n"
    },
    {
        "path": "\/markdown\/reference-guides\/slotfills\/plugin-block-settings-menu-item.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">PluginBlockSettingsMenuItem<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This slot allows for adding a new item into the More Options area.<br>This will either appear in the controls for each block or at the Top Toolbar depending on the users setting.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Example<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerPlugin } from '@wordpress\/plugins';\nimport { PluginBlockSettingsMenuItem } from '@wordpress\/edit-post';\n\nconst PluginBlockSettingsMenuGroupTest = () => (\n\t<pluginblocksettingsmenuitem<br>\t\tallowedBlocks={ &#91; 'core\/paragraph' ] }\n\t\ticon=\"smiley\"\n\t\tlabel=\"Menu item text\"\n\t\tonClick={ () => {\n\t\t\talert( 'clicked' );\n\t\t} }\n\t\/>\n);\n\nregisterPlugin( 'block-settings-menu-group-test', {\n\trender: PluginBlockSettingsMenuGroupTest,\n} );\n<\/pluginblocksettingsmenuitem<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Location<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/plugin-block-settings-menu-item-screenshot.png?raw=true\" alt=\"\"\/><figcaption class=\"wp-element-caption\">PluginBlockSettingsMenuItem Location<\/figcaption><\/figure>\n<!-- \/wp:image -->",
        "markdown": "# PluginBlockSettingsMenuItem\n\nThis slot allows for adding a new item into the More Options area.\nThis will either appear in the controls for each block or at the Top Toolbar depending on the users setting.\n\n## Example\n\n```js\nimport { registerPlugin } from '@wordpress\/plugins';\nimport { PluginBlockSettingsMenuItem } from '@wordpress\/edit-post';\n\nconst PluginBlockSettingsMenuGroupTest = () => (\n\t<PluginBlockSettingsMenuItem\n\t\tallowedBlocks={ [ 'core\/paragraph' ] }\n\t\ticon=\"smiley\"\n\t\tlabel=\"Menu item text\"\n\t\tonClick={ () => {\n\t\t\talert( 'clicked' );\n\t\t} }\n\t\/>\n);\n\nregisterPlugin( 'block-settings-menu-group-test', {\n\trender: PluginBlockSettingsMenuGroupTest,\n} );\n```\n\n## Location\n\n![Location](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/plugin-block-settings-menu-item-screenshot.png?raw=true 'PluginBlockSettingsMenuItem Location')\n"
    },
    {
        "path": "\/markdown\/reference-guides\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Reference Guides<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"\/docs\/reference-guides\/block-api\/README.md\">Block API Reference<\/a><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-annotations.md\">Annotations<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-api-versions.md\">API Versions<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-attributes.md\">Attributes<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-context.md\">Context<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-deprecation.md\">Deprecation<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-edit-save.md\">Edit and Save<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-patterns.md\">Patterns<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-registration.md\">Registration<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-supports.md\">Supports<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-templates.md\">Templates<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-transforms.md\">Transformations<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-metadata.md\">Metadata<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-variations.md\">Variations<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"\/docs\/reference-guides\/filters\/README.md\">Hooks Reference<\/a><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/filters\/block-filters.md\">Block Filters<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/filters\/editor-filters.md\">Editor Hooks<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/filters\/i18n-filters.md\">i18n Hooks<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/filters\/parser-filters.md\">Parser Hooks<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/filters\/autocomplete-filters.md\">Autocomplete<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/filters\/global-styles-filters.md\">Global Styles Hooks<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"\/docs\/reference-guides\/slotfills\/README.md\">SlotFills Reference<\/a><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/slotfills\/main-dashboard-button.md\">MainDashboardButton<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/slotfills\/plugin-block-settings-menu-item.md\">PluginBlockSettingsMenuItem<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/slotfills\/plugin-document-setting-panel.md\">PluginDocumentSettingPanel<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/slotfills\/plugin-more-menu-item.md\">PluginMoreMenuItem<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/slotfills\/plugin-post-publish-panel.md\">PluginPostPublishPanel<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/slotfills\/plugin-post-status-info.md\">PluginPostStatusInfo<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/slotfills\/plugin-pre-publish-panel.md\">PluginPrePublishPanel<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/slotfills\/plugin-sidebar.md\">PluginSidebar<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/slotfills\/plugin-sidebar-more-menu-item.md\">PluginSidebarMoreMenuItem<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"\/docs\/reference-guides\/theme-json-reference\/README.md\">Theme.json Reference<\/a><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/theme-json-reference\/theme-json-living.md\">Version 2 (living reference)<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/theme-json-reference\/theme-json-v1.md\">Version 1<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/theme-json-reference\/theme-json-migrations.md\">Migrating to Newer Versions<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"\/docs\/reference-guides\/richtext.md\">RichText Reference<\/a><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"\/packages\/components\/README.md\">Component Reference<\/a><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"\/docs\/reference-guides\/packages.md\">Package Reference<\/a><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"\/docs\/reference-guides\/data\/README.md\">Data Module Reference<\/a><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core.md\"><strong>core<\/strong>: WordPress Core Data<\/a><!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-annotations.md\"><strong>core\/annotations<\/strong>: Annotations<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-block-directory.md\"><strong>core\/block-directory<\/strong>: Block directory<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-block-editor.md\"><strong>core\/block-editor<\/strong>: The Block Editor\u2019s Data<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-blocks.md\"><strong>core\/blocks<\/strong>: Block Types Data<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-customize-widgets.md\"><strong>core\/customize-widgets<\/strong>: Customize Widgets<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-edit-post.md\"><strong>core\/edit-post<\/strong>: The Editor\u2019s UI Data<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-edit-site.md\"><strong>core\/edit-site<\/strong>: Edit Site<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-edit-widgets.md\"><strong>core\/edit-widgets<\/strong>: Edit Widgets<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-editor.md\"><strong>core\/editor<\/strong>: The Post Editor\u2019s Data<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-keyboard-shortcuts.md\"><strong>core\/keyboard-shortcuts<\/strong>: The Keyboard Shortcuts Data<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-notices.md\"><strong>core\/notices<\/strong>: Notices Data<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-nux.md\"><strong>core\/nux<\/strong>: The NUX (New User Experience) Data<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-preferences.md\"><strong>core\/preferences<\/strong>: Preferences<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-reusable-blocks.md\"><strong>core\/reusable-blocks<\/strong>: Reusable blocks<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-rich-text.md\"><strong>core\/rich-text<\/strong>: Rich Text<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-viewport.md\"><strong>core\/viewport<\/strong>: The Viewport Data<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Reference Guides\n\n## [Block API Reference](\/docs\/reference-guides\/block-api\/README.md)\n\n-   [Annotations](\/docs\/reference-guides\/block-api\/block-annotations.md)\n-   [API Versions](\/docs\/reference-guides\/block-api\/block-api-versions.md)\n-   [Attributes](\/docs\/reference-guides\/block-api\/block-attributes.md)\n-   [Context](\/docs\/reference-guides\/block-api\/block-context.md)\n-   [Deprecation](\/docs\/reference-guides\/block-api\/block-deprecation.md)\n-   [Edit and Save](\/docs\/reference-guides\/block-api\/block-edit-save.md)\n-   [Patterns](\/docs\/reference-guides\/block-api\/block-patterns.md)\n-   [Registration](\/docs\/reference-guides\/block-api\/block-registration.md)\n-   [Supports](\/docs\/reference-guides\/block-api\/block-supports.md)\n-   [Templates](\/docs\/reference-guides\/block-api\/block-templates.md)\n-   [Transformations](\/docs\/reference-guides\/block-api\/block-transforms.md)\n-   [Metadata](\/docs\/reference-guides\/block-api\/block-metadata.md)\n-   [Variations](\/docs\/reference-guides\/block-api\/block-variations.md)\n\n## [Hooks Reference](\/docs\/reference-guides\/filters\/README.md)\n\n-   [Block Filters](\/docs\/reference-guides\/filters\/block-filters.md)\n-   [Editor Hooks](\/docs\/reference-guides\/filters\/editor-filters.md)\n-   [i18n Hooks](\/docs\/reference-guides\/filters\/i18n-filters.md)\n-   [Parser Hooks](\/docs\/reference-guides\/filters\/parser-filters.md)\n-   [Autocomplete](\/docs\/reference-guides\/filters\/autocomplete-filters.md)\n-   [Global Styles Hooks](\/docs\/reference-guides\/filters\/global-styles-filters.md)\n\n## [SlotFills Reference](\/docs\/reference-guides\/slotfills\/README.md)\n\n-   [MainDashboardButton](\/docs\/reference-guides\/slotfills\/main-dashboard-button.md)\n-   [PluginBlockSettingsMenuItem](\/docs\/reference-guides\/slotfills\/plugin-block-settings-menu-item.md)\n-   [PluginDocumentSettingPanel](\/docs\/reference-guides\/slotfills\/plugin-document-setting-panel.md)\n-   [PluginMoreMenuItem](\/docs\/reference-guides\/slotfills\/plugin-more-menu-item.md)\n-   [PluginPostPublishPanel](\/docs\/reference-guides\/slotfills\/plugin-post-publish-panel.md)\n-   [PluginPostStatusInfo](\/docs\/reference-guides\/slotfills\/plugin-post-status-info.md)\n-   [PluginPrePublishPanel](\/docs\/reference-guides\/slotfills\/plugin-pre-publish-panel.md)\n-   [PluginSidebar](\/docs\/reference-guides\/slotfills\/plugin-sidebar.md)\n-   [PluginSidebarMoreMenuItem](\/docs\/reference-guides\/slotfills\/plugin-sidebar-more-menu-item.md)\n\n## [Theme.json Reference](\/docs\/reference-guides\/theme-json-reference\/README.md)\n\n-   [Version 2 (living reference)](\/docs\/reference-guides\/theme-json-reference\/theme-json-living.md)\n-   [Version 1](\/docs\/reference-guides\/theme-json-reference\/theme-json-v1.md)\n-   [Migrating to Newer Versions](\/docs\/reference-guides\/theme-json-reference\/theme-json-migrations.md)\n\n## [RichText Reference](\/docs\/reference-guides\/richtext.md)\n\n## [Component Reference](\/packages\/components\/README.md)\n\n## [Package Reference](\/docs\/reference-guides\/packages.md)\n\n## [Data Module Reference](\/docs\/reference-guides\/data\/README.md)\n\n-   [**core**: WordPress Core Data](\/docs\/reference-guides\/data\/data-core.md)\n    -   [**core\/annotations**: Annotations](\/docs\/reference-guides\/data\/data-core-annotations.md)\n    -   [**core\/block-directory**: Block directory](\/docs\/reference-guides\/data\/data-core-block-directory.md)\n    -   [**core\/block-editor**: The Block Editor\u2019s Data](\/docs\/reference-guides\/data\/data-core-block-editor.md)\n    -   [**core\/blocks**: Block Types Data](\/docs\/reference-guides\/data\/data-core-blocks.md)\n    -   [**core\/customize-widgets**: Customize Widgets](\/docs\/reference-guides\/data\/data-core-customize-widgets.md)\n    -   [**core\/edit-post**: The Editor\u2019s UI Data](\/docs\/reference-guides\/data\/data-core-edit-post.md)\n    -   [**core\/edit-site**: Edit Site](\/docs\/reference-guides\/data\/data-core-edit-site.md)\n    -   [**core\/edit-widgets**: Edit Widgets](\/docs\/reference-guides\/data\/data-core-edit-widgets.md)\n    -   [**core\/editor**: The Post Editor\u2019s Data](\/docs\/reference-guides\/data\/data-core-editor.md)\n    -   [**core\/keyboard-shortcuts**: The Keyboard Shortcuts Data](\/docs\/reference-guides\/data\/data-core-keyboard-shortcuts.md)\n    -   [**core\/notices**: Notices Data](\/docs\/reference-guides\/data\/data-core-notices.md)\n    -   [**core\/nux**: The NUX (New User Experience) Data](\/docs\/reference-guides\/data\/data-core-nux.md)\n    -   [**core\/preferences**: Preferences](\/docs\/reference-guides\/data\/data-core-preferences.md)\n    -   [**core\/reusable-blocks**: Reusable blocks](\/docs\/reference-guides\/data\/data-core-reusable-blocks.md)\n    -   [**core\/rich-text**: Rich Text](\/docs\/reference-guides\/data\/data-core-rich-text.md)\n    -   [**core\/viewport**: The Viewport Data](\/docs\/reference-guides\/data\/data-core-viewport.md)\n"
    },
    {
        "path": "\/markdown\/reference-guides\/richtext.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">RichText Reference<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>RichText is a component that allows developers to render a <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/Guide\/HTML\/Editable_content\"><code>contenteditable<\/code> input<\/a>, providing users with the option to format block content to make it bold, italics, linked, or use other formatting.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The RichText component is extremely powerful because it provides built-in functionality you won't find in other components:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Consistent Styling in the Admin and Frontend:<\/strong> The editable container can be set to any block-level element, such as a <code>div<\/code>, <code>h2<\/code> or <code>p<\/code> tag. This allows the styles you apply in style.css to more easily apply on the frontend and admin, without having to rewrite them in editor.css.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Cohesive Placeholder Text:<\/strong> Before the user writes their content, it's easy to include placeholder text that's already styled to match the rest of the block editor.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Control Over Formatting Options:<\/strong> It's possible to dictate exactly which formatting options you want to allow for the RichText field. For example, you can dictate whether to allow the user to make text bold, italics or both.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Unlike other components that exist in the <a href=\"\/packages\/components\/README.md\">Component Reference<\/a> section, RichText lives separately because it only makes sense within the block editor, and not within other areas of WordPress.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Property reference<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For a list of the possible properties to pass your RichText component, <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/rich-text\/README.md\">check out the component documentation on GitHub<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Core blocks using the RichText component<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There are a number of core blocks using the RichText component. The JavaScript edit function linked below for each block can be used as a best practice reference while creating your own blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-library\/src\/button\/edit.js\">Button<\/a>:<\/strong> RichText is used to enter the button's text.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-library\/src\/heading\/edit.js\">Heading<\/a>:<\/strong> RichText is used to enter the heading's text.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-library\/src\/quote\/edit.js\">Quote<\/a>:<\/strong> RichText is used in two places, for both the quotation and citation text.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-library\/src\/search\/edit.js\">Search<\/a>:<\/strong> RichText is used in two places, for both the label above the search field and the submit button text.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Example<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerBlockType } from '@wordpress\/blocks';\nimport { useBlockProps, RichText } from '@wordpress\/block-editor';\n\nregisterBlockType( \/* ... *\/, {\n\t\/\/ ...\n\n\tattributes: {\n\t\tcontent: {\n\t\t\ttype: 'string',\n\t\t\tsource: 'html',\n\t\t\tselector: 'h2',\n\t\t},\n\t},\n\n\tedit( { attributes, setAttributes } ) {\n\t\tconst blockProps = useBlockProps();\n\n\t\treturn (\n\t\t\t<richtext<br>\t\t\t\t{ ...blockProps }\n\t\t\t\ttagName=\"h2\" \/\/ The tag here is the element output and editable in the admin\n\t\t\t\tvalue={ attributes.content } \/\/ Any existing content, either from the database or an attribute default\n\t\t\t\tallowedFormats={ &#91; 'core\/bold', 'core\/italic' ] } \/\/ Allow the content to be made bold or italic, but do not allow other formatting options\n\t\t\t\tonChange={ ( content ) => setAttributes( { content } ) } \/\/ Store updated content as a block attribute\n\t\t\t\tplaceholder={ __( 'Heading...' ) } \/\/ Display this text before any content has been added by the user\n\t\t\t\/>\n\t\t);\n\t},\n\n\tsave( { attributes } ) {\n\t\tconst blockProps = useBlockProps.save();\n\n\t\treturn <richtext.content {=\"\" ...blockprops=\"\" }=\"\" tagname=\"h2\" value=\"{\" attributes.content=\"\">; \/\/ Saves <h2>Content added in the editor...<\/h2> to the database for frontend display\n\t}\n} );\n<\/richtext.content><\/richtext<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Common issues and solutions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>While using the RichText component a number of common issues tend to appear.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">HTML formatting tags display in the content<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If the HTML tags from text formatting such as <code>&lt;strong><\/code> or <code>&lt;em><\/code> are being escaped and displayed on the frontend of the site, this is likely due to an issue in your save function. Make sure your code looks something like <code>&lt;RichText.Content tagName=\"h2\" value={ heading } \/><\/code> (JSX) within your save function instead of simply outputting the value with <code>&lt;h2>{ heading }&lt;\/h2><\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Unwanted formatting options still display<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Before moving forward, consider if using the RichText component makes sense at all. Would it be better to use a basic <code>input<\/code> or <code>textarea<\/code> element? If you don't think any formatting should be possible, these HTML tags may make more sense.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you'd still like to use RichText, you can eliminate all of the formatting options by specifying the <code>withoutInteractiveFormatting<\/code> property.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you want to limit the formats allowed, you can specify using <code>allowedFormats<\/code> property in your code, see the example above or <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/rich-text\/README.md#allowedformats-array\">the component documentation<\/a> for details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Disable specific format types in Editor<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The RichText component uses formats to display inline elements, for example images within the paragraph block. If you just want to disable a format from the editor, you can use the <code>unregisterFormatType<\/code> function. For example to disable inline images, use:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.richText.unregisterFormatType( 'core\/image' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>To apply, you would need to enqueue the above script in your plugin or theme. See the JavaScript tutorial for <a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/javascript\/loading-javascript\/\">how to load JavaScript in WordPress<\/a>.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# RichText Reference\n\nRichText is a component that allows developers to render a [`contenteditable` input](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/Guide\/HTML\/Editable_content), providing users with the option to format block content to make it bold, italics, linked, or use other formatting.\n\nThe RichText component is extremely powerful because it provides built-in functionality you won't find in other components:\n\n-   **Consistent Styling in the Admin and Frontend:** The editable container can be set to any block-level element, such as a `div`, `h2` or `p` tag. This allows the styles you apply in style.css to more easily apply on the frontend and admin, without having to rewrite them in editor.css.\n-   **Cohesive Placeholder Text:** Before the user writes their content, it's easy to include placeholder text that's already styled to match the rest of the block editor.\n-   **Control Over Formatting Options:** It's possible to dictate exactly which formatting options you want to allow for the RichText field. For example, you can dictate whether to allow the user to make text bold, italics or both.\n\nUnlike other components that exist in the [Component Reference](\/packages\/components\/README.md) section, RichText lives separately because it only makes sense within the block editor, and not within other areas of WordPress.\n\n## Property reference\n\nFor a list of the possible properties to pass your RichText component, [check out the component documentation on GitHub](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/rich-text\/README.md).\n\n## Core blocks using the RichText component\n\nThere are a number of core blocks using the RichText component. The JavaScript edit function linked below for each block can be used as a best practice reference while creating your own blocks.\n\n-   **[Button](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-library\/src\/button\/edit.js):** RichText is used to enter the button's text.\n-   **[Heading](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-library\/src\/heading\/edit.js):** RichText is used to enter the heading's text.\n-   **[Quote](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-library\/src\/quote\/edit.js):** RichText is used in two places, for both the quotation and citation text.\n-   **[Search](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-library\/src\/search\/edit.js):** RichText is used in two places, for both the label above the search field and the submit button text.\n\n## Example\n\n\n\n```jsx\nimport { registerBlockType } from '@wordpress\/blocks';\nimport { useBlockProps, RichText } from '@wordpress\/block-editor';\n\nregisterBlockType( \/* ... *\/, {\n\t\/\/ ...\n\n\tattributes: {\n\t\tcontent: {\n\t\t\ttype: 'string',\n\t\t\tsource: 'html',\n\t\t\tselector: 'h2',\n\t\t},\n\t},\n\n\tedit( { attributes, setAttributes } ) {\n\t\tconst blockProps = useBlockProps();\n\n\t\treturn (\n\t\t\t<RichText\n\t\t\t\t{ ...blockProps }\n\t\t\t\ttagName=\"h2\" \/\/ The tag here is the element output and editable in the admin\n\t\t\t\tvalue={ attributes.content } \/\/ Any existing content, either from the database or an attribute default\n\t\t\t\tallowedFormats={ [ 'core\/bold', 'core\/italic' ] } \/\/ Allow the content to be made bold or italic, but do not allow other formatting options\n\t\t\t\tonChange={ ( content ) => setAttributes( { content } ) } \/\/ Store updated content as a block attribute\n\t\t\t\tplaceholder={ __( 'Heading...' ) } \/\/ Display this text before any content has been added by the user\n\t\t\t\/>\n\t\t);\n\t},\n\n\tsave( { attributes } ) {\n\t\tconst blockProps = useBlockProps.save();\n\n\t\treturn <RichText.Content { ...blockProps } tagName=\"h2\" value={ attributes.content } \/>; \/\/ Saves <h2>Content added in the editor...<\/h2> to the database for frontend display\n\t}\n} );\n```\n\n## Common issues and solutions\n\nWhile using the RichText component a number of common issues tend to appear.\n\n### HTML formatting tags display in the content\n\nIf the HTML tags from text formatting such as `<strong>` or `<em>` are being escaped and displayed on the frontend of the site, this is likely due to an issue in your save function. Make sure your code looks something like `<RichText.Content tagName=\"h2\" value={ heading } \/>` (JSX) within your save function instead of simply outputting the value with `<h2>{ heading }<\/h2>`.\n\n### Unwanted formatting options still display\n\nBefore moving forward, consider if using the RichText component makes sense at all. Would it be better to use a basic `input` or `textarea` element? If you don't think any formatting should be possible, these HTML tags may make more sense.\n\nIf you'd still like to use RichText, you can eliminate all of the formatting options by specifying the `withoutInteractiveFormatting` property.\n\nIf you want to limit the formats allowed, you can specify using `allowedFormats` property in your code, see the example above or [the component documentation](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/rich-text\/README.md#allowedformats-array) for details.\n\n### Disable specific format types in Editor\n\nThe RichText component uses formats to display inline elements, for example images within the paragraph block. If you just want to disable a format from the editor, you can use the `unregisterFormatType` function. For example to disable inline images, use:\n\n```\nwp.richText.unregisterFormatType( 'core\/image' );\n```\n\nTo apply, you would need to enqueue the above script in your plugin or theme. See the JavaScript tutorial for [how to load JavaScript in WordPress](https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/javascript\/loading-javascript\/).\n"
    },
    {
        "path": "\/markdown\/reference-guides\/packages.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Package Reference<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>WordPress exposes a list of JavaScript packages and tools for WordPress development.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Using the packages via WordPress global<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>JavaScript packages are available as a registered script in WordPress and can be accessed using the <code>wp<\/code> global variable.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you wanted to use the <code>PlainText<\/code> component from the block editor module, first you would specify <code>wp-block-editor<\/code> as a dependency when you enqueue your script:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp_enqueue_script(\n\t'my-custom-block',\n\tplugins_url( $block_path, __FILE__ ),\n\tarray( 'react', 'wp-blocks', 'wp-block-editor', 'wp-i18n' )\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>After the dependency is declared, you can access the module in your JavaScript code using the global <code>wp<\/code> like so:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const { PlainText } = wp.blockEditor;\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Using the packages via npm<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>All the packages are also available on <a href=\"https:\/\/www.npmjs.com\/org\/wordpress\">npm<\/a> if you want to bundle them in your code.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using the same <code>PlainText<\/code> example, you would install the block editor module with npm:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm install @wordpress\/block-editor --save\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Once installed, you can access the component in your code using:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { PlainText } from '@wordpress\/block-editor';\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Testing JavaScript code from a specific major WordPress version<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There is a way to quickly install a version of the individual WordPress package used with a given WordPress major version using <a href=\"https:\/\/docs.npmjs.com\/cli\/v8\/commands\/npm-dist-tag\">npm distribution tags<\/a> (example for WordPress <code>5.8.x<\/code>):<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm install @wordpress\/block-editor@wp-5.8\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>It\u2019s also possible to update all existing WordPress packages in the project with a single command:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npx @wordpress\/scripts packages-update --dist-tag=wp-5.8\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>All major WordPress versions starting from <code>5.7.x<\/code> are supported (e.g., <code>wp-5.7<\/code> or <code>wp-6.0<\/code>). Each individual dist-tag always points to the latest bug fix release for that major version line.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Package Reference\n\nWordPress exposes a list of JavaScript packages and tools for WordPress development.\n\n## Using the packages via WordPress global\n\nJavaScript packages are available as a registered script in WordPress and can be accessed using the `wp` global variable.\n\nIf you wanted to use the `PlainText` component from the block editor module, first you would specify `wp-block-editor` as a dependency when you enqueue your script:\n\n```php\nwp_enqueue_script(\n\t'my-custom-block',\n\tplugins_url( $block_path, __FILE__ ),\n\tarray( 'react', 'wp-blocks', 'wp-block-editor', 'wp-i18n' )\n);\n```\n\nAfter the dependency is declared, you can access the module in your JavaScript code using the global `wp` like so:\n\n```js\nconst { PlainText } = wp.blockEditor;\n```\n\n## Using the packages via npm\n\nAll the packages are also available on [npm](https:\/\/www.npmjs.com\/org\/wordpress) if you want to bundle them in your code.\n\nUsing the same `PlainText` example, you would install the block editor module with npm:\n\n```bash\nnpm install @wordpress\/block-editor --save\n```\n\nOnce installed, you can access the component in your code using:\n\n```js\nimport { PlainText } from '@wordpress\/block-editor';\n```\n\n## Testing JavaScript code from a specific major WordPress version\n\nThere is a way to quickly install a version of the individual WordPress package used with a given WordPress major version using [npm distribution tags](https:\/\/docs.npmjs.com\/cli\/v8\/commands\/npm-dist-tag) (example for WordPress `5.8.x`):\n\n```bash\nnpm install @wordpress\/block-editor@wp-5.8\n```\n\nIt\u2019s also possible to update all existing WordPress packages in the project with a single command:\n\n```bash\nnpx @wordpress\/scripts packages-update --dist-tag=wp-5.8\n```\n\nAll major WordPress versions starting from `5.7.x` are supported (e.g., `wp-5.7` or `wp-6.0`). Each individual dist-tag always points to the latest bug fix release for that major version line.\n"
    },
    {
        "path": "\/markdown\/reference-guides\/theme-json-reference\/theme-json-migrations.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Migrating to Newer Versions<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This guide documents the changes between different <code>theme.json<\/code> versions and how to upgrade. Using older versions will continue to be supported. Upgrading is recommended because new development will continue in the newer versions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Migrating from v1 to v2<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Upgrading to v2 enables some new features and adjusts the naming of some old features to be more consistent with one another.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>How to migrate from v1 to v2:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Update <code>version<\/code> to <code>2<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Rename the properties that were updated (see below) if you're using them.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Refer to the <a href=\"https:\/\/make.wordpress.org\/core\/2022\/01\/08\/updates-for-settings-styles-and-theme-json\/\">dev note for the release<\/a> and the <a href=\"\/docs\/reference-guides\/theme-json-reference\/README.md\">reference documents<\/a> for the respective v1 and v2 versions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Renamed properties<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>| v1                                         | v2                                   |<br>| ------------------------------------------ | ------------------------------------ |<br>| <code>settings.border.customRadius<\/code>             | <code>settings.border.radius<\/code>             |<br>| <code>settings.spacing.customMargin<\/code>            | <code>settings.spacing.margin<\/code>            |<br>| <code>settings.spacing.customPadding<\/code>           | <code>settings.spacing.padding<\/code>           |<br>| <code>settings.typography.customLineHeight<\/code>     | <code>settings.typography.lineHeight<\/code>     |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">New properties<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>New top-level properties: <code>customTemplates<\/code>, <code>templateParts<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Additions to settings:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>settings.appearanceTools<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>settings.border.color<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>settings.border.style<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>settings.border.width<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>settings.color.background<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>settings.color.defaultGradients<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>settings.color.defaultPalette<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>settings.color.text<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>settings.spacing.blockGap<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>settings.typography.fontFamilies<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>settings.typography.fontStyle<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>settings.typography.fontWeight<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>settings.typography.letterSpacing<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>settings.typography.textColumns<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>settings.typography.textDecoration<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>settings.typography.textTransform<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Additions to styles:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>styles.border.color<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>styles.border.style<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>styles.border.width<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>styles.filter.duotone<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>styles.spacing.blockGap<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>styles.typography.fontFamily<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>styles.typography.fontStyle<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>styles.typography.fontWeight<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>styles.typography.letterSpacing<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>styles.typography.textColumns<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>styles.typography.textDecoration<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>styles.typography.textTransform<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Changes to property values<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The default font sizes provided by core (<code>settings.typography.fontSizes<\/code>) have been updated. The Normal and Huge sizes (with <code>normal<\/code> and <code>huge<\/code> slugs) have been removed from the list, and Extra Large (<code>x-large<\/code> slug) has been added. When the UI controls show the default values provided by core, Normal and Huge will no longer be present. However, their CSS classes and CSS Custom Properties are still enqueued to make sure existing content that uses them still works as expected.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Migrating to Newer Versions\n\nThis guide documents the changes between different `theme.json` versions and how to upgrade. Using older versions will continue to be supported. Upgrading is recommended because new development will continue in the newer versions.\n\n## Migrating from v1 to v2\n\nUpgrading to v2 enables some new features and adjusts the naming of some old features to be more consistent with one another.\n\nHow to migrate from v1 to v2:\n\n1. Update `version` to `2`.\n2. Rename the properties that were updated (see below) if you're using them.\n\nRefer to the [dev note for the release](https:\/\/make.wordpress.org\/core\/2022\/01\/08\/updates-for-settings-styles-and-theme-json\/) and the [reference documents](\/docs\/reference-guides\/theme-json-reference\/README.md) for the respective v1 and v2 versions.\n\n### Renamed properties\n\n| v1                                         | v2                                   |\n| ------------------------------------------ | ------------------------------------ |\n| `settings.border.customRadius`             | `settings.border.radius`             |\n| `settings.spacing.customMargin`            | `settings.spacing.margin`            |\n| `settings.spacing.customPadding`           | `settings.spacing.padding`           |\n| `settings.typography.customLineHeight`     | `settings.typography.lineHeight`     |\n\n### New properties\n\nNew top-level properties: `customTemplates`, `templateParts`.\n\nAdditions to settings:\n\n- `settings.appearanceTools`\n- `settings.border.color`\n- `settings.border.style`\n- `settings.border.width`\n- `settings.color.background`\n- `settings.color.defaultGradients`\n- `settings.color.defaultPalette`\n- `settings.color.text`\n- `settings.spacing.blockGap`\n- `settings.typography.fontFamilies`\n- `settings.typography.fontStyle`\n- `settings.typography.fontWeight`\n- `settings.typography.letterSpacing`\n- `settings.typography.textColumns`\n- `settings.typography.textDecoration`\n- `settings.typography.textTransform`\n\nAdditions to styles:\n\n- `styles.border.color`\n- `styles.border.style`\n- `styles.border.width`\n- `styles.filter.duotone`\n- `styles.spacing.blockGap`\n- `styles.typography.fontFamily`\n- `styles.typography.fontStyle`\n- `styles.typography.fontWeight`\n- `styles.typography.letterSpacing`\n- `styles.typography.textColumns`\n- `styles.typography.textDecoration`\n- `styles.typography.textTransform`\n\n### Changes to property values\n\nThe default font sizes provided by core (`settings.typography.fontSizes`) have been updated. The Normal and Huge sizes (with `normal` and `huge` slugs) have been removed from the list, and Extra Large (`x-large` slug) has been added. When the UI controls show the default values provided by core, Normal and Huge will no longer be present. However, their CSS classes and CSS Custom Properties are still enqueued to make sure existing content that uses them still works as expected.\n"
    },
    {
        "path": "\/markdown\/reference-guides\/theme-json-reference\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Theme.json Reference<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This reference guide lists the settings and style properties defined in the theme.json schema. See the <a href=\"\/docs\/how-to-guides\/themes\/global-settings-and-styles.md\">theme.json how to guide<\/a> for examples and guide on how to use the theme.json file in your theme.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/theme-json-reference\/theme-json-living.md\">Version 2 (living reference)<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Older versions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/theme-json-reference\/theme-json-migrations.md\">Migrating to Newer Theme.json Versions<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/theme-json-reference\/theme-json-v1.md\">Version 1<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Theme.json Reference\n\nThis reference guide lists the settings and style properties defined in the theme.json schema. See the [theme.json how to guide](\/docs\/how-to-guides\/themes\/global-settings-and-styles.md) for examples and guide on how to use the theme.json file in your theme.\n\n-   [Version 2 (living reference)](\/docs\/reference-guides\/theme-json-reference\/theme-json-living.md)\n\n## Older versions\n\n-   [Migrating to Newer Theme.json Versions](\/docs\/reference-guides\/theme-json-reference\/theme-json-migrations.md)\n-   [Version 1](\/docs\/reference-guides\/theme-json-reference\/theme-json-v1.md)\n"
    },
    {
        "path": "\/markdown\/reference-guides\/theme-json-reference\/theme-json-living.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Theme.json Version 2<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>This is the living specification for  <strong>version 2<\/strong> of <code>theme.json<\/code>. This version works with WordPress 5.9 or later, and the latest Gutenberg plugin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are some related documents that you may be interested in:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>the <a href=\"\/docs\/reference-guides\/theme-json-reference\/theme-json-v1.md\">theme.json v1<\/a> specification, and<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>the <a href=\"\/docs\/reference-guides\/theme-json-reference\/theme-json-migrations.md\">reference to migrate from theme.json v1 to v2<\/a>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>This reference guide lists the settings and style properties defined in the <code>theme.json<\/code> schema. See the <a href=\"\/docs\/how-to-guides\/themes\/global-settings-and-styles.md\">theme.json how to guide<\/a> for examples and guidance on how to use the <code>theme.json<\/code> file in your theme.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Schema<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Remembering the <code>theme.json<\/code> settings and properties while you develop can be difficult, so a <a href=\"https:\/\/schemas.wp.org\/trunk\/theme.json\">JSON schema<\/a> was created to help.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Code editors can pick up the schema and can provide helpful hints and suggestions such as tooltips, autocomplete, or schema validation in the editor. To use the schema in Visual Studio Code, add <code>$schema<\/code>: \"https:\/\/schemas.wp.org\/trunk\/theme.json\" to the beginning of your theme.json file together with a <code>version<\/code> corresponding to the version you wish to use, e.g.:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n  \"$schema\": \"https:\/\/schemas.wp.org\/trunk\/theme.json\",\n  \"version\": 2,\n  ...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:html -->\n<!-- START TOKEN Autogenerated - DO NOT EDIT -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Settings<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">appearanceTools<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Setting that enables the following UI tools:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>background: backgroundImage, backgroundSize<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>border: color, radius, style, width<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>color: link, heading, button, caption<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>dimensions: aspectRatio, minHeight<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>position: sticky<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>spacing: blockGap, margin, padding<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>typography: lineHeight<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>shadow: defaultPresets<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">useRootPaddingAwareAlignments<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em><strong>Note:<\/strong> Since WordPress 6.1.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Enables root padding (the values from <code>styles.spacing.padding<\/code>) to be applied to the contents of full-width blocks instead of the root block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Please note that when using this setting, <code>styles.spacing.padding<\/code> should always be set as an object with <code>top<\/code>, <code>right<\/code>, <code>bottom<\/code>, <code>left<\/code> values declared separately.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">border<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Settings related to borders.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property  | Type   | Default | Props  |<br>| ---       | ---    | ---    |---   |<br>| color | boolean | false |  |<br>| radius | boolean | false |  |<br>| style | boolean | false |  |<br>| width | boolean | false |  |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">shadow<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Settings related to shadows.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property  | Type   | Default | Props  |<br>| ---       | ---    | ---    |---   |<br>| defaultPresets | boolean | false |  |<br>| presets | array |  | name, shadow, slug |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">color<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Settings related to colors.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property  | Type   | Default | Props  |<br>| ---       | ---    | ---    |---   |<br>| background | boolean | true |  |<br>| custom | boolean | true |  |<br>| customDuotone | boolean | true |  |<br>| customGradient | boolean | true |  |<br>| defaultDuotone | boolean | true |  |<br>| defaultGradients | boolean | true |  |<br>| defaultPalette | boolean | true |  |<br>| duotone | array |  | colors, name, slug |<br>| gradients | array |  | gradient, name, slug |<br>| link | boolean | false |  |<br>| palette | array |  | color, name, slug |<br>| text | boolean | true |  |<br>| heading | boolean | true |  |<br>| button | boolean | true |  |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">background<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Settings related to background.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property  | Type   | Default | Props  |<br>| ---       | ---    | ---    |---   |<br>| backgroundImage | boolean | false |  |<br>| backgroundSize | boolean | false |  |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">dimensions<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Settings related to dimensions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property  | Type   | Default | Props  |<br>| ---       | ---    | ---    |---   |<br>| aspectRatio | boolean | false |  |<br>| minHeight | boolean | false |  |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">layout<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Settings related to layout.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property  | Type   | Default | Props  |<br>| ---       | ---    | ---    |---   |<br>| contentSize | string |  |  |<br>| wideSize | string |  |  |<br>| allowEditing | boolean | true |  |<br>| allowCustomContentAndWideSize | boolean | true |  |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">lightbox<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Settings related to the lightbox.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property  | Type   | Default | Props  |<br>| ---       | ---    | ---    |---   |<br>| enabled | boolean |  |  |<br>| allowEditing | boolean |  |  |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">position<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Settings related to position.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property  | Type   | Default | Props  |<br>| ---       | ---    | ---    |---   |<br>| sticky | boolean | false |  |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">spacing<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Settings related to spacing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property  | Type   | Default | Props  |<br>| ---       | ---    | ---    |---   |<br>| blockGap | undefined | null |  |<br>| margin | boolean | false |  |<br>| padding | boolean | false |  |<br>| units | array | px,em,rem,vh,vw,% |  |<br>| customSpacingSize | boolean | true |  |<br>| spacingSizes | array |  | name, size, slug |<br>| spacingScale | object |  |  |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">typography<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Settings related to typography.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property  | Type   | Default | Props  |<br>| ---       | ---    | ---    |---   |<br>| customFontSize | boolean | true |  |<br>| fontStyle | boolean | true |  |<br>| fontWeight | boolean | true |  |<br>| fluid | undefined | false |  |<br>| letterSpacing | boolean | true |  |<br>| lineHeight | boolean | false |  |<br>| textColumns | boolean | false |  |<br>| textDecoration | boolean | true |  |<br>| writingMode | boolean | false |  |<br>| textTransform | boolean | true |  |<br>| dropCap | boolean | true |  |<br>| fontSizes | array |  | fluid, name, size, slug |<br>| fontFamilies | array |  | fontFace, fontFamily, name, slug |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">custom<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Generate custom CSS custom properties of the form <code>--wp--custom--{key}--{nested-key}: {value};<\/code>. <code>camelCased<\/code> keys are transformed to <code>kebab-case<\/code> as to follow the CSS property naming schema. Keys at different depth levels are separated by <code>--<\/code>, so keys should not include <code>--<\/code> in the name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Styles<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">border<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Border styles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property  | Type   |  Props  |<br>| ---       | ---    |---   |<br>| color | string, object |  |<br>| radius | string, object |  |<br>| style | string, object |  |<br>| width | string, object |  |<br>| top | object | color, style, width |<br>| right | object | color, style, width |<br>| bottom | object | color, style, width |<br>| left | object | color, style, width |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">color<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Color styles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property  | Type   |  Props  |<br>| ---       | ---    |---   |<br>| background | string, object |  |<br>| gradient | string, object |  |<br>| text | string, object |  |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">dimensions<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Dimensions styles<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property  | Type   |  Props  |<br>| ---       | ---    |---   |<br>| aspectRatio | string, object |  |<br>| minHeight | string, object |  |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">spacing<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Spacing styles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property  | Type   |  Props  |<br>| ---       | ---    |---   |<br>| blockGap | string, object |  |<br>| margin | object | bottom, left, right, top |<br>| padding | object | bottom, left, right, top |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">typography<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Typography styles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property  | Type   |  Props  |<br>| ---       | ---    |---   |<br>| fontFamily | string, object |  |<br>| fontSize | string, object |  |<br>| fontStyle | string, object |  |<br>| fontWeight | string, object |  |<br>| letterSpacing | string, object |  |<br>| lineHeight | string, object |  |<br>| textColumns | string |  |<br>| textDecoration | string, object |  |<br>| writingMode | string, object |  |<br>| textTransform | string, object |  |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">filter<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>CSS and SVG filter styles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property  | Type   |  Props  |<br>| ---       | ---    |---   |<br>| duotone | string, object |  |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">shadow<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Box shadow styles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">outline<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Outline styles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property  | Type   |  Props  |<br>| ---       | ---    |---   |<br>| color | string, object |  |<br>| offset | string, object |  |<br>| style | string, object |  |<br>| width | string, object |  |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">css<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Sets custom CSS to apply styling not covered by other theme.json properties.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">customTemplates<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Additional metadata for custom templates defined in the templates folder.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Type: <code>object<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property | Description | Type |<br>| ---      | ---         | ---  |<br>| name | Filename, without extension, of the template in the templates folder. | string |<br>| title | Title of the template, translatable. | string |<br>| postTypes | List of post types that can use this custom template. | array |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">templateParts<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Additional metadata for template parts defined in the parts folder.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Type: <code>object<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property | Description | Type |<br>| ---      | ---         | ---  |<br>| name | Filename, without extension, of the template in the parts folder. | string |<br>| title | Title of the template, translatable. | string |<br>| area | The area the template part is used for. Block variations for <code>header<\/code> and <code>footer<\/code> values exist and will be used when the area is set to one of those. | string |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Patterns<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>An array of pattern slugs to be registered from the Pattern Directory.<br>Type: <code>array<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<!-- END TOKEN Autogenerated - DO NOT EDIT -->\n<!-- \/wp:html -->",
        "markdown": "# Theme.json Version 2\n\n> This is the living specification for  **version 2** of `theme.json`. This version works with WordPress 5.9 or later, and the latest Gutenberg plugin.\n>\n> There are some related documents that you may be interested in: \n> - the [theme.json v1](\/docs\/reference-guides\/theme-json-reference\/theme-json-v1.md) specification, and \n> - the [reference to migrate from theme.json v1 to v2](\/docs\/reference-guides\/theme-json-reference\/theme-json-migrations.md).\n\nThis reference guide lists the settings and style properties defined in the `theme.json` schema. See the [theme.json how to guide](\/docs\/how-to-guides\/themes\/global-settings-and-styles.md) for examples and guidance on how to use the `theme.json` file in your theme.\n\n## Schema\n\nRemembering the `theme.json` settings and properties while you develop can be difficult, so a [JSON schema](https:\/\/schemas.wp.org\/trunk\/theme.json) was created to help.\n\nCode editors can pick up the schema and can provide helpful hints and suggestions such as tooltips, autocomplete, or schema validation in the editor. To use the schema in Visual Studio Code, add `$schema`: \"https:\/\/schemas.wp.org\/trunk\/theme.json\" to the beginning of your theme.json file together with a `version` corresponding to the version you wish to use, e.g.:\n\n```\n{\n  \"$schema\": \"https:\/\/schemas.wp.org\/trunk\/theme.json\",\n  \"version\": 2,\n  ...\n}\n```\n\n\n<!-- START TOKEN Autogenerated - DO NOT EDIT -->\n## Settings\n\n\n### appearanceTools\n\nSetting that enables the following UI tools:\n\n- background: backgroundImage, backgroundSize\n- border: color, radius, style, width\n- color: link, heading, button, caption\n- dimensions: aspectRatio, minHeight\n- position: sticky\n- spacing: blockGap, margin, padding\n- typography: lineHeight\n- shadow: defaultPresets\n\n\n---\n\n### useRootPaddingAwareAlignments\n\n_**Note:** Since WordPress 6.1._\n\nEnables root padding (the values from `styles.spacing.padding`) to be applied to the contents of full-width blocks instead of the root block.\n\nPlease note that when using this setting, `styles.spacing.padding` should always be set as an object with `top`, `right`, `bottom`, `left` values declared separately.\n\n\n---\n\n### border\n\nSettings related to borders.\n\n| Property  | Type   | Default | Props  |\n| ---       | ---    | ---    |---   |\n| color | boolean | false |  |\n| radius | boolean | false |  |\n| style | boolean | false |  |\n| width | boolean | false |  |\n\n---\n\n### shadow\n\nSettings related to shadows.\n\n| Property  | Type   | Default | Props  |\n| ---       | ---    | ---    |---   |\n| defaultPresets | boolean | false |  |\n| presets | array |  | name, shadow, slug |\n\n---\n\n### color\n\nSettings related to colors.\n\n| Property  | Type   | Default | Props  |\n| ---       | ---    | ---    |---   |\n| background | boolean | true |  |\n| custom | boolean | true |  |\n| customDuotone | boolean | true |  |\n| customGradient | boolean | true |  |\n| defaultDuotone | boolean | true |  |\n| defaultGradients | boolean | true |  |\n| defaultPalette | boolean | true |  |\n| duotone | array |  | colors, name, slug |\n| gradients | array |  | gradient, name, slug |\n| link | boolean | false |  |\n| palette | array |  | color, name, slug |\n| text | boolean | true |  |\n| heading | boolean | true |  |\n| button | boolean | true |  |\n\n---\n\n### background\n\nSettings related to background.\n\n| Property  | Type   | Default | Props  |\n| ---       | ---    | ---    |---   |\n| backgroundImage | boolean | false |  |\n| backgroundSize | boolean | false |  |\n\n---\n\n### dimensions\n\nSettings related to dimensions.\n\n| Property  | Type   | Default | Props  |\n| ---       | ---    | ---    |---   |\n| aspectRatio | boolean | false |  |\n| minHeight | boolean | false |  |\n\n---\n\n### layout\n\nSettings related to layout.\n\n| Property  | Type   | Default | Props  |\n| ---       | ---    | ---    |---   |\n| contentSize | string |  |  |\n| wideSize | string |  |  |\n| allowEditing | boolean | true |  |\n| allowCustomContentAndWideSize | boolean | true |  |\n\n---\n\n### lightbox\n\nSettings related to the lightbox.\n\n| Property  | Type   | Default | Props  |\n| ---       | ---    | ---    |---   |\n| enabled | boolean |  |  |\n| allowEditing | boolean |  |  |\n\n---\n\n### position\n\nSettings related to position.\n\n| Property  | Type   | Default | Props  |\n| ---       | ---    | ---    |---   |\n| sticky | boolean | false |  |\n\n---\n\n### spacing\n\nSettings related to spacing.\n\n| Property  | Type   | Default | Props  |\n| ---       | ---    | ---    |---   |\n| blockGap | undefined | null |  |\n| margin | boolean | false |  |\n| padding | boolean | false |  |\n| units | array | px,em,rem,vh,vw,% |  |\n| customSpacingSize | boolean | true |  |\n| spacingSizes | array |  | name, size, slug |\n| spacingScale | object |  |  |\n\n---\n\n### typography\n\nSettings related to typography.\n\n| Property  | Type   | Default | Props  |\n| ---       | ---    | ---    |---   |\n| customFontSize | boolean | true |  |\n| fontStyle | boolean | true |  |\n| fontWeight | boolean | true |  |\n| fluid | undefined | false |  |\n| letterSpacing | boolean | true |  |\n| lineHeight | boolean | false |  |\n| textColumns | boolean | false |  |\n| textDecoration | boolean | true |  |\n| writingMode | boolean | false |  |\n| textTransform | boolean | true |  |\n| dropCap | boolean | true |  |\n| fontSizes | array |  | fluid, name, size, slug |\n| fontFamilies | array |  | fontFace, fontFamily, name, slug |\n\n---\n\n### custom\n\nGenerate custom CSS custom properties of the form `--wp--custom--{key}--{nested-key}: {value};`. `camelCased` keys are transformed to `kebab-case` as to follow the CSS property naming schema. Keys at different depth levels are separated by `--`, so keys should not include `--` in the name.\n\n\n---\n## Styles\n\n\n### border\n\nBorder styles.\n\n| Property  | Type   |  Props  |\n| ---       | ---    |---   |\n| color | string, object |  |\n| radius | string, object |  |\n| style | string, object |  |\n| width | string, object |  |\n| top | object | color, style, width |\n| right | object | color, style, width |\n| bottom | object | color, style, width |\n| left | object | color, style, width |\n\n---\n\n### color\n\nColor styles.\n\n| Property  | Type   |  Props  |\n| ---       | ---    |---   |\n| background | string, object |  |\n| gradient | string, object |  |\n| text | string, object |  |\n\n---\n\n### dimensions\n\nDimensions styles\n\n| Property  | Type   |  Props  |\n| ---       | ---    |---   |\n| aspectRatio | string, object |  |\n| minHeight | string, object |  |\n\n---\n\n### spacing\n\nSpacing styles.\n\n| Property  | Type   |  Props  |\n| ---       | ---    |---   |\n| blockGap | string, object |  |\n| margin | object | bottom, left, right, top |\n| padding | object | bottom, left, right, top |\n\n---\n\n### typography\n\nTypography styles.\n\n| Property  | Type   |  Props  |\n| ---       | ---    |---   |\n| fontFamily | string, object |  |\n| fontSize | string, object |  |\n| fontStyle | string, object |  |\n| fontWeight | string, object |  |\n| letterSpacing | string, object |  |\n| lineHeight | string, object |  |\n| textColumns | string |  |\n| textDecoration | string, object |  |\n| writingMode | string, object |  |\n| textTransform | string, object |  |\n\n---\n\n### filter\n\nCSS and SVG filter styles.\n\n| Property  | Type   |  Props  |\n| ---       | ---    |---   |\n| duotone | string, object |  |\n\n---\n\n### shadow\n\nBox shadow styles.\n\n\n---\n\n### outline\n\nOutline styles.\n\n| Property  | Type   |  Props  |\n| ---       | ---    |---   |\n| color | string, object |  |\n| offset | string, object |  |\n| style | string, object |  |\n| width | string, object |  |\n\n---\n\n### css\n\nSets custom CSS to apply styling not covered by other theme.json properties.\n\n\n---\n## customTemplates\n\nAdditional metadata for custom templates defined in the templates folder.\n\nType: `object`.\n\n| Property | Description | Type |\n| ---      | ---         | ---  |\n| name | Filename, without extension, of the template in the templates folder. | string |\n| title | Title of the template, translatable. | string |\n| postTypes | List of post types that can use this custom template. | array |\n\n\n## templateParts\n\nAdditional metadata for template parts defined in the parts folder.\n\nType: `object`.\n\n| Property | Description | Type |\n| ---      | ---         | ---  |\n| name | Filename, without extension, of the template in the parts folder. | string |\n| title | Title of the template, translatable. | string |\n| area | The area the template part is used for. Block variations for `header` and `footer` values exist and will be used when the area is set to one of those. | string |\n\n\n## Patterns\n\nAn array of pattern slugs to be registered from the Pattern Directory.\nType: `array`.\n\n\n<!-- END TOKEN Autogenerated - DO NOT EDIT -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/theme-json-reference\/theme-json-v1.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Theme.json Version 1 Reference<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Theme.json version 2 has been released, see the <a href=\"\/docs\/reference-guides\/theme-json-reference\/theme-json-migrations.md#migrating-from-v1-to-v2\">theme.json migration guide<\/a> for updating to the latest version.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Settings<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">border<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Settings related to borders.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property     | Type    | Default | Props |<br>| ------------ | ------- | ------- | ----- |<br>| customRadius | boolean | false   |       |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">color<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Settings related to colors.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property       | Type    | Default | Props                |<br>| -------------- | ------- | ------- | -------------------- |<br>| custom         | boolean | true    |                      |<br>| customDuotone  | boolean | true    |                      |<br>| customGradient | boolean | true    |                      |<br>| duotone        | array   |         | colors, name, slug   |<br>| gradients      | array   |         | gradient, name, slug |<br>| link           | boolean | false   |                      |<br>| palette        | array   |         | color, name, slug    |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">layout<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Settings related to layout.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property    | Type   | Default | Props |<br>| ----------- | ------ | ------- | ----- |<br>| contentSize | string |         |       |<br>| wideSize    | string |         |       |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">spacing<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Settings related to spacing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property      | Type    | Default           | Props |<br>| ------------- | ------- | ----------------- | ----- |<br>| customMargin  | boolean | false             |       |<br>| customPadding | boolean | false             |       |<br>| units         | array   | px,em,rem,vh,vw,% |       |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">typography<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Settings related to typography.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property         | Type    | Default | Props            |<br>| ---------------- | ------- | ------- | ---------------- |<br>| customFontSize   | boolean | true    |                  |<br>| customLineHeight | boolean | false   |                  |<br>| dropCap          | boolean | true    |                  |<br>| fontSizes        | array   |         | name, size, slug |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">custom<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Generate custom CSS custom properties of the form <code>--wp--custom--{key}--{nested-key}: {value};<\/code>. <code>camelCased<\/code> keys are transformed to <code>kebab-case<\/code> as to follow the CSS property naming schema. Keys at different depth levels are separated by <code>--<\/code>, so keys should not include <code>--<\/code> in the name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Styles<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">border<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Border styles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property | Type   | Props |<br>| -------- | ------ | ----- |<br>| radius   | string |       |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">color<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Color styles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property   | Type   | Props |<br>| ---------- | ------ | ----- |<br>| background | string |       |<br>| gradient   | string |       |<br>| text       | string |       |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">spacing<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Spacing styles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property | Type   | Props                    |<br>| -------- | ------ | ------------------------ |<br>| margin   | object | bottom, left, right, top |<br>| padding  | object | bottom, left, right, top |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"\/>\n<!-- \/wp:separator -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">typography<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Typography styles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Property   | Type   | Props |<br>| ---------- | ------ | ----- |<br>| fontSize   | string |       |<br>| lineHeight | string |       |<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Theme.json Version 1 Reference\n\nTheme.json version 2 has been released, see the [theme.json migration guide](\/docs\/reference-guides\/theme-json-reference\/theme-json-migrations.md#migrating-from-v1-to-v2) for updating to the latest version.\n\n## Settings\n\n### border\n\nSettings related to borders.\n\n| Property     | Type    | Default | Props |\n| ------------ | ------- | ------- | ----- |\n| customRadius | boolean | false   |       |\n\n---\n\n### color\n\nSettings related to colors.\n\n| Property       | Type    | Default | Props                |\n| -------------- | ------- | ------- | -------------------- |\n| custom         | boolean | true    |                      |\n| customDuotone  | boolean | true    |                      |\n| customGradient | boolean | true    |                      |\n| duotone        | array   |         | colors, name, slug   |\n| gradients      | array   |         | gradient, name, slug |\n| link           | boolean | false   |                      |\n| palette        | array   |         | color, name, slug    |\n\n---\n\n### layout\n\nSettings related to layout.\n\n| Property    | Type   | Default | Props |\n| ----------- | ------ | ------- | ----- |\n| contentSize | string |         |       |\n| wideSize    | string |         |       |\n\n---\n\n### spacing\n\nSettings related to spacing.\n\n| Property      | Type    | Default           | Props |\n| ------------- | ------- | ----------------- | ----- |\n| customMargin  | boolean | false             |       |\n| customPadding | boolean | false             |       |\n| units         | array   | px,em,rem,vh,vw,% |       |\n\n---\n\n### typography\n\nSettings related to typography.\n\n| Property         | Type    | Default | Props            |\n| ---------------- | ------- | ------- | ---------------- |\n| customFontSize   | boolean | true    |                  |\n| customLineHeight | boolean | false   |                  |\n| dropCap          | boolean | true    |                  |\n| fontSizes        | array   |         | name, size, slug |\n\n---\n\n### custom\n\nGenerate custom CSS custom properties of the form `--wp--custom--{key}--{nested-key}: {value};`. `camelCased` keys are transformed to `kebab-case` as to follow the CSS property naming schema. Keys at different depth levels are separated by `--`, so keys should not include `--` in the name.\n\n---\n\n## Styles\n\n### border\n\nBorder styles.\n\n| Property | Type   | Props |\n| -------- | ------ | ----- |\n| radius   | string |       |\n\n---\n\n### color\n\nColor styles.\n\n| Property   | Type   | Props |\n| ---------- | ------ | ----- |\n| background | string |       |\n| gradient   | string |       |\n| text       | string |       |\n\n---\n\n### spacing\n\nSpacing styles.\n\n| Property | Type   | Props                    |\n| -------- | ------ | ------------------------ |\n| margin   | object | bottom, left, right, top |\n| padding  | object | bottom, left, right, top |\n\n---\n\n### typography\n\nTypography styles.\n\n| Property   | Type   | Props |\n| ---------- | ------ | ----- |\n| fontSize   | string |       |\n| lineHeight | string |       |\n"
    },
    {
        "path": "\/markdown\/reference-guides\/theme-json-reference\/styles-versions.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Available Styles Options<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>New styles options are integrated into theme.json on a regular basis. Knowing the style options available through theme.json or the styles editor at any given time can be challenging. To clarify, the table below indicates the WordPress version when each theme.json styles option became available and when a corresponding control was added to the user interface to allow management of the style from the Styles editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Styles keys<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>| Key | theme.json Since| Style Editor Since |<br>| --- | :---: | :---: |<br>| <code>color.gradient<\/code>              | 5.8 | 5.9 |<br>| <code>color.background<\/code>            | 5.8 | 5.9 |<br>| <code>color.text<\/code>                  | 5.8 | 5.9 |<br>| <code>border.color<\/code>                | 5.9 | 5.9 |<br>| <code>border.width<\/code>                | 5.9 | 5.9 |<br>| <code>border.style<\/code>                | 5.9 | 5.9 |<br>| <code>border.radius<\/code>               | 5.8 | 5.9 |<br>| <code>border.radius.topLeft<\/code>       | 5.9 | 5.9 |<br>| <code>border.radius.topRight<\/code>      | 5.9 | 5.9 |<br>| <code>border.radius.bottomLeft<\/code>    | 5.9 | 5.9 |<br>| <code>border.radius.bottomRight<\/code>   | 5.9 | 5.9 |<br>| <code>border.top.color<\/code>            | 6.1 | 6.1 |<br>| <code>border.top.width<\/code>            | 6.1 | 6.1 |<br>| <code>border.top.style<\/code>            | 6.1 | 6.1 |<br>| <code>border.right.color<\/code>          | 6.1 | 6.1 |<br>| <code>border.right.width<\/code>          | 6.1 | 6.1 |<br>| <code>border.right.style<\/code>          | 6.1 | 6.1 |<br>| <code>border.bottom.color<\/code>         | 6.1 | 6.1 |<br>| <code>border.bottom.width<\/code>         | 6.1 | 6.1 |<br>| <code>border.bottom.style<\/code>         | 6.1 | 6.1 |<br>| <code>border.left.color<\/code>           | 6.1 | 6.1 |<br>| <code>border.left.width<\/code>           | 6.1 | 6.1 |<br>| <code>border.left.style<\/code>           | 6.1 | 6.1 |<br>| <code>typography.fontFamily<\/code>       | 5.9 | 5.9 |<br>| <code>typography.fontSize<\/code>         | 5.8 | 5.9 |<br>| <code>typography.fontStyle<\/code>        | 5.9 | 5.9 |<br>| <code>typography.fontWeight<\/code>       | 5.9 | 5.9 |<br>| <code>typography.letterSpacing<\/code>    | 5.9 | 5.9 |<br>| <code>typography.lineHeight<\/code>       | 5.8 | 5.9 |<br>| <code>typography.textDecoration<\/code>   | 5.9 | 6.2 |<br>| <code>typography.textTransform<\/code>    | 5.9 | 6.0 |<br>| <code>spacing.padding<\/code>             | 5.9 | 5.9 |<br>| <code>spacing.padding.top<\/code>         | 5.8 | 5.9 |<br>| <code>spacing.padding.right<\/code>       | 5.8 | 5.9 |<br>| <code>spacing.padding.left<\/code>        | 5.8 | 5.9 |<br>| <code>spacing.padding.bottom<\/code>      | 5.8 | 5.9 |<br>| <code>spacing.margin<\/code>              | 5.9 | 5.9 |<br>| <code>spacing.margin.top<\/code>          | 5.8 | 5.9 |<br>| <code>spacing.margin.right<\/code>        | 5.8 | 5.9 |<br>| <code>spacing.margin.left<\/code>         | 5.8 | 5.9 |<br>| <code>spacing.margin.bottom<\/code>       | 5.8 | 5.9 |<br>| <code>spacing.blockGap<\/code>            | 5.9 | 5.9 |<br>| <code>dimensions.minHeight<\/code>        | 6.2 | N\/A |<br>| <code>outline.color<\/code>               | 6.2 | N\/A |<br>| <code>outline.offset<\/code>              | 6.2 | N\/A |<br>| <code>outline.style<\/code>               | 6.2 | N\/A |<br>| <code>outline.width<\/code>               | 6.2 | N\/A |<br>| <code>filter.duotone<\/code>              | 5.9 | N\/A |<br>| <code>shadow<\/code>                      | 6.1 | 6.2 |<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Available Styles Options\n\nNew styles options are integrated into theme.json on a regular basis. Knowing the style options available through theme.json or the styles editor at any given time can be challenging. To clarify, the table below indicates the WordPress version when each theme.json styles option became available and when a corresponding control was added to the user interface to allow management of the style from the Styles editor.\n\n## Styles keys\n\n| Key | theme.json Since| Style Editor Since |\n| --- | :---: | :---: |\n| `color.gradient`              | 5.8 | 5.9 |\n| `color.background`            | 5.8 | 5.9 |\n| `color.text`                  | 5.8 | 5.9 |\n| `border.color`                | 5.9 | 5.9 |\n| `border.width`                | 5.9 | 5.9 |\n| `border.style`                | 5.9 | 5.9 |\n| `border.radius`               | 5.8 | 5.9 |\n| `border.radius.topLeft`       | 5.9 | 5.9 |\n| `border.radius.topRight`      | 5.9 | 5.9 |\n| `border.radius.bottomLeft`    | 5.9 | 5.9 |\n| `border.radius.bottomRight`   | 5.9 | 5.9 |\n| `border.top.color`            | 6.1 | 6.1 |\n| `border.top.width`            | 6.1 | 6.1 |\n| `border.top.style`            | 6.1 | 6.1 |\n| `border.right.color`          | 6.1 | 6.1 |\n| `border.right.width`          | 6.1 | 6.1 |\n| `border.right.style`          | 6.1 | 6.1 |\n| `border.bottom.color`         | 6.1 | 6.1 |\n| `border.bottom.width`         | 6.1 | 6.1 |\n| `border.bottom.style`         | 6.1 | 6.1 |\n| `border.left.color`           | 6.1 | 6.1 |\n| `border.left.width`           | 6.1 | 6.1 |\n| `border.left.style`           | 6.1 | 6.1 |\n| `typography.fontFamily`       | 5.9 | 5.9 |\n| `typography.fontSize`         | 5.8 | 5.9 |\n| `typography.fontStyle`        | 5.9 | 5.9 |\n| `typography.fontWeight`       | 5.9 | 5.9 |\n| `typography.letterSpacing`    | 5.9 | 5.9 |\n| `typography.lineHeight`       | 5.8 | 5.9 |\n| `typography.textDecoration`   | 5.9 | 6.2 |\n| `typography.textTransform`    | 5.9 | 6.0 |\n| `spacing.padding`             | 5.9 | 5.9 |\n| `spacing.padding.top`         | 5.8 | 5.9 |\n| `spacing.padding.right`       | 5.8 | 5.9 |\n| `spacing.padding.left`        | 5.8 | 5.9 |\n| `spacing.padding.bottom`      | 5.8 | 5.9 |\n| `spacing.margin`              | 5.9 | 5.9 |\n| `spacing.margin.top`          | 5.8 | 5.9 |\n| `spacing.margin.right`        | 5.8 | 5.9 |\n| `spacing.margin.left`         | 5.8 | 5.9 |\n| `spacing.margin.bottom`       | 5.8 | 5.9 |\n| `spacing.blockGap`            | 5.9 | 5.9 |\n| `dimensions.minHeight`        | 6.2 | N\/A |\n| `outline.color`               | 6.2 | N\/A |\n| `outline.offset`              | 6.2 | N\/A |\n| `outline.style`               | 6.2 | N\/A |\n| `outline.width`               | 6.2 | N\/A |\n| `filter.duotone`              | 5.9 | N\/A |\n| `shadow`                      | 6.1 | 6.2 |\n"
    },
    {
        "path": "\/markdown\/reference-guides\/block-api\/block-annotations.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Annotations<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<div class=\"callout callout-alert\">\n<strong>Note:<\/strong> This API is experimental, that means it is subject to non-backward compatible changes or removal in any future version.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Annotations are a way to highlight a specific piece in a post created with the block editor. Examples of this include commenting on a piece of text and spellchecking. Both can use the annotations API to mark a piece of text.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">API<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To see the API for yourself the easiest way is to have a block that is at least 200 characters long without formatting and putting the following in the console:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.data.dispatch( 'core\/annotations' ).addAnnotation( {\n\tsource: 'my-annotations-plugin',\n\tblockClientId: wp.data.select( 'core\/block-editor' ).getBlockOrder()&#91; 0 ],\n\trichTextIdentifier: 'content',\n\trange: {\n\t\tstart: 50,\n\t\tend: 100,\n\t},\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The start and the end of the range should be calculated based only on the text of the relevant <code>RichText<\/code>. For example, in the following HTML position 0 will refer to the position before the capital S:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><strong>Strong text<\/strong>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>To help with determining the correct positions, the <code>wp.richText.create<\/code> method can be used. This will split a piece of HTML into text and formats.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>All available properties can be found in the API documentation of the <code>addAnnotation<\/code> action.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The property <code>richTextIdentifier<\/code> is the identifier of the RichText instance the annotation applies to. This is necessary because blocks may have multiple rich text instances that are used to manage data for different attributes, so you need to pass this in order to highlight text within the correct one.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example the Paragraph block only has a single RichText instance, with the identifier <code>content<\/code>. The quote block type has 2 RichText instances, so if you wish to highlight text in the citation, you need to pass <code>citation<\/code> as the <code>richTextIdentifier<\/code> when adding an annotation. To target the quote content, you need to use the identifier <code>value<\/code>. Refer to the source code of the block type to find the correct identifier.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block annotation<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It is also possible to annotate a block completely. In that case just provide the <code>selector<\/code> property and set it to <code>block<\/code>. The default <code>selector<\/code> is <code>range<\/code>, which can be used for text annotation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.data.dispatch( 'core\/annotations' ).addAnnotation( {\n\tsource: 'my-annotations-plugin',\n\tblockClientId: wp.data.select( 'core\/block-editor' ).getBlockOrder()&#91; 0 ],\n\tselector: 'block',\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This doesn't provide any styling out of the box, so you have to provide some CSS to make sure your annotation is shown:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>.is-annotated-by-my-annotations-plugin {\n\toutline: 1px solid black;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Text annotation<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The text annotation is controlled by the <code>start<\/code> and <code>end<\/code> properties. Simple <code>start<\/code> and <code>end<\/code> properties don't work for HTML, so these properties are assumed to be offsets within the <code>rich-text<\/code> internal structure. For simplicity you can think about this as if all HTML would be stripped out and then you calculate the <code>start<\/code> and the <code>end<\/code> of the annotation.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Annotations\n\n<div class=\"callout callout-alert\">\n<strong>Note:<\/strong> This API is experimental, that means it is subject to non-backward compatible changes or removal in any future version.\n<\/div>\n\nAnnotations are a way to highlight a specific piece in a post created with the block editor. Examples of this include commenting on a piece of text and spellchecking. Both can use the annotations API to mark a piece of text.\n\n## API\n\nTo see the API for yourself the easiest way is to have a block that is at least 200 characters long without formatting and putting the following in the console:\n\n```js\nwp.data.dispatch( 'core\/annotations' ).addAnnotation( {\n\tsource: 'my-annotations-plugin',\n\tblockClientId: wp.data.select( 'core\/block-editor' ).getBlockOrder()[ 0 ],\n\trichTextIdentifier: 'content',\n\trange: {\n\t\tstart: 50,\n\t\tend: 100,\n\t},\n} );\n```\n\nThe start and the end of the range should be calculated based only on the text of the relevant `RichText`. For example, in the following HTML position 0 will refer to the position before the capital S:\n\n```html\n<strong>Strong text<\/strong>\n```\n\nTo help with determining the correct positions, the `wp.richText.create` method can be used. This will split a piece of HTML into text and formats.\n\nAll available properties can be found in the API documentation of the `addAnnotation` action.\n\nThe property `richTextIdentifier` is the identifier of the RichText instance the annotation applies to. This is necessary because blocks may have multiple rich text instances that are used to manage data for different attributes, so you need to pass this in order to highlight text within the correct one.\n\nFor example the Paragraph block only has a single RichText instance, with the identifier `content`. The quote block type has 2 RichText instances, so if you wish to highlight text in the citation, you need to pass `citation` as the `richTextIdentifier` when adding an annotation. To target the quote content, you need to use the identifier `value`. Refer to the source code of the block type to find the correct identifier.\n\n## Block annotation\n\nIt is also possible to annotate a block completely. In that case just provide the `selector` property and set it to `block`. The default `selector` is `range`, which can be used for text annotation.\n\n```js\nwp.data.dispatch( 'core\/annotations' ).addAnnotation( {\n\tsource: 'my-annotations-plugin',\n\tblockClientId: wp.data.select( 'core\/block-editor' ).getBlockOrder()[ 0 ],\n\tselector: 'block',\n} );\n```\n\nThis doesn't provide any styling out of the box, so you have to provide some CSS to make sure your annotation is shown:\n\n```css\n.is-annotated-by-my-annotations-plugin {\n\toutline: 1px solid black;\n}\n```\n\n## Text annotation\n\nThe text annotation is controlled by the `start` and `end` properties. Simple `start` and `end` properties don't work for HTML, so these properties are assumed to be offsets within the `rich-text` internal structure. For simplicity you can think about this as if all HTML would be stripped out and then you calculate the `start` and the `end` of the annotation.\n"
    },
    {
        "path": "\/markdown\/reference-guides\/block-api\/block-metadata.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Metadata in block.json<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Starting with the WordPress 5.8 release, we recommend using the <code>block.json<\/code> metadata file as the canonical way to register block types with both PHP (server-side) and JavaScript (client-side). Here is an example <code>block.json<\/code> file that would define the metadata for a plugin create a notice block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example:<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"$schema\": \"https:\/\/schemas.wp.org\/trunk\/block.json\",\n\t\"apiVersion\": 3,\n\t\"name\": \"my-plugin\/notice\",\n\t\"title\": \"Notice\",\n\t\"category\": \"text\",\n\t\"parent\": &#91; \"core\/group\" ],\n\t\"icon\": \"star\",\n\t\"description\": \"Shows warning, error or success notices...\",\n\t\"keywords\": &#91; \"alert\", \"message\" ],\n\t\"version\": \"1.0.3\",\n\t\"textdomain\": \"my-plugin\",\n\t\"attributes\": {\n\t\t\"message\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"source\": \"html\",\n\t\t\t\"selector\": \".message\"\n\t\t}\n\t},\n\t\"providesContext\": {\n\t\t\"my-plugin\/message\": \"message\"\n\t},\n\t\"usesContext\": &#91; \"groupId\" ],\n\t\"selectors\": {\n\t\t\"root\": \".wp-block-my-plugin-notice\"\n\t},\n\t\"supports\": {\n\t\t\"align\": true\n\t},\n\t\"styles\": &#91;\n\t\t{ \"name\": \"default\", \"label\": \"Default\", \"isDefault\": true },\n\t\t{ \"name\": \"other\", \"label\": \"Other\" }\n\t],\n\t\"example\": {\n\t\t\"attributes\": {\n\t\t\t\"message\": \"This is a notice!\"\n\t\t}\n\t},\n\t\"variations\": &#91;\n\t\t{\n\t\t\t\"name\": \"example\",\n\t\t\t\"title\": \"Example\",\n\t\t\t\"attributes\": {\n\t\t\t\t\"message\": \"This is an example!\"\n\t\t\t}\n\t\t}\n\t],\n\t\"editorScript\": \"file:.\/index.js\",\n\t\"script\": \"file:.\/script.js\",\n\t\"viewScript\": &#91; \"file:.\/view.js\", \"example-shared-view-script\" ],\n\t\"editorStyle\": \"file:.\/index.css\",\n\t\"style\": &#91; \"file:.\/style.css\", \"example-shared-style\" ],\n\t\"viewStyle\": &#91; \"file:.\/view.css\", \"example-view-style\" ],\n\t\"render\": \"file:.\/render.php\"\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Benefits of using the metadata file<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The block definition allows code sharing between JavaScript, PHP, and other languages when processing block types stored as JSON, and registering blocks with the <code>block.json<\/code> metadata file provides multiple benefits on top of it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>From a performance perspective, when themes support lazy loading assets, blocks registered with <code>block.json<\/code> will have their asset enqueuing optimized out of the box. The frontend CSS and JavaScript assets listed in the <code>style<\/code> or <code>script<\/code> properties will only be enqueued when the block is present on the page, resulting in reduced page sizes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Furthermore, because the <a href=\"https:\/\/developer.wordpress.org\/rest-api\/reference\/block-types\/\">Block Type REST API Endpoint<\/a> can only list blocks registered on the server, registering blocks server-side is recommended; using the <code>block.json<\/code> file simplifies this registration.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/wordpress.org\/plugins\/\">WordPress Plugins Directory<\/a> can detect <code>block.json<\/code> files, highlight blocks included in plugins, and extract their metadata. If you wish to <a href=\"\/docs\/getting-started\/create-block\/submitting-to-block-directory.md\">submit your block(s) to the Block Directory<\/a>, all blocks contained in your plugin must have a <code>block.json<\/code> file for the Block Directory to recognize them.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Development is improved by using a defined schema definition file. Supported editors can provide help like tooltips, autocomplete, and schema validation. To use the schema, add the following to the top of the <code>block.json<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\"$schema\": \"https:\/\/schemas.wp.org\/trunk\/block.json\"\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\nCheck <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals-block-development\/registration-of-a-block\">Registration of a block<\/a> to learn more about how to register a block using its metadata.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block API<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This section describes all the properties that can be added to the <code>block.json<\/code> file to define the behavior and metadata of block types.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">API version<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>number<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>apiVersion<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default: <code>1<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"apiVersion\": 3 }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The version of the Block API used by the block. The most recent version is <code>3<\/code> and it was introduced in WordPress 6.3.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See <a href=\"\/docs\/reference-guides\/block-api\/block-api-versions.md\">the API versions documentation<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Name<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>string<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Required<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>name<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"name\": \"core\/heading\" }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The name for a block is a unique string that identifies a block. Names have to be structured as <code>namespace\/block-name<\/code>, where namespace is the name of your plugin or theme.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:<\/strong> A block name can only contain lowercase alphanumeric characters, dashes, and at most one forward slash to designate the plugin-unique namespace prefix. It must begin with a letter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:<\/strong> This name is used on the comment delimiters as <code>&lt;!-- wp:my-plugin\/book --><\/code>. Block types in the <code>core<\/code> namespace do not include a namespace when serialized.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Title<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>string<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Required<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: Yes<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>title<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"title\": \"Heading\" }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This is the display title for your block, which can be translated with our translation functions. The title will display in the Inserter and in other areas of the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:<\/strong> To keep your block titles readable and accessible in the UI, try to avoid very long titles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Category<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>string<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>category<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"category\": \"text\" }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Blocks are grouped into categories to help users browse and discover them.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The core provided categories are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>text<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>media<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>design<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>widgets<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>embed<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Plugins and Themes can also register <a href=\"\/docs\/reference-guides\/filters\/block-filters.md#managing-block-categories\">custom block categories<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>An implementation should expect and tolerate unknown categories, providing some reasonable fallback behavior (e.g. a \"text\" category).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Parent<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>string[]<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>parent<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"parent\": &#91; \"my-block\/product\" ] }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Setting <code>parent<\/code> lets a block require that it is only available when nested within the specified blocks. For example, you might want to allow an 'Add to Cart' block to only be available within a 'Product' block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Ancestor<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>string[]<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>ancestor<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Since: <code>WordPress 6.0.0<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"ancestor\": &#91; \"my-block\/product\" ] }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The <code>ancestor<\/code> property makes a block available inside the specified block types at any position of the ancestor block subtree. That allows, for example, to place a \u2018Comment Content\u2019 block inside a \u2018Column\u2019 block, as long as \u2018Column\u2019 is somewhere within a \u2018Comment Template\u2019 block. In comparison to the <code>parent<\/code> property blocks that specify their <code>ancestor<\/code> can be placed anywhere in the subtree whilst blocks with a specified <code>parent<\/code> need to be direct children.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Allowed Blocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>string[]<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>allowedBlocks<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Since: <code>WordPress 6.5.0<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"allowedBlocks\": &#91; \"my-block\/product\" ] }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The <code>allowedBlocks<\/code> specifies which block types can be the direct children of the block. For example, a \u2018List\u2019 block can allow only \u2018List Item\u2019 blocks as children.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Icon<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>string<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>icon<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"icon\": \"smile\" }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>An icon property should be specified to make it easier to identify a block. These can be any of <a href=\"https:\/\/developer.wordpress.org\/resource\/dashicons\/\">WordPress' Dashicons<\/a> (slug serving also as a fallback in non-js contexts).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:<\/strong> It's also possible to override this property on the client-side with the source of the SVG element. In addition, this property can be defined with JavaScript as an object containing background and foreground colors. These colors will appear with the icon when they are applicable e.g.: in the inserter. Custom SVG icons are automatically wrapped in the <a href=\"\/packages\/primitives\/README.md\">wp.primitives.SVG<\/a> component to add accessibility attributes (aria-hidden, role, and focusable).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Description<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>string<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: Yes<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>description<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"description\": \"Introduce new sections and organize content to help visitors\"\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This is a short description for your block, which can be translated with our translation functions. This will be shown in the block inspector.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Keywords<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>string[]<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: Yes<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>keywords<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default: <code>[]<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"keywords\": &#91; \"keyword1\", \"keyword2\" ] }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Sometimes a block could have aliases that help users discover it while searching. For example, an image block could also want to be discovered by photo. You can do so by providing an array of unlimited terms (which are translated).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Version<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>string<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>version<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Since: <code>WordPress 5.8.0<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"version\": \"1.0.3\" }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The current version number of the block, such as 1.0 or 1.0.3. It's similar to how plugins are versioned. This field might be used with block assets to control cache invalidation, and when the block author omits it, then the installed version of WordPress is used instead.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Text Domain<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>string<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>textdomain<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Since: <code>WordPress 5.7.0<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"textdomain\": \"my-plugin\" }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/www.gnu.org\/software\/gettext\/\">gettext<\/a> text domain of the plugin\/block. More information can be found in the <a href=\"https:\/\/developer.wordpress.org\/plugins\/internationalization\/how-to-internationalize-your-plugin\/#text-domains\">Text Domain<\/a> section of the <a href=\"https:\/\/developer.wordpress.org\/plugins\/internationalization\/how-to-internationalize-your-plugin\/\">How to Internationalize your Plugin<\/a> page.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Attributes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>object<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>attributes<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default: <code>{}<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"attributes\": {\n\t\t\"cover\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"source\": \"attribute\",\n\t\t\t\"selector\": \"img\",\n\t\t\t\"attribute\": \"src\"\n\t\t},\n\t\t\"author\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"source\": \"html\",\n\t\t\t\"selector\": \".book-author\"\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Attributes provide the structured data needs of a block. They can exist in different forms when they are serialized, but they are declared together under a common interface.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See <a href=\"\/docs\/reference-guides\/block-api\/block-attributes.md\">the attributes documentation<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Provides Context<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>object<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>providesContext<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default: <code>{}<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Context provided for available access by descendants of blocks of this type, in the form of an object which maps a context name to one of the block's own attributes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See <a href=\"\/docs\/reference-guides\/block-api\/block-context.md\">the block context documentation<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"providesContext\": {\n\t\t\"my-plugin\/recordId\": \"recordId\"\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Context<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>string[]<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>usesContext<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default: <code>[]<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Array of the names of context values to inherit from an ancestor provider.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See <a href=\"\/docs\/reference-guides\/block-api\/block-context.md\">the block context documentation<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"usesContext\": &#91; \"message\" ]\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Selectors<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>object<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>selectors<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default: <code>{}<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Since: <code>WordPress 6.3.0<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Any custom CSS selectors, keyed by <code>root<\/code>, feature, or sub-feature, to be used<br>when generating block styles for theme.json (global styles) stylesheets.<br>Providing custom selectors allows more fine grained control over which styles<br>apply to what block elements, e.g. applying typography styles only to an inner<br>heading while colors are still applied on the outer block wrapper etc.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See <a href=\"\/docs\/reference-guides\/block-api\/block-selectors.md\">the selectors documentation<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"selectors\": {\n\t\t\"root\": \".my-custom-block-selector\",\n\t\t\"color\": {\n\t\t\t\"text\": \".my-custom-block-selector p\"\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"root\": \".my-custom-block-selector > h2\",\n\t\t\t\"text-decoration\": \".my-custom-block-selector > h2 span\"\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Supports<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>object<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>supports<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default: <code>{}<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>It contains a set of options to control features used in the editor. See <a href=\"\/docs\/reference-guides\/block-api\/block-supports.md\">the supports documentation<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block Styles<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>array<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: Yes (<code>label<\/code> only)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>styles<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default: <code>[]<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"styles\": &#91;\n\t\t{ \"name\": \"default\", \"label\": \"Default\", \"isDefault\": true },\n\t\t{ \"name\": \"other\", \"label\": \"Other\" }\n\t]\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Block styles can be used to provide alternative styles to block. It works by adding a class name to the block's wrapper. Using CSS, a theme developer can target the class name for the block style if it is selected.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Plugins and Themes can also register <a href=\"\/docs\/reference-guides\/block-api\/block-styles.md\">custom block styles<\/a> for existing blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Example<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>object<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>example<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"example\": {\n\t\t\"attributes\": {\n\t\t\t\"message\": \"This is a notice!\"\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>It provides structured example data for the block. This data is used to construct a preview for the block to be shown in the Inspector Help Panel when the user mouses over the block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See the <a href=\"\/docs\/reference-guides\/block-api\/block-registration.md#example-optional\">Example documentation<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Variations<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>object[]<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: Yes (<code>title<\/code>, <code>description<\/code>, and <code>keywords<\/code> of each variation only)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>variations<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Since: <code>WordPress 5.9.0<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"variations\": &#91;\n\t\t{\n\t\t\t\"name\": \"example\",\n\t\t\t\"title\": \"Example\",\n\t\t\t\"attributes\": {\n\t\t\t\t\"level\": 2,\n\t\t\t\t\"message\": \"This is an example!\"\n\t\t\t},\n\t\t\t\"scope\": &#91; \"block\" ],\n\t\t\t\"isActive\": &#91; \"level\" ]\n\t\t}\n\t]\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Block Variations is the API that allows a block to have similar versions of it, but all these versions share some common functionality. Each block variation is differentiated from the others by setting some initial attributes or inner blocks. Then at the time when a block is inserted these attributes and\/or inner blocks are applied.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Note: In JavaScript you can provide a function for the <code>isActive<\/code> property, and a React element for the <code>icon<\/code>. In the <code>block.json<\/code> file both only support strings<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See <a href=\"\/docs\/reference-guides\/block-api\/block-variations.md\">the variations documentation<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block Hooks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>object<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>blockHooks<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Since: <code>WordPress 6.4.0<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"blockHooks\": {\n\t\t\"my-plugin\/banner\": \"after\"\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Block Hooks is an API that allows a block to automatically insert itself next to all instances of a given block type, in a relative position also specified by the \"hooked\" block. That is, a block can opt to be inserted before or after a given block type, or as its first or last child (i.e. to be prepended or appended to the list of its child blocks, respectively). Hooked blocks will appear both on the frontend and in the editor (to allow for customization by the user).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The key is the name of the block (<code>string<\/code>) to hook into, and the value is the position to hook into (<code>string<\/code>). Take a look at the <a href=\"\/docs\/reference-guides\/block-api\/block-registration.md#block-hooks-optional\">Block Hooks documentation<\/a> for more info about available configurations.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Editor script<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>WPDefinedAsset<\/code>|<code>WPDefinedAsset[]<\/code> (<a href=\"#wpdefinedasset\">learn more<\/a>)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>editorScript<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"editorScript\": \"file:.\/index.js\" }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Block type editor scripts definition. They will only be enqueued in the context of the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's possible to pass a script handle registered with the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_script\/\"><code>wp_register_script<\/code><\/a> function, a path to a JavaScript file relative to the <code>block.json<\/code> file, or a list with a mix of both (<a href=\"#wpdefinedasset\">learn more<\/a>).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Note: An option to pass also an array of editor scripts exists since WordPress <code>6.1.0<\/code>.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Script<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>WPDefinedAsset<\/code>|<code>WPDefinedAsset[]<\/code> (<a href=\"#wpdefinedasset\">learn more<\/a>)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>script<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"script\": \"file:.\/script.js\" }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Block type frontend and editor scripts definition. They will be enqueued both in the editor and when viewing the content on the front of the site.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's possible to pass a script handle registered with the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_script\/\"><code>wp_register_script<\/code><\/a> function, a path to a JavaScript file relative to the <code>block.json<\/code> file, or a list with a mix of both (<a href=\"#wpdefinedasset\">learn more<\/a>).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Note: An option to pass also an array of scripts exists since WordPress <code>6.1.0<\/code>.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">View script<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>WPDefinedAsset<\/code>|<code>WPDefinedAsset[]<\/code> (<a href=\"#wpdefinedasset\">learn more<\/a>)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>viewScript<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Since: <code>WordPress 5.9.0<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"viewScript\": &#91; \"file:.\/view.js\", \"example-shared-view-script\" ] }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Block type frontend scripts definition. They will be enqueued only when viewing the content on the front of the site.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's possible to pass a script handle registered with the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_script\/\"><code>wp_register_script<\/code><\/a> function, a path to a JavaScript file relative to the <code>block.json<\/code> file, or a list with a mix of both (<a href=\"#wpdefinedasset\">learn more<\/a>).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Note: An option to pass also an array of view scripts exists since WordPress <code>6.1.0<\/code>.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">View script module<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>WPDefinedAsset<\/code>|<code>WPDefinedAsset[]<\/code> (<a href=\"#wpdefinedasset\">learn more<\/a>)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>viewScriptModule<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Since: <code>WordPress 6.5.0<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"viewScriptModule\": &#91; \"file:.\/view.js\", \"example-shared-script-module-id\" ] }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Block type frontend script module definition. They will be enqueued only when viewing the content on the front of the site.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's possible to pass a script module ID registered with the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_script_module\/\"><code>wp_register_script_module<\/code><\/a> function, a path to a JavaScript module relative to the <code>block.json<\/code> file, or a list with a mix of both (<a href=\"#wpdefinedasset\">learn more<\/a>).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>WordPress scripts and WordPress script modules are not compatible at the moment. If frontend view assets depend on WordPress scripts, <code>viewScript<\/code> should be used. If they depend on WordPress script modules \u2014the Interactivity API at this time\u2014 <code>viewScriptModule<\/code> should be used. In the future, it will be possible to depend on scripts from script modules.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Note: Available since WordPress <code>6.5.0<\/code>.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Editor style<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>WPDefinedAsset<\/code>|<code>WPDefinedAsset[]<\/code> (<a href=\"#wpdefinedasset\">learn more<\/a>)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>editorStyle<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"editorStyle\": \"file:.\/index.css\" }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Block type editor styles definition. They will only be enqueued in the context of the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's possible to pass a style handle registered with the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_style\/\"><code>wp_register_style<\/code><\/a> function, a path to a CSS file relative to the <code>block.json<\/code> file, or a list with a mix of both (<a href=\"#wpdefinedasset\">learn more<\/a>).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Note: An option to pass also an array of editor styles exists since WordPress <code>5.9.0<\/code>.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Style<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>WPDefinedAsset<\/code>|<code>WPDefinedAsset[]<\/code> (<a href=\"#wpdefinedasset\">learn more<\/a>)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>style<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"style\": &#91; \"file:.\/style.css\", \"example-shared-style\" ] }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Block type frontend and editor styles definition. They will be enqueued both in the editor and when viewing the content on the front of the site.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's possible to pass a style handle registered with the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_style\/\"><code>wp_register_style<\/code><\/a> function, a path to a CSS file relative to the <code>block.json<\/code> file, or a list with a mix of both (<a href=\"#wpdefinedasset\">learn more<\/a>).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Note: An option to pass also an array of styles exists since WordPress <code>5.9.0<\/code>.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">View Style<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>WPDefinedAsset<\/code>|<code>WPDefinedAsset[]<\/code> (<a href=\"#wpdefinedasset\">learn more<\/a>)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>viewStyle<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Since: <code>WordPress 6.5.0<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"viewStyle\": &#91; \"file:.\/view.css\", \"example-view-style\" ] }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Block type frontend styles definition. They will be enqueued only when viewing the content on the front of the site.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's possible to pass a style handle registered with the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_style\/\"><code>wp_register_style<\/code><\/a> function, a path to a CSS file relative to the <code>block.json<\/code> file, or a list with a mix of both (<a href=\"#wpdefinedasset\">learn more<\/a>).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Frontend-only styles are especially useful for interactive blocks, to style parts that will only be visible after a user performs some action and where those styles will never be needed in the editor. You can start with using the <code>style<\/code> property to put all your common styles in one stylesheet. Only when you need editor-specific styling or frontend-specific styling, you can expand to <code>editorStyle<\/code> and <code>viewStyle<\/code>, but still keep the common part of your styling in the main stylesheet.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Render<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>WPDefinedPath<\/code> (<a href=\"#wpdefinedpath\">learn more<\/a>)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Optional<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Localized: No<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Property: <code>render<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Since: <code>WordPress 6.1.0<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"render\": \"file:.\/render.php\" }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>PHP file to use when rendering the block type on the server to show on the front end. The following variables are exposed to the file:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>$attributes<\/code> (<code>array<\/code>): The block attributes.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>$content<\/code> (<code>string<\/code>): The block default content.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>$block<\/code> (<code>WP_Block<\/code>): The block instance.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>An example implementation of the <code>render.php<\/code> file defined with <code>render<\/code> could look like:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><div <?php=\"\" echo=\"\" get_block_wrapper_attributes();=\"\" ?=\"\">>\n\t\n<\/div>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Note: This file loads for every instance of the block type when rendering the page HTML on the server. Accounting for that is essential when declaring functions or classes in the file. The simplest way to avoid the risk of errors is to consume that shared logic from another file.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Assets<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>WPDefinedPath<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>WPDefinedPath<\/code> type is a subtype of string, where the value represents a path to a JavaScript, CSS or PHP file relative to where the <code>block.json<\/code> file is located. The path provided must be prefixed with <code>file:<\/code>. This approach is based on how npm handles <a href=\"https:\/\/docs.npmjs.com\/files\/package.json#local-paths\">local paths<\/a> for packages.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example:<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In <code>block.json<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"render\": \"file:.\/render.php\"\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>WPDefinedAsset<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It extends <code>WPDefinedPath<\/code> for JavaScript and CSS files. An alternative to the file path would be a script handle, script module ID, or style handle referencing an already registered asset using WordPress helpers.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example:<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In <code>block.json<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"editorScript\": \"file:.\/index.js\",\n\t\"script\": \"file:.\/script.js\",\n\t\"viewScriptModule\": &#91;\n\t\t\"file:.\/view.js\",\n\t\t\"example-registered-script-module-id\"\n\t],\n\t\"editorStyle\": \"file:.\/index.css\",\n\t\"style\": &#91; \"file:.\/style.css\", \"example-shared-style\" ],\n\t\"viewStyle\": &#91; \"file:.\/view.css\", \"example-view-style\" ]\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the context of WordPress, when a block is registered with PHP, it will automatically register all scripts, script modules, and styles that are found in the <code>block.json<\/code> file and use file paths rather than asset handles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That's why the <code>WPDefinedAsset<\/code> type has to offer a way to mirror the parameters necessary to register scripts, script modules, and styles using <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_script\/\"><code>wp_register_script<\/code><\/a>, <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_script_module\/\"><code>wp_register_script_module<\/code><\/a>, and <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_style\/\"><code>wp_register_style<\/code><\/a>, and then assign these as handles or script module IDs associated with the block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's possible to provide an object which takes the following shape:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>handle<\/code> (<code>string<\/code>) - the name of the script. If omitted, it will be auto-generated.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>dependencies<\/code> (<code>string[]<\/code>|<code>{ id: string, import?: 'dynamic'|'static' }[]<\/code>) - an array of registered script handles this script depends on. Script modules may use a simple string for static dependencies or the object form to indicate a dynamic dependency. Dynamic dependencies are dependencies that may or may not be used at runtime and are typically used with the dynamic <code>import('module-id')<\/code> syntax. Default value: <code>[]<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>version<\/code> (<code>string<\/code>|<code>false<\/code>|<code>null<\/code>) - string specifying the script version number, if it has one, which is added to the URL as a query string for cache busting purposes. If the version is set to <code>false<\/code>, a version number is automatically added equal to the currently installed WordPress version. If set to <code>null<\/code>, no version is added. Default value: <code>false<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The definition is stored inside a separate PHP file which ends with <code>.asset.php<\/code> and is located next to the JS\/CSS file listed in <code>block.json<\/code>. WordPress will automatically detect this file through pattern matching. This option is the preferred one as it is expected it will become an option to auto-generate those asset files with <code>@wordpress\/scripts<\/code> package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example:<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>build\/\n\u251c\u2500 block.json\n\u251c\u2500 index.js\n\u2514\u2500 index.asset.php\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In <code>block.json<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"editorScript\": \"file:.\/index.js\" }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In <code>build\/index.asset.php<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>return array(\n\t'dependencies' => array(\n\t\t'react',\n\t\t'wp-blocks',\n\t\t'wp-i18n',\n\t),\n\t'version'      => '3be55b05081a63d8f9d0ecb466c42cfd',\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Frontend enqueueing<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Starting in the WordPress 5.8 release, it is possible to instruct WordPress to enqueue scripts and styles for a block type only when rendered on the frontend. It applies to the following asset fields in the <code>block.json<\/code> file:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>script<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>viewScript<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>style<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>viewStyle<\/code> (Added in WordPress 6.5.0)<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Internationalization<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>WordPress string discovery system can automatically translate fields marked in this document as translatable. First, you need to set the <code>textdomain<\/code> property in the <code>block.json<\/code> file that provides block metadata.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example:<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"title\": \"My block\",\n\t\"description\": \"My block is fantastic\",\n\t\"keywords\": &#91; \"fantastic\" ],\n\t\"textdomain\": \"my-plugin\"\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">PHP<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In PHP, localized properties will be automatically wrapped in <code>_x<\/code> function calls on the backend of WordPress when executing <code>register_block_type<\/code>. These translations get added as an inline script to the plugin's script handle or to the <code>wp-block-library<\/code> script handle in WordPress core.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The way <code>register_block_type<\/code> processes translatable values is roughly equivalent to the following code snippet:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$metadata = array(\n\t'title'       => _x( 'My block', 'block title', 'my-plugin' ),\n\t'description' => _x( 'My block is fantastic!', 'block description', 'my-plugin' ),\n\t'keywords'    => array( _x( 'fantastic', 'block keyword', 'my-plugin' ) ),\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Implementation follows the existing <a href=\"https:\/\/codex.wordpress.org\/Function_Reference\/get_plugin_data\">get_plugin_data<\/a> function which parses the plugin contents to retrieve the plugin\u2019s metadata, and it applies translations dynamically.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">JavaScript<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In JavaScript, you can use <code>registerBlockType<\/code> method from <code>@wordpress\/blocks<\/code> package and pass the metadata object loaded from <code>block.json<\/code> as the first param. All localized properties get automatically wrapped in <code>_x<\/code> (from <code>@wordpress\/i18n<\/code> package) function calls similar to how it works in PHP.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example:<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerBlockType } from '@wordpress\/blocks';\nimport Edit from '.\/edit';\nimport metadata from '.\/block.json';\n\nregisterBlockType( metadata, {\n\tedit: Edit,\n\t\/\/ ...other client-side settings\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Backward compatibility<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The existing registration mechanism (both server side and frontend) will continue to work, it will serve as low-level implementation detail for the <code>block.json<\/code> based registration.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once all details are ready, Core Blocks will be migrated iteratively and third-party blocks will see warnings appearing in the console to encourage them to refactor the block registration API used.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following properties are going to be supported for backward compatibility reasons on the client-side only. Some of them might be replaced with alternative APIs in the future:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>edit<\/code> - see the <a href=\"\/docs\/reference-guides\/block-api\/block-edit-save.md\">Edit and Save<\/a> documentation for more details.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>save<\/code> - see the <a href=\"\/docs\/reference-guides\/block-api\/block-edit-save.md\">Edit and Save<\/a> documentation for more details.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>transforms<\/code> - see the <a href=\"\/docs\/reference-guides\/block-api\/block-registration.md#transforms-optional\">Transforms<\/a> documentation for more details.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>deprecated<\/code> - see the <a href=\"\/docs\/reference-guides\/block-api\/block-deprecation.md\">Deprecated Blocks<\/a> documentation for more details.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>merge<\/code> - undocumented as of today. Its role is to handle merging multiple blocks into one.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>getEditWrapperProps<\/code> - undocumented as well. Its role is to inject additional props to the block edit's component wrapper.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Example<\/strong>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerBlockType } from '@wordpress\/blocks';\n\nregisterBlockType( 'my-plugin\/block-name', {\n\tedit: function () {\n\t\t\/\/ Edit definition goes here.\n\t},\n\tsave: function () {\n\t\t\/\/ Save definition goes here.\n\t},\n\tgetEditWrapperProps: function () {\n\t\t\/\/ Implementation goes here.\n\t},\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the case of <a href=\"\/docs\/how-to-guides\/block-tutorial\/creating-dynamic-blocks.md\">dynamic blocks<\/a> supported by WordPress, it should still be possible to register the <code>render_callback<\/code> property using both <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/register_block_type\/\"><code>register_block_type<\/code><\/a> functions on the server.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Metadata in block.json\n\nStarting with the WordPress 5.8 release, we recommend using the `block.json` metadata file as the canonical way to register block types with both PHP (server-side) and JavaScript (client-side). Here is an example `block.json` file that would define the metadata for a plugin create a notice block.\n\n**Example:**\n\n```json\n{\n\t\"$schema\": \"https:\/\/schemas.wp.org\/trunk\/block.json\",\n\t\"apiVersion\": 3,\n\t\"name\": \"my-plugin\/notice\",\n\t\"title\": \"Notice\",\n\t\"category\": \"text\",\n\t\"parent\": [ \"core\/group\" ],\n\t\"icon\": \"star\",\n\t\"description\": \"Shows warning, error or success notices...\",\n\t\"keywords\": [ \"alert\", \"message\" ],\n\t\"version\": \"1.0.3\",\n\t\"textdomain\": \"my-plugin\",\n\t\"attributes\": {\n\t\t\"message\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"source\": \"html\",\n\t\t\t\"selector\": \".message\"\n\t\t}\n\t},\n\t\"providesContext\": {\n\t\t\"my-plugin\/message\": \"message\"\n\t},\n\t\"usesContext\": [ \"groupId\" ],\n\t\"selectors\": {\n\t\t\"root\": \".wp-block-my-plugin-notice\"\n\t},\n\t\"supports\": {\n\t\t\"align\": true\n\t},\n\t\"styles\": [\n\t\t{ \"name\": \"default\", \"label\": \"Default\", \"isDefault\": true },\n\t\t{ \"name\": \"other\", \"label\": \"Other\" }\n\t],\n\t\"example\": {\n\t\t\"attributes\": {\n\t\t\t\"message\": \"This is a notice!\"\n\t\t}\n\t},\n\t\"variations\": [\n\t\t{\n\t\t\t\"name\": \"example\",\n\t\t\t\"title\": \"Example\",\n\t\t\t\"attributes\": {\n\t\t\t\t\"message\": \"This is an example!\"\n\t\t\t}\n\t\t}\n\t],\n\t\"editorScript\": \"file:.\/index.js\",\n\t\"script\": \"file:.\/script.js\",\n\t\"viewScript\": [ \"file:.\/view.js\", \"example-shared-view-script\" ],\n\t\"editorStyle\": \"file:.\/index.css\",\n\t\"style\": [ \"file:.\/style.css\", \"example-shared-style\" ],\n\t\"viewStyle\": [ \"file:.\/view.css\", \"example-view-style\" ],\n\t\"render\": \"file:.\/render.php\"\n}\n```\n\n## Benefits of using the metadata file\n\nThe block definition allows code sharing between JavaScript, PHP, and other languages when processing block types stored as JSON, and registering blocks with the `block.json` metadata file provides multiple benefits on top of it.\n\nFrom a performance perspective, when themes support lazy loading assets, blocks registered with `block.json` will have their asset enqueuing optimized out of the box. The frontend CSS and JavaScript assets listed in the `style` or `script` properties will only be enqueued when the block is present on the page, resulting in reduced page sizes.\n\nFurthermore, because the [Block Type REST API Endpoint](https:\/\/developer.wordpress.org\/rest-api\/reference\/block-types\/) can only list blocks registered on the server, registering blocks server-side is recommended; using the `block.json` file simplifies this registration.\n\nThe [WordPress Plugins Directory](https:\/\/wordpress.org\/plugins\/) can detect `block.json` files, highlight blocks included in plugins, and extract their metadata. If you wish to [submit your block(s) to the Block Directory](\/docs\/getting-started\/create-block\/submitting-to-block-directory.md), all blocks contained in your plugin must have a `block.json` file for the Block Directory to recognize them.\n\nDevelopment is improved by using a defined schema definition file. Supported editors can provide help like tooltips, autocomplete, and schema validation. To use the schema, add the following to the top of the `block.json`.\n\n```json\n\"$schema\": \"https:\/\/schemas.wp.org\/trunk\/block.json\"\n```\n\n<div class=\"callout callout-info\">\nCheck <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals-block-development\/registration-of-a-block\">Registration of a block<\/a> to learn more about how to register a block using its metadata.\n<\/div>\n\n## Block API\n\nThis section describes all the properties that can be added to the `block.json` file to define the behavior and metadata of block types.\n\n### API version\n\n-   Type: `number`\n-   Optional\n-   Localized: No\n-   Property: `apiVersion`\n-   Default: `1`\n\n```json\n{ \"apiVersion\": 3 }\n```\n\nThe version of the Block API used by the block. The most recent version is `3` and it was introduced in WordPress 6.3.\n\nSee [the API versions documentation](\/docs\/reference-guides\/block-api\/block-api-versions.md) for more details.\n\n### Name\n\n-   Type: `string`\n-   Required\n-   Localized: No\n-   Property: `name`\n\n```json\n{ \"name\": \"core\/heading\" }\n```\n\nThe name for a block is a unique string that identifies a block. Names have to be structured as `namespace\/block-name`, where namespace is the name of your plugin or theme.\n\n**Note:** A block name can only contain lowercase alphanumeric characters, dashes, and at most one forward slash to designate the plugin-unique namespace prefix. It must begin with a letter.\n\n**Note:** This name is used on the comment delimiters as `<!-- wp:my-plugin\/book -->`. Block types in the `core` namespace do not include a namespace when serialized.\n\n### Title\n\n-   Type: `string`\n-   Required\n-   Localized: Yes\n-   Property: `title`\n\n```json\n{ \"title\": \"Heading\" }\n```\n\nThis is the display title for your block, which can be translated with our translation functions. The title will display in the Inserter and in other areas of the editor.\n\n**Note:** To keep your block titles readable and accessible in the UI, try to avoid very long titles.\n\n### Category\n\n-   Type: `string`\n-   Optional\n-   Localized: No\n-   Property: `category`\n\n```json\n{ \"category\": \"text\" }\n```\n\nBlocks are grouped into categories to help users browse and discover them.\n\nThe core provided categories are:\n\n-   text\n-   media\n-   design\n-   widgets\n-   theme\n-   embed\n\nPlugins and Themes can also register [custom block categories](\/docs\/reference-guides\/filters\/block-filters.md#managing-block-categories).\n\nAn implementation should expect and tolerate unknown categories, providing some reasonable fallback behavior (e.g. a \"text\" category).\n\n### Parent\n\n-   Type: `string[]`\n-   Optional\n-   Localized: No\n-   Property: `parent`\n\n```json\n{ \"parent\": [ \"my-block\/product\" ] }\n```\n\nSetting `parent` lets a block require that it is only available when nested within the specified blocks. For example, you might want to allow an 'Add to Cart' block to only be available within a 'Product' block.\n\n### Ancestor\n\n-   Type: `string[]`\n-   Optional\n-   Localized: No\n-   Property: `ancestor`\n-   Since: `WordPress 6.0.0`\n\n```json\n{ \"ancestor\": [ \"my-block\/product\" ] }\n```\n\nThe `ancestor` property makes a block available inside the specified block types at any position of the ancestor block subtree. That allows, for example, to place a \u2018Comment Content\u2019 block inside a \u2018Column\u2019 block, as long as \u2018Column\u2019 is somewhere within a \u2018Comment Template\u2019 block. In comparison to the `parent` property blocks that specify their `ancestor` can be placed anywhere in the subtree whilst blocks with a specified `parent` need to be direct children.\n\n### Allowed Blocks\n\n-   Type: `string[]`\n-   Optional\n-   Localized: No\n-   Property: `allowedBlocks`\n-   Since: `WordPress 6.5.0`\n\n```json\n{ \"allowedBlocks\": [ \"my-block\/product\" ] }\n```\n\nThe `allowedBlocks` specifies which block types can be the direct children of the block. For example, a \u2018List\u2019 block can allow only \u2018List Item\u2019 blocks as children.\n\n### Icon\n\n-   Type: `string`\n-   Optional\n-   Localized: No\n-   Property: `icon`\n\n```json\n{ \"icon\": \"smile\" }\n```\n\nAn icon property should be specified to make it easier to identify a block. These can be any of [WordPress' Dashicons](https:\/\/developer.wordpress.org\/resource\/dashicons\/) (slug serving also as a fallback in non-js contexts).\n\n**Note:** It's also possible to override this property on the client-side with the source of the SVG element. In addition, this property can be defined with JavaScript as an object containing background and foreground colors. These colors will appear with the icon when they are applicable e.g.: in the inserter. Custom SVG icons are automatically wrapped in the [wp.primitives.SVG](\/packages\/primitives\/README.md) component to add accessibility attributes (aria-hidden, role, and focusable).\n\n### Description\n\n-   Type: `string`\n-   Optional\n-   Localized: Yes\n-   Property: `description`\n\n```json\n{\n\t\"description\": \"Introduce new sections and organize content to help visitors\"\n}\n```\n\nThis is a short description for your block, which can be translated with our translation functions. This will be shown in the block inspector.\n\n### Keywords\n\n-   Type: `string[]`\n-   Optional\n-   Localized: Yes\n-   Property: `keywords`\n-   Default: `[]`\n\n```json\n{ \"keywords\": [ \"keyword1\", \"keyword2\" ] }\n```\n\nSometimes a block could have aliases that help users discover it while searching. For example, an image block could also want to be discovered by photo. You can do so by providing an array of unlimited terms (which are translated).\n\n### Version\n\n-   Type: `string`\n-   Optional\n-   Localized: No\n-   Property: `version`\n-   Since: `WordPress 5.8.0`\n\n```json\n{ \"version\": \"1.0.3\" }\n```\n\nThe current version number of the block, such as 1.0 or 1.0.3. It's similar to how plugins are versioned. This field might be used with block assets to control cache invalidation, and when the block author omits it, then the installed version of WordPress is used instead.\n\n### Text Domain\n\n-   Type: `string`\n-   Optional\n-   Localized: No\n-   Property: `textdomain`\n-   Since: `WordPress 5.7.0`\n\n```json\n{ \"textdomain\": \"my-plugin\" }\n```\n\nThe [gettext](https:\/\/www.gnu.org\/software\/gettext\/) text domain of the plugin\/block. More information can be found in the [Text Domain](https:\/\/developer.wordpress.org\/plugins\/internationalization\/how-to-internationalize-your-plugin\/#text-domains) section of the [How to Internationalize your Plugin](https:\/\/developer.wordpress.org\/plugins\/internationalization\/how-to-internationalize-your-plugin\/) page.\n\n### Attributes\n\n-   Type: `object`\n-   Optional\n-   Localized: No\n-   Property: `attributes`\n-   Default: `{}`\n\n```json\n{\n\t\"attributes\": {\n\t\t\"cover\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"source\": \"attribute\",\n\t\t\t\"selector\": \"img\",\n\t\t\t\"attribute\": \"src\"\n\t\t},\n\t\t\"author\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"source\": \"html\",\n\t\t\t\"selector\": \".book-author\"\n\t\t}\n\t}\n}\n```\n\nAttributes provide the structured data needs of a block. They can exist in different forms when they are serialized, but they are declared together under a common interface.\n\nSee [the attributes documentation](\/docs\/reference-guides\/block-api\/block-attributes.md) for more details.\n\n### Provides Context\n\n-   Type: `object`\n-   Optional\n-   Localized: No\n-   Property: `providesContext`\n-   Default: `{}`\n\nContext provided for available access by descendants of blocks of this type, in the form of an object which maps a context name to one of the block's own attributes.\n\nSee [the block context documentation](\/docs\/reference-guides\/block-api\/block-context.md) for more details.\n\n```json\n{\n\t\"providesContext\": {\n\t\t\"my-plugin\/recordId\": \"recordId\"\n\t}\n}\n```\n\n### Context\n\n-   Type: `string[]`\n-   Optional\n-   Localized: No\n-   Property: `usesContext`\n-   Default: `[]`\n\nArray of the names of context values to inherit from an ancestor provider.\n\nSee [the block context documentation](\/docs\/reference-guides\/block-api\/block-context.md) for more details.\n\n```json\n{\n\t\"usesContext\": [ \"message\" ]\n}\n```\n\n### Selectors\n\n-   Type: `object`\n-   Optional\n-   Localized: No\n-   Property: `selectors`\n-   Default: `{}`\n-   Since: `WordPress 6.3.0`\n\nAny custom CSS selectors, keyed by `root`, feature, or sub-feature, to be used\nwhen generating block styles for theme.json (global styles) stylesheets.\nProviding custom selectors allows more fine grained control over which styles\napply to what block elements, e.g. applying typography styles only to an inner\nheading while colors are still applied on the outer block wrapper etc.\n\nSee [the selectors documentation](\/docs\/reference-guides\/block-api\/block-selectors.md) for more details.\n\n```json\n{\n\t\"selectors\": {\n\t\t\"root\": \".my-custom-block-selector\",\n\t\t\"color\": {\n\t\t\t\"text\": \".my-custom-block-selector p\"\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"root\": \".my-custom-block-selector > h2\",\n\t\t\t\"text-decoration\": \".my-custom-block-selector > h2 span\"\n\t\t}\n\t}\n}\n```\n\n### Supports\n\n-   Type: `object`\n-   Optional\n-   Localized: No\n-   Property: `supports`\n-   Default: `{}`\n\nIt contains a set of options to control features used in the editor. See [the supports documentation](\/docs\/reference-guides\/block-api\/block-supports.md) for more details.\n\n### Block Styles\n\n-   Type: `array`\n-   Optional\n-   Localized: Yes (`label` only)\n-   Property: `styles`\n-   Default: `[]`\n\n```json\n{\n\t\"styles\": [\n\t\t{ \"name\": \"default\", \"label\": \"Default\", \"isDefault\": true },\n\t\t{ \"name\": \"other\", \"label\": \"Other\" }\n\t]\n}\n```\n\nBlock styles can be used to provide alternative styles to block. It works by adding a class name to the block's wrapper. Using CSS, a theme developer can target the class name for the block style if it is selected.\n\nPlugins and Themes can also register [custom block styles](\/docs\/reference-guides\/block-api\/block-styles.md) for existing blocks.\n\n### Example\n\n-   Type: `object`\n-   Optional\n-   Localized: No\n-   Property: `example`\n\n```json\n{\n\t\"example\": {\n\t\t\"attributes\": {\n\t\t\t\"message\": \"This is a notice!\"\n\t\t}\n\t}\n}\n```\n\nIt provides structured example data for the block. This data is used to construct a preview for the block to be shown in the Inspector Help Panel when the user mouses over the block.\n\nSee the [Example documentation](\/docs\/reference-guides\/block-api\/block-registration.md#example-optional) for more details.\n\n### Variations\n\n-   Type: `object[]`\n-   Optional\n-   Localized: Yes (`title`, `description`, and `keywords` of each variation only)\n-   Property: `variations`\n-   Since: `WordPress 5.9.0`\n\n```json\n{\n\t\"variations\": [\n\t\t{\n\t\t\t\"name\": \"example\",\n\t\t\t\"title\": \"Example\",\n\t\t\t\"attributes\": {\n\t\t\t\t\"level\": 2,\n\t\t\t\t\"message\": \"This is an example!\"\n\t\t\t},\n\t\t\t\"scope\": [ \"block\" ],\n\t\t\t\"isActive\": [ \"level\" ]\n\t\t}\n\t]\n}\n```\n\nBlock Variations is the API that allows a block to have similar versions of it, but all these versions share some common functionality. Each block variation is differentiated from the others by setting some initial attributes or inner blocks. Then at the time when a block is inserted these attributes and\/or inner blocks are applied.\n\n_Note: In JavaScript you can provide a function for the `isActive` property, and a React element for the `icon`. In the `block.json` file both only support strings_\n\nSee [the variations documentation](\/docs\/reference-guides\/block-api\/block-variations.md) for more details.\n\n### Block Hooks\n\n-   Type: `object`\n-   Optional\n-   Property: `blockHooks`\n-   Since: `WordPress 6.4.0`\n\n```json\n{\n\t\"blockHooks\": {\n\t\t\"my-plugin\/banner\": \"after\"\n\t}\n}\n```\n\nBlock Hooks is an API that allows a block to automatically insert itself next to all instances of a given block type, in a relative position also specified by the \"hooked\" block. That is, a block can opt to be inserted before or after a given block type, or as its first or last child (i.e. to be prepended or appended to the list of its child blocks, respectively). Hooked blocks will appear both on the frontend and in the editor (to allow for customization by the user).\n\nThe key is the name of the block (`string`) to hook into, and the value is the position to hook into (`string`). Take a look at the [Block Hooks documentation](\/docs\/reference-guides\/block-api\/block-registration.md#block-hooks-optional) for more info about available configurations.\n\n### Editor script\n\n-   Type: `WPDefinedAsset`|`WPDefinedAsset[]` ([learn more](#wpdefinedasset))\n-   Optional\n-   Localized: No\n-   Property: `editorScript`\n\n```json\n{ \"editorScript\": \"file:.\/index.js\" }\n```\n\nBlock type editor scripts definition. They will only be enqueued in the context of the editor.\n\nIt's possible to pass a script handle registered with the [`wp_register_script`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_script\/) function, a path to a JavaScript file relative to the `block.json` file, or a list with a mix of both ([learn more](#wpdefinedasset)).\n\n_Note: An option to pass also an array of editor scripts exists since WordPress `6.1.0`._\n\n### Script\n\n-   Type: `WPDefinedAsset`|`WPDefinedAsset[]` ([learn more](#wpdefinedasset))\n-   Optional\n-   Localized: No\n-   Property: `script`\n\n```json\n{ \"script\": \"file:.\/script.js\" }\n```\n\nBlock type frontend and editor scripts definition. They will be enqueued both in the editor and when viewing the content on the front of the site.\n\nIt's possible to pass a script handle registered with the [`wp_register_script`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_script\/) function, a path to a JavaScript file relative to the `block.json` file, or a list with a mix of both ([learn more](#wpdefinedasset)).\n\n_Note: An option to pass also an array of scripts exists since WordPress `6.1.0`._\n\n### View script\n\n-   Type: `WPDefinedAsset`|`WPDefinedAsset[]` ([learn more](#wpdefinedasset))\n-   Optional\n-   Localized: No\n-   Property: `viewScript`\n-   Since: `WordPress 5.9.0`\n\n```json\n{ \"viewScript\": [ \"file:.\/view.js\", \"example-shared-view-script\" ] }\n```\n\nBlock type frontend scripts definition. They will be enqueued only when viewing the content on the front of the site.\n\nIt's possible to pass a script handle registered with the [`wp_register_script`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_script\/) function, a path to a JavaScript file relative to the `block.json` file, or a list with a mix of both ([learn more](#wpdefinedasset)).\n\n_Note: An option to pass also an array of view scripts exists since WordPress `6.1.0`._\n\n### View script module\n\n-   Type: `WPDefinedAsset`|`WPDefinedAsset[]` ([learn more](#wpdefinedasset))\n-   Optional\n-   Localized: No\n-   Property: `viewScriptModule`\n-   Since: `WordPress 6.5.0`\n\n```json\n{ \"viewScriptModule\": [ \"file:.\/view.js\", \"example-shared-script-module-id\" ] }\n```\n\nBlock type frontend script module definition. They will be enqueued only when viewing the content on the front of the site.\n\nIt's possible to pass a script module ID registered with the [`wp_register_script_module`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_script_module\/) function, a path to a JavaScript module relative to the `block.json` file, or a list with a mix of both ([learn more](#wpdefinedasset)).\n\nWordPress scripts and WordPress script modules are not compatible at the moment. If frontend view assets depend on WordPress scripts, `viewScript` should be used. If they depend on WordPress script modules \u2014the Interactivity API at this time\u2014 `viewScriptModule` should be used. In the future, it will be possible to depend on scripts from script modules.\n\n_Note: Available since WordPress `6.5.0`._\n\n### Editor style\n\n-   Type: `WPDefinedAsset`|`WPDefinedAsset[]` ([learn more](#wpdefinedasset))\n-   Optional\n-   Localized: No\n-   Property: `editorStyle`\n\n```json\n{ \"editorStyle\": \"file:.\/index.css\" }\n```\n\nBlock type editor styles definition. They will only be enqueued in the context of the editor.\n\nIt's possible to pass a style handle registered with the [`wp_register_style`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_style\/) function, a path to a CSS file relative to the `block.json` file, or a list with a mix of both ([learn more](#wpdefinedasset)).\n\n_Note: An option to pass also an array of editor styles exists since WordPress `5.9.0`._\n\n### Style\n\n-   Type: `WPDefinedAsset`|`WPDefinedAsset[]` ([learn more](#wpdefinedasset))\n-   Optional\n-   Localized: No\n-   Property: `style`\n\n```json\n{ \"style\": [ \"file:.\/style.css\", \"example-shared-style\" ] }\n```\n\nBlock type frontend and editor styles definition. They will be enqueued both in the editor and when viewing the content on the front of the site.\n\nIt's possible to pass a style handle registered with the [`wp_register_style`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_style\/) function, a path to a CSS file relative to the `block.json` file, or a list with a mix of both ([learn more](#wpdefinedasset)).\n\n_Note: An option to pass also an array of styles exists since WordPress `5.9.0`._\n\n### View Style\n\n-   Type: `WPDefinedAsset`|`WPDefinedAsset[]` ([learn more](#wpdefinedasset))\n-   Optional\n-   Localized: No\n-   Property: `viewStyle`\n-   Since: `WordPress 6.5.0`\n\n```json\n{ \"viewStyle\": [ \"file:.\/view.css\", \"example-view-style\" ] }\n```\n\nBlock type frontend styles definition. They will be enqueued only when viewing the content on the front of the site.\n\nIt's possible to pass a style handle registered with the [`wp_register_style`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_style\/) function, a path to a CSS file relative to the `block.json` file, or a list with a mix of both ([learn more](#wpdefinedasset)).\n\nFrontend-only styles are especially useful for interactive blocks, to style parts that will only be visible after a user performs some action and where those styles will never be needed in the editor. You can start with using the `style` property to put all your common styles in one stylesheet. Only when you need editor-specific styling or frontend-specific styling, you can expand to `editorStyle` and `viewStyle`, but still keep the common part of your styling in the main stylesheet.\n\n### Render\n\n-   Type: `WPDefinedPath` ([learn more](#wpdefinedpath))\n-   Optional\n-   Localized: No\n-   Property: `render`\n-   Since: `WordPress 6.1.0`\n\n```json\n{ \"render\": \"file:.\/render.php\" }\n```\n\nPHP file to use when rendering the block type on the server to show on the front end. The following variables are exposed to the file:\n\n-   `$attributes` (`array`): The block attributes.\n-   `$content` (`string`): The block default content.\n-   `$block` (`WP_Block`): The block instance.\n\nAn example implementation of the `render.php` file defined with `render` could look like:\n\n```php\n<div <?php echo get_block_wrapper_attributes(); ?>>\n\t<?php echo esc_html( $attributes['label'] ); ?>\n<\/div>\n```\n\n_Note: This file loads for every instance of the block type when rendering the page HTML on the server. Accounting for that is essential when declaring functions or classes in the file. The simplest way to avoid the risk of errors is to consume that shared logic from another file._\n\n## Assets\n\n### `WPDefinedPath`\n\nThe `WPDefinedPath` type is a subtype of string, where the value represents a path to a JavaScript, CSS or PHP file relative to where the `block.json` file is located. The path provided must be prefixed with `file:`. This approach is based on how npm handles [local paths](https:\/\/docs.npmjs.com\/files\/package.json#local-paths) for packages.\n\n**Example:**\n\nIn `block.json`:\n\n```json\n{\n\t\"render\": \"file:.\/render.php\"\n}\n```\n\n### `WPDefinedAsset`\n\nIt extends `WPDefinedPath` for JavaScript and CSS files. An alternative to the file path would be a script handle, script module ID, or style handle referencing an already registered asset using WordPress helpers.\n\n**Example:**\n\nIn `block.json`:\n\n```json\n{\n\t\"editorScript\": \"file:.\/index.js\",\n\t\"script\": \"file:.\/script.js\",\n\t\"viewScriptModule\": [\n\t\t\"file:.\/view.js\",\n\t\t\"example-registered-script-module-id\"\n\t],\n\t\"editorStyle\": \"file:.\/index.css\",\n\t\"style\": [ \"file:.\/style.css\", \"example-shared-style\" ],\n\t\"viewStyle\": [ \"file:.\/view.css\", \"example-view-style\" ]\n}\n```\n\nIn the context of WordPress, when a block is registered with PHP, it will automatically register all scripts, script modules, and styles that are found in the `block.json` file and use file paths rather than asset handles.\n\nThat's why the `WPDefinedAsset` type has to offer a way to mirror the parameters necessary to register scripts, script modules, and styles using [`wp_register_script`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_script\/), [`wp_register_script_module`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_script_module\/), and [`wp_register_style`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_style\/), and then assign these as handles or script module IDs associated with the block.\n\nIt's possible to provide an object which takes the following shape:\n\n-   `handle` (`string`) - the name of the script. If omitted, it will be auto-generated.\n-   `dependencies` (`string[]`|`{ id: string, import?: 'dynamic'|'static' }[]`) - an array of registered script handles this script depends on. Script modules may use a simple string for static dependencies or the object form to indicate a dynamic dependency. Dynamic dependencies are dependencies that may or may not be used at runtime and are typically used with the dynamic `import('module-id')` syntax. Default value: `[]`.\n-   `version` (`string`|`false`|`null`) - string specifying the script version number, if it has one, which is added to the URL as a query string for cache busting purposes. If the version is set to `false`, a version number is automatically added equal to the currently installed WordPress version. If set to `null`, no version is added. Default value: `false`.\n\nThe definition is stored inside a separate PHP file which ends with `.asset.php` and is located next to the JS\/CSS file listed in `block.json`. WordPress will automatically detect this file through pattern matching. This option is the preferred one as it is expected it will become an option to auto-generate those asset files with `@wordpress\/scripts` package.\n\n**Example:**\n\n```\nbuild\/\n\u251c\u2500 block.json\n\u251c\u2500 index.js\n\u2514\u2500 index.asset.php\n```\n\nIn `block.json`:\n\n```json\n{ \"editorScript\": \"file:.\/index.js\" }\n```\n\nIn `build\/index.asset.php`:\n\n```php\n<?php\nreturn array(\n\t'dependencies' => array(\n\t\t'react',\n\t\t'wp-blocks',\n\t\t'wp-i18n',\n\t),\n\t'version'      => '3be55b05081a63d8f9d0ecb466c42cfd',\n);\n```\n\n### Frontend enqueueing\n\nStarting in the WordPress 5.8 release, it is possible to instruct WordPress to enqueue scripts and styles for a block type only when rendered on the frontend. It applies to the following asset fields in the `block.json` file:\n\n-   `script`\n-   `viewScript`\n-   `style`\n-   `viewStyle` (Added in WordPress 6.5.0)\n\n## Internationalization\n\nWordPress string discovery system can automatically translate fields marked in this document as translatable. First, you need to set the `textdomain` property in the `block.json` file that provides block metadata.\n\n**Example:**\n\n```json\n{\n\t\"title\": \"My block\",\n\t\"description\": \"My block is fantastic\",\n\t\"keywords\": [ \"fantastic\" ],\n\t\"textdomain\": \"my-plugin\"\n}\n```\n\n### PHP\n\nIn PHP, localized properties will be automatically wrapped in `_x` function calls on the backend of WordPress when executing `register_block_type`. These translations get added as an inline script to the plugin's script handle or to the `wp-block-library` script handle in WordPress core.\n\nThe way `register_block_type` processes translatable values is roughly equivalent to the following code snippet:\n\n```php\n<?php\n$metadata = array(\n\t'title'       => _x( 'My block', 'block title', 'my-plugin' ),\n\t'description' => _x( 'My block is fantastic!', 'block description', 'my-plugin' ),\n\t'keywords'    => array( _x( 'fantastic', 'block keyword', 'my-plugin' ) ),\n);\n```\n\nImplementation follows the existing [get_plugin_data](https:\/\/codex.wordpress.org\/Function_Reference\/get_plugin_data) function which parses the plugin contents to retrieve the plugin\u2019s metadata, and it applies translations dynamically.\n\n### JavaScript\n\nIn JavaScript, you can use `registerBlockType` method from `@wordpress\/blocks` package and pass the metadata object loaded from `block.json` as the first param. All localized properties get automatically wrapped in `_x` (from `@wordpress\/i18n` package) function calls similar to how it works in PHP.\n\n**Example:**\n\n```js\nimport { registerBlockType } from '@wordpress\/blocks';\nimport Edit from '.\/edit';\nimport metadata from '.\/block.json';\n\nregisterBlockType( metadata, {\n\tedit: Edit,\n\t\/\/ ...other client-side settings\n} );\n```\n\n## Backward compatibility\n\nThe existing registration mechanism (both server side and frontend) will continue to work, it will serve as low-level implementation detail for the `block.json` based registration.\n\nOnce all details are ready, Core Blocks will be migrated iteratively and third-party blocks will see warnings appearing in the console to encourage them to refactor the block registration API used.\n\nThe following properties are going to be supported for backward compatibility reasons on the client-side only. Some of them might be replaced with alternative APIs in the future:\n\n-   `edit` - see the [Edit and Save](\/docs\/reference-guides\/block-api\/block-edit-save.md) documentation for more details.\n-   `save` - see the [Edit and Save](\/docs\/reference-guides\/block-api\/block-edit-save.md) documentation for more details.\n-   `transforms` - see the [Transforms](\/docs\/reference-guides\/block-api\/block-registration.md#transforms-optional) documentation for more details.\n-   `deprecated` - see the [Deprecated Blocks](\/docs\/reference-guides\/block-api\/block-deprecation.md) documentation for more details.\n-   `merge` - undocumented as of today. Its role is to handle merging multiple blocks into one.\n-   `getEditWrapperProps` - undocumented as well. Its role is to inject additional props to the block edit's component wrapper.\n\n**Example**:\n\n```js\nimport { registerBlockType } from '@wordpress\/blocks';\n\nregisterBlockType( 'my-plugin\/block-name', {\n\tedit: function () {\n\t\t\/\/ Edit definition goes here.\n\t},\n\tsave: function () {\n\t\t\/\/ Save definition goes here.\n\t},\n\tgetEditWrapperProps: function () {\n\t\t\/\/ Implementation goes here.\n\t},\n} );\n```\n\nIn the case of [dynamic blocks](\/docs\/how-to-guides\/block-tutorial\/creating-dynamic-blocks.md) supported by WordPress, it should still be possible to register the `render_callback` property using both [`register_block_type`](https:\/\/developer.wordpress.org\/reference\/functions\/register_block_type\/) functions on the server.\n"
    },
    {
        "path": "\/markdown\/reference-guides\/block-api\/block-selectors.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Selectors<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<div class=\"callout callout-alert\">\n\tThis API was stabilized in Gutenberg 15.5 and is planned for core release\n\tin WordPress 6.3. To use this prior to WordPress 6.3, you will need to\n\tinstall and activate Gutenberg >= 15.5.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Block Selectors is the API that allows blocks to customize the CSS selector used<br>when their styles are generated.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A block may customize its CSS selectors at three levels: root, feature, and<br>subfeature.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Root selector<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The root selector is the block's primary CSS selector.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>All blocks require a primary CSS selector for their style declarations to be<br>included under. If one is not provided through the Block Selectors API, a<br>default is generated in the form of <code>.wp-block-&lt;name><\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Example<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t...\n\t\"selectors\": {\n\t\t\"root\": \".my-custom-block-selector\"\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Feature selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Feature selectors relate to styles for a block support, e.g. border, color,<br>typography, etc.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A block may wish to apply the styles for specific features to different<br>elements within a block. An example might be using colors on the block's wrapper<br>but applying the typography styles to an inner heading only.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Example<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t...\n\t\"selectors\": {\n\t\t\"root\": \".my-custom-block-selector\",\n\t\t\"color\": \".my-custom-block-selector\",\n\t\t\"typography\": \".my-custom-block-selector > h2\"\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Subfeature selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>These selectors relate to individual styles provided by a block support e.g.<br><code>background-color<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A subfeature can have styles generated under its own unique selector. This is<br>especially useful where one block support subfeature can't be applied to the<br>same element as the support's other subfeatures.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A great example of this is <code>text-decoration<\/code>. Web browsers render this style<br>differently, making it difficult to override if added to a wrapper element. By<br>assigning <code>text-decoration<\/code> a custom selector, its style can target only the<br>elements to which it should be applied.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Example<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t...\n\t\"selectors\": {\n\t\t\"root\": \".my-custom-block-selector\",\n\t\t\"color\": \".my-custom-block-selector\",\n\t\t\"typography\": {\n\t\t\t\"root\": \".my-custom-block-selector > h2\",\n\t\t\t\"text-decoration\": \".my-custom-block-selector > h2 span\"\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Shorthand<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Rather than specify a CSS selector for every subfeature, you can set a single<br>selector as a string value for the relevant feature. This is the approach<br>demonstrated for the <code>color<\/code> feature in the earlier examples above.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Fallbacks<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A selector that hasn't been configured for a specific feature will fall back to<br>the block's root selector. Similarly, if a subfeature hasn't had a custom<br>selector set, it will fall back to its parent feature's selector and, if unavailable, fall back further to the block's root selector.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Rather than repeating selectors for multiple subfeatures, you can set the<br>common selector as the parent feature's <code>root<\/code> selector and only define the<br>unique selectors for the subfeatures that differ.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Example<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t...\n\t\"selectors\": {\n\t\t\"root\": \".my-custom-block-selector\",\n\t\t\"color\": {\n\t\t\t\"text\": \".my-custom-block-selector p\"\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"root\": \".my-custom-block-selector > h2\",\n\t\t\t\"text-decoration\": \".my-custom-block-selector > h2 span\"\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The <code>color.background-color<\/code> subfeature isn't explicitly set in the above<br>example. As the <code>color<\/code> feature also doesn't define a <code>root<\/code> selector,<br><code>color.background-color<\/code> would be included under the block's primary root<br>selector, <code>.my-custom-block-selector<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For a subfeature such as <code>typography.font-size<\/code>, it would fallback to its parent<br>feature's selector given that is present, i.e. <code>.my-custom-block-selector > h2<\/code>.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Selectors\n\n<div class=\"callout callout-alert\">\n\tThis API was stabilized in Gutenberg 15.5 and is planned for core release\n\tin WordPress 6.3. To use this prior to WordPress 6.3, you will need to\n\tinstall and activate Gutenberg >= 15.5.\n<\/div>\n\nBlock Selectors is the API that allows blocks to customize the CSS selector used\nwhen their styles are generated.\n\nA block may customize its CSS selectors at three levels: root, feature, and\nsubfeature.\n\n## Root selector\n\nThe root selector is the block's primary CSS selector.\n\nAll blocks require a primary CSS selector for their style declarations to be\nincluded under. If one is not provided through the Block Selectors API, a\ndefault is generated in the form of `.wp-block-<name>`.\n\n### Example\n\n```json\n{\n\t...\n\t\"selectors\": {\n\t\t\"root\": \".my-custom-block-selector\"\n\t}\n}\n```\n\n## Feature selectors\n\nFeature selectors relate to styles for a block support, e.g. border, color,\ntypography, etc.\n\nA block may wish to apply the styles for specific features to different\nelements within a block. An example might be using colors on the block's wrapper\nbut applying the typography styles to an inner heading only.\n\n### Example\n\n```json\n{\n\t...\n\t\"selectors\": {\n\t\t\"root\": \".my-custom-block-selector\",\n\t\t\"color\": \".my-custom-block-selector\",\n\t\t\"typography\": \".my-custom-block-selector > h2\"\n\t}\n}\n```\n\n## Subfeature selectors\n\nThese selectors relate to individual styles provided by a block support e.g.\n`background-color`\n\nA subfeature can have styles generated under its own unique selector. This is\nespecially useful where one block support subfeature can't be applied to the\nsame element as the support's other subfeatures.\n\nA great example of this is `text-decoration`. Web browsers render this style\ndifferently, making it difficult to override if added to a wrapper element. By\nassigning `text-decoration` a custom selector, its style can target only the\nelements to which it should be applied.\n\n### Example\n\n```json\n{\n\t...\n\t\"selectors\": {\n\t\t\"root\": \".my-custom-block-selector\",\n\t\t\"color\": \".my-custom-block-selector\",\n\t\t\"typography\": {\n\t\t\t\"root\": \".my-custom-block-selector > h2\",\n\t\t\t\"text-decoration\": \".my-custom-block-selector > h2 span\"\n\t\t}\n\t}\n}\n```\n\n## Shorthand\n\nRather than specify a CSS selector for every subfeature, you can set a single\nselector as a string value for the relevant feature. This is the approach\ndemonstrated for the `color` feature in the earlier examples above.\n\n## Fallbacks\n\nA selector that hasn't been configured for a specific feature will fall back to\nthe block's root selector. Similarly, if a subfeature hasn't had a custom\nselector set, it will fall back to its parent feature's selector and, if unavailable, fall back further to the block's root selector.\n\nRather than repeating selectors for multiple subfeatures, you can set the\ncommon selector as the parent feature's `root` selector and only define the\nunique selectors for the subfeatures that differ.\n\n### Example\n\n```json\n{\n\t...\n\t\"selectors\": {\n\t\t\"root\": \".my-custom-block-selector\",\n\t\t\"color\": {\n\t\t\t\"text\": \".my-custom-block-selector p\"\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"root\": \".my-custom-block-selector > h2\",\n\t\t\t\"text-decoration\": \".my-custom-block-selector > h2 span\"\n\t\t}\n\t}\n}\n```\n\nThe `color.background-color` subfeature isn't explicitly set in the above\nexample. As the `color` feature also doesn't define a `root` selector,\n`color.background-color` would be included under the block's primary root\nselector, `.my-custom-block-selector`.\n\nFor a subfeature such as `typography.font-size`, it would fallback to its parent\nfeature's selector given that is present, i.e. `.my-custom-block-selector > h2`.\n"
    },
    {
        "path": "\/markdown\/reference-guides\/block-api\/block-templates.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Templates<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block template is defined as a list of block items. Such blocks can have predefined attributes, placeholder content, and be static or dynamic. Block templates allow specifying a default initial state for an editor session.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The scope of templates include:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Setting a default state dynamically on the client. (like <code>defaultBlock<\/code>)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Registered as a default for a given post type.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Planned additions:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Saved and assigned to pages as \"page templates\".<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Defined in a <code>template.php<\/code> file or pulled from a custom post type (<code>wp_templates<\/code>) that is site specific.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>As the equivalent of the theme hierarchy.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">API<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Templates can be declared in JS or in PHP as an array of blockTypes (block name and optional attributes).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The first example in PHP creates a template for posts that includes an image block to start, you can add as many or as few blocks to your template as needed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>PHP example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function myplugin_register_template() {\n    $post_type_object = get_post_type_object( 'post' );\n    $post_type_object->template = array(\n        array( 'core\/image' ),\n    );\n}\nadd_action( 'init', 'myplugin_register_template' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The following example in JavaScript creates a new block using <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/inner-blocks\/README.md\">InnerBlocks<\/a> and templates, when inserted creates a set of blocks based off the template.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const el = React.createElement;\nconst { registerBlockType } = wp.blocks;\nconst { InnerBlocks } = wp.blockEditor;\n\nconst BLOCKS_TEMPLATE = &#91;\n\t&#91; 'core\/image', {} ],\n\t&#91; 'core\/paragraph', { placeholder: 'Image Details' } ],\n];\n\nregisterBlockType( 'myplugin\/template', {\n\ttitle: 'My Template Block',\n\tcategory: 'widgets',\n\tedit: ( props ) => {\n\t\treturn el( InnerBlocks, {\n\t\t\ttemplate: BLOCKS_TEMPLATE,\n\t\t\ttemplateLock: false,\n\t\t} );\n\t},\n\tsave: ( props ) => {\n\t\treturn el( InnerBlocks.Content, {} );\n\t},\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>See the <a href=\"\/docs\/how-to-guides\/metabox.md#step-4-finishing-touches\">Meta Block Tutorial<\/a> for a full example of a template in use.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block attributes<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To find a comprehensive list of all block attributes that you can define in a template, consult the block's <code>block.json<\/code> file, and look at the <code>attributes<\/code> and <code>supports<\/code> values.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/c62ccd80c7c6abb85740cf8745439029bf0f4d35\/packages\/block-library\/src\/heading\/block.json#L5-L25\">packages\/block-library\/src\/heading\/block.json<\/a> shows that the block has a <code>level<\/code> attribute, and supports the <code>anchor<\/code> parameter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you don't have the Gutenberg plugin installed, you can find <code>block.json<\/code> files inside <code>wp-includes\/blocks\/heading\/block.json<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Custom post types<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A custom post type can register its own template during registration:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function myplugin_register_book_post_type() {\n\t$args = array(\n\t\t'public' => true,\n\t\t'label'  => 'Books',\n\t\t'show_in_rest' => true,\n\t\t'template' => array(\n\t\t\tarray( 'core\/image', array(\n\t\t\t\t'align' => 'left',\n\t\t\t) ),\n\t\t\tarray( 'core\/heading', array(\n\t\t\t\t'placeholder' => 'Add Author...',\n\t\t\t) ),\n\t\t\tarray( 'core\/paragraph', array(\n\t\t\t\t'placeholder' => 'Add Description...',\n\t\t\t) ),\n\t\t),\n\t);\n\tregister_post_type( 'book', $args );\n}\nadd_action( 'init', 'myplugin_register_book_post_type' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Locking<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Sometimes the intention might be to lock the template on the UI so that the blocks presented cannot be manipulated. This is achieved with a <code>template_lock<\/code> property.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function myplugin_register_template() {\n\t$post_type_object = get_post_type_object( 'post' );\n\t$post_type_object->template = array(\n\t\tarray( 'core\/paragraph', array(\n\t\t\t'placeholder' => 'Add Description...',\n\t\t) ),\n\t);\n\t$post_type_object->template_lock = 'all';\n}\nadd_action( 'init', 'myplugin_register_template' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Options:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>contentOnly<\/code> \u2014 prevents all operations. Additionally, the block types that don't have content are hidden from the list view and can't gain focus within the block list. Unlike the other lock types, this is not overridable by children.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>all<\/code> \u2014 prevents all operations. It is not possible to insert new blocks, move existing blocks, or delete blocks.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>insert<\/code> \u2014 prevents inserting or removing blocks, but allows moving existing blocks.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Lock settings can be inherited by InnerBlocks. If <code>templateLock<\/code> is not set in an InnerBlocks area, the locking of the parent InnerBlocks area is used. If the block is a top level block, the locking configuration of the current post type is used.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Individual block locking<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Alongside template level locking, you can lock individual blocks; you can do this using a <code>lock<\/code> attribute on the attributes level. Block-level lock takes priority over the <code>templateLock<\/code> feature. Currently, you can lock moving and removing blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>attributes: {\n  \/\/ Prevent a block from being moved or removed.\n  lock: {\n    remove: true,\n    move: true,\n  }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Options:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>remove<\/code> \u2014 Locks the ability of a block from being removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>move<\/code> \u2014 Locks the ability of a block from being moved.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>You can use this with <code>templateLock<\/code> to lock all blocks except a single block by using <code>false<\/code> in <code>remove<\/code> or <code>move<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$template = array(\n\tarray( 'core\/image', array(\n\t\t'align' => 'left',\n\t) ),\n\tarray( 'core\/heading', array(\n\t\t'placeholder' => 'Add Author...',\n\t) ),\n\t\/\/ Allow a Paragraph block to be moved or removed.\n\tarray( 'core\/paragraph', array(\n\t\t'placeholder' => 'Add Description...',\n\t\t'lock' => array(\n\t\t\t'move'   => false,\n\t\t\t'remove' => false,\n\t\t),\n\t) ),\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Nested templates<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Container blocks like the columns blocks also support templates. This is achieved by assigning a nested template to the block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$template = array(\n\tarray( 'core\/paragraph', array(\n\t\t'placeholder' => 'Add a root-level paragraph',\n\t) ),\n\tarray( 'core\/columns', array(), array(\n\t\tarray( 'core\/column', array(), array(\n\t\t\tarray( 'core\/image', array() ),\n\t\t) ),\n\t\tarray( 'core\/column', array(), array(\n\t\t\tarray( 'core\/paragraph', array(\n\t\t\t\t'placeholder' => 'Add a inner paragraph'\n\t\t\t) ),\n\t\t) ),\n\t) )\n);\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# Templates\n\nA block template is defined as a list of block items. Such blocks can have predefined attributes, placeholder content, and be static or dynamic. Block templates allow specifying a default initial state for an editor session.\n\nThe scope of templates include:\n\n-   Setting a default state dynamically on the client. (like `defaultBlock`)\n-   Registered as a default for a given post type.\n\nPlanned additions:\n\n-   Saved and assigned to pages as \"page templates\".\n-   Defined in a `template.php` file or pulled from a custom post type (`wp_templates`) that is site specific.\n-   As the equivalent of the theme hierarchy.\n\n## API\n\nTemplates can be declared in JS or in PHP as an array of blockTypes (block name and optional attributes).\n\nThe first example in PHP creates a template for posts that includes an image block to start, you can add as many or as few blocks to your template as needed.\n\nPHP example:\n\n```php\n<?php\nfunction myplugin_register_template() {\n    $post_type_object = get_post_type_object( 'post' );\n    $post_type_object->template = array(\n        array( 'core\/image' ),\n    );\n}\nadd_action( 'init', 'myplugin_register_template' );\n```\n\nThe following example in JavaScript creates a new block using [InnerBlocks](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/inner-blocks\/README.md) and templates, when inserted creates a set of blocks based off the template.\n\n```js\nconst el = React.createElement;\nconst { registerBlockType } = wp.blocks;\nconst { InnerBlocks } = wp.blockEditor;\n\nconst BLOCKS_TEMPLATE = [\n\t[ 'core\/image', {} ],\n\t[ 'core\/paragraph', { placeholder: 'Image Details' } ],\n];\n\nregisterBlockType( 'myplugin\/template', {\n\ttitle: 'My Template Block',\n\tcategory: 'widgets',\n\tedit: ( props ) => {\n\t\treturn el( InnerBlocks, {\n\t\t\ttemplate: BLOCKS_TEMPLATE,\n\t\t\ttemplateLock: false,\n\t\t} );\n\t},\n\tsave: ( props ) => {\n\t\treturn el( InnerBlocks.Content, {} );\n\t},\n} );\n```\n\nSee the [Meta Block Tutorial](\/docs\/how-to-guides\/metabox.md#step-4-finishing-touches) for a full example of a template in use.\n\n## Block attributes\n\nTo find a comprehensive list of all block attributes that you can define in a template, consult the block's `block.json` file, and look at the `attributes` and `supports` values.\n\nFor example, [packages\/block-library\/src\/heading\/block.json](https:\/\/github.com\/WordPress\/gutenberg\/blob\/c62ccd80c7c6abb85740cf8745439029bf0f4d35\/packages\/block-library\/src\/heading\/block.json#L5-L25) shows that the block has a `level` attribute, and supports the `anchor` parameter.\n\nIf you don't have the Gutenberg plugin installed, you can find `block.json` files inside `wp-includes\/blocks\/heading\/block.json`.\n\n## Custom post types\n\nA custom post type can register its own template during registration:\n\n```php\nfunction myplugin_register_book_post_type() {\n\t$args = array(\n\t\t'public' => true,\n\t\t'label'  => 'Books',\n\t\t'show_in_rest' => true,\n\t\t'template' => array(\n\t\t\tarray( 'core\/image', array(\n\t\t\t\t'align' => 'left',\n\t\t\t) ),\n\t\t\tarray( 'core\/heading', array(\n\t\t\t\t'placeholder' => 'Add Author...',\n\t\t\t) ),\n\t\t\tarray( 'core\/paragraph', array(\n\t\t\t\t'placeholder' => 'Add Description...',\n\t\t\t) ),\n\t\t),\n\t);\n\tregister_post_type( 'book', $args );\n}\nadd_action( 'init', 'myplugin_register_book_post_type' );\n```\n\n## Locking\n\nSometimes the intention might be to lock the template on the UI so that the blocks presented cannot be manipulated. This is achieved with a `template_lock` property.\n\n```php\nfunction myplugin_register_template() {\n\t$post_type_object = get_post_type_object( 'post' );\n\t$post_type_object->template = array(\n\t\tarray( 'core\/paragraph', array(\n\t\t\t'placeholder' => 'Add Description...',\n\t\t) ),\n\t);\n\t$post_type_object->template_lock = 'all';\n}\nadd_action( 'init', 'myplugin_register_template' );\n```\n\n_Options:_\n\n-   `contentOnly` \u2014 prevents all operations. Additionally, the block types that don't have content are hidden from the list view and can't gain focus within the block list. Unlike the other lock types, this is not overridable by children.\n-   `all` \u2014 prevents all operations. It is not possible to insert new blocks, move existing blocks, or delete blocks.\n-   `insert` \u2014 prevents inserting or removing blocks, but allows moving existing blocks.\n\nLock settings can be inherited by InnerBlocks. If `templateLock` is not set in an InnerBlocks area, the locking of the parent InnerBlocks area is used. If the block is a top level block, the locking configuration of the current post type is used.\n\n## Individual block locking\n\nAlongside template level locking, you can lock individual blocks; you can do this using a `lock` attribute on the attributes level. Block-level lock takes priority over the `templateLock` feature. Currently, you can lock moving and removing blocks.\n\n```js\nattributes: {\n  \/\/ Prevent a block from being moved or removed.\n  lock: {\n    remove: true,\n    move: true,\n  }\n}\n```\n\n_Options:_\n\n-   `remove` \u2014 Locks the ability of a block from being removed.\n-   `move` \u2014 Locks the ability of a block from being moved.\n\nYou can use this with `templateLock` to lock all blocks except a single block by using `false` in `remove` or `move`.\n\n```php\n$template = array(\n\tarray( 'core\/image', array(\n\t\t'align' => 'left',\n\t) ),\n\tarray( 'core\/heading', array(\n\t\t'placeholder' => 'Add Author...',\n\t) ),\n\t\/\/ Allow a Paragraph block to be moved or removed.\n\tarray( 'core\/paragraph', array(\n\t\t'placeholder' => 'Add Description...',\n\t\t'lock' => array(\n\t\t\t'move'   => false,\n\t\t\t'remove' => false,\n\t\t),\n\t) ),\n);\n```\n\n## Nested templates\n\nContainer blocks like the columns blocks also support templates. This is achieved by assigning a nested template to the block.\n\n```php\n$template = array(\n\tarray( 'core\/paragraph', array(\n\t\t'placeholder' => 'Add a root-level paragraph',\n\t) ),\n\tarray( 'core\/columns', array(), array(\n\t\tarray( 'core\/column', array(), array(\n\t\t\tarray( 'core\/image', array() ),\n\t\t) ),\n\t\tarray( 'core\/column', array(), array(\n\t\t\tarray( 'core\/paragraph', array(\n\t\t\t\t'placeholder' => 'Add a inner paragraph'\n\t\t\t) ),\n\t\t) ),\n\t) )\n);\n```\n"
    },
    {
        "path": "\/markdown\/reference-guides\/block-api\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Block API Reference<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Blocks are the fundamental element of the editor. They are the primary way in which plugins and themes can register their own functionality and extend the capabilities of the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following sections will walk you through the existing block APIs:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-annotations.md\">Annotations<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-api-versions.md\">API Versions<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-attributes.md\">Attributes<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-context.md\">Context<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-deprecation.md\">Deprecation<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-edit-save.md\">Edit and Save<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-metadata.md\">Metadata in block.json<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-patterns.md\">Patterns<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-registration.md\">Registration<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-selectors.md\">Selectors<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-styles.md\">Styles<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-supports.md\">Supports<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-transforms.md\">Transformations<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-templates.md\">Templates<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/block-api\/block-variations.md\">Variations<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Block API Reference\n\nBlocks are the fundamental element of the editor. They are the primary way in which plugins and themes can register their own functionality and extend the capabilities of the editor.\n\nThe following sections will walk you through the existing block APIs:\n\n-   [Annotations](\/docs\/reference-guides\/block-api\/block-annotations.md)\n-   [API Versions](\/docs\/reference-guides\/block-api\/block-api-versions.md)\n-   [Attributes](\/docs\/reference-guides\/block-api\/block-attributes.md)\n-   [Context](\/docs\/reference-guides\/block-api\/block-context.md)\n-   [Deprecation](\/docs\/reference-guides\/block-api\/block-deprecation.md)\n-   [Edit and Save](\/docs\/reference-guides\/block-api\/block-edit-save.md)\n-   [Metadata in block.json](\/docs\/reference-guides\/block-api\/block-metadata.md)\n-   [Patterns](\/docs\/reference-guides\/block-api\/block-patterns.md)\n-   [Registration](\/docs\/reference-guides\/block-api\/block-registration.md)\n-   [Selectors](\/docs\/reference-guides\/block-api\/block-selectors.md)\n-   [Styles](\/docs\/reference-guides\/block-api\/block-styles.md)\n-   [Supports](\/docs\/reference-guides\/block-api\/block-supports.md)\n-   [Transformations](\/docs\/reference-guides\/block-api\/block-transforms.md)\n-   [Templates](\/docs\/reference-guides\/block-api\/block-templates.md)\n-   [Variations](\/docs\/reference-guides\/block-api\/block-variations.md)\n"
    },
    {
        "path": "\/markdown\/reference-guides\/block-api\/block-attributes.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Attributes<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Block attributes provide information about the data stored by a block. For example, rich content, a list of image URLs, a background colour, or a button title.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A block can contain any number of attributes, and these are specified by the <code>attributes<\/code> field - an object where each key is the name of the attribute, and the value is the attribute definition.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The attribute definition will contain, at a minimum, either a <code>type<\/code> or an <code>enum<\/code>. There may be additional fields.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example<\/em>: Attributes object defining three attributes - <code>url<\/code>, <code>title<\/code>, and <code>size<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\turl: {\n\t\ttype: 'string',\n\t\tsource: 'attribute',\n\t\tselector: 'img',\n\t\tattribute: 'src',\n\t},\n\ttitle: {\n\t\ttype: 'string',\n\t},\n\tsize: {\n\t\tenum: &#91; 'large', 'small' ],\n\t},\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When a block is parsed this definition will be used to extract data from the block content. Anything that matches will  be available to your block through the <code>attributes<\/code> prop.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This parsing process can be summarized as:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Extract value from the <code>source<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Check value matches the <code>type<\/code>, or is one of the <code>enum<\/code> values.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Example<\/em>: Attributes available in the <code>edit<\/code> and function, using the above attributes definition.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function YourBlockEdit( { attributes } ) {\n\treturn (\n\t\t<p>URL is { attributes.url }, title is { attributes.title }, and size is { attributes.size }.<\/p>\n\t)\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The block is responsible for using the <code>save<\/code> function to ensure that all attributes with a <code>source<\/code> field are saved according to the attributes definition. This is not automatic.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Attributes without a <code>source<\/code> will be automatically saved in the block <a href=\"\/docs\/explanations\/architecture\/key-concepts.md#data-attributes\">comment delimiter<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, using the above attributes definition you would need to ensure that your <code>save<\/code> function has a corresponding img tag for the <code>url<\/code> attribute. The <code>title<\/code> and <code>size<\/code> attributes will be saved in the comment delimiter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example<\/em>: Example <code>save<\/code> function that contains the <code>url<\/code> attribute<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function YourBlockSave( { attributes } ) {\n\treturn (\n\t\t<img src=\"{\" attributes.url=\"\" }=\"\">\n\t)\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The saved HTML will contain the <code>title<\/code> and <code>size<\/code> in the comment delimiter, and the <code>url<\/code> in the <code>img<\/code> node.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n<img src=\"\/image.jpg\">\n\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If an attribute changes over time then a <a href=\"\/docs\/reference-guides\/block-api\/block-deprecation.md\">block deprecation<\/a> can help migrate from an older attribute, or remove it entirely.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Type validation<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>type<\/code> indicates the type of data that is stored by the attribute. It does not indicate where the data is stored, which is defined by the <code>source<\/code> field.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A <code>type<\/code> is required, unless an <code>enum<\/code> is provided. A <code>type<\/code> can be used with an <code>enum<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>type<\/code> field MUST be one of the following:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>null<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>object<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>array<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>string<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>integer<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>number<\/code> (same as <code>integer<\/code>)<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Note that the validity of an <code>object<\/code> is determined by your <code>source<\/code>. For an example, see the <code>query<\/code> details below.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Enum validation<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>An attribute can be defined as one of a fixed set of values. This is specified by an <code>enum<\/code>, which contains an array of allowed values:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example<\/em>: Example <code>enum<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\tsize: {\n\t\tenum: &#91; 'large', 'small', 'tiny' ]\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Value source<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Attribute sources are used to define how the attribute values are extracted from saved post content. They provide a mechanism to map from the saved markup to a JavaScript representation of a block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The available <code>source<\/code> values are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>(no value)<\/code> - when no <code>source<\/code> is specified then data is stored in the block's <a href=\"\/docs\/explanations\/architecture\/key-concepts.md#data-attributes\">comment delimiter<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>attribute<\/code> - data is stored in an HTML element attribute.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>text<\/code> - data is stored in HTML text.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>html<\/code> - data is stored in HTML. This is typically used by <code>RichText<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>query<\/code> - data is stored as an array of objects.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>meta<\/code> - data is stored in post meta (deprecated).<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The <code>source<\/code> field is usually combined with a <code>selector<\/code> field. If no selector argument is specified, the source definition runs against the block's root node. If a selector argument is specified, it will run against the matching element(s) within the block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>selector<\/code> can be an HTML tag, or anything queryable with <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Document\/querySelector\">querySelector<\/a>, such as a class or id attribute. Examples are given below.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, a <code>selector<\/code> of <code>img<\/code> will match an <code>img<\/code> element, and <code>img.class<\/code> will match an <code>img<\/code> element that has a class of <code>class<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Under the hood, attribute sources are a superset of the functionality provided by <a href=\"https:\/\/github.com\/aduth\/hpq\">hpq<\/a>, a small library used to parse and query HTML markup into an object shape.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To summarize, the <code>source<\/code> determines where data is stored in your content, and the <code>type<\/code> determines what that data is. To reduce the amount of data stored it is usually better to store as much data as possible within HTML rather than as attributes within the comment delimiter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>attribute<\/code> source<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Use an <code>attribute<\/code> source to extract the value from an attribute in the markup. The attribute is specified by the <code>attribute<\/code> field, which must be supplied.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example<\/em>: Extract the <code>src<\/code> attribute from an image found in the block's markup.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Saved content:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><div>\n\tBlock Content\n\n\t<img src=\"https:\/\/lorempixel.com\/1200\/800\/\">\n<\/div>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Attribute definition:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\turl: {\n\t\ttype: 'string',\n\t\tsource: 'attribute',\n\t\tselector: 'img',\n\t\tattribute: 'src',\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Attribute available in the block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"url\": \"https:\/\/lorempixel.com\/1200\/800\/\" }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Most attributes from markup will be of type <code>string<\/code>. Numeric attributes in HTML are still stored as strings, and are not converted automatically.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example<\/em>: Extract the <code>width<\/code> attribute from an image found in the block's markup.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Saved content:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><div>\n\tBlock Content\n\n\t<img src=\"https:\/\/lorempixel.com\/1200\/800\/\" width=\"50\">\n<\/div>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Attribute definition:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\twidth: {\n\t\ttype: 'string',\n\t\tsource: 'attribute',\n\t\tselector: 'img',\n\t\tattribute: 'width',\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Attribute available in the block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"width\": \"50\" }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The only exception is when checking for the existence of an attribute (for example, the <code>disabled<\/code> attribute on a <code>button<\/code>). In that case type <code>boolean<\/code> can be used and the stored value will be a boolean.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example<\/em>: Extract the <code>disabled<\/code> attribute from a button found in the block's markup.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Saved content:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><div>\n\tBlock Content\n\n\t<button type=\"button\" disabled=\"\">Button<\/button>\n<\/div>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Attribute definition:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\tdisabled: {\n\t\ttype: 'boolean',\n\t\tsource: 'attribute',\n\t\tselector: 'button',\n\t\tattribute: 'disabled',\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Attribute available in the block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"disabled\": true }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>text<\/code> source<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Use <code>text<\/code> to extract the inner text from markup. Note that HTML is returned according to the rules of <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Node\/textContent\"><code>textContent<\/code><\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example<\/em>: Extract the <code>content<\/code> attribute from a figcaption element found in the block's markup.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Saved content:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><figure>\n\t<img src=\"\/image.jpg\">\n\n\t<figcaption>The inner text of the figcaption element<\/figcaption>\n<\/figure>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Attribute definition:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\tcontent: {\n\t\ttype: 'string',\n\t\tsource: 'text',\n\t\tselector: 'figcaption',\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Attribute available in the block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"content\": \"The inner text of the figcaption element\" }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Another example, using <code>text<\/code> as the source, and using <code>.my-content<\/code> class as the selector to extract text:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example<\/em>: Extract the <code>content<\/code> attribute from an element with <code>.my-content<\/code> class found in the block's markup.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Saved content:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><div>\n\t<img src=\"\/image.jpg\">\n\n\t<p class=\"my-content\">The inner text of .my-content class<\/p>\n<\/div>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Attribute definition:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\tcontent: {\n\t\ttype: 'string',\n\t\tsource: 'text',\n\t\tselector: '.my-content',\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Attribute available in the block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"content\": \"The inner text of .my-content class\" }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>html<\/code> source<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Use <code>html<\/code> to extract the inner HTML from markup. Note that text is returned according to the rules of <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Element\/innerHTML\"><code>innerHTML<\/code><\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example<\/em>: Extract the <code>content<\/code> attribute from a figcaption element found in the block's markup.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Saved content:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><figure>\n\t<img src=\"\/image.jpg\">\n\n\t<figcaption>The inner text of the <strong>figcaption<\/strong> element<\/figcaption>\n<\/figure>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Attribute definition:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\tcontent: {\n\t\ttype: 'string',\n\t\tsource: 'html',\n\t\tselector: 'figcaption',\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Attribute available in the block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{ \"content\": \"The inner text of the <strong>figcaption<\/strong> element\" }\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>query<\/code> source<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Use <code>query<\/code> to extract an array of values from markup. Entries of the array are determined by the <code>selector<\/code> argument, where each matched element within the block will have an entry structured corresponding to the second argument, an object of attribute sources.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>query<\/code> field is effectively a nested block attributes definition. It is possible (although not necessarily recommended) to nest further.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example<\/em>: Extract <code>src<\/code> and <code>alt<\/code> from each image element in the block's markup.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Saved content:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><div>\n\t<img src=\"https:\/\/lorempixel.com\/1200\/800\/\" alt=\"large image\">\n\t<img src=\"https:\/\/lorempixel.com\/50\/50\/\" alt=\"small image\">\n<\/div>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Attribute definition:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\timages: {\n\t\ttype: 'array',\n\t\tsource: 'query',\n\t\tselector: 'img',\n\t\tquery: {\n\t\t\turl: {\n\t\t\t\ttype: 'string',\n\t\t\t\tsource: 'attribute',\n\t\t\t\tattribute: 'src',\n\t\t\t},\n\t\t\talt: {\n\t\t\t\ttype: 'string',\n\t\t\t\tsource: 'attribute',\n\t\t\t\tattribute: 'alt',\n\t\t\t},\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Attribute available in the block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"images\": &#91;\n\t\t{ \"url\": \"https:\/\/lorempixel.com\/1200\/800\/\", \"alt\": \"large image\" },\n\t\t{ \"url\": \"https:\/\/lorempixel.com\/50\/50\/\", \"alt\": \"small image\" }\n\t]\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Meta source (deprecated)<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<div class=\"callout callout-alert\">\nAlthough attributes may be obtained from a post's meta, meta attribute sources are considered deprecated; <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/c367c4e2765f9e6b890d1565db770147efca5d66\/packages\/core-data\/src\/entity-provider.js\">EntityProvider and related hook APIs<\/a> should be used instead, as shown in the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/metabox\/#step-2-add-meta-block\">Create Meta Block how-to<\/a>.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Attributes may be obtained from a post's meta rather than from the block's representation in saved post content. For this, an attribute is required to specify its corresponding meta key under the <code>meta<\/code> key.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Attribute definition:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\tauthor: {\n\t\ttype: 'string',\n\t\tsource: 'meta',\n\t\tmeta: 'author'\n\t},\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>From here, meta attributes can be read and written by a block using the same interface as any attribute:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>{% JSX %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>edit( { attributes, setAttributes } ) {\n\tfunction onChange( event ) {\n\t\tsetAttributes( { author: event.target.value } );\n\t}\n\n\treturn <input value=\"{\" attributes.author=\"\" }=\"\" onchange=\"{\" type=\"text\">;\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Considerations<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>By default, a meta field will be excluded from a post object's meta. This can be circumvented by explicitly making the field visible:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function gutenberg_my_block_init() {\n\tregister_post_meta( 'post', 'author', array(\n\t\t'show_in_rest' => true,\n\t) );\n}\nadd_action( 'init', 'gutenberg_my_block_init' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Furthermore, be aware that WordPress defaults to:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>not treating a meta datum as being unique, instead returning an array of values;<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>treating that datum as a string.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>If either behavior is not desired, the same <code>register_post_meta<\/code> call can be complemented with the <code>single<\/code> and\/or <code>type<\/code> parameters as follows:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function gutenberg_my_block_init() {\n\tregister_post_meta( 'post', 'author_count', array(\n\t\t'show_in_rest' => true,\n\t\t'single' => true,\n\t\t'type' => 'integer',\n\t) );\n}\nadd_action( 'init', 'gutenberg_my_block_init' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If you'd like to use an object or an array in an attribute, you can register a <code>string<\/code> attribute type and use JSON as the intermediary. Serialize the structured data to JSON prior to saving, and then deserialize the JSON string on the server. Keep in mind that you're responsible for the integrity of the data; make sure to properly sanitize, accommodate missing data, etc.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Lastly, make sure that you respect the data's type when setting attributes, as the framework does not automatically perform type casting of meta. Incorrect typing in block attributes will result in a post remaining dirty even after saving (<em>cf.<\/em> <code>isEditedPostDirty<\/code>, <code>hasEditedAttributes<\/code>). For instance, if <code>authorCount<\/code> is an integer, remember that event handlers may pass a different kind of data, thus the value should be cast explicitly:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function onChange( event ) {\n\tprops.setAttributes( { authorCount: Number( event.target.value ) } );\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Default value<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block attribute can contain a default value, which will be used if the <code>type<\/code> and <code>source<\/code> do not match anything within the block content.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The value is provided by the <code>default<\/code> field, and the value should match the expected format of the attribute.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example<\/em>: Example <code>default<\/code> values.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\ttype: 'string',\n\tdefault: 'hello world'\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\ttype: 'array',\n\tdefault: &#91;\n\t\t{ \"url\": \"https:\/\/lorempixel.com\/1200\/800\/\", \"alt\": \"large image\" },\n    \t{ \"url\": \"https:\/\/lorempixel.com\/50\/50\/\", \"alt\": \"small image\" }\n\t]\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\ttype: 'object',\n\tdefault: {\n\t\twidth: 100,\n\t\ttitle: 'title'\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# Attributes\n\nBlock attributes provide information about the data stored by a block. For example, rich content, a list of image URLs, a background colour, or a button title.\n\nA block can contain any number of attributes, and these are specified by the `attributes` field - an object where each key is the name of the attribute, and the value is the attribute definition.\n\nThe attribute definition will contain, at a minimum, either a `type` or an `enum`. There may be additional fields.\n\n_Example_: Attributes object defining three attributes - `url`, `title`, and `size`.\n\n```js\n{\n\turl: {\n\t\ttype: 'string',\n\t\tsource: 'attribute',\n\t\tselector: 'img',\n\t\tattribute: 'src',\n\t},\n\ttitle: {\n\t\ttype: 'string',\n\t},\n\tsize: {\n\t\tenum: [ 'large', 'small' ],\n\t},\n}\n```\n\nWhen a block is parsed this definition will be used to extract data from the block content. Anything that matches will  be available to your block through the `attributes` prop.\n\nThis parsing process can be summarized as:\n\n1. Extract value from the `source`.\n1. Check value matches the `type`, or is one of the `enum` values.\n\n_Example_: Attributes available in the `edit` and function, using the above attributes definition.\n\n```js\nfunction YourBlockEdit( { attributes } ) {\n\treturn (\n\t\t<p>URL is { attributes.url }, title is { attributes.title }, and size is { attributes.size }.<\/p>\n\t)\n}\n```\n\nThe block is responsible for using the `save` function to ensure that all attributes with a `source` field are saved according to the attributes definition. This is not automatic.\n\nAttributes without a `source` will be automatically saved in the block [comment delimiter](\/docs\/explanations\/architecture\/key-concepts.md#data-attributes).\n\nFor example, using the above attributes definition you would need to ensure that your `save` function has a corresponding img tag for the `url` attribute. The `title` and `size` attributes will be saved in the comment delimiter.\n\n_Example_: Example `save` function that contains the `url` attribute\n\n```js\nfunction YourBlockSave( { attributes } ) {\n\treturn (\n\t\t<img src={ attributes.url } \/>\n\t)\n}\n```\n\nThe saved HTML will contain the `title` and `size` in the comment delimiter, and the `url` in the `img` node.\n\n```html\n<!-- block:your-block {\"title\":\"hello world\",\"size\":\"large\"} -->\n<img src=\"\/image.jpg\" \/>\n<!-- \/block:your-block -->\n```\n\nIf an attribute changes over time then a [block deprecation](\/docs\/reference-guides\/block-api\/block-deprecation.md) can help migrate from an older attribute, or remove it entirely.\n\n## Type validation\n\nThe `type` indicates the type of data that is stored by the attribute. It does not indicate where the data is stored, which is defined by the `source` field.\n\nA `type` is required, unless an `enum` is provided. A `type` can be used with an `enum`.\n\nThe `type` field MUST be one of the following:\n\n- `null`\n- `boolean`\n- `object`\n- `array`\n- `string`\n- `integer`\n- `number` (same as `integer`)\n\nNote that the validity of an `object` is determined by your `source`. For an example, see the `query` details below.\n\n## Enum validation\n\nAn attribute can be defined as one of a fixed set of values. This is specified by an `enum`, which contains an array of allowed values:\n\n_Example_: Example `enum`.\n\n```js\n{\n\tsize: {\n\t\tenum: [ 'large', 'small', 'tiny' ]\n\t}\n}\n```\n\n## Value source\n\nAttribute sources are used to define how the attribute values are extracted from saved post content. They provide a mechanism to map from the saved markup to a JavaScript representation of a block.\n\nThe available `source` values are:\n- `(no value)` - when no `source` is specified then data is stored in the block's [comment delimiter](\/docs\/explanations\/architecture\/key-concepts.md#data-attributes).\n- `attribute` - data is stored in an HTML element attribute.\n- `text` - data is stored in HTML text.\n- `html` - data is stored in HTML. This is typically used by `RichText`.\n- `query` - data is stored as an array of objects.\n- `meta` - data is stored in post meta (deprecated).\n\nThe `source` field is usually combined with a `selector` field. If no selector argument is specified, the source definition runs against the block's root node. If a selector argument is specified, it will run against the matching element(s) within the block.\n\nThe `selector` can be an HTML tag, or anything queryable with [querySelector](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Document\/querySelector), such as a class or id attribute. Examples are given below.\n\nFor example, a `selector` of `img` will match an `img` element, and `img.class` will match an `img` element that has a class of `class`.\n\nUnder the hood, attribute sources are a superset of the functionality provided by [hpq](https:\/\/github.com\/aduth\/hpq), a small library used to parse and query HTML markup into an object shape.\n\nTo summarize, the `source` determines where data is stored in your content, and the `type` determines what that data is. To reduce the amount of data stored it is usually better to store as much data as possible within HTML rather than as attributes within the comment delimiter.\n\n### `attribute` source\n\nUse an `attribute` source to extract the value from an attribute in the markup. The attribute is specified by the `attribute` field, which must be supplied.\n\n_Example_: Extract the `src` attribute from an image found in the block's markup.\n\nSaved content:\n```html\n<div>\n\tBlock Content\n\n\t<img src=\"https:\/\/lorempixel.com\/1200\/800\/\" \/>\n<\/div>\n```\n\nAttribute definition:\n```js\n{\n\turl: {\n\t\ttype: 'string',\n\t\tsource: 'attribute',\n\t\tselector: 'img',\n\t\tattribute: 'src',\n\t}\n}\n```\n\nAttribute available in the block:\n```js\n{ \"url\": \"https:\/\/lorempixel.com\/1200\/800\/\" }\n```\n\nMost attributes from markup will be of type `string`. Numeric attributes in HTML are still stored as strings, and are not converted automatically.\n\n_Example_: Extract the `width` attribute from an image found in the block's markup.\n\nSaved content:\n```html\n<div>\n\tBlock Content\n\n\t<img src=\"https:\/\/lorempixel.com\/1200\/800\/\" width=\"50\" \/>\n<\/div>\n```\n\nAttribute definition:\n```js\n{\n\twidth: {\n\t\ttype: 'string',\n\t\tsource: 'attribute',\n\t\tselector: 'img',\n\t\tattribute: 'width',\n\t}\n}\n```\n\nAttribute available in the block:\n```js\n{ \"width\": \"50\" }\n```\n\nThe only exception is when checking for the existence of an attribute (for example, the `disabled` attribute on a `button`). In that case type `boolean` can be used and the stored value will be a boolean.\n\n_Example_: Extract the `disabled` attribute from a button found in the block's markup.\n\nSaved content:\n```html\n<div>\n\tBlock Content\n\n\t<button type=\"button\" disabled>Button<\/button>\n<\/div>\n```\n\nAttribute definition:\n```js\n{\n\tdisabled: {\n\t\ttype: 'boolean',\n\t\tsource: 'attribute',\n\t\tselector: 'button',\n\t\tattribute: 'disabled',\n\t}\n}\n```\n\nAttribute available in the block:\n```js\n{ \"disabled\": true }\n```\n\n### `text` source\n\nUse `text` to extract the inner text from markup. Note that HTML is returned according to the rules of [`textContent`](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Node\/textContent).\n\n_Example_: Extract the `content` attribute from a figcaption element found in the block's markup.\n\nSaved content:\n```html\n<figure>\n\t<img src=\"\/image.jpg\" \/>\n\n\t<figcaption>The inner text of the figcaption element<\/figcaption>\n<\/figure>\n```\n\nAttribute definition:\n```js\n{\n\tcontent: {\n\t\ttype: 'string',\n\t\tsource: 'text',\n\t\tselector: 'figcaption',\n\t}\n}\n```\n\nAttribute available in the block:\n```js\n{ \"content\": \"The inner text of the figcaption element\" }\n```\n\nAnother example, using `text` as the source, and using `.my-content` class as the selector to extract text:\n\n_Example_: Extract the `content` attribute from an element with `.my-content` class found in the block's markup.\n\nSaved content:\n```html\n<div>\n\t<img src=\"\/image.jpg\" \/>\n\n\t<p class=\"my-content\">The inner text of .my-content class<\/p>\n<\/div>\n```\n\nAttribute definition:\n```js\n{\n\tcontent: {\n\t\ttype: 'string',\n\t\tsource: 'text',\n\t\tselector: '.my-content',\n\t}\n}\n```\n\nAttribute available in the block:\n```js\n{ \"content\": \"The inner text of .my-content class\" }\n```\n\n### `html` source\n\nUse `html` to extract the inner HTML from markup. Note that text is returned according to the rules of [`innerHTML`](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Element\/innerHTML).\n\n_Example_: Extract the `content` attribute from a figcaption element found in the block's markup.\n\nSaved content:\n```html\n<figure>\n\t<img src=\"\/image.jpg\" \/>\n\n\t<figcaption>The inner text of the <strong>figcaption<\/strong> element<\/figcaption>\n<\/figure>\n```\n\nAttribute definition:\n```js\n{\n\tcontent: {\n\t\ttype: 'string',\n\t\tsource: 'html',\n\t\tselector: 'figcaption',\n\t}\n}\n```\n\nAttribute available in the block:\n```js\n{ \"content\": \"The inner text of the <strong>figcaption<\/strong> element\" }\n```\n\n### `query` source\n\nUse `query` to extract an array of values from markup. Entries of the array are determined by the `selector` argument, where each matched element within the block will have an entry structured corresponding to the second argument, an object of attribute sources.\n\nThe `query` field is effectively a nested block attributes definition. It is possible (although not necessarily recommended) to nest further.\n\n_Example_: Extract `src` and `alt` from each image element in the block's markup.\n\nSaved content:\n```html\n<div>\n\t<img src=\"https:\/\/lorempixel.com\/1200\/800\/\" alt=\"large image\" \/>\n\t<img src=\"https:\/\/lorempixel.com\/50\/50\/\" alt=\"small image\" \/>\n<\/div>\n```\n\nAttribute definition:\n```js\n{\n\timages: {\n\t\ttype: 'array',\n\t\tsource: 'query',\n\t\tselector: 'img',\n\t\tquery: {\n\t\t\turl: {\n\t\t\t\ttype: 'string',\n\t\t\t\tsource: 'attribute',\n\t\t\t\tattribute: 'src',\n\t\t\t},\n\t\t\talt: {\n\t\t\t\ttype: 'string',\n\t\t\t\tsource: 'attribute',\n\t\t\t\tattribute: 'alt',\n\t\t\t},\n\t\t}\n\t}\n}\n```\n\nAttribute available in the block:\n```js\n{\n\t\"images\": [\n\t\t{ \"url\": \"https:\/\/lorempixel.com\/1200\/800\/\", \"alt\": \"large image\" },\n\t\t{ \"url\": \"https:\/\/lorempixel.com\/50\/50\/\", \"alt\": \"small image\" }\n\t]\n}\n```\n\n### Meta source (deprecated)\n\n<div class=\"callout callout-alert\">\nAlthough attributes may be obtained from a post's meta, meta attribute sources are considered deprecated; <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/c367c4e2765f9e6b890d1565db770147efca5d66\/packages\/core-data\/src\/entity-provider.js\">EntityProvider and related hook APIs<\/a> should be used instead, as shown in the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/metabox\/#step-2-add-meta-block\">Create Meta Block how-to<\/a>.\n<\/div>\n\nAttributes may be obtained from a post's meta rather than from the block's representation in saved post content. For this, an attribute is required to specify its corresponding meta key under the `meta` key.\n\nAttribute definition:\n```js\n{\n\tauthor: {\n\t\ttype: 'string',\n\t\tsource: 'meta',\n\t\tmeta: 'author'\n\t},\n},\n```\n\nFrom here, meta attributes can be read and written by a block using the same interface as any attribute:\n\n\n{% JSX %}\n\n```js\nedit( { attributes, setAttributes } ) {\n\tfunction onChange( event ) {\n\t\tsetAttributes( { author: event.target.value } );\n\t}\n\n\treturn <input value={ attributes.author } onChange={ onChange } type=\"text\" \/>;\n},\n```\n\n\n#### Considerations\n\nBy default, a meta field will be excluded from a post object's meta. This can be circumvented by explicitly making the field visible:\n\n```php\nfunction gutenberg_my_block_init() {\n\tregister_post_meta( 'post', 'author', array(\n\t\t'show_in_rest' => true,\n\t) );\n}\nadd_action( 'init', 'gutenberg_my_block_init' );\n```\n\nFurthermore, be aware that WordPress defaults to:\n\n-   not treating a meta datum as being unique, instead returning an array of values;\n-   treating that datum as a string.\n\nIf either behavior is not desired, the same `register_post_meta` call can be complemented with the `single` and\/or `type` parameters as follows:\n\n```php\nfunction gutenberg_my_block_init() {\n\tregister_post_meta( 'post', 'author_count', array(\n\t\t'show_in_rest' => true,\n\t\t'single' => true,\n\t\t'type' => 'integer',\n\t) );\n}\nadd_action( 'init', 'gutenberg_my_block_init' );\n```\n\nIf you'd like to use an object or an array in an attribute, you can register a `string` attribute type and use JSON as the intermediary. Serialize the structured data to JSON prior to saving, and then deserialize the JSON string on the server. Keep in mind that you're responsible for the integrity of the data; make sure to properly sanitize, accommodate missing data, etc.\n\nLastly, make sure that you respect the data's type when setting attributes, as the framework does not automatically perform type casting of meta. Incorrect typing in block attributes will result in a post remaining dirty even after saving (_cf._ `isEditedPostDirty`, `hasEditedAttributes`). For instance, if `authorCount` is an integer, remember that event handlers may pass a different kind of data, thus the value should be cast explicitly:\n\n```js\nfunction onChange( event ) {\n\tprops.setAttributes( { authorCount: Number( event.target.value ) } );\n}\n```\n\n## Default value\n\nA block attribute can contain a default value, which will be used if the `type` and `source` do not match anything within the block content.\n\nThe value is provided by the `default` field, and the value should match the expected format of the attribute.\n\n_Example_: Example `default` values.\n\n```js\n{\n\ttype: 'string',\n\tdefault: 'hello world'\n}\n```\n\n```js\n{\n\ttype: 'array',\n\tdefault: [\n\t\t{ \"url\": \"https:\/\/lorempixel.com\/1200\/800\/\", \"alt\": \"large image\" },\n    \t{ \"url\": \"https:\/\/lorempixel.com\/50\/50\/\", \"alt\": \"small image\" }\n\t]\n}\n```\n\n```js\n{\n\ttype: 'object',\n\tdefault: {\n\t\twidth: 100,\n\t\ttitle: 'title'\n\t}\n}\n```\n"
    },
    {
        "path": "\/markdown\/reference-guides\/block-api\/block-edit-save.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Edit and Save<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When registering a block with JavaScript on the client, the <code>edit<\/code> and <code>save<\/code> functions provide the interface for how a block is going to be rendered within the editor, how it will operate and be manipulated, and how it will be saved.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Edit<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>edit<\/code> function describes the structure of your block in the context of the editor. This represents what the editor will render when the block is used.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useBlockProps } from '@wordpress\/block-editor';\n\n\/\/ ...\nconst blockSettings = {\n\tapiVersion: 3,\n\n\t\/\/ ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\n\t\treturn <div {=\"\" ...blockprops=\"\" }=\"\">Your block.<\/div>;\n\t},\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block wrapper props<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The first thing to notice here is the use of the <code>useBlockProps<\/code> React hook on the block wrapper element. In the example above, the block wrapper renders a \"div\" in the editor, but in order for the Gutenberg editor to know how to manipulate the block, add any extra classNames that are needed for the block... the block wrapper element should apply props retrieved from the <code>useBlockProps<\/code> react hook call. The block wrapper element should be a native DOM element, like <code>&lt;div><\/code> and <code>&lt;table><\/code>, or a React component that forwards any additional props to native DOM elements. Using a <code>&lt;Fragment><\/code> or <code>&lt;ServerSideRender><\/code> component, for instance, would be invalid.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If the element wrapper needs any extra custom HTML attributes, these need to be passed as an argument to the <code>useBlockProps<\/code> hook. For example to add a <code>my-random-classname<\/code> className to the wrapper, you can use the following code:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useBlockProps } from '@wordpress\/block-editor';\n\n\/\/ ...\nconst blockSettings = {\n\tapiVersion: 3,\n\n\t\/\/ ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps( {\n\t\t\tclassName: 'my-random-classname',\n\t\t} );\n\n\t\treturn <div {=\"\" ...blockprops=\"\" }=\"\">Your block.<\/div>;\n\t},\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">attributes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>edit<\/code> function also receives a number of properties through an object argument. You can use these properties to adapt the behavior of your block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>attributes<\/code> property surfaces all the available attributes and their corresponding values, as described by the <code>attributes<\/code> property when the block type was registered. See <a href=\"\/docs\/reference-guides\/block-api\/block-attributes.md\">attributes documentation<\/a> for how to specify attribute sources.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this case, assuming we had defined an attribute of <code>content<\/code> during block registration, we would receive and use that value in our edit function:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>edit: ( { attributes } ) => {\n\tconst blockProps = useBlockProps();\n\n\treturn <div {=\"\" ...blockprops=\"\" }=\"\">{ attributes.content }<\/div>;\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The value of <code>attributes.content<\/code> will be displayed inside the <code>div<\/code> when inserting the block in the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isSelected<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The isSelected property is a boolean that communicates whether the block is currently selected.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>edit: ( { attributes, isSelected } ) => {\n\tconst blockProps = useBlockProps();\n\n\treturn (\n\t\t<div {=\"\" ...blockprops=\"\" }=\"\">\n\t\t\tYour block.\n\t\t\t{ isSelected &amp;&amp; (\n\t\t\t\t<span>Shows only when the block is selected.<\/span>\n\t\t\t) }\n\t\t<\/div>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setAttributes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This function allows the block to update individual attributes based on user interactions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>edit: ( { attributes, setAttributes, isSelected } ) => {\n\tconst blockProps = useBlockProps();\n\n\t\/\/ Simplify access to attributes\n\tconst { content, mySetting } = attributes;\n\n\t\/\/ Toggle a setting when the user clicks the button\n\tconst toggleSetting = () => setAttributes( { mySetting: ! mySetting } );\n\treturn (\n\t\t<div {=\"\" ...blockprops=\"\" }=\"\">\n\t\t\t{ content }\n\t\t\t{ isSelected &amp;&amp; (\n\t\t\t\t<button onclick=\"{\" togglesetting=\"\" }=\"\">Toggle setting<\/button>\n\t\t\t) }\n\t\t<\/div>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When using attributes that are objects or arrays it's a good idea to copy or clone the attribute prior to updating it:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Good - a new array is created from the old list attribute and a new list item:\nconst { list } = attributes;\nconst addListItem = ( newListItem ) =>\n\tsetAttributes( { list: &#91; ...list, newListItem ] } );\n\n\/\/ Bad - the list from the existing attribute is modified directly to add the new list item:\nconst { list } = attributes;\nconst addListItem = ( newListItem ) => {\n\tlist.push( newListItem );\n\tsetAttributes( { list } );\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Why do this? In JavaScript, arrays and objects are passed by reference, so this practice ensures changes won't affect other code that might hold references to the same data. Furthermore, the Gutenberg project follows the philosophy of the Redux library that <a href=\"https:\/\/redux.js.org\/faq\/immutable-data#what-are-the-benefits-of-immutability\">state should be immutable<\/a>\u2014data should not be changed directly, but instead a new version of the data created containing the changes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Save<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>save<\/code> function defines the way in which the different attributes should be combined into the final markup, which is then serialized into <code>post_content<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>save: () => {\n\tconst blockProps = useBlockProps.save();\n\n\treturn <div {=\"\" ...blockprops=\"\" }=\"\"> Your block. <\/div>;\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>For most blocks, the return value of <code>save<\/code> should be an <a href=\"\/packages\/element\/README.md\">instance of WordPress Element<\/a> representing how the block is to appear on the front of the site.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Note:<\/em> While it is possible to return a string value from <code>save<\/code>, it <em>will be escaped<\/em>. If the string includes HTML markup, the markup will be shown on the front of the site verbatim, not as the equivalent HTML node content. If you must return raw HTML from <code>save<\/code>, use <code>wp.element.RawHTML<\/code>. As the name implies, this is prone to <a href=\"https:\/\/en.wikipedia.org\/wiki\/Cross-site_scripting\">cross-site scripting<\/a> and therefore is discouraged in favor of a WordPress Element hierarchy whenever possible.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Note:<\/em> The save function should be a pure function that depends only on the attributes used to invoke it.<br>It can not have any side effect or retrieve information from another source, e.g. it is not possible to use the data module inside it <code>select( store ).selector( ... )<\/code>.<br>This is because if the external information changes, the block may be flagged as invalid when the post is later edited (<a href=\"#validation\">read more about Validation<\/a>).<br>If there is a need to have other information as part of the save, developers can consider one of these two alternatives:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Use <a href=\"\/docs\/how-to-guides\/block-tutorial\/creating-dynamic-blocks.md\">dynamic blocks<\/a> and dynamically retrieve the required information on the server.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Store the external value as an attribute which is dynamically updated in the block's <code>edit<\/code> function as changes occur.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For <a href=\"\/docs\/how-to-guides\/block-tutorial\/creating-dynamic-blocks.md\">dynamic blocks<\/a>, the return value of <code>save<\/code> could represent a cached copy of the block's content to be shown only in case the plugin implementing the block is ever disabled.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If left unspecified, the default implementation will save no markup in post content for the dynamic block, instead deferring this to always be calculated when the block is shown on the front of the site.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">block wrapper props<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Like the <code>edit<\/code> function, when rendering static blocks, it's important to add the block props returned by <code>useBlockProps.save()<\/code> to the wrapper element of your block. This ensures that the block class name is rendered properly in addition to any HTML attribute injected by the block supports API.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">attributes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As with <code>edit<\/code>, the <code>save<\/code> function also receives an object argument including attributes which can be inserted into the markup.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>save: ( { attributes } ) => {\n\tconst blockProps = useBlockProps.save();\n\n\treturn <div {=\"\" ...blockprops=\"\" }=\"\">{ attributes.content }<\/div>;\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When saving your block, you want to save the attributes in the same format specified by the attribute source definition. If no attribute source is specified, the attribute will be saved to the block's comment delimiter. See the <a href=\"\/docs\/reference-guides\/block-api\/block-attributes.md\">Block Attributes documentation<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Examples<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Here are a couple examples of using attributes, edit, and save all together. For a full working example, see the <a href=\"\/docs\/how-to-guides\/block-tutorial\/introducing-attributes-and-editable-fields.md\">Introducing Attributes and Editable Fields<\/a> section of the Block Tutorial.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Saving Attributes to Child Elements<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>attributes: {\n\tcontent: {\n\t\ttype: 'string',\n\t\tsource: 'html',\n\t\tselector: 'div'\n\t}\n},\n\nedit: ( { attributes, setAttributes } ) => {\n\tconst blockProps = useBlockProps();\n\tconst updateFieldValue = ( val ) => {\n\t\tsetAttributes( { content: val } );\n\t}\n\treturn (\n\t\t<div {=\"\" ...blockprops=\"\" }=\"\">\n\t\t\t<textcontrol<br>\t\t\t\tlabel='My Text Field'\n\t\t\t\tvalue={ attributes.content }\n\t\t\t\tonChange={ updateFieldValue }\n\t\t\t\/>\n\t\t<\/textcontrol<br><\/div>\n\t);\n},\n\nsave: ( { attributes } ) => {\n\tconst blockProps = useBlockProps.save();\n\n\treturn <div {=\"\" ...blockprops=\"\" }=\"\"> { attributes.content } <\/div>;\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Saving Attributes via Serialization<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Ideally, the attributes saved should be included in the markup. However, there are times when this is not practical, so if no attribute source is specified the attribute is serialized and saved to the block's comment delimiter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This example could be for a dynamic block, such as the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-library\/src\/latest-posts\/index.js\">Latest Posts block<\/a>, which renders the markup server-side. The save function is still required, however in this case it simply returns null since the block is not saving content from the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>attributes: {\n\tpostsToShow: {\n\t\ttype: 'number',\n\t}\n},\n\nedit: ( { attributes, setAttributes } ) => {\n\tconst blockProps = useBlockProps();\n\n\treturn (\n\t\t<div {=\"\" ...blockprops=\"\" }=\"\">\n\t\t\t<textcontrol<br>\t\t\t\tlabel='Number Posts to Show'\n\t\t\t\tvalue={ attributes.postsToShow }\n\t\t\t\tonChange={ ( val ) => {\n\t\t\t\t\tsetAttributes( { postsToShow: parseInt( val ) } );\n\t\t\t\t}}\n\t\t\t\/>\n\t\t<\/textcontrol<br><\/div>\n\t);\n},\n\nsave: () => {\n\treturn null;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Validation<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When the editor loads, all blocks within post content are validated to determine their accuracy in order to protect against content loss. This is closely related to the saving implementation of a block, as a user may unintentionally remove or modify their content if the editor is unable to restore a block correctly. During editor initialization, the saved markup for each block is regenerated using the attributes that were parsed from the post's content. If the newly-generated markup does not match what was already stored in post content, the block is marked as invalid. This is because we assume that unless the user makes edits, the markup should remain identical to the saved content.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If a block is detected to be invalid, the user will be prompted to choose how to handle the invalidation:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/user-images.githubusercontent.com\/7753001\/88754471-4cf7e900-d191-11ea-9123-3cee20719d10.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Invalid block prompt<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Clicking the <strong>Attempt Block Recovery<\/strong> button will attempt a recovery action as much as possible.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Clicking the \"3-dot\" menu on the side of the block displays three options:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Resolve<\/strong>: Open Resolve Block dialog box with two buttons:<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Convert to HTML<\/strong>: Protects the original markup from the saved post content and converts the block from its original type to the HTML block type, enabling the user to modify the HTML markup directly.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Convert to Blocks<\/strong>: Protects the original markup from the saved post content and converts the block from its original type to the validated block type.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Convert to HTML<\/strong>: Protects the original markup from the saved post content and converts the block from its original type to the HTML block type, enabling the user to modify the HTML markup directly.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Convert to Classic Block<\/strong>: Protects the original markup from the saved post content as correct. Since the block will be converted from its original type to the Classic block type, it will no longer be possible to edit the content using controls available for the original block type.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Validation FAQ<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>How do blocks become invalid?<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The two most common sources of block invalidations are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>A flaw in a block's code would result in unintended content modifications. See the question below on how to debug block invalidation as a plugin author.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>You or an external editor changed the HTML markup of the block in such a way that it is no longer considered correct.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>I'm a plugin author. What should I do to debug why my blocks are being marked as invalid?<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before starting to debug, be sure to familiarize yourself with the validation step described above documenting the process for detecting whether a block is invalid. A block is invalid if its regenerated markup does not match what is saved in post content, so often this can be caused by the attributes of a block being parsed incorrectly from the saved content.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you're using <a href=\"\/docs\/reference-guides\/block-api\/block-attributes.md\">attribute sources<\/a>, be sure that attributes sourced from markup are saved exactly as you expect, and in the correct type (usually a <code>'string'<\/code> or <code>'number'<\/code>).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When a block is detected as invalid, a warning will be logged into your browser's developer tools console. The warning will include specific details about the exact point at which a difference in markup occurred. Be sure to look closely at any differences in the expected and actual markups to see where problems are occurring.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>I've changed my block's <code>save<\/code> behavior and old content now includes invalid blocks. How can I fix this?<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Refer to the guide on <a href=\"\/docs\/reference-guides\/block-api\/block-deprecation.md\">Deprecated Blocks<\/a> to learn more about how to accommodate legacy content in intentional markup changes.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Edit and Save\n\nWhen registering a block with JavaScript on the client, the `edit` and `save` functions provide the interface for how a block is going to be rendered within the editor, how it will operate and be manipulated, and how it will be saved.\n\n## Edit\n\nThe `edit` function describes the structure of your block in the context of the editor. This represents what the editor will render when the block is used.\n\n\n```jsx\nimport { useBlockProps } from '@wordpress\/block-editor';\n\n\/\/ ...\nconst blockSettings = {\n\tapiVersion: 3,\n\n\t\/\/ ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\n\t\treturn <div { ...blockProps }>Your block.<\/div>;\n\t},\n};\n```\n\n### Block wrapper props\n\nThe first thing to notice here is the use of the `useBlockProps` React hook on the block wrapper element. In the example above, the block wrapper renders a \"div\" in the editor, but in order for the Gutenberg editor to know how to manipulate the block, add any extra classNames that are needed for the block... the block wrapper element should apply props retrieved from the `useBlockProps` react hook call. The block wrapper element should be a native DOM element, like `<div>` and `<table>`, or a React component that forwards any additional props to native DOM elements. Using a `<Fragment>` or `<ServerSideRender>` component, for instance, would be invalid.\n\nIf the element wrapper needs any extra custom HTML attributes, these need to be passed as an argument to the `useBlockProps` hook. For example to add a `my-random-classname` className to the wrapper, you can use the following code:\n\n\n```jsx\nimport { useBlockProps } from '@wordpress\/block-editor';\n\n\/\/ ...\nconst blockSettings = {\n\tapiVersion: 3,\n\n\t\/\/ ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps( {\n\t\t\tclassName: 'my-random-classname',\n\t\t} );\n\n\t\treturn <div { ...blockProps }>Your block.<\/div>;\n\t},\n};\n```\n\n\n### attributes\n\nThe `edit` function also receives a number of properties through an object argument. You can use these properties to adapt the behavior of your block.\n\nThe `attributes` property surfaces all the available attributes and their corresponding values, as described by the `attributes` property when the block type was registered. See [attributes documentation](\/docs\/reference-guides\/block-api\/block-attributes.md) for how to specify attribute sources.\n\nIn this case, assuming we had defined an attribute of `content` during block registration, we would receive and use that value in our edit function:\n\n\n```js\nedit: ( { attributes } ) => {\n\tconst blockProps = useBlockProps();\n\n\treturn <div { ...blockProps }>{ attributes.content }<\/div>;\n};\n```\n\n\nThe value of `attributes.content` will be displayed inside the `div` when inserting the block in the editor.\n\n### isSelected\n\nThe isSelected property is a boolean that communicates whether the block is currently selected.\n\n\n```jsx\nedit: ( { attributes, isSelected } ) => {\n\tconst blockProps = useBlockProps();\n\n\treturn (\n\t\t<div { ...blockProps }>\n\t\t\tYour block.\n\t\t\t{ isSelected && (\n\t\t\t\t<span>Shows only when the block is selected.<\/span>\n\t\t\t) }\n\t\t<\/div>\n\t);\n};\n```\n\n### setAttributes\n\nThis function allows the block to update individual attributes based on user interactions.\n\n\n```jsx\nedit: ( { attributes, setAttributes, isSelected } ) => {\n\tconst blockProps = useBlockProps();\n\n\t\/\/ Simplify access to attributes\n\tconst { content, mySetting } = attributes;\n\n\t\/\/ Toggle a setting when the user clicks the button\n\tconst toggleSetting = () => setAttributes( { mySetting: ! mySetting } );\n\treturn (\n\t\t<div { ...blockProps }>\n\t\t\t{ content }\n\t\t\t{ isSelected && (\n\t\t\t\t<button onClick={ toggleSetting }>Toggle setting<\/button>\n\t\t\t) }\n\t\t<\/div>\n\t);\n};\n```\n\nWhen using attributes that are objects or arrays it's a good idea to copy or clone the attribute prior to updating it:\n\n```js\n\/\/ Good - a new array is created from the old list attribute and a new list item:\nconst { list } = attributes;\nconst addListItem = ( newListItem ) =>\n\tsetAttributes( { list: [ ...list, newListItem ] } );\n\n\/\/ Bad - the list from the existing attribute is modified directly to add the new list item:\nconst { list } = attributes;\nconst addListItem = ( newListItem ) => {\n\tlist.push( newListItem );\n\tsetAttributes( { list } );\n};\n```\n\n\nWhy do this? In JavaScript, arrays and objects are passed by reference, so this practice ensures changes won't affect other code that might hold references to the same data. Furthermore, the Gutenberg project follows the philosophy of the Redux library that [state should be immutable](https:\/\/redux.js.org\/faq\/immutable-data#what-are-the-benefits-of-immutability)\u2014data should not be changed directly, but instead a new version of the data created containing the changes.\n\n## Save\n\nThe `save` function defines the way in which the different attributes should be combined into the final markup, which is then serialized into `post_content`.\n\n\n```jsx\nsave: () => {\n\tconst blockProps = useBlockProps.save();\n\n\treturn <div { ...blockProps }> Your block. <\/div>;\n};\n```\n\n\nFor most blocks, the return value of `save` should be an [instance of WordPress Element](\/packages\/element\/README.md) representing how the block is to appear on the front of the site.\n\n_Note:_ While it is possible to return a string value from `save`, it _will be escaped_. If the string includes HTML markup, the markup will be shown on the front of the site verbatim, not as the equivalent HTML node content. If you must return raw HTML from `save`, use `wp.element.RawHTML`. As the name implies, this is prone to [cross-site scripting](https:\/\/en.wikipedia.org\/wiki\/Cross-site_scripting) and therefore is discouraged in favor of a WordPress Element hierarchy whenever possible.\n\n_Note:_ The save function should be a pure function that depends only on the attributes used to invoke it.\nIt can not have any side effect or retrieve information from another source, e.g. it is not possible to use the data module inside it `select( store ).selector( ... )`.\nThis is because if the external information changes, the block may be flagged as invalid when the post is later edited ([read more about Validation](#validation)).\nIf there is a need to have other information as part of the save, developers can consider one of these two alternatives:\n\n-   Use [dynamic blocks](\/docs\/how-to-guides\/block-tutorial\/creating-dynamic-blocks.md) and dynamically retrieve the required information on the server.\n-   Store the external value as an attribute which is dynamically updated in the block's `edit` function as changes occur.\n\nFor [dynamic blocks](\/docs\/how-to-guides\/block-tutorial\/creating-dynamic-blocks.md), the return value of `save` could represent a cached copy of the block's content to be shown only in case the plugin implementing the block is ever disabled.\n\nIf left unspecified, the default implementation will save no markup in post content for the dynamic block, instead deferring this to always be calculated when the block is shown on the front of the site.\n\n### block wrapper props\n\nLike the `edit` function, when rendering static blocks, it's important to add the block props returned by `useBlockProps.save()` to the wrapper element of your block. This ensures that the block class name is rendered properly in addition to any HTML attribute injected by the block supports API.\n\n### attributes\n\nAs with `edit`, the `save` function also receives an object argument including attributes which can be inserted into the markup.\n\n\n```jsx\nsave: ( { attributes } ) => {\n\tconst blockProps = useBlockProps.save();\n\n\treturn <div { ...blockProps }>{ attributes.content }<\/div>;\n};\n```\n\n\n\nWhen saving your block, you want to save the attributes in the same format specified by the attribute source definition. If no attribute source is specified, the attribute will be saved to the block's comment delimiter. See the [Block Attributes documentation](\/docs\/reference-guides\/block-api\/block-attributes.md) for more details.\n\n## Examples\n\nHere are a couple examples of using attributes, edit, and save all together. For a full working example, see the [Introducing Attributes and Editable Fields](\/docs\/how-to-guides\/block-tutorial\/introducing-attributes-and-editable-fields.md) section of the Block Tutorial.\n\n### Saving Attributes to Child Elements\n\n\n```jsx\nattributes: {\n\tcontent: {\n\t\ttype: 'string',\n\t\tsource: 'html',\n\t\tselector: 'div'\n\t}\n},\n\nedit: ( { attributes, setAttributes } ) => {\n\tconst blockProps = useBlockProps();\n\tconst updateFieldValue = ( val ) => {\n\t\tsetAttributes( { content: val } );\n\t}\n\treturn (\n\t\t<div { ...blockProps }>\n\t\t\t<TextControl\n\t\t\t\tlabel='My Text Field'\n\t\t\t\tvalue={ attributes.content }\n\t\t\t\tonChange={ updateFieldValue }\n\t\t\t\/>\n\t\t<\/div>\n\t);\n},\n\nsave: ( { attributes } ) => {\n\tconst blockProps = useBlockProps.save();\n\n\treturn <div { ...blockProps }> { attributes.content } <\/div>;\n},\n```\n\n\n### Saving Attributes via Serialization\n\nIdeally, the attributes saved should be included in the markup. However, there are times when this is not practical, so if no attribute source is specified the attribute is serialized and saved to the block's comment delimiter.\n\nThis example could be for a dynamic block, such as the [Latest Posts block](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-library\/src\/latest-posts\/index.js), which renders the markup server-side. The save function is still required, however in this case it simply returns null since the block is not saving content from the editor.\n\n\n```jsx\nattributes: {\n\tpostsToShow: {\n\t\ttype: 'number',\n\t}\n},\n\nedit: ( { attributes, setAttributes } ) => {\n\tconst blockProps = useBlockProps();\n\n\treturn (\n\t\t<div { ...blockProps }>\n\t\t\t<TextControl\n\t\t\t\tlabel='Number Posts to Show'\n\t\t\t\tvalue={ attributes.postsToShow }\n\t\t\t\tonChange={ ( val ) => {\n\t\t\t\t\tsetAttributes( { postsToShow: parseInt( val ) } );\n\t\t\t\t}}\n\t\t\t\/>\n\t\t<\/div>\n\t);\n},\n\nsave: () => {\n\treturn null;\n}\n```\n\n## Validation\n\nWhen the editor loads, all blocks within post content are validated to determine their accuracy in order to protect against content loss. This is closely related to the saving implementation of a block, as a user may unintentionally remove or modify their content if the editor is unable to restore a block correctly. During editor initialization, the saved markup for each block is regenerated using the attributes that were parsed from the post's content. If the newly-generated markup does not match what was already stored in post content, the block is marked as invalid. This is because we assume that unless the user makes edits, the markup should remain identical to the saved content.\n\nIf a block is detected to be invalid, the user will be prompted to choose how to handle the invalidation:\n\n![Invalid block prompt](https:\/\/user-images.githubusercontent.com\/7753001\/88754471-4cf7e900-d191-11ea-9123-3cee20719d10.png)\n\nClicking the **Attempt Block Recovery** button will attempt a recovery action as much as possible.\n\nClicking the \"3-dot\" menu on the side of the block displays three options:\n\n-   **Resolve**: Open Resolve Block dialog box with two buttons:\n    -   **Convert to HTML**: Protects the original markup from the saved post content and converts the block from its original type to the HTML block type, enabling the user to modify the HTML markup directly.\n    -   **Convert to Blocks**: Protects the original markup from the saved post content and converts the block from its original type to the validated block type.\n-   **Convert to HTML**: Protects the original markup from the saved post content and converts the block from its original type to the HTML block type, enabling the user to modify the HTML markup directly.\n-   **Convert to Classic Block**: Protects the original markup from the saved post content as correct. Since the block will be converted from its original type to the Classic block type, it will no longer be possible to edit the content using controls available for the original block type.\n\n### Validation FAQ\n\n**How do blocks become invalid?**\n\nThe two most common sources of block invalidations are:\n\n1. A flaw in a block's code would result in unintended content modifications. See the question below on how to debug block invalidation as a plugin author.\n2. You or an external editor changed the HTML markup of the block in such a way that it is no longer considered correct.\n\n**I'm a plugin author. What should I do to debug why my blocks are being marked as invalid?**\n\nBefore starting to debug, be sure to familiarize yourself with the validation step described above documenting the process for detecting whether a block is invalid. A block is invalid if its regenerated markup does not match what is saved in post content, so often this can be caused by the attributes of a block being parsed incorrectly from the saved content.\n\nIf you're using [attribute sources](\/docs\/reference-guides\/block-api\/block-attributes.md), be sure that attributes sourced from markup are saved exactly as you expect, and in the correct type (usually a `'string'` or `'number'`).\n\nWhen a block is detected as invalid, a warning will be logged into your browser's developer tools console. The warning will include specific details about the exact point at which a difference in markup occurred. Be sure to look closely at any differences in the expected and actual markups to see where problems are occurring.\n\n**I've changed my block's `save` behavior and old content now includes invalid blocks. How can I fix this?**\n\nRefer to the guide on [Deprecated Blocks](\/docs\/reference-guides\/block-api\/block-deprecation.md) to learn more about how to accommodate legacy content in intentional markup changes.\n"
    },
    {
        "path": "\/markdown\/reference-guides\/block-api\/block-registration.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Registration<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Block registration API reference.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-alert\">\nYou can use the functions documented on this page to register a block with JavaScript only on the client, but the recommended method is to register new block types also with PHP on the server using the `block.json` metadata file. See <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/\">metadata documentation for complete information<\/a>\n<br\/>\n<a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/create-block\/\">Learn how to create your first block<\/a> for the WordPress block editor. From setting up your development environment, tools, and getting comfortable with the new development model, this tutorial covers all you need to know to get started with creating blocks.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><code>registerBlockType<\/code><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>Function<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Every block starts by registering a new block type definition. To register, you use the <code>registerBlockType<\/code> function from the <a href=\"\/packages\/blocks\/README.md#registerBlockType\"><code>wp-blocks<\/code> package<\/a>. The function takes two arguments, a block <code>name<\/code> and a block configuration object.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block Name<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>String<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The name for a block is a unique string that identifies a block. Names have to be structured as <code>namespace\/block-name<\/code>, where namespace is the name of your plugin or theme.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Registering my block with a unique name\nregisterBlockType( 'my-plugin\/book', {} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Note:<\/em> A block name can only contain lowercase alphanumeric characters and dashes, and must begin with a letter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Note:<\/em> This name is used on the comment delimiters as <code>&lt;!-- wp:my-plugin\/book --><\/code>. Those blocks provided by core don't include a namespace when serialized.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block configuration<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>Object<\/code> [ <code>{ key: value }<\/code> ]<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>A block requires a few properties to be specified before it can be registered successfully. These are defined through a configuration object, which includes the following:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">title<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>String<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This is the display title for your block, which can be translated with our translation functions. The title will display in the Inserter and in other areas of the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Our data object\ntitle: __( 'Book' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Note:<\/em> To keep your block titles readable and accessible in the UI, try to avoid very long titles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">description (optional)<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>String<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This is a short description for your block, which can be translated with our translation functions. This will be shown in the Block Tab in the Settings Sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>description: __( 'Block showing a Book card.' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">category<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>String<\/code> [ text | media | design | widgets | theme | embed ]<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Blocks are grouped into categories to help users browse and discover them.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The core provided categories are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>text<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>media<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>design<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>widgets<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>theme<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>embed<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Assigning to the 'widgets' category\ncategory: 'widgets',\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Plugins and Themes can also register <a href=\"\/docs\/reference-guides\/filters\/block-filters.md#managing-block-categories\">custom block categories<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">icon (optional)<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>String<\/code> | <code>Object<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>An icon property should be specified to make it easier to identify a block. These can be any of <a href=\"https:\/\/developer.wordpress.org\/resource\/dashicons\/\">WordPress' Dashicons<\/a>, or a custom <code>svg<\/code> element.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Specifying a dashicon for the block\nicon: 'book-alt',\n\n\/\/ Specifying a custom svg for the block\nicon: <svg viewBox=\"0 0 24 24\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"><path d=\"M19 13H5v-2h14v2z\"><\/svg>,\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:<\/strong> Custom SVG icons are automatically wrapped in the <a href=\"\/packages\/primitives\/README.md\"><code>wp.primitives.SVG<\/code> component<\/a> to add accessibility attributes (<code>aria-hidden<\/code>, <code>role<\/code>, and <code>focusable<\/code>).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>An object can also be passed as icon, in this case, icon, as specified above, should be included in the src property.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Besides src the object can contain background and foreground colors, these colors will appear with the icon when they are applicable e.g.: in the inserter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>icon: {\n\t\/\/ Specifying a background color to appear with the icon e.g.: in the inserter.\n\tbackground: '#7e70af',\n\t\/\/ Specifying a color for the icon (optional: if not set, a readable color will be automatically defined)\n\tforeground: '#fff',\n\t\/\/ Specifying an icon for the block\n\tsrc: <svg viewBox=\"0 0 24 24\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"><path d=\"M19 13H5v-2h14v2z\"><\/svg>,\n} ,\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">keywords (optional)<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>Array<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Sometimes a block could have aliases that help users discover it while searching. For example, an <code>image<\/code> block could also want to be discovered by <code>photo<\/code>. You can do so by providing an array of terms (which can be translated).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Make it easier to discover a block with keyword aliases.\n\/\/ These can be localised so your keywords work across locales.\nkeywords: &#91; __( 'image' ), __( 'photo' ), __( 'pics' ) ],\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">styles (optional)<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>Array<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Block styles can be used to provide alternative styles to block. It works by adding a class name to the block\u2019s wrapper. Using CSS, a theme developer can target the class name for the block style if it is selected.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Register block styles.\nstyles: &#91;\n\t\/\/ Mark style as default.\n\t{\n\t\tname: 'default',\n\t\tlabel: __( 'Rounded' ),\n\t\tisDefault: true\n\t},\n\t{\n\t\tname: 'outline',\n\t\tlabel: __( 'Outline' )\n\t},\n\t{\n\t\tname: 'squared',\n\t\tlabel: __( 'Squared' )\n\t},\n],\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Plugins and Themes can also register <a href=\"\/docs\/reference-guides\/block-api\/block-styles.md\">custom block styles<\/a> for existing blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">attributes (optional)<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>Object<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Attributes provide the structured data needs of a block. They can exist in different forms when they are serialized, but they are declared together under a common interface.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Specifying my block attributes\nattributes: {\n\tcover: {\n\t\ttype: 'string',\n\t\tsource: 'attribute',\n\t\tselector: 'img',\n\t\tattribute: 'src',\n\t},\n\tauthor: {\n\t\ttype: 'string',\n\t\tsource: 'html',\n\t\tselector: '.book-author',\n\t},\n\tpages: {\n\t\ttype: 'number',\n\t},\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>See: <a href=\"\/docs\/reference-guides\/block-api\/block-attributes.md\">Attributes<\/a>.<\/strong><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">example (optional)<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>Object<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Example provides structured example data for the block. This data is used to construct a preview for the block to be shown in the Inspector Help Panel when the user mouses over the block and in the Styles panel when the block is selected.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The data provided in the example object should match the attributes defined. For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>example: {\n\tattributes: {\n\t\tcover: 'https:\/\/example.com\/image.jpg',\n\t\tauthor: 'William Shakespeare',\n\t\tpages: 500\n\t},\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If <code>example<\/code> is not defined, the preview will not be shown. So even if no attributes are defined, setting an empty example object <code>example: {}<\/code> will trigger the preview to show.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's also possible to extend the block preview with inner blocks via <code>innerBlocks<\/code>. For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>example: {\n\tattributes: {\n\t\tcover: 'https:\/\/example.com\/image.jpg',\n\t},\n\tinnerBlocks: &#91;\n\t\t{\n\t\t\tname: 'core\/paragraph',\n\t\t\tattributes: {\n\t\t\t\t\/* translators: example text. *\/\n\t\t\t\tcontent: __(\n\t\t\t\t\t'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent et eros eu felis.'\n\t\t\t\t),\n\t\t\t},\n\t\t},\n\t],\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>It's also possible to define the width of the preview container in pixels via <code>viewportWidth<\/code>. For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>example: {\n\tattributes: {\n\t\tcover: 'https:\/\/example.com\/image.jpg',\n\t},\n\tviewportWidth: 800\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">variations (optional)<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>Object[]<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Since<\/strong>: <code>WordPress 5.9.0<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Similarly to how the block's styles can be declared, a block type can define block variations that the user can pick from. The difference is that, rather than changing only the visual appearance, this field provides a way to apply initial custom attributes and inner blocks at the time when a block is inserted. See the <a href=\"\/docs\/reference-guides\/block-api\/block-variations.md\">Block Variations API<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">supports (optional)<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong><em>Type:<\/em><\/strong> <code>Object<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Supports contains a set of options to control features used in the editor. See <a href=\"\/docs\/reference-guides\/block-api\/block-supports.md\">the <code>supports<\/code> documentation<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">transforms (optional)<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>Object<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Transforms provide rules for what a block can be transformed from and what it can be transformed to. A block can be transformed from another block, a shortcode, a regular expression, a file, or a raw DOM node. Take a look at the <a href=\"\/docs\/reference-guides\/block-api\/block-transforms.md\">Block Transforms API<\/a> for more info about each available transformation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">parent (optional)<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>Array<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Blocks are able to be inserted into blocks that use <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/inner-blocks\/README.md\"><code>InnerBlocks<\/code><\/a> as nested content. Sometimes it is useful to restrict a block so that it is only available as a nested block. For example, you might want to allow an 'Add to Cart' block to only be available within a 'Product' block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Setting <code>parent<\/code> lets a block require that it is only available when nested within the specified blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Only allow this block when it is nested in a Columns block\nparent: &#91; 'core\/columns' ],\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">ancestor (optional)<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>Array<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Since<\/strong>: <code>WordPress 6.0.0<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The <code>ancestor<\/code> property makes a block available inside the specified block types at any position of the ancestor block subtree. That allows, for example, to place a 'Comment Content' block inside a 'Column' block, as long as 'Column' is somewhere within a 'Comment Template' block. In comparison to the <code>parent<\/code> property, blocks that specify their <code>ancestor<\/code> can be placed anywhere in the subtree whilst blocks with a specified <code>parent<\/code> need to be direct children.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Only allow this block when it is nested at any level in a Columns block.\nancestor: &#91; 'core\/columns' ],\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">allowedBlocks (optional)<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>Array<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Since<\/strong>: <code>WordPress 6.5.0<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Setting the <code>allowedBlocks<\/code> property will limit which block types can be nested as direct children of the block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Only allow the Columns block to be nested as direct child of this block\nallowedBlocks: &#91; 'core\/columns' ],\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">blockHooks (optional)<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>Object<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Since<\/strong>: <code>WordPress 6.4.0<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Block Hooks is an API that allows a block to automatically insert itself next to all instances of a given block type, in a relative position also specified by the \"hooked\" block. That is, a block can opt to be inserted before or after a given block type, or as its first or last child (i.e. to be prepended or appended to the list of its child blocks, respectively). Hooked blocks will appear both on the frontend and in the editor (to allow for customization by the user).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The key is the name of the block (<code>string<\/code>) to hook into, and the value is the position to hook into (<code>string<\/code>). Allowed target values are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>before<\/code> \u2013 inject before the target block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>after<\/code> - inject after the target block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>firstChild<\/code> - inject before the first inner block of the target container block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>lastChild<\/code> - inject after the last inner block of the target container block.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\tblockHooks: {\n\t\t'core\/verse': 'before',\n\t\t'core\/spacer': 'after',\n\t\t'core\/column': 'firstChild',\n\t\t'core\/group': 'lastChild',\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>It\u2019s crucial to emphasize that the Block Hooks feature is only designed to work with <em>static<\/em> block-based templates, template parts, and patterns. For patterns, this includes those provided by the theme, from <a href=\"https:\/\/wordpress.org\/patterns\/\">Block Pattern Directory<\/a>, or from calls to <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/register_block_pattern\/\"><code>register_block_pattern<\/code><\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Block Hooks will not work with post content or patterns crafted by the user, such as synced patterns, or theme templates and template parts that have been modified by the user.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block collections<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><code>registerBlockCollection<\/code><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>Function<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Blocks can be added to collections, grouping together all blocks from the same origin<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>registerBlockCollection<\/code> takes two parameters, <code>namespace<\/code> and an object of settings including <code>title<\/code> and <code>icon<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Namespace<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>String<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This should match the namespace declared in the block name; the name of your plugin or theme.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Settings<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Title<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>String<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This will display in the block inserter section, which will list all blocks in this collection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Icon<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Type:<\/strong> <code>Object<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>(Optional) An icon to display alongside the title in the block inserter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Registering a block collection\nregisterBlockCollection( 'my-plugin', { title: 'My Plugin' } );\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# Registration\n\nBlock registration API reference.\n\n<div class=\"callout callout-alert\">\nYou can use the functions documented on this page to register a block with JavaScript only on the client, but the recommended method is to register new block types also with PHP on the server using the `block.json` metadata file. See <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/\">metadata documentation for complete information<\/a>\n<br\/>\n<a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/create-block\/\">Learn how to create your first block<\/a> for the WordPress block editor. From setting up your development environment, tools, and getting comfortable with the new development model, this tutorial covers all you need to know to get started with creating blocks.\n<\/div>\n\n## `registerBlockType`\n\n-   **Type:** `Function`\n\nEvery block starts by registering a new block type definition. To register, you use the `registerBlockType` function from the [`wp-blocks` package](\/packages\/blocks\/README.md#registerBlockType). The function takes two arguments, a block `name` and a block configuration object.\n\n### Block Name\n\n-   **Type:** `String`\n\nThe name for a block is a unique string that identifies a block. Names have to be structured as `namespace\/block-name`, where namespace is the name of your plugin or theme.\n\n```js\n\/\/ Registering my block with a unique name\nregisterBlockType( 'my-plugin\/book', {} );\n```\n\n_Note:_ A block name can only contain lowercase alphanumeric characters and dashes, and must begin with a letter.\n\n_Note:_ This name is used on the comment delimiters as `<!-- wp:my-plugin\/book -->`. Those blocks provided by core don't include a namespace when serialized.\n\n### Block configuration\n\n-   **Type:** `Object` [ `{ key: value }` ]\n\nA block requires a few properties to be specified before it can be registered successfully. These are defined through a configuration object, which includes the following:\n\n#### title\n\n-   **Type:** `String`\n\nThis is the display title for your block, which can be translated with our translation functions. The title will display in the Inserter and in other areas of the editor.\n\n```js\n\/\/ Our data object\ntitle: __( 'Book' );\n```\n\n_Note:_ To keep your block titles readable and accessible in the UI, try to avoid very long titles.\n\n#### description (optional)\n\n-   **Type:** `String`\n\nThis is a short description for your block, which can be translated with our translation functions. This will be shown in the Block Tab in the Settings Sidebar.\n\n```js\ndescription: __( 'Block showing a Book card.' );\n```\n\n#### category\n\n-   **Type:** `String` [ text | media | design | widgets | theme | embed ]\n\nBlocks are grouped into categories to help users browse and discover them.\n\nThe core provided categories are:\n\n-   text\n-   media\n-   design\n-   widgets\n-   theme\n-   embed\n\n```js\n\/\/ Assigning to the 'widgets' category\ncategory: 'widgets',\n```\n\nPlugins and Themes can also register [custom block categories](\/docs\/reference-guides\/filters\/block-filters.md#managing-block-categories).\n\n#### icon (optional)\n\n-   **Type:** `String` | `Object`\n\nAn icon property should be specified to make it easier to identify a block. These can be any of [WordPress' Dashicons](https:\/\/developer.wordpress.org\/resource\/dashicons\/), or a custom `svg` element.\n\n```js\n\/\/ Specifying a dashicon for the block\nicon: 'book-alt',\n\n\/\/ Specifying a custom svg for the block\nicon: <svg viewBox=\"0 0 24 24\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\" \/><path d=\"M19 13H5v-2h14v2z\" \/><\/svg>,\n```\n\n**Note:** Custom SVG icons are automatically wrapped in the [`wp.primitives.SVG` component](\/packages\/primitives\/README.md) to add accessibility attributes (`aria-hidden`, `role`, and `focusable`).\n\nAn object can also be passed as icon, in this case, icon, as specified above, should be included in the src property.\n\nBesides src the object can contain background and foreground colors, these colors will appear with the icon when they are applicable e.g.: in the inserter.\n\n```js\nicon: {\n\t\/\/ Specifying a background color to appear with the icon e.g.: in the inserter.\n\tbackground: '#7e70af',\n\t\/\/ Specifying a color for the icon (optional: if not set, a readable color will be automatically defined)\n\tforeground: '#fff',\n\t\/\/ Specifying an icon for the block\n\tsrc: <svg viewBox=\"0 0 24 24\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\" \/><path d=\"M19 13H5v-2h14v2z\" \/><\/svg>,\n} ,\n```\n\n#### keywords (optional)\n\n-   **Type:** `Array`\n\nSometimes a block could have aliases that help users discover it while searching. For example, an `image` block could also want to be discovered by `photo`. You can do so by providing an array of terms (which can be translated).\n\n```js\n\/\/ Make it easier to discover a block with keyword aliases.\n\/\/ These can be localised so your keywords work across locales.\nkeywords: [ __( 'image' ), __( 'photo' ), __( 'pics' ) ],\n```\n\n#### styles (optional)\n\n-   **Type:** `Array`\n\nBlock styles can be used to provide alternative styles to block. It works by adding a class name to the block\u2019s wrapper. Using CSS, a theme developer can target the class name for the block style if it is selected.\n\n```js\n\/\/ Register block styles.\nstyles: [\n\t\/\/ Mark style as default.\n\t{\n\t\tname: 'default',\n\t\tlabel: __( 'Rounded' ),\n\t\tisDefault: true\n\t},\n\t{\n\t\tname: 'outline',\n\t\tlabel: __( 'Outline' )\n\t},\n\t{\n\t\tname: 'squared',\n\t\tlabel: __( 'Squared' )\n\t},\n],\n```\n\nPlugins and Themes can also register [custom block styles](\/docs\/reference-guides\/block-api\/block-styles.md) for existing blocks.\n\n#### attributes (optional)\n\n-   **Type:** `Object`\n\nAttributes provide the structured data needs of a block. They can exist in different forms when they are serialized, but they are declared together under a common interface.\n\n```js\n\/\/ Specifying my block attributes\nattributes: {\n\tcover: {\n\t\ttype: 'string',\n\t\tsource: 'attribute',\n\t\tselector: 'img',\n\t\tattribute: 'src',\n\t},\n\tauthor: {\n\t\ttype: 'string',\n\t\tsource: 'html',\n\t\tselector: '.book-author',\n\t},\n\tpages: {\n\t\ttype: 'number',\n\t},\n},\n```\n\n-   **See: [Attributes](\/docs\/reference-guides\/block-api\/block-attributes.md).**\n\n#### example (optional)\n\n-   **Type:** `Object`\n\nExample provides structured example data for the block. This data is used to construct a preview for the block to be shown in the Inspector Help Panel when the user mouses over the block and in the Styles panel when the block is selected.\n\nThe data provided in the example object should match the attributes defined. For example:\n\n```js\nexample: {\n\tattributes: {\n\t\tcover: 'https:\/\/example.com\/image.jpg',\n\t\tauthor: 'William Shakespeare',\n\t\tpages: 500\n\t},\n},\n```\n\nIf `example` is not defined, the preview will not be shown. So even if no attributes are defined, setting an empty example object `example: {}` will trigger the preview to show.\n\nIt's also possible to extend the block preview with inner blocks via `innerBlocks`. For example:\n\n```js\nexample: {\n\tattributes: {\n\t\tcover: 'https:\/\/example.com\/image.jpg',\n\t},\n\tinnerBlocks: [\n\t\t{\n\t\t\tname: 'core\/paragraph',\n\t\t\tattributes: {\n\t\t\t\t\/* translators: example text. *\/\n\t\t\t\tcontent: __(\n\t\t\t\t\t'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent et eros eu felis.'\n\t\t\t\t),\n\t\t\t},\n\t\t},\n\t],\n},\n```\n\nIt's also possible to define the width of the preview container in pixels via `viewportWidth`. For example:\n\n```js\nexample: {\n\tattributes: {\n\t\tcover: 'https:\/\/example.com\/image.jpg',\n\t},\n\tviewportWidth: 800\n},\n```\n\n#### variations (optional)\n\n-   **Type:** `Object[]`\n-   **Since**: `WordPress 5.9.0`\n\nSimilarly to how the block's styles can be declared, a block type can define block variations that the user can pick from. The difference is that, rather than changing only the visual appearance, this field provides a way to apply initial custom attributes and inner blocks at the time when a block is inserted. See the [Block Variations API](\/docs\/reference-guides\/block-api\/block-variations.md) for more details.\n\n#### supports (optional)\n\n-   **_Type:_** `Object`\n\nSupports contains a set of options to control features used in the editor. See [the `supports` documentation](\/docs\/reference-guides\/block-api\/block-supports.md) for more details.\n\n#### transforms (optional)\n\n-   **Type:** `Object`\n\nTransforms provide rules for what a block can be transformed from and what it can be transformed to. A block can be transformed from another block, a shortcode, a regular expression, a file, or a raw DOM node. Take a look at the [Block Transforms API](\/docs\/reference-guides\/block-api\/block-transforms.md) for more info about each available transformation.\n\n#### parent (optional)\n\n-   **Type:** `Array`\n\nBlocks are able to be inserted into blocks that use [`InnerBlocks`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/inner-blocks\/README.md) as nested content. Sometimes it is useful to restrict a block so that it is only available as a nested block. For example, you might want to allow an 'Add to Cart' block to only be available within a 'Product' block.\n\nSetting `parent` lets a block require that it is only available when nested within the specified blocks.\n\n```js\n\/\/ Only allow this block when it is nested in a Columns block\nparent: [ 'core\/columns' ],\n```\n\n#### ancestor (optional)\n\n-   **Type:** `Array`\n-   **Since**: `WordPress 6.0.0`\n\nThe `ancestor` property makes a block available inside the specified block types at any position of the ancestor block subtree. That allows, for example, to place a 'Comment Content' block inside a 'Column' block, as long as 'Column' is somewhere within a 'Comment Template' block. In comparison to the `parent` property, blocks that specify their `ancestor` can be placed anywhere in the subtree whilst blocks with a specified `parent` need to be direct children.\n\n```js\n\/\/ Only allow this block when it is nested at any level in a Columns block.\nancestor: [ 'core\/columns' ],\n```\n\n#### allowedBlocks (optional)\n\n-   **Type:** `Array`\n-   **Since**: `WordPress 6.5.0`\n\nSetting the `allowedBlocks` property will limit which block types can be nested as direct children of the block.\n\n```js\n\/\/ Only allow the Columns block to be nested as direct child of this block\nallowedBlocks: [ 'core\/columns' ],\n```\n\n#### blockHooks (optional)\n\n-   **Type:** `Object`\n-   **Since**: `WordPress 6.4.0`\n\nBlock Hooks is an API that allows a block to automatically insert itself next to all instances of a given block type, in a relative position also specified by the \"hooked\" block. That is, a block can opt to be inserted before or after a given block type, or as its first or last child (i.e. to be prepended or appended to the list of its child blocks, respectively). Hooked blocks will appear both on the frontend and in the editor (to allow for customization by the user).\n\nThe key is the name of the block (`string`) to hook into, and the value is the position to hook into (`string`). Allowed target values are:\n\n-   `before` \u2013 inject before the target block.\n-   `after` - inject after the target block.\n-   `firstChild` - inject before the first inner block of the target container block.\n-   `lastChild` - inject after the last inner block of the target container block.\n\n```js\n{\n\tblockHooks: {\n\t\t'core\/verse': 'before',\n\t\t'core\/spacer': 'after',\n\t\t'core\/column': 'firstChild',\n\t\t'core\/group': 'lastChild',\n\t}\n}\n```\n\nIt\u2019s crucial to emphasize that the Block Hooks feature is only designed to work with _static_ block-based templates, template parts, and patterns. For patterns, this includes those provided by the theme, from [Block Pattern Directory](https:\/\/wordpress.org\/patterns\/), or from calls to [`register_block_pattern`](https:\/\/developer.wordpress.org\/reference\/functions\/register_block_pattern\/).\n\nBlock Hooks will not work with post content or patterns crafted by the user, such as synced patterns, or theme templates and template parts that have been modified by the user.\n\n## Block collections\n\n## `registerBlockCollection`\n\n-   **Type:** `Function`\n\nBlocks can be added to collections, grouping together all blocks from the same origin\n\n`registerBlockCollection` takes two parameters, `namespace` and an object of settings including `title` and `icon`.\n\n### Namespace\n\n-   **Type:** `String`\n\nThis should match the namespace declared in the block name; the name of your plugin or theme.\n\n### Settings\n\n#### Title\n\n-   **Type:** `String`\n\nThis will display in the block inserter section, which will list all blocks in this collection.\n\n#### Icon\n\n-   **Type:** `Object`\n\n(Optional) An icon to display alongside the title in the block inserter.\n\n```js\n\/\/ Registering a block collection\nregisterBlockCollection( 'my-plugin', { title: 'My Plugin' } );\n```\n"
    },
    {
        "path": "\/markdown\/reference-guides\/block-api\/block-context.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Context<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Block context is a feature which enables ancestor blocks to provide values which can be consumed by descendent blocks within its own hierarchy. Those descendent blocks can inherit these values without resorting to hard-coded values and without an explicit awareness of the block which provides those values.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is especially useful in full-site editing where, for example, the contents of a block may depend on the context of the post in which it is displayed. A blogroll template may show excerpts of many different posts. Using block context, there can still be one single \"Post Excerpt\" block which displays the contents of the post based on an inherited post ID.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you are familiar with <a href=\"https:\/\/reactjs.org\/docs\/context.html\">React Context<\/a>, block context adopts many of the same ideas. In fact, the client-side block editor implementation of block context is a very simple application of React Context. Block context is also supported in server-side <code>render_callback<\/code> implementations, demonstrated in the examples below.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Defining block context<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Block context is defined in the registered settings of a block. A block can provide a context value, or consume a value it seeks to inherit.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Providing block context<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block can provide a context value by assigning a <code>providesContext<\/code> property in its registered settings. This is an object which maps a context name to one of the block's own attributes. The value corresponding to that attribute value is made available to descendent blocks and can be referenced by the same context name. Currently, block context only supports values derived from the block's own attributes. This could be enhanced in the future to support additional sources of context values.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\tattributes: {\n\t\trecordId: {\n\t\t\ttype: 'number',\n\t\t},\n\t},\n\n\tprovidesContext: {\n\t\t'my-plugin\/recordId': 'recordId',\n\t},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>For a complete example, refer to the section below.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Include a namespace<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As seen in the above example, it is recommended that you include a namespace as part of the name of the context key so as to avoid potential conflicts with other plugins or default context values provided by WordPress. The context namespace should be specific to your plugin, and in most cases can be the same as used in the name of the block itself.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Consuming block context<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block can inherit a context value from an ancestor provider by assigning a <code>usesContext<\/code> property in its registered settings. This should be assigned as an array of the context names the block seeks to inherit.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>registerBlockType('my-plugin\/record-title', {\n\ttitle: 'Record Title',\n\tcategory: 'widgets',\n\n\tusesContext: &#91;'my-plugin\/recordId'],\n\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Using block context<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once a block has defined the context it seeks to inherit, this can be accessed in the implementation of <code>edit<\/code> (JavaScript) and <code>render_callback<\/code> (PHP). It is provided as an object (JavaScript) or associative array (PHP) of the context values which have been defined for the block. Note that a context value will only be made available if the block explicitly defines a desire to inherit that value.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note: Block Context is not available to <code>save<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">JavaScript<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>registerBlockType('my-plugin\/record-title', {\n\n\tedit({ context }) {\n\t\treturn 'The record ID: ' + context&#91;'my-plugin\/recordId'];\n\t},\n\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">PHP<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block's context values are available from the <code>context<\/code> property of the <code>$block<\/code> argument passed as the third argument to the <code>render_callback<\/code> function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>register_block_type( 'my-plugin\/record-title', array(\n\t'render_callback' => function( $attributes, $content, $block ) {\n\t\treturn 'The current record ID is: ' . $block->context&#91;'my-plugin\/recordId'];\n\t},\n) );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Example<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Create a <code>record<\/code> block.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm init @wordpress\/block --namespace my-plugin record\ncd record\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\" class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Edit <code>src\/index.js<\/code>. Insert the <code>recordId<\/code> attribute and <code>providesContext<\/code> property in the <code>registerBlockType<\/code> function and add the registration of the <code>record-title<\/code> block at the bottom:<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>registerBlockType( 'my-plugin\/record', {\n\t\/\/ ... cut ...\n\n\tattributes: {\n\t\trecordId: {\n\t\t\ttype: 'number',\n\t\t},\n\t},\n\n\tprovidesContext: {\n\t\t'my-plugin\/recordId': 'recordId',\n\t},\n\n\t\/**\n\t * @see .\/edit.js\n\t *\/\n\tedit: Edit,\n\n\t\/**\n\t * @see .\/save.js\n\t *\/\n\tsave,\n} );\n\nregisterBlockType( 'my-plugin\/record-title', {\n\ttitle: 'Record Title',\n\tcategory: 'widgets',\n\n\tusesContext: &#91; 'my-plugin\/recordId' ],\n\n\tedit( { context } ) {\n\t\treturn 'The record ID: ' + context&#91; 'my-plugin\/recordId' ];\n\t},\n\n\tsave() {\n\t\treturn null;\n\t},\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\" class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Edit <code>src\/edit.js<\/code> for the <code>record<\/code> block. Replace the <code>Edit<\/code> function with the following code:<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { TextControl } from '@wordpress\/components';\nimport { InnerBlocks } from '@wordpress\/block-editor';\n\nexport default function Edit( props ) {\n\tconst MY_TEMPLATE = &#91; &#91; 'my-plugin\/record-title', {} ] ];\n\tconst {\n\t\tattributes: { recordId },\n\t\tsetAttributes,\n\t} = props;\n\treturn (\n\t\t<div>\n\t\t\t<textcontrol<br>\t\t\t\tlabel={ __( 'Record ID:' ) }\n\t\t\t\tvalue={ recordId }\n\t\t\t\tonChange={ ( val ) =>\n\t\t\t\t\tsetAttributes( { recordId: Number( val ) } )\n\t\t\t\t}\n\t\t\t\/>\n\t\t\t<innerblocks template=\"{\" my_template=\"\" }=\"\" templatelock=\"all\">\n\t\t<\/innerblocks><\/textcontrol<br><\/div>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\" class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Edit <code>src\/save.js<\/code> for the <code>record<\/code> block. Replace the <code>save<\/code> function with the following code:<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export default function save( props ) {\n\treturn <p>The record ID: { props.attributes.recordId }<\/p>;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:list {\"ordered\":true,\"start\":5} -->\n<ol start=\"5\" class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Create a new post and add the <code>record<\/code> block. If you type a number in the text box, you'll see the same number is shown in the <code>record-title<\/code> block below it.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/user-images.githubusercontent.com\/8876600\/93000215-c8570380-f561-11ea-9bd0-0b2bd0ca1752.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Block Context Example<\/figcaption><\/figure>\n<!-- \/wp:image -->",
        "markdown": "# Context\n\nBlock context is a feature which enables ancestor blocks to provide values which can be consumed by descendent blocks within its own hierarchy. Those descendent blocks can inherit these values without resorting to hard-coded values and without an explicit awareness of the block which provides those values.\n\nThis is especially useful in full-site editing where, for example, the contents of a block may depend on the context of the post in which it is displayed. A blogroll template may show excerpts of many different posts. Using block context, there can still be one single \"Post Excerpt\" block which displays the contents of the post based on an inherited post ID.\n\nIf you are familiar with [React Context](https:\/\/reactjs.org\/docs\/context.html), block context adopts many of the same ideas. In fact, the client-side block editor implementation of block context is a very simple application of React Context. Block context is also supported in server-side `render_callback` implementations, demonstrated in the examples below.\n\n## Defining block context\n\nBlock context is defined in the registered settings of a block. A block can provide a context value, or consume a value it seeks to inherit.\n\n### Providing block context\n\nA block can provide a context value by assigning a `providesContext` property in its registered settings. This is an object which maps a context name to one of the block's own attributes. The value corresponding to that attribute value is made available to descendent blocks and can be referenced by the same context name. Currently, block context only supports values derived from the block's own attributes. This could be enhanced in the future to support additional sources of context values.\n\n```js\n\tattributes: {\n\t\trecordId: {\n\t\t\ttype: 'number',\n\t\t},\n\t},\n\n\tprovidesContext: {\n\t\t'my-plugin\/recordId': 'recordId',\n\t},\n```\n\nFor a complete example, refer to the section below.\n\n#### Include a namespace\n\nAs seen in the above example, it is recommended that you include a namespace as part of the name of the context key so as to avoid potential conflicts with other plugins or default context values provided by WordPress. The context namespace should be specific to your plugin, and in most cases can be the same as used in the name of the block itself.\n\n### Consuming block context\n\nA block can inherit a context value from an ancestor provider by assigning a `usesContext` property in its registered settings. This should be assigned as an array of the context names the block seeks to inherit.\n\n```js\nregisterBlockType('my-plugin\/record-title', {\n\ttitle: 'Record Title',\n\tcategory: 'widgets',\n\n\tusesContext: ['my-plugin\/recordId'],\n\n```\n\n## Using block context\n\nOnce a block has defined the context it seeks to inherit, this can be accessed in the implementation of `edit` (JavaScript) and `render_callback` (PHP). It is provided as an object (JavaScript) or associative array (PHP) of the context values which have been defined for the block. Note that a context value will only be made available if the block explicitly defines a desire to inherit that value.\n\nNote: Block Context is not available to `save`.\n\n### JavaScript\n\n```js\nregisterBlockType('my-plugin\/record-title', {\n\n\tedit({ context }) {\n\t\treturn 'The record ID: ' + context['my-plugin\/recordId'];\n\t},\n\n```\n\n### PHP\n\nA block's context values are available from the `context` property of the `$block` argument passed as the third argument to the `render_callback` function.\n\n```php\nregister_block_type( 'my-plugin\/record-title', array(\n\t'render_callback' => function( $attributes, $content, $block ) {\n\t\treturn 'The current record ID is: ' . $block->context['my-plugin\/recordId'];\n\t},\n) );\n```\n\n## Example\n\n1. Create a `record` block.\n\n```\nnpm init @wordpress\/block --namespace my-plugin record\ncd record\n```\n\n2. Edit `src\/index.js`. Insert the `recordId` attribute and `providesContext` property in the `registerBlockType` function and add the registration of the `record-title` block at the bottom:\n\n```js\nregisterBlockType( 'my-plugin\/record', {\n\t\/\/ ... cut ...\n\n\tattributes: {\n\t\trecordId: {\n\t\t\ttype: 'number',\n\t\t},\n\t},\n\n\tprovidesContext: {\n\t\t'my-plugin\/recordId': 'recordId',\n\t},\n\n\t\/**\n\t * @see .\/edit.js\n\t *\/\n\tedit: Edit,\n\n\t\/**\n\t * @see .\/save.js\n\t *\/\n\tsave,\n} );\n\nregisterBlockType( 'my-plugin\/record-title', {\n\ttitle: 'Record Title',\n\tcategory: 'widgets',\n\n\tusesContext: [ 'my-plugin\/recordId' ],\n\n\tedit( { context } ) {\n\t\treturn 'The record ID: ' + context[ 'my-plugin\/recordId' ];\n\t},\n\n\tsave() {\n\t\treturn null;\n\t},\n} );\n```\n\n3. Edit `src\/edit.js` for the `record` block. Replace the `Edit` function with the following code:\n\n```js\nimport { TextControl } from '@wordpress\/components';\nimport { InnerBlocks } from '@wordpress\/block-editor';\n\nexport default function Edit( props ) {\n\tconst MY_TEMPLATE = [ [ 'my-plugin\/record-title', {} ] ];\n\tconst {\n\t\tattributes: { recordId },\n\t\tsetAttributes,\n\t} = props;\n\treturn (\n\t\t<div>\n\t\t\t<TextControl\n\t\t\t\tlabel={ __( 'Record ID:' ) }\n\t\t\t\tvalue={ recordId }\n\t\t\t\tonChange={ ( val ) =>\n\t\t\t\t\tsetAttributes( { recordId: Number( val ) } )\n\t\t\t\t}\n\t\t\t\/>\n\t\t\t<InnerBlocks template={ MY_TEMPLATE } templateLock=\"all\" \/>\n\t\t<\/div>\n\t);\n}\n```\n\n4. Edit `src\/save.js` for the `record` block. Replace the `save` function with the following code:\n\n```js\nexport default function save( props ) {\n\treturn <p>The record ID: { props.attributes.recordId }<\/p>;\n}\n```\n\n5. Create a new post and add the `record` block. If you type a number in the text box, you'll see the same number is shown in the `record-title` block below it.\n\n![Block Context Example](https:\/\/user-images.githubusercontent.com\/8876600\/93000215-c8570380-f561-11ea-9bd0-0b2bd0ca1752.png)\n"
    },
    {
        "path": "\/markdown\/reference-guides\/block-api\/block-styles.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Styles<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Block Styles allow alternative styles to be applied to existing blocks. They work by adding a className to the block's wrapper. This className can be used to provide an alternative styling for the block if the block style is selected. See the <a href=\"\/docs\/how-to-guides\/javascript\/\">Getting Started with JavaScript tutorial<\/a> for a full example.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.blocks.registerBlockStyle( 'core\/quote', {\n\tname: 'fancy-quote',\n\tlabel: 'Fancy Quote',\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The example above registers a block style named <code>fancy-quote<\/code> to the <code>core\/quote<\/code> block. When the user selects this block style from the styles selector, an <code>is-style-fancy-quote<\/code> className will be added to the block's wrapper.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>By adding <code>isDefault: true<\/code> you can mark the registered block style as the one that is recognized as active when no custom class name is provided. It also means that there will be no custom class name added to the HTML output for the style that is marked as default.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To remove a block style use <code>wp.blocks.unregisterBlockStyle()<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Example:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.blocks.unregisterBlockStyle( 'core\/quote', 'large' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The above removes the block style named <code>large<\/code> from the <code>core\/quote<\/code> block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Important:<\/strong> When unregistering a block style, there can be a <a href=\"https:\/\/en.wikipedia.org\/wiki\/Race_condition\">race condition<\/a> on which code runs first: registering the style, or unregistering the style. You want your unregister code to run last. The way to do that is specify the component that is registering the style as a dependency, in this case <code>wp-edit-post<\/code>. Additionally, using <code>wp.domReady()<\/code> ensures the unregister code runs once the dom is loaded.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Enqueue your JavaScript with the following PHP code:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function myguten_enqueue() {\n\twp_enqueue_script(\n\t\t'myguten-script',\n\t\tplugins_url( 'myguten.js', __FILE__ ),\n\t\tarray( 'wp-blocks', 'wp-dom-ready', 'wp-edit-post' ),\n\t\tfilemtime( plugin_dir_path( __FILE__ ) . '\/myguten.js' )\n\t);\n}\nadd_action( 'enqueue_block_editor_assets', 'myguten_enqueue' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The JavaScript code in <code>myguten.js<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.domReady( function () {\n\twp.blocks.unregisterBlockStyle( 'core\/quote', 'large' );\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Server-side registration helper<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>While the samples provided do allow full control of block styles, they do require a considerable amount of code.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To simplify the process of registering and unregistering block styles, two server-side functions are also available: <code>register_block_style<\/code>, and <code>unregister_block_style<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">register_block_style<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>register_block_style<\/code> function receives the name of the block as the first argument and an array describing properties of the style as the second argument.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The properties of the style array must include <code>name<\/code> and <code>label<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>name<\/code>: The identifier of the style used to compute a CSS class.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>label<\/code>: A human-readable label for the style.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Besides the two mandatory properties, the styles properties array should also include an <code>inline_style<\/code> or a <code>style_handle<\/code> property:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>inline_style<\/code>: Contains inline CSS code that registers the CSS class required for the style.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>style_handle<\/code>: Contains the handle to an already registered style that should be enqueued in places where block styles are needed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>It is also possible to set the <code>is_default<\/code> property to <code>true<\/code> to mark one of the block styles as the default one.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following code sample registers a style for the quote block named \"Blue Quote\", and provides an inline style that makes quote blocks with the \"Blue Quote\" style have blue color:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>register_block_style(\n    'core\/quote',\n    array(\n        'name'         => 'blue-quote',\n        'label'        => __( 'Blue Quote', 'textdomain' ),\n        'inline_style' => '.wp-block-quote.is-style-blue-quote { color: blue; }',\n    )\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Alternatively, if a stylesheet was already registered which contains the CSS for the block style, it is possible to just pass the stylesheet's handle so <code>register_block_style<\/code> function will make sure it is enqueued.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following code sample provides an example of this use case:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp_register_style( 'myguten-style', get_template_directory_uri() . '\/custom-style.css' );\n\n\/\/ ...\n\nregister_block_style(\n    'core\/quote',\n    array(\n        'name'         => 'fancy-quote',\n        'label'        => __( 'Fancy Quote', 'textdomain' ),\n        'style_handle' => 'myguten-style',\n    )\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">unregister_block_style<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>unregister_block_style<\/code> allows unregistering a block style previously registered on the server using <code>register_block_style<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The function's first argument is the registered name of the block, and the name of the style as the second argument.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following code sample unregisters the style named 'fancy-quote' from the quote block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>unregister_block_style( 'core\/quote', 'fancy-quote' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Important:<\/strong> The function <code>unregister_block_style<\/code> only unregisters styles that were registered on the server using <code>register_block_style<\/code>. The function does not unregister a style registered using client-side code.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Styles\n\nBlock Styles allow alternative styles to be applied to existing blocks. They work by adding a className to the block's wrapper. This className can be used to provide an alternative styling for the block if the block style is selected. See the [Getting Started with JavaScript tutorial](\/docs\/how-to-guides\/javascript\/) for a full example.\n\n_Example:_\n\n```js\nwp.blocks.registerBlockStyle( 'core\/quote', {\n\tname: 'fancy-quote',\n\tlabel: 'Fancy Quote',\n} );\n```\n\nThe example above registers a block style named `fancy-quote` to the `core\/quote` block. When the user selects this block style from the styles selector, an `is-style-fancy-quote` className will be added to the block's wrapper.\n\nBy adding `isDefault: true` you can mark the registered block style as the one that is recognized as active when no custom class name is provided. It also means that there will be no custom class name added to the HTML output for the style that is marked as default.\n\nTo remove a block style use `wp.blocks.unregisterBlockStyle()`.\n\n_Example:_\n\n```js\nwp.blocks.unregisterBlockStyle( 'core\/quote', 'large' );\n```\n\nThe above removes the block style named `large` from the `core\/quote` block.\n\n**Important:** When unregistering a block style, there can be a [race condition](https:\/\/en.wikipedia.org\/wiki\/Race_condition) on which code runs first: registering the style, or unregistering the style. You want your unregister code to run last. The way to do that is specify the component that is registering the style as a dependency, in this case `wp-edit-post`. Additionally, using `wp.domReady()` ensures the unregister code runs once the dom is loaded.\n\nEnqueue your JavaScript with the following PHP code:\n\n```php\nfunction myguten_enqueue() {\n\twp_enqueue_script(\n\t\t'myguten-script',\n\t\tplugins_url( 'myguten.js', __FILE__ ),\n\t\tarray( 'wp-blocks', 'wp-dom-ready', 'wp-edit-post' ),\n\t\tfilemtime( plugin_dir_path( __FILE__ ) . '\/myguten.js' )\n\t);\n}\nadd_action( 'enqueue_block_editor_assets', 'myguten_enqueue' );\n```\n\nThe JavaScript code in `myguten.js`:\n\n```js\nwp.domReady( function () {\n\twp.blocks.unregisterBlockStyle( 'core\/quote', 'large' );\n} );\n```\n\n## Server-side registration helper\n\nWhile the samples provided do allow full control of block styles, they do require a considerable amount of code.\n\nTo simplify the process of registering and unregistering block styles, two server-side functions are also available: `register_block_style`, and `unregister_block_style`.\n\n### register_block_style\n\nThe `register_block_style` function receives the name of the block as the first argument and an array describing properties of the style as the second argument.\n\nThe properties of the style array must include `name` and `label`:\n\n-   `name`: The identifier of the style used to compute a CSS class.\n-   `label`: A human-readable label for the style.\n\nBesides the two mandatory properties, the styles properties array should also include an `inline_style` or a `style_handle` property:\n\n-   `inline_style`: Contains inline CSS code that registers the CSS class required for the style.\n-   `style_handle`: Contains the handle to an already registered style that should be enqueued in places where block styles are needed.\n\nIt is also possible to set the `is_default` property to `true` to mark one of the block styles as the default one.\n\nThe following code sample registers a style for the quote block named \"Blue Quote\", and provides an inline style that makes quote blocks with the \"Blue Quote\" style have blue color:\n\n```php\nregister_block_style(\n    'core\/quote',\n    array(\n        'name'         => 'blue-quote',\n        'label'        => __( 'Blue Quote', 'textdomain' ),\n        'inline_style' => '.wp-block-quote.is-style-blue-quote { color: blue; }',\n    )\n);\n```\n\nAlternatively, if a stylesheet was already registered which contains the CSS for the block style, it is possible to just pass the stylesheet's handle so `register_block_style` function will make sure it is enqueued.\n\nThe following code sample provides an example of this use case:\n\n```php\nwp_register_style( 'myguten-style', get_template_directory_uri() . '\/custom-style.css' );\n\n\/\/ ...\n\nregister_block_style(\n    'core\/quote',\n    array(\n        'name'         => 'fancy-quote',\n        'label'        => __( 'Fancy Quote', 'textdomain' ),\n        'style_handle' => 'myguten-style',\n    )\n);\n```\n\n### unregister_block_style\n\n`unregister_block_style` allows unregistering a block style previously registered on the server using `register_block_style`.\n\nThe function's first argument is the registered name of the block, and the name of the style as the second argument.\n\nThe following code sample unregisters the style named 'fancy-quote' from the quote block:\n\n```php\nunregister_block_style( 'core\/quote', 'fancy-quote' );\n```\n\n**Important:** The function `unregister_block_style` only unregisters styles that were registered on the server using `register_block_style`. The function does not unregister a style registered using client-side code.\n"
    },
    {
        "path": "\/markdown\/reference-guides\/block-api\/block-variations.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Variations<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Block Variations API  allows you to define multiple versions (variations) of a block. A block variation differs from the original block by a set of initial attributes or inner blocks. When you insert the block variation into the Editor, these attributes and\/or inner blocks are applied.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Variations are an excellent way to create iterations of existing blocks without building entirely new blocks from scratch.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To better understand this API, consider the Embed block. This block contains numerous variations for each type of embeddable content (WordPress, Youtube, etc.). Each Embed block variation shares the same underlying functionality for editing, saving, and so on. Besides the name and descriptive information, the main difference is the <code>providerNameSlug<\/code> attribute. Below is a simplified example of the variations in the Embed block. View the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/embed\/variations.js\">source code<\/a> for the complete specification.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>variations: &#91;\n\t{\n\t\tname: 'wordpress',\n\t\ttitle: 'WordPress',\n\t\tdescription: __( 'Embed a WordPress post.' ),\n\t\tattributes: { providerNameSlug: 'wordpress' },\n\t},\n\t{\n\t\tname: 'youtube',\n\t\ttitle: 'YouTube',\n\t\tdescription: __( 'Embed a YouTube video.' ),\n\t\tattributes: { providerNameSlug: 'youtube' },\n\t},\n],\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Defining a block variation<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block variation is defined by an object that can contain the following fields:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>name<\/code> (type <code>string<\/code>) \u2013 A unique and machine-readable name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>title<\/code> (optional, type <code>string<\/code>) \u2013 A human-readable variation title.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>description<\/code> (optional, type <code>string<\/code>) \u2013 A human-readable variation description.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>category<\/code> (optional, type <code>string<\/code>) - A category classification used in search interfaces to arrange block types by category.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>keywords<\/code> (optional, type <code>string[]<\/code>) - An array of terms (which can be translated) that help users discover the variation while searching.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>icon<\/code> (optional, type <code>string<\/code> | <code>Object<\/code>) \u2013 An icon helping to visualize the variation. It can have the same shape as the block type.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>attributes<\/code> (optional, type <code>Object<\/code>) \u2013 Values that override block attributes.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>innerBlocks<\/code> (optional, type <code>Array[]<\/code>) \u2013 Initial configuration of nested blocks.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>example<\/code> (optional, type <code>Object<\/code>) \u2013 Provides structured data for the block preview. Set to <code>undefined<\/code> to disable the preview. See the <a href=\"\/docs\/reference-guides\/block-api\/block-registration.md#example-optional\">Block Registration API<\/a> for more details.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>scope<\/code> (optional, type <code>WPBlockVariationScope[]<\/code>) - Defaults to <code>block<\/code> and <code>inserter<\/code>. The list of scopes where the variation is applicable. Available options include:<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>block<\/code> - Used by blocks to filter specific block variations. <code>Columns<\/code> and <code>Query<\/code> blocks have such variations, which are passed to the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/block-variation-picker\/README.md\">experimental BlockVariationPicker<\/a> component. This component handles displaying the variations and allows users to choose one of them.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>inserter<\/code> - Block variation is shown on the inserter.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>transform<\/code> - Block variation is shown in the component for variation transformations.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>isDefault<\/code> (optional, type <code>boolean<\/code>) \u2013 Defaults to <code>false<\/code>. Indicates whether the current variation is the default one (details below).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>isActive<\/code> (optional, type <code>Function|string[]<\/code>) - A function or an array of block attributes that is used to determine if the variation is active when the block is selected. The function accepts <code>blockAttributes<\/code> and <code>variationAttributes<\/code> (details below).<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n\tYou can technically create a block variation without a unique <code>name<\/code>, but this is <strong>not<\/strong> recommended. A unique <code>name<\/code> allows the Editor to differentiate between your variation and others that may exist. It also allows your variation to be unregistered as needed and has implications for the <code>isDefault<\/code> settings (details below).\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Creating a block variation<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Block variations can be declared during a block's registration by providing the <code>variations<\/code> key with a proper array of variation objects, as shown in the example above. See the <a href=\"\/docs\/reference-guides\/block-api\/block-registration.md\">Block Registration API<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To create a variation for an existing block, such as a Core block, use <code>wp.blocks.registerBlockVariation()<\/code>. This function accepts the name of the block and the object defining the variation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.blocks.registerBlockVariation( \n\t'core\/embed', \n\t{\n\t\tname: 'custom-embed',\n\t\tattributes: { providerNameSlug: 'custom' },\n\t}\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Removing a block variation<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Block variations can also be easily removed. To do so, use <code>wp.blocks.unregisterBlockVariation()<\/code>. This function accepts the name of the block and the <code>name<\/code> of the variation that should be unregistered.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.blocks.unregisterBlockVariation( 'core\/embed', 'youtube' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block variations versus block styles<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The main difference between block styles and block variations is that a block style just applies a CSS class to the block, so it can be styled in an alternative way. See the <a href=\"\/docs\/reference-guides\/block-api\/block-styles.md\">Block Styles API<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you want to apply initial attributes or inner blocks, this falls into block variation territory. It's also possible to override the default block style using the <code>className<\/code> attribute when defining a block variation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>variations: &#91;\n\t{\n\t\tname: 'blue',\n\t\ttitle: __( 'Blue Quote' ),\n\t\tisDefault: true,\n\t\tattributes: { \n\t\t\tcolor: 'blue', \n\t\t\tclassName: 'is-style-blue-quote' \n\t\t},\n\t\ticon: 'format-quote',\n\t\tisActive: ( blockAttributes, variationAttributes ) =>\n\t\t\tblockAttributes.color === variationAttributes.color\n\t},\n],\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Using <code>isDefault<\/code><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>By default, all variations will show up in the Inserter in addition to the original block type item. However, setting the <code>isDefault<\/code> flag for any variations listed will override the regular block type in the Inserter. This is a great tool for curating the Editor experience to your specific needs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, if you want Media &amp; Text block to display the image on the right by default, you could create a variation like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code> wp.blocks.registerBlockVariation(\n\t'core\/media-text', \n\t{\n\t\tname: 'media-text-media-right',\n\t\ttitle: __( 'Media &amp; Text' ),\n\t\tisDefault: true,\n\t\tattributes: { \n\t\t\tmediaPosition: 'right'\n\t\t}\n\t}\n)\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Caveats to using <code>isDefault<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>While <code>isDefault<\/code> works great when overriding a block without existing variations, you may run into issues when other variations exist.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If another variation for the same block uses <code>isDefault<\/code>, your variation will not necessarily become the default. The Editor respects the first registered variation with <code>isDefault<\/code>, which might not be yours.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The solution is to unregister the other variation before registering your variation with <code>isDefault<\/code>. This caveat reinforces the recommendation always to provide variations with a unique <code>name<\/code>. Otherwise, the variation cannot be unregistered.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Using <code>isActive<\/code><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>While the <code>isActive<\/code> property is optional, you will often want to use it to display information about the block variation after the block has been inserted. For example, this API is used in <code>useBlockDisplayInformation<\/code> hook to fetch and display proper information in places like the <code>BlockCard<\/code> or <code>Breadcrumbs<\/code> components.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If <code>isActive<\/code> is not set, the Editor cannot distinguish between the original block and your variation, so the original block information will be displayed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The property can use either a function or an array of strings (<code>string[]<\/code>). The function accepts <code>blockAttributes<\/code> and <code>variationAttributes<\/code>, which can be used to determine if a variation is active. In the Embed block, the primary differentiator is the <code>providerNameSlug<\/code> attribute, so if you wanted to determine if the YouTube Embed variation was active, you could do something like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>isActive: ( blockAttributes, variationAttributes ) =>\n\tblockAttributes.providerNameSlug === variationAttributes.providerNameSlug,\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can also use a <code>string[]<\/code> to tell which attributes should be compared as a shorthand. Each attribute will be checked and the variation will be active if all of them match. Using the same example of the YouTube Embed variation, the string version would look like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>isActive: &#91; 'providerNameSlug' ]\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Caveats to using <code>isActive<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>isActive<\/code> property can return false positives if multiple variations exist for a specific block and the <code>isActive<\/code> checks are not specific enough. To demonstrate this, consider the following example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.blocks.registerBlockVariation(\n\t'core\/paragraph',\n\t{\n\t\tname: 'paragraph-red',\n\t\ttitle: 'Red Paragraph',\n\t\tattributes: {\n\t\t\ttextColor: 'vivid-red',\n\t\t},\n\t\tisActive: &#91; 'textColor' ],\n\t}\n);\n\nwp.blocks.registerBlockVariation(\n\t'core\/paragraph',\n\t{\n\t\tname: 'paragraph-red-grey',\n\t\ttitle: 'Red\/Grey Paragraph',\n\t\tattributes: {\n\t\t\ttextColor: 'vivid-red',\n\t\t\tbackgroundColor: 'cyan-bluish-gray'\n\t\t},\n\t\tisActive: &#91; 'textColor', 'backgroundColor' ]\n\t}\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The <code>isActive<\/code> check on both variations tests the <code>textColor<\/code>, but each variations uses <code>vivid-red<\/code>. Since the <code>paragraph-red<\/code> variation is registered first, once the <code>paragraph-red-grey<\/code> variation is inserted into the Editor, it will have the title <code>Red Paragraph<\/code> instead of <code>Red\/Grey Paragraph<\/code>. As soon as the Editor finds a match, it stops checking.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There have been <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\/41303#issuecomment-1526193087\">discussions<\/a> around how the API can be improved, but as of WordPress 6.3, this remains an issue to watch out for.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Variations\n\nThe Block Variations API  allows you to define multiple versions (variations) of a block. A block variation differs from the original block by a set of initial attributes or inner blocks. When you insert the block variation into the Editor, these attributes and\/or inner blocks are applied. \n\nVariations are an excellent way to create iterations of existing blocks without building entirely new blocks from scratch.\n\nTo better understand this API, consider the Embed block. This block contains numerous variations for each type of embeddable content (WordPress, Youtube, etc.). Each Embed block variation shares the same underlying functionality for editing, saving, and so on. Besides the name and descriptive information, the main difference is the `providerNameSlug` attribute. Below is a simplified example of the variations in the Embed block. View the [source code](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/embed\/variations.js) for the complete specification.\n\n\n```js\nvariations: [\n\t{\n\t\tname: 'wordpress',\n\t\ttitle: 'WordPress',\n\t\tdescription: __( 'Embed a WordPress post.' ),\n\t\tattributes: { providerNameSlug: 'wordpress' },\n\t},\n\t{\n\t\tname: 'youtube',\n\t\ttitle: 'YouTube',\n\t\tdescription: __( 'Embed a YouTube video.' ),\n\t\tattributes: { providerNameSlug: 'youtube' },\n\t},\n],\n```\n\n## Defining a block variation\n\nA block variation is defined by an object that can contain the following fields:\n\n-   `name` (type `string`) \u2013 A unique and machine-readable name.\n-   `title` (optional, type `string`) \u2013 A human-readable variation title.\n-   `description` (optional, type `string`) \u2013 A human-readable variation description.\n-   `category` (optional, type `string`) - A category classification used in search interfaces to arrange block types by category.\n-   `keywords` (optional, type `string[]`) - An array of terms (which can be translated) that help users discover the variation while searching.\n-   `icon` (optional, type `string` | `Object`) \u2013 An icon helping to visualize the variation. It can have the same shape as the block type.\n-   `attributes` (optional, type `Object`) \u2013 Values that override block attributes.\n-   `innerBlocks` (optional, type `Array[]`) \u2013 Initial configuration of nested blocks.\n-   `example` (optional, type `Object`) \u2013 Provides structured data for the block preview. Set to `undefined` to disable the preview. See the [Block Registration API](\/docs\/reference-guides\/block-api\/block-registration.md#example-optional) for more details.\n-   `scope` (optional, type `WPBlockVariationScope[]`) - Defaults to `block` and `inserter`. The list of scopes where the variation is applicable. Available options include:\n\t- `block` - Used by blocks to filter specific block variations. `Columns` and `Query` blocks have such variations, which are passed to the [experimental BlockVariationPicker](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/block-variation-picker\/README.md) component. This component handles displaying the variations and allows users to choose one of them.\n    -   `inserter` - Block variation is shown on the inserter.\n    -   `transform` - Block variation is shown in the component for variation transformations.\n-   `isDefault` (optional, type `boolean`) \u2013 Defaults to `false`. Indicates whether the current variation is the default one (details below).\n-   `isActive` (optional, type `Function|string[]`) - A function or an array of block attributes that is used to determine if the variation is active when the block is selected. The function accepts `blockAttributes` and `variationAttributes` (details below).\n\n<div class=\"callout callout-info\">\n\tYou can technically create a block variation without a unique <code>name<\/code>, but this is <strong>not<\/strong> recommended. A unique <code>name<\/code> allows the Editor to differentiate between your variation and others that may exist. It also allows your variation to be unregistered as needed and has implications for the <code>isDefault<\/code> settings (details below).\n<\/div>\n\n## Creating a block variation\n\nBlock variations can be declared during a block's registration by providing the `variations` key with a proper array of variation objects, as shown in the example above. See the [Block Registration API](\/docs\/reference-guides\/block-api\/block-registration.md) for more details.\n\nTo create a variation for an existing block, such as a Core block, use `wp.blocks.registerBlockVariation()`. This function accepts the name of the block and the object defining the variation.\n\n```js\nwp.blocks.registerBlockVariation( \n\t'core\/embed', \n\t{\n\t\tname: 'custom-embed',\n\t\tattributes: { providerNameSlug: 'custom' },\n\t}\n);\n```\n\n## Removing a block variation\n\nBlock variations can also be easily removed. To do so, use `wp.blocks.unregisterBlockVariation()`. This function accepts the name of the block and the `name` of the variation that should be unregistered. \n\n```js\nwp.blocks.unregisterBlockVariation( 'core\/embed', 'youtube' );\n```\n\n## Block variations versus block styles\n\nThe main difference between block styles and block variations is that a block style just applies a CSS class to the block, so it can be styled in an alternative way. See the [Block Styles API](\/docs\/reference-guides\/block-api\/block-styles.md) for more details.\n\nIf you want to apply initial attributes or inner blocks, this falls into block variation territory. It's also possible to override the default block style using the `className` attribute when defining a block variation.\n\n```js\nvariations: [\n\t{\n\t\tname: 'blue',\n\t\ttitle: __( 'Blue Quote' ),\n\t\tisDefault: true,\n\t\tattributes: { \n\t\t\tcolor: 'blue', \n\t\t\tclassName: 'is-style-blue-quote' \n\t\t},\n\t\ticon: 'format-quote',\n\t\tisActive: ( blockAttributes, variationAttributes ) =>\n\t\t\tblockAttributes.color === variationAttributes.color\n\t},\n],\n```\n\n## Using `isDefault`\n\nBy default, all variations will show up in the Inserter in addition to the original block type item. However, setting the `isDefault` flag for any variations listed will override the regular block type in the Inserter. This is a great tool for curating the Editor experience to your specific needs.\n\nFor example, if you want Media & Text block to display the image on the right by default, you could create a variation like this: \n\n```js\n wp.blocks.registerBlockVariation(\n\t'core\/media-text', \n\t{\n\t\tname: 'media-text-media-right',\n\t\ttitle: __( 'Media & Text' ),\n\t\tisDefault: true,\n\t\tattributes: { \n\t\t\tmediaPosition: 'right'\n\t\t}\n\t}\n)\n```\n\n### Caveats to using `isDefault`\n\nWhile `isDefault` works great when overriding a block without existing variations, you may run into issues when other variations exist.\n\nIf another variation for the same block uses `isDefault`, your variation will not necessarily become the default. The Editor respects the first registered variation with `isDefault`, which might not be yours.\n\nThe solution is to unregister the other variation before registering your variation with `isDefault`. This caveat reinforces the recommendation always to provide variations with a unique `name`. Otherwise, the variation cannot be unregistered.\n\n## Using `isActive`\n\nWhile the `isActive` property is optional, you will often want to use it to display information about the block variation after the block has been inserted. For example, this API is used in `useBlockDisplayInformation` hook to fetch and display proper information in places like the `BlockCard` or `Breadcrumbs` components.\n\nIf `isActive` is not set, the Editor cannot distinguish between the original block and your variation, so the original block information will be displayed. \n\nThe property can use either a function or an array of strings (`string[]`). The function accepts `blockAttributes` and `variationAttributes`, which can be used to determine if a variation is active. In the Embed block, the primary differentiator is the `providerNameSlug` attribute, so if you wanted to determine if the YouTube Embed variation was active, you could do something like this: \n\n```\nisActive: ( blockAttributes, variationAttributes ) =>\n\tblockAttributes.providerNameSlug === variationAttributes.providerNameSlug,\n```\n\nYou can also use a `string[]` to tell which attributes should be compared as a shorthand. Each attribute will be checked and the variation will be active if all of them match. Using the same example of the YouTube Embed variation, the string version would look like this:\n\n```\nisActive: [ 'providerNameSlug' ]\n```\n\n### Caveats to using `isActive`\n\nThe `isActive` property can return false positives if multiple variations exist for a specific block and the `isActive` checks are not specific enough. To demonstrate this, consider the following example:\n\n```js\nwp.blocks.registerBlockVariation(\n\t'core\/paragraph',\n\t{\n\t\tname: 'paragraph-red',\n\t\ttitle: 'Red Paragraph',\n\t\tattributes: {\n\t\t\ttextColor: 'vivid-red',\n\t\t},\n\t\tisActive: [ 'textColor' ],\n\t}\n);\n\nwp.blocks.registerBlockVariation(\n\t'core\/paragraph',\n\t{\n\t\tname: 'paragraph-red-grey',\n\t\ttitle: 'Red\/Grey Paragraph',\n\t\tattributes: {\n\t\t\ttextColor: 'vivid-red',\n\t\t\tbackgroundColor: 'cyan-bluish-gray'\n\t\t},\n\t\tisActive: [ 'textColor', 'backgroundColor' ]\n\t}\n);\n```\n\nThe `isActive` check on both variations tests the `textColor`, but each variations uses `vivid-red`. Since the `paragraph-red` variation is registered first, once the `paragraph-red-grey` variation is inserted into the Editor, it will have the title `Red Paragraph` instead of `Red\/Grey Paragraph`. As soon as the Editor finds a match, it stops checking.\n\nThere have been [discussions](https:\/\/github.com\/WordPress\/gutenberg\/issues\/41303#issuecomment-1526193087) around how the API can be improved, but as of WordPress 6.3, this remains an issue to watch out for."
    },
    {
        "path": "\/markdown\/reference-guides\/block-api\/block-api-versions.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">API Versions<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This document lists the changes made between the different API versions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Version 3 (>= WordPress 6.3)<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The post editor will be iframed if all registered blocks have a Block API version 3 or higher and the editor has no classic meta boxes below the blocks. Adding version 3 support means that the block should work inside an iframe, though the block may still be rendered outside the iframe if not all blocks support version 3.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Version 2 (>= WordPress 5.6)<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>To render the block element wrapper for the block's <code>edit<\/code> implementation, the block author must use the <code>useBlockProps()<\/code> hook.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The generated class names and styles are no longer added automatically to the saved markup for static blocks when <code>save<\/code> is processed. To include them, the block author must explicitly use <code>useBlockProps.save()<\/code> and add to their block wrapper.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Version 1<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Initial version.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# API Versions\n\nThis document lists the changes made between the different API versions.\n\n## Version 3 (>= WordPress 6.3)\n- The post editor will be iframed if all registered blocks have a Block API version 3 or higher and the editor has no classic meta boxes below the blocks. Adding version 3 support means that the block should work inside an iframe, though the block may still be rendered outside the iframe if not all blocks support version 3.\n\n## Version 2 (>= WordPress 5.6)\n\n-   To render the block element wrapper for the block's `edit` implementation, the block author must use the `useBlockProps()` hook.\n-   The generated class names and styles are no longer added automatically to the saved markup for static blocks when `save` is processed. To include them, the block author must explicitly use `useBlockProps.save()` and add to their block wrapper.\n\n## Version 1\n\nInitial version.\n"
    },
    {
        "path": "\/markdown\/reference-guides\/block-api\/block-transforms.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Transforms<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Block Transforms is the API that allows a block to be transformed <em>from<\/em> and <em>to<\/em> other blocks, as well as <em>from<\/em> other entities. Existing entities that work with this API include shortcodes, files, regular expressions, and raw DOM nodes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Transform direction: <code>to<\/code> and <code>from<\/code><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block declares which transformations it supports via the optional <code>transforms<\/code> key of the block configuration, whose subkeys <code>to<\/code> and <code>from<\/code> hold an array of available transforms for every direction. Example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export const settings = {\n\ttitle: 'My Block Title',\n\tdescription: 'My block description',\n\t\/* ... *\/\n\ttransforms: {\n\t\tfrom: &#91;\n\t\t\t\/* supported from transforms *\/\n\t\t],\n\t\tto: &#91;\n\t\t\t\/* supported to transforms *\/\n\t\t],\n\t},\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Transformations types<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This section goes through the existing types of transformations blocks support:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>block<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>enter<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>files<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>prefix<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>raw<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>shortcode<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This type of transformations support both <em>from<\/em> and <em>to<\/em> directions, allowing blocks to be converted into a different one. It has a corresponding UI control within the block toolbar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A transformation of type <code>block<\/code> is an object that takes the following parameters:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>type<\/strong> <em>(string)<\/em>: the value <code>block<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>blocks<\/strong> <em>(array)<\/em>: a list of known block types. It also accepts the wildcard value (<code>\"*\"<\/code>), meaning that the transform is available to <em>all<\/em> block types (eg: all blocks can transform into <code>core\/group<\/code>).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>transform<\/strong> <em>(function)<\/em>: a callback that receives the attributes and inner blocks of the block being processed. It should return a block object or an array of block objects.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>isMatch<\/strong> <em>(function, optional)<\/em>: a callback that receives the block attributes as the first argument and the block object as the second argument and should return a boolean. Returning <code>false<\/code> from this function will prevent the transform from being available and displayed as an option to the user.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>isMultiBlock<\/strong> <em>(boolean, optional)<\/em>: whether the transformation can be applied when multiple blocks are selected. If true, the <code>transform<\/code> function's first parameter will be an array containing each selected block's attributes, and the second an array of each selected block's inner blocks. False by default.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>priority<\/strong> <em>(number, optional)<\/em>: controls the priority with which a transformation is applied, where a lower value will take precedence over higher values. This behaves much like a <a href=\"https:\/\/codex.wordpress.org\/Plugin_API#Hook_to_WordPress\">WordPress hook<\/a>. Like hooks, the default priority is <code>10<\/code> when not otherwise set.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Example: from Paragraph block to Heading block<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To declare this transformation we add the following code into the heading block configuration, which uses the <code>createBlock<\/code> function from the <a href=\"\/packages\/blocks\/README.md#createBlock\"><code>wp-blocks<\/code> package<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>transforms: {\n    from: &#91;\n        {\n            type: 'block',\n            blocks: &#91; 'core\/paragraph' ],\n            transform: ( { content } ) => {\n                return createBlock( 'core\/heading', {\n                    content,\n                } );\n            },\n        },\n    ]\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Example: blocks that have InnerBlocks<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A block with InnerBlocks can also be transformed from and to another block with InnerBlocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>transforms: {\n    to: &#91;\n        {\n            type: 'block',\n            blocks: &#91; 'some\/block-with-innerblocks' ],\n            transform: ( attributes, innerBlocks ) => {\n                return createBlock(\n                    'some\/other-block-with-innerblocks',\n                    attributes,\n                    innerBlocks\n                );\n            },\n        },\n    ],\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Enter<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This type of transformations support the <em>from<\/em> direction, allowing blocks to be created from some content introduced by the user. They're applied in a new block line after the user has introduced some content and hit the ENTER key.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A transformation of type <code>enter<\/code> is an object that takes the following parameters:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>type<\/strong> <em>(string)<\/em>: the value <code>enter<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>regExp<\/strong> <em>(RegExp)<\/em>: the Regular Expression to use as a matcher. If the value matches, the transformation will be applied.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>transform<\/strong> <em>(function)<\/em>: a callback that receives an object with a <code>content<\/code> field containing the value that has been entered. It should return a block object or an array of block objects.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>priority<\/strong> <em>(number, optional)<\/em>: controls the priority with which a transform is applied, where a lower value will take precedence over higher values. This behaves much like a <a href=\"https:\/\/codex.wordpress.org\/Plugin_API#Hook_to_WordPress\">WordPress hook<\/a>. Like hooks, the default priority is <code>10<\/code> when not otherwise set.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Example: from --- to Separator block<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To create a separator block when the user types the hyphen three times and then hits the ENTER key we can use the following code:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>transforms = {\n\tfrom: &#91;\n\t\t{\n\t\t\ttype: 'enter',\n\t\t\tregExp: \/^-{3,}$\/,\n\t\t\ttransform: () => createBlock( 'core\/separator' ),\n\t\t},\n\t],\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Files<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This type of transformations support the <em>from<\/em> direction, allowing blocks to be created from files dropped into the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A transformation of type <code>files<\/code> is an object that takes the following parameters:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>type<\/strong> <em>(string)<\/em>: the value <code>files<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>transform<\/strong> <em>(function)<\/em>: a callback that receives the array of files being processed. It should return a block object or an array of block objects.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>isMatch<\/strong> <em>(function, optional)<\/em>: a callback that receives the array of files being processed and should return a boolean. Returning <code>false<\/code> from this function will prevent the transform from being applied.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>priority<\/strong> <em>(number, optional)<\/em>: controls the priority with which a transform is applied, where a lower value will take precedence over higher values. This behaves much like a <a href=\"https:\/\/codex.wordpress.org\/Plugin_API#Hook_to_WordPress\">WordPress hook<\/a>. Like hooks, the default priority is <code>10<\/code> when not otherwise set.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Example: from file to File block<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To create a File block when the user drops a file into the editor we can use the following code:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>transforms: {\n\tfrom: &#91;\n\t\t{\n\t\t\ttype: 'files',\n\t\t\tisMatch: ( files ) => files.length === 1,\n\t\t\t\/\/ By defining a lower priority than the default of 10,\n\t\t\t\/\/ we make that the File block to be created as a fallback,\n\t\t\t\/\/ if no other transform is found.\n\t\t\tpriority: 15,\n\t\t\ttransform: ( files ) => {\n\t\t\t\tconst file = files&#91; 0 ];\n\t\t\t\tconst blobURL = createBlobURL( file );\n\t\t\t\t\/\/ File will be uploaded in componentDidMount()\n\t\t\t\treturn createBlock( 'core\/file', {\n\t\t\t\t\thref: blobURL,\n\t\t\t\t\tfileName: file.name,\n\t\t\t\t\ttextLinkHref: blobURL,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t];\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Prefix<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This type of transformations support the <em>from<\/em> direction, allowing blocks to be created from some text typed by the user. They're applied when, in a new block line, the user types some text and then adds a trailing space.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A transformation of type <code>prefix<\/code> is an object that takes the following parameters:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>type<\/strong> <em>(string)<\/em>: the value <code>prefix<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>prefix<\/strong> <em>(string)<\/em>: the character or sequence of characters that match this transform.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>transform<\/strong> <em>(function)<\/em>: a callback that receives the content introduced. It should return a block object or an array of block objects.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>priority<\/strong> <em>(number, optional)<\/em>: controls the priority with which a transform is applied, where a lower value will take precedence over higher values. This behaves much like a <a href=\"https:\/\/codex.wordpress.org\/Plugin_API#Hook_to_WordPress\">WordPress hook<\/a>. Like hooks, the default priority is <code>10<\/code> when not otherwise set.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Example: from text to custom block<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If we want to create a custom block when the user types the question mark, we could use this code:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>transforms: {\n\tfrom: &#91;\n\t\t{\n\t\t\ttype: 'prefix',\n\t\t\tprefix: '?',\n\t\t\ttransform( content ) {\n\t\t\t\treturn createBlock( 'my-plugin\/question', {\n\t\t\t\t\tcontent,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t];\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Raw<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This type of transformations support the <em>from<\/em> direction, allowing blocks to be created from raw HTML nodes. They're applied when the user executes the \"Convert to Blocks\" action from within the block setting UI menu, as well as when some content is pasted or dropped into the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A transformation of type <code>raw<\/code> is an object that takes the following parameters:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>type<\/strong> <em>(string)<\/em>: the value <code>raw<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>transform<\/strong> <em>(function, optional)<\/em>: a callback that receives the node being processed. It should return a block object or an array of block objects.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>schema<\/strong> <em>(object|function, optional)<\/em>: defines an <a href=\"https:\/\/html.spec.whatwg.org\/multipage\/dom.html#content-models\">HTML content model<\/a> used to detect and process pasted contents. See <a href=\"#schemas-and-content-models\">below<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>selector<\/strong> <em>(string, optional)<\/em>: a CSS selector string to determine whether the element matches according to the <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Element\/matches\">element.matches<\/a> method. The transform won't be executed if the element doesn't match. This is a shorthand and alternative to using <code>isMatch<\/code>, which, if present, will take precedence.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>isMatch<\/strong> <em>(function, optional)<\/em>: a callback that receives the node being processed and should return a boolean. Returning <code>false<\/code> from this function will prevent the transform from being applied.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>priority<\/strong> <em>(number, optional)<\/em>: controls the priority with which a transform is applied, where a lower value will take precedence over higher values. This behaves much like a <a href=\"https:\/\/codex.wordpress.org\/Plugin_API#Hook_to_WordPress\">WordPress hook<\/a>. Like hooks, the default priority is <code>10<\/code> when not otherwise set.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Example: from URLs to Embed block<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If we want to create an Embed block when the user pastes some URL in the editor, we could use this code:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>transforms: {\n    from: &#91;\n        {\n            type: 'raw',\n            isMatch: ( node ) =>\n                node.nodeName === 'P' &amp;&amp;\n                \/^\\s*(https?:\\\/\\\/\\S+)\\s*$\/i.test( node.textContent ),\n            transform: ( node ) => {\n                return createBlock( 'core\/embed', {\n                    url: node.textContent.trim(),\n                } );\n            },\n        },\n    ],\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:html -->\n<h4 id=\"schemas-and-content-models\">Schemas and Content Models<\/h4>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>When pasting content it's possible to define a <a href=\"https:\/\/html.spec.whatwg.org\/multipage\/dom.html#content-models\">content model<\/a> that will be used to validate and process pasted content. It's often the case that HTML pasted into the editor will contain a mixture of elements that <em>should<\/em> transfer as well as elements that <em>shouldn't<\/em>. For example, consider pasting <code>&lt;span class=\"time\">12:04 pm&lt;\/span><\/code> into the editor. We want to copy <code>12:04 pm<\/code> and omit the <code>&lt;span><\/code> and its <code>class<\/code> attribute because those won't carry the same meaning or structure as they originally did from where they were copied.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When writing <code>raw<\/code> transforms you can control this by supplying a <code>schema<\/code> which describes allowable content and which will be applied to clean up the pasted content before attempting to match with your block. The schemas are passed into <a href=\"https:\/\/github.com\/wordpress\/gutenberg\/blob\/trunk\/packages\/dom\/src\/dom\/clean-node-list.js\"><code>cleanNodeList<\/code> from <code>@wordpress\/dom<\/code><\/a>; check there for a <a href=\"https:\/\/github.com\/wordpress\/gutenberg\/blob\/trunk\/packages\/dom\/src\/phrasing-content.js\">complete description of the schema<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>schema = { span: { children: { '#text': {} } } };\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Example: a custom content model<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Suppose we want to match the following HTML snippet and turn it into some kind of custom post preview block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><div data-post-id=\"13\">\n\t<h2>The Post Title<\/h2>\n\t<p>Some <em>great<\/em> content.<\/p>\n<\/div>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>We want to tell the editor to allow the inner <code>h2<\/code> and <code>p<\/code> elements. We do this by supplying the following schema. In this example we're using the function form, which accepts an argument supplying <code>phrasingContentSchema<\/code> (as well as a boolean <code>isPaste<\/code> indicating if the transformation operation started with pasting text). The <code>phrasingContentSchema<\/code> is pre-defined to match HTML phrasing elements, such as <code>&lt;strong><\/code> and <code>&lt;sup><\/code> and <code>&lt;kbd><\/code>. Anywhere we expect<br>a <code>&lt;RichText \/><\/code> component is a good place to allow phrasing content otherwise we'll lose all text formatting on conversion.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>schema = ({ phrasingContentSchema }) => {\n    div: {\n        required: true,\n        attributes: &#91; 'data-post-id' ],\n        children: {\n            h2: { children: phrasingContentSchema },\n            p: { children: phrasingContentSchema }\n        }\n    }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When we successfully match this content every HTML attribute will be stripped away except for <code>data-post-id<\/code> and if we have other arrangements of HTML inside of a given <code>div<\/code> then it won't match our transformer. Likewise we'd fail to match if we found an <code>&lt;h3><\/code> in there instead of an <code>&lt;h2><\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Schemas are most-important when wanting to match HTML snippets containing non-phrasing content, such as <code>&lt;details><\/code> with a <code>&lt;summary><\/code>. Without declaring the custom schema the editor will skip over these other constructions before attempting to run them through any block transforms.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Shortcode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This type of transformations support the <em>from<\/em> direction, allowing blocks to be created from shortcodes. It's applied as part of the <code>raw<\/code> transformation process.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A transformation of type <code>shortcode<\/code> is an object that takes the following parameters:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>type<\/strong> <em>(string)<\/em>: the value <code>shortcode<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>tag<\/strong> <em>(string|array)<\/em>: the shortcode tag or list of shortcode aliases this transform can work with.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>transform<\/strong> <em>(function, optional)<\/em>: a callback that receives the shortcode attributes as the first argument and the <a href=\"\/packages\/shortcode\/README.md#next\">WPShortcodeMatch<\/a> as the second. It should return a block object or an array of block objects. When this parameter is defined, it will take precedence over the <code>attributes<\/code> parameter.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>attributes<\/strong> <em>(object, optional)<\/em>: object representing where the block attributes should be sourced from, according to the attributes shape defined by the <a href=\".\/block-registration.md\">block configuration object<\/a>. If a particular attribute contains a <code>shortcode<\/code> key, it should be a function that receives the shortcode attributes as the first arguments and the <a href=\"\/packages\/shortcode\/README.md#next\">WPShortcodeMatch<\/a> as second, and returns a value for the attribute that will be sourced in the block's comment.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>isMatch<\/strong> <em>(function, optional)<\/em>: a callback that receives the shortcode attributes per the <a href=\"https:\/\/codex.wordpress.org\/Shortcode_API\">Shortcode API<\/a> and should return a boolean. Returning <code>false<\/code> from this function will prevent the shortcode to be transformed into this block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>priority<\/strong> <em>(number, optional)<\/em>: controls the priority with which a transform is applied, where a lower value will take precedence over higher values. This behaves much like a <a href=\"https:\/\/codex.wordpress.org\/Plugin_API#Hook_to_WordPress\">WordPress hook<\/a>. Like hooks, the default priority is <code>10<\/code> when not otherwise set.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Example: from shortcode to block using <code>transform<\/code><\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>An existing shortcode can be transformed into its block counterpart using the <code>transform<\/code> method.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>transforms: {\n    from: &#91;\n        {\n            type: 'shortcode',\n            tag: 'video',\n            transform( { named: { src } } ) {\n                return createBlock( 'core\/video', { src } );\n            },\n            \/\/ Prevent the shortcode to be converted\n            \/\/ into this block when it doesn't\n            \/\/ have the proper ID.\n            isMatch( { named: { id } } ) {\n                return id === 'my-id';\n            },\n        },\n    ],\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Example: from shortcode to block using <code>attributes<\/code><\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>An existing shortcode can be transformed into its block counterpart using the <code>attributes<\/code> parameters.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>transforms: {\n    from: &#91;\n        {\n            type: 'shortcode',\n            tag: 'youtube',\n            attributes: {\n                url: {\n                    type: 'string',\n                    source: 'attribute',\n                    attribute: 'src',\n                    selector: 'img',\n                },\n                align: {\n                    type: 'string',\n                    \/\/ The shortcode function will extract\n                    \/\/ the shortcode atts into a value\n                    \/\/ to be sourced in the block's comment.\n                    shortcode: ( { named: { align = 'alignnone' } } ) => {\n                        return align.replace( 'align', '' );\n                    },\n                },\n            },\n            \/\/ Prevent the shortcode to be converted\n            \/\/ into this block when it doesn't\n            \/\/ have the proper ID.\n            isMatch( { named: { id } } ) {\n                return id === 'my-id';\n            },\n        },\n    ]\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><code>ungroup<\/code> blocks<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Via the optional <code>transforms<\/code> key of the block configuration, blocks can use the <code>ungroup<\/code> subkey to define the blocks that will replace the block being processed. These new blocks will usually be a subset of the existing inner blocks, but could also include new blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If a block has an <code>ungroup<\/code> transform, it is eligible for ungrouping, without the requirement of being the default grouping block. The UI used to ungroup a block with this API is the same as the one used for the default grouping block. In order for the Ungroup button to be displayed, we must have a single grouping block selected, which also contains some inner blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>ungroup<\/strong> is a callback function that receives the attributes and inner blocks of the block being processed. It should return an array of block objects.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export const settings = {\n\ttitle: 'My grouping Block Title',\n\tdescription: 'My grouping block description',\n\t\/* ... *\/\n\ttransforms: {\n\t\tungroup: ( attributes, innerBlocks ) =>\n\t\t\tinnerBlocks.flatMap( ( innerBlock ) => innerBlock.innerBlocks ),\n\t},\n};\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# Transforms\n\nBlock Transforms is the API that allows a block to be transformed _from_ and _to_ other blocks, as well as _from_ other entities. Existing entities that work with this API include shortcodes, files, regular expressions, and raw DOM nodes.\n\n## Transform direction: `to` and `from`\n\nA block declares which transformations it supports via the optional `transforms` key of the block configuration, whose subkeys `to` and `from` hold an array of available transforms for every direction. Example:\n\n```js\nexport const settings = {\n\ttitle: 'My Block Title',\n\tdescription: 'My block description',\n\t\/* ... *\/\n\ttransforms: {\n\t\tfrom: [\n\t\t\t\/* supported from transforms *\/\n\t\t],\n\t\tto: [\n\t\t\t\/* supported to transforms *\/\n\t\t],\n\t},\n};\n```\n\n## Transformations types\n\nThis section goes through the existing types of transformations blocks support:\n\n-   block\n-   enter\n-   files\n-   prefix\n-   raw\n-   shortcode\n\n### Block\n\nThis type of transformations support both _from_ and _to_ directions, allowing blocks to be converted into a different one. It has a corresponding UI control within the block toolbar.\n\nA transformation of type `block` is an object that takes the following parameters:\n\n-   **type** _(string)_: the value `block`.\n-   **blocks** _(array)_: a list of known block types. It also accepts the wildcard value (`\"*\"`), meaning that the transform is available to _all_ block types (eg: all blocks can transform into `core\/group`).\n-   **transform** _(function)_: a callback that receives the attributes and inner blocks of the block being processed. It should return a block object or an array of block objects.\n-   **isMatch** _(function, optional)_: a callback that receives the block attributes as the first argument and the block object as the second argument and should return a boolean. Returning `false` from this function will prevent the transform from being available and displayed as an option to the user.\n-   **isMultiBlock** _(boolean, optional)_: whether the transformation can be applied when multiple blocks are selected. If true, the `transform` function's first parameter will be an array containing each selected block's attributes, and the second an array of each selected block's inner blocks. False by default.\n-   **priority** _(number, optional)_: controls the priority with which a transformation is applied, where a lower value will take precedence over higher values. This behaves much like a [WordPress hook](https:\/\/codex.wordpress.org\/Plugin_API#Hook_to_WordPress). Like hooks, the default priority is `10` when not otherwise set.\n\n**Example: from Paragraph block to Heading block**\n\nTo declare this transformation we add the following code into the heading block configuration, which uses the `createBlock` function from the [`wp-blocks` package](\/packages\/blocks\/README.md#createBlock).\n\n```js\ntransforms: {\n    from: [\n        {\n            type: 'block',\n            blocks: [ 'core\/paragraph' ],\n            transform: ( { content } ) => {\n                return createBlock( 'core\/heading', {\n                    content,\n                } );\n            },\n        },\n    ]\n},\n```\n\n**Example: blocks that have InnerBlocks**\n\nA block with InnerBlocks can also be transformed from and to another block with InnerBlocks.\n\n```js\ntransforms: {\n    to: [\n        {\n            type: 'block',\n            blocks: [ 'some\/block-with-innerblocks' ],\n            transform: ( attributes, innerBlocks ) => {\n                return createBlock(\n                    'some\/other-block-with-innerblocks',\n                    attributes,\n                    innerBlocks\n                );\n            },\n        },\n    ],\n},\n```\n\n### Enter\n\nThis type of transformations support the _from_ direction, allowing blocks to be created from some content introduced by the user. They're applied in a new block line after the user has introduced some content and hit the ENTER key.\n\nA transformation of type `enter` is an object that takes the following parameters:\n\n-   **type** _(string)_: the value `enter`.\n-   **regExp** _(RegExp)_: the Regular Expression to use as a matcher. If the value matches, the transformation will be applied.\n-   **transform** _(function)_: a callback that receives an object with a `content` field containing the value that has been entered. It should return a block object or an array of block objects.\n-   **priority** _(number, optional)_: controls the priority with which a transform is applied, where a lower value will take precedence over higher values. This behaves much like a [WordPress hook](https:\/\/codex.wordpress.org\/Plugin_API#Hook_to_WordPress). Like hooks, the default priority is `10` when not otherwise set.\n\n**Example: from --- to Separator block**\n\nTo create a separator block when the user types the hyphen three times and then hits the ENTER key we can use the following code:\n\n```js\ntransforms = {\n\tfrom: [\n\t\t{\n\t\t\ttype: 'enter',\n\t\t\tregExp: \/^-{3,}$\/,\n\t\t\ttransform: () => createBlock( 'core\/separator' ),\n\t\t},\n\t],\n};\n```\n\n### Files\n\nThis type of transformations support the _from_ direction, allowing blocks to be created from files dropped into the editor.\n\nA transformation of type `files` is an object that takes the following parameters:\n\n-   **type** _(string)_: the value `files`.\n-   **transform** _(function)_: a callback that receives the array of files being processed. It should return a block object or an array of block objects.\n-   **isMatch** _(function, optional)_: a callback that receives the array of files being processed and should return a boolean. Returning `false` from this function will prevent the transform from being applied.\n-   **priority** _(number, optional)_: controls the priority with which a transform is applied, where a lower value will take precedence over higher values. This behaves much like a [WordPress hook](https:\/\/codex.wordpress.org\/Plugin_API#Hook_to_WordPress). Like hooks, the default priority is `10` when not otherwise set.\n\n**Example: from file to File block**\n\nTo create a File block when the user drops a file into the editor we can use the following code:\n\n```js\ntransforms: {\n\tfrom: [\n\t\t{\n\t\t\ttype: 'files',\n\t\t\tisMatch: ( files ) => files.length === 1,\n\t\t\t\/\/ By defining a lower priority than the default of 10,\n\t\t\t\/\/ we make that the File block to be created as a fallback,\n\t\t\t\/\/ if no other transform is found.\n\t\t\tpriority: 15,\n\t\t\ttransform: ( files ) => {\n\t\t\t\tconst file = files[ 0 ];\n\t\t\t\tconst blobURL = createBlobURL( file );\n\t\t\t\t\/\/ File will be uploaded in componentDidMount()\n\t\t\t\treturn createBlock( 'core\/file', {\n\t\t\t\t\thref: blobURL,\n\t\t\t\t\tfileName: file.name,\n\t\t\t\t\ttextLinkHref: blobURL,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t];\n}\n```\n\n### Prefix\n\nThis type of transformations support the _from_ direction, allowing blocks to be created from some text typed by the user. They're applied when, in a new block line, the user types some text and then adds a trailing space.\n\nA transformation of type `prefix` is an object that takes the following parameters:\n\n-   **type** _(string)_: the value `prefix`.\n-   **prefix** _(string)_: the character or sequence of characters that match this transform.\n-   **transform** _(function)_: a callback that receives the content introduced. It should return a block object or an array of block objects.\n-   **priority** _(number, optional)_: controls the priority with which a transform is applied, where a lower value will take precedence over higher values. This behaves much like a [WordPress hook](https:\/\/codex.wordpress.org\/Plugin_API#Hook_to_WordPress). Like hooks, the default priority is `10` when not otherwise set.\n\n**Example: from text to custom block**\n\nIf we want to create a custom block when the user types the question mark, we could use this code:\n\n```js\ntransforms: {\n\tfrom: [\n\t\t{\n\t\t\ttype: 'prefix',\n\t\t\tprefix: '?',\n\t\t\ttransform( content ) {\n\t\t\t\treturn createBlock( 'my-plugin\/question', {\n\t\t\t\t\tcontent,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t];\n}\n```\n\n### Raw\n\nThis type of transformations support the _from_ direction, allowing blocks to be created from raw HTML nodes. They're applied when the user executes the \"Convert to Blocks\" action from within the block setting UI menu, as well as when some content is pasted or dropped into the editor.\n\nA transformation of type `raw` is an object that takes the following parameters:\n\n-   **type** _(string)_: the value `raw`.\n-   **transform** _(function, optional)_: a callback that receives the node being processed. It should return a block object or an array of block objects.\n-   **schema** _(object|function, optional)_: defines an [HTML content model](https:\/\/html.spec.whatwg.org\/multipage\/dom.html#content-models) used to detect and process pasted contents. See [below](#schemas-and-content-models).\n-   **selector** _(string, optional)_: a CSS selector string to determine whether the element matches according to the [element.matches](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Element\/matches) method. The transform won't be executed if the element doesn't match. This is a shorthand and alternative to using `isMatch`, which, if present, will take precedence.\n-   **isMatch** _(function, optional)_: a callback that receives the node being processed and should return a boolean. Returning `false` from this function will prevent the transform from being applied.\n-   **priority** _(number, optional)_: controls the priority with which a transform is applied, where a lower value will take precedence over higher values. This behaves much like a [WordPress hook](https:\/\/codex.wordpress.org\/Plugin_API#Hook_to_WordPress). Like hooks, the default priority is `10` when not otherwise set.\n\n**Example: from URLs to Embed block**\n\nIf we want to create an Embed block when the user pastes some URL in the editor, we could use this code:\n\n```js\ntransforms: {\n    from: [\n        {\n            type: 'raw',\n            isMatch: ( node ) =>\n                node.nodeName === 'P' &&\n                \/^\\s*(https?:\\\/\\\/\\S+)\\s*$\/i.test( node.textContent ),\n            transform: ( node ) => {\n                return createBlock( 'core\/embed', {\n                    url: node.textContent.trim(),\n                } );\n            },\n        },\n    ],\n}\n```\n\n<h4 id=\"schemas-and-content-models\">Schemas and Content Models<\/h4>\n\nWhen pasting content it's possible to define a [content model](https:\/\/html.spec.whatwg.org\/multipage\/dom.html#content-models) that will be used to validate and process pasted content. It's often the case that HTML pasted into the editor will contain a mixture of elements that _should_ transfer as well as elements that _shouldn't_. For example, consider pasting `<span class=\"time\">12:04 pm<\/span>` into the editor. We want to copy `12:04 pm` and omit the `<span>` and its `class` attribute because those won't carry the same meaning or structure as they originally did from where they were copied.\n\nWhen writing `raw` transforms you can control this by supplying a `schema` which describes allowable content and which will be applied to clean up the pasted content before attempting to match with your block. The schemas are passed into [`cleanNodeList` from `@wordpress\/dom`](https:\/\/github.com\/wordpress\/gutenberg\/blob\/trunk\/packages\/dom\/src\/dom\/clean-node-list.js); check there for a [complete description of the schema](https:\/\/github.com\/wordpress\/gutenberg\/blob\/trunk\/packages\/dom\/src\/phrasing-content.js).\n\n```js\nschema = { span: { children: { '#text': {} } } };\n```\n\n**Example: a custom content model**\n\nSuppose we want to match the following HTML snippet and turn it into some kind of custom post preview block.\n\n```html\n<div data-post-id=\"13\">\n\t<h2>The Post Title<\/h2>\n\t<p>Some <em>great<\/em> content.<\/p>\n<\/div>\n```\n\nWe want to tell the editor to allow the inner `h2` and `p` elements. We do this by supplying the following schema. In this example we're using the function form, which accepts an argument supplying `phrasingContentSchema` (as well as a boolean `isPaste` indicating if the transformation operation started with pasting text). The `phrasingContentSchema` is pre-defined to match HTML phrasing elements, such as `<strong>` and `<sup>` and `<kbd>`. Anywhere we expect\na `<RichText \/>` component is a good place to allow phrasing content otherwise we'll lose all text formatting on conversion.\n\n```js\nschema = ({ phrasingContentSchema }) => {\n    div: {\n        required: true,\n        attributes: [ 'data-post-id' ],\n        children: {\n            h2: { children: phrasingContentSchema },\n            p: { children: phrasingContentSchema }\n        }\n    }\n}\n```\n\nWhen we successfully match this content every HTML attribute will be stripped away except for `data-post-id` and if we have other arrangements of HTML inside of a given `div` then it won't match our transformer. Likewise we'd fail to match if we found an `<h3>` in there instead of an `<h2>`.\n\nSchemas are most-important when wanting to match HTML snippets containing non-phrasing content, such as `<details>` with a `<summary>`. Without declaring the custom schema the editor will skip over these other constructions before attempting to run them through any block transforms.\n\n### Shortcode\n\nThis type of transformations support the _from_ direction, allowing blocks to be created from shortcodes. It's applied as part of the `raw` transformation process.\n\nA transformation of type `shortcode` is an object that takes the following parameters:\n\n-   **type** _(string)_: the value `shortcode`.\n-   **tag** _(string|array)_: the shortcode tag or list of shortcode aliases this transform can work with.\n-   **transform** _(function, optional)_: a callback that receives the shortcode attributes as the first argument and the [WPShortcodeMatch](\/packages\/shortcode\/README.md#next) as the second. It should return a block object or an array of block objects. When this parameter is defined, it will take precedence over the `attributes` parameter.\n-   **attributes** _(object, optional)_: object representing where the block attributes should be sourced from, according to the attributes shape defined by the [block configuration object](.\/block-registration.md). If a particular attribute contains a `shortcode` key, it should be a function that receives the shortcode attributes as the first arguments and the [WPShortcodeMatch](\/packages\/shortcode\/README.md#next) as second, and returns a value for the attribute that will be sourced in the block's comment.\n-   **isMatch** _(function, optional)_: a callback that receives the shortcode attributes per the [Shortcode API](https:\/\/codex.wordpress.org\/Shortcode_API) and should return a boolean. Returning `false` from this function will prevent the shortcode to be transformed into this block.\n-   **priority** _(number, optional)_: controls the priority with which a transform is applied, where a lower value will take precedence over higher values. This behaves much like a [WordPress hook](https:\/\/codex.wordpress.org\/Plugin_API#Hook_to_WordPress). Like hooks, the default priority is `10` when not otherwise set.\n\n**Example: from shortcode to block using `transform`**\n\nAn existing shortcode can be transformed into its block counterpart using the `transform` method.\n\n```js\ntransforms: {\n    from: [\n        {\n            type: 'shortcode',\n            tag: 'video',\n            transform( { named: { src } } ) {\n                return createBlock( 'core\/video', { src } );\n            },\n            \/\/ Prevent the shortcode to be converted\n            \/\/ into this block when it doesn't\n            \/\/ have the proper ID.\n            isMatch( { named: { id } } ) {\n                return id === 'my-id';\n            },\n        },\n    ],\n},\n```\n\n**Example: from shortcode to block using `attributes`**\n\nAn existing shortcode can be transformed into its block counterpart using the `attributes` parameters.\n\n```js\ntransforms: {\n    from: [\n        {\n            type: 'shortcode',\n            tag: 'youtube',\n            attributes: {\n                url: {\n                    type: 'string',\n                    source: 'attribute',\n                    attribute: 'src',\n                    selector: 'img',\n                },\n                align: {\n                    type: 'string',\n                    \/\/ The shortcode function will extract\n                    \/\/ the shortcode atts into a value\n                    \/\/ to be sourced in the block's comment.\n                    shortcode: ( { named: { align = 'alignnone' } } ) => {\n                        return align.replace( 'align', '' );\n                    },\n                },\n            },\n            \/\/ Prevent the shortcode to be converted\n            \/\/ into this block when it doesn't\n            \/\/ have the proper ID.\n            isMatch( { named: { id } } ) {\n                return id === 'my-id';\n            },\n        },\n    ]\n},\n```\n\n## `ungroup` blocks\n\nVia the optional `transforms` key of the block configuration, blocks can use the `ungroup` subkey to define the blocks that will replace the block being processed. These new blocks will usually be a subset of the existing inner blocks, but could also include new blocks.\n\nIf a block has an `ungroup` transform, it is eligible for ungrouping, without the requirement of being the default grouping block. The UI used to ungroup a block with this API is the same as the one used for the default grouping block. In order for the Ungroup button to be displayed, we must have a single grouping block selected, which also contains some inner blocks.\n\n**ungroup** is a callback function that receives the attributes and inner blocks of the block being processed. It should return an array of block objects.\n\nExample:\n\n```js\nexport const settings = {\n\ttitle: 'My grouping Block Title',\n\tdescription: 'My grouping block description',\n\t\/* ... *\/\n\ttransforms: {\n\t\tungroup: ( attributes, innerBlocks ) =>\n\t\t\tinnerBlocks.flatMap( ( innerBlock ) => innerBlock.innerBlocks ),\n\t},\n};\n```\n"
    },
    {
        "path": "\/markdown\/reference-guides\/block-api\/block-deprecation.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Deprecation<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>This page provides a comprehensive guide to the principles and usage of the Deprecation API. For an introduction check out the <a href=\"https:\/\/developer.wordpress.org\/news\/2023\/03\/block-deprecation-a-tutorial\/\">tutorial on the basics of block deprecation<\/a> which can be found on the <a href=\"https:\/\/developer.wordpress.org\/news\/\">Developer Blog<\/a>.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>When updating static blocks markup and attributes, block authors need to consider existing posts using the old versions of their block. To provide a good upgrade path, you can choose one of the following strategies:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Do not deprecate the block and create a new one (a different name)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Provide a \"deprecated\" version of the block allowing users opening these in the block editor to edit them using the updated block.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>A block can have several deprecated versions. A deprecation will be tried if the current state of a parsed block is invalid, or if the deprecation defines an <code>isEligible<\/code> function that returns true.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Deprecations do not operate as a chain of updates in the way other software data updates, like database migrations, do. At first glance, it is easy to think that each deprecation is going to make the required changes to the data and then hand this new form of the block onto the next deprecation to make its changes. What happens instead is:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>If the current <code>save<\/code> method does not produce a valid block the first deprecation in the deprecations array is passed the original saved content.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If its <code>save<\/code> method produces valid content this deprecation is used to parse the block attributes. If it has a <code>migrate<\/code> method it will also be run using the attributes parsed by the deprecation.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If the first deprecation's <code>save<\/code> method does not produce a valid block the subsequent deprecations in the array are tried until one producing a valid block is encountered.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The attributes, and any innerBlocks, from the first deprecation to generate a valid block are then passed back to the current <code>save<\/code> method to generate new valid content for the block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>At this point the current block should now be in a valid state and the deprecations workflow stops.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>It is important to note that if a deprecation's <code>save<\/code> method does not produce a valid block then it is skipped completely, including its <code>migrate<\/code> method, even if <code>isEligible<\/code> would return true for the given attributes. This means that if you have several deprecations for a block and want to perform a new migration, like moving content to <code>InnerBlocks<\/code>, you may need to update the <code>migrate<\/code> methods in multiple deprecations in order for the required changes to be applied to all previous versions of the block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It is also important to note that if a deprecation's <code>save<\/code> method imports additional functions from other files, changes to those files may accidentally change the behavior of the deprecation. You may want to add a snapshot copy of these functions to the deprecations file instead of importing them in order to avoid inadvertently breaking the deprecations.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For blocks with multiple deprecations, it may be easier to save each deprecation to a constant with the version of the block it applies to, and then add each of these to the block's <code>deprecated<\/code> array. The deprecations in the array should be in reverse chronological order. This allows the block editor to attempt to apply the most recent and likely deprecations first, avoiding unnecessary and expensive processing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Example:<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const v1 = {};\nconst v2 = {};\nconst v3 = {};\nconst deprecated = &#91; v3, v2, v1 ];\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>It is also recommended to keep <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/test\/integration\/fixtures\/blocks\/README.md\">fixtures<\/a> which contain the different versions of the block content to allow you to easily test that new deprecations and migrations are working across all previous versions of the block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Deprecations are defined on a block type as its <code>deprecated<\/code> property, an array of deprecation objects where each object takes the form:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>attributes<\/code> (Object): The <a href=\"\/docs\/reference-guides\/block-api\/block-attributes.md\">attributes definition<\/a> of the deprecated form of the block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>supports<\/code> (Object): The <a href=\"\/docs\/reference-guides\/block-api\/block-registration.md\">supports definition<\/a> of the deprecated form of the block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>save<\/code> (Function): The <a href=\"\/docs\/reference-guides\/block-api\/block-edit-save.md\">save implementation<\/a> of the deprecated form of the block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>migrate<\/code>: (Function, Optional). A function which, given the old attributes and inner blocks is expected to return either the new attributes or a tuple array of attributes and inner blocks compatible with the block. As mentioned above, a deprecation's <code>migrate<\/code> will not be run if its <code>save<\/code> function does not return a valid block so you will need to make sure your migrations are available in all the deprecations where they are relevant.<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>Parameters<\/em><!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>attributes<\/code>: The block's old attributes.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>innerBlocks<\/code>: The block's old inner blocks.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>Return<\/em><!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object | Array<\/code>: Either the updated block attributes or tuple array <code>[attributes, innerBlocks]<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>isEligible<\/code>: (Function, Optional). A function which returns <code>true<\/code> if the deprecation can handle the block migration even if the block is valid. It is particularly useful in cases where a block is technically valid even once deprecated, but still requires updates to its attributes or inner blocks. This function is <strong>not<\/strong> called when the results of all previous deprecations' save functions were invalid.<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>Parameters<\/em><!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>attributes<\/code>: The raw block attributes as parsed from the serialized HTML, and before the block type code is applied.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>innerBlocks<\/code>: The block's current inner blocks.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>data<\/code>: An object containing properties representing the block node and its resulting block object.<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>data.blockNode<\/code>: The raw form of the block as a result of parsing the serialized HTML.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>data.block<\/code>: The block object, which is the result of applying the block type to the <code>blockNode<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>Return<\/em><!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether or not this otherwise valid block is eligible to be migrated by this deprecation.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<div class=\"callout callout-alert\">\nIt's important to note that <code>attributes<\/code>, <code>supports<\/code>, and <code>save<\/code> are not automatically inherited from the current version, since they can impact parsing and serialization of a block, so they must be defined on the deprecated object in order to be processed during a migration.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Example:<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const { registerBlockType } = wp.blocks;\nconst attributes = {\n\ttext: {\n\t\ttype: 'string',\n\t\tdefault: 'some random value',\n\t},\n};\nconst supports = {\n\tclassName: false,\n};\n\nregisterBlockType( 'gutenberg\/block-with-deprecated-version', {\n\t\/\/ ... other block properties go here\n\n\tattributes,\n\n\tsupports,\n\n\tsave( props ) {\n\t\treturn <div>{ props.attributes.text }<\/div>;\n\t},\n\n\tdeprecated: &#91;\n\t\t{\n\t\t\tattributes,\n\n\t\t\tsupports,\n\n\t\t\tsave( props ) {\n\t\t\t\treturn <p>{ props.attributes.text }<\/p>;\n\t\t\t},\n\t\t},\n\t],\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the example above we updated the markup of the block to use a <code>div<\/code> instead of <code>p<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Changing the attributes set<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Sometimes, you need to update the attributes set to rename or modify old attributes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Example:<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const { registerBlockType } = wp.blocks;\n\nregisterBlockType( 'gutenberg\/block-with-deprecated-version', {\n\t\/\/ ... other block properties go here\n\n\tattributes: {\n\t\tcontent: {\n\t\t\ttype: 'string',\n\t\t\tdefault: 'some random value',\n\t\t},\n\t},\n\n\tsave( props ) {\n\t\treturn <div>{ props.attributes.content }<\/div>;\n\t},\n\n\tdeprecated: &#91;\n\t\t{\n\t\t\tattributes: {\n\t\t\t\ttext: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: 'some random value',\n\t\t\t\t},\n\t\t\t},\n\n\t\t\tmigrate( { text } ) {\n\t\t\t\treturn {\n\t\t\t\t\tcontent: text,\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tsave( props ) {\n\t\t\t\treturn <p>{ props.attributes.text }<\/p>;\n\t\t\t},\n\t\t},\n\t],\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the example above we updated the markup of the block to use a <code>div<\/code> instead of <code>p<\/code> and rename the <code>text<\/code> attribute to <code>content<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Changing the innerBlocks<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Situations may exist where when migrating the block we may need to add or remove innerBlocks.<br>E.g: a block wants to migrate a title attribute to a paragraph innerBlock.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Example:<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const { registerBlockType } = wp.blocks;\n\nregisterBlockType( 'gutenberg\/block-with-deprecated-version', {\n\t\/\/ ... block properties go here\n\n\tsave( props ) {\n\t\treturn <p>{ props.attributes.title }<\/p>;\n\t},\n\n\tdeprecated: &#91;\n\t\t{\n\t\t\tattributes: {\n\t\t\t\ttitle: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tsource: 'html',\n\t\t\t\t\tselector: 'p',\n\t\t\t\t},\n\t\t\t},\n\n\t\t\tmigrate( attributes, innerBlocks ) {\n\t\t\t\tconst { title, ...restAttributes } = attributes;\n\n\t\t\t\treturn &#91;\n\t\t\t\t\trestAttributes,\n\t\t\t\t\t&#91;\n\t\t\t\t\t\tcreateBlock( 'core\/paragraph', {\n\t\t\t\t\t\t\tcontent: attributes.title,\n\t\t\t\t\t\t\tfontSize: 'large',\n\t\t\t\t\t\t} ),\n\t\t\t\t\t\t...innerBlocks,\n\t\t\t\t\t],\n\t\t\t\t];\n\t\t\t},\n\n\t\t\tsave( props ) {\n\t\t\t\treturn <p>{ props.attributes.title }<\/p>;\n\t\t\t},\n\t\t},\n\t],\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the example above we updated the block to use an inner Paragraph block with a title instead of a title attribute.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Above are example cases of block deprecation. For more, real-world examples, check for deprecations in the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/block-library\/src\">core block library<\/a>. Core blocks have been updated across releases and contain simple and complex deprecations.<\/em><\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Deprecation\n\n> This page provides a comprehensive guide to the principles and usage of the Deprecation API. For an introduction check out the [tutorial on the basics of block deprecation](https:\/\/developer.wordpress.org\/news\/2023\/03\/block-deprecation-a-tutorial\/) which can be found on the [Developer Blog](https:\/\/developer.wordpress.org\/news\/).\n\nWhen updating static blocks markup and attributes, block authors need to consider existing posts using the old versions of their block. To provide a good upgrade path, you can choose one of the following strategies:\n\n-   Do not deprecate the block and create a new one (a different name)\n-   Provide a \"deprecated\" version of the block allowing users opening these in the block editor to edit them using the updated block.\n\nA block can have several deprecated versions. A deprecation will be tried if the current state of a parsed block is invalid, or if the deprecation defines an `isEligible` function that returns true.\n\nDeprecations do not operate as a chain of updates in the way other software data updates, like database migrations, do. At first glance, it is easy to think that each deprecation is going to make the required changes to the data and then hand this new form of the block onto the next deprecation to make its changes. What happens instead is:\n\n1. If the current `save` method does not produce a valid block the first deprecation in the deprecations array is passed the original saved content.\n2. If its `save` method produces valid content this deprecation is used to parse the block attributes. If it has a `migrate` method it will also be run using the attributes parsed by the deprecation.\n3. If the first deprecation's `save` method does not produce a valid block the subsequent deprecations in the array are tried until one producing a valid block is encountered.\n4. The attributes, and any innerBlocks, from the first deprecation to generate a valid block are then passed back to the current `save` method to generate new valid content for the block.\n5. At this point the current block should now be in a valid state and the deprecations workflow stops.\n\nIt is important to note that if a deprecation's `save` method does not produce a valid block then it is skipped completely, including its `migrate` method, even if `isEligible` would return true for the given attributes. This means that if you have several deprecations for a block and want to perform a new migration, like moving content to `InnerBlocks`, you may need to update the `migrate` methods in multiple deprecations in order for the required changes to be applied to all previous versions of the block.\n\nIt is also important to note that if a deprecation's `save` method imports additional functions from other files, changes to those files may accidentally change the behavior of the deprecation. You may want to add a snapshot copy of these functions to the deprecations file instead of importing them in order to avoid inadvertently breaking the deprecations.\n\nFor blocks with multiple deprecations, it may be easier to save each deprecation to a constant with the version of the block it applies to, and then add each of these to the block's `deprecated` array. The deprecations in the array should be in reverse chronological order. This allows the block editor to attempt to apply the most recent and likely deprecations first, avoiding unnecessary and expensive processing.\n\n### Example:\n\n```js\nconst v1 = {};\nconst v2 = {};\nconst v3 = {};\nconst deprecated = [ v3, v2, v1 ];\n```\n\nIt is also recommended to keep [fixtures](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/test\/integration\/fixtures\/blocks\/README.md) which contain the different versions of the block content to allow you to easily test that new deprecations and migrations are working across all previous versions of the block.\n\nDeprecations are defined on a block type as its `deprecated` property, an array of deprecation objects where each object takes the form:\n\n-   `attributes` (Object): The [attributes definition](\/docs\/reference-guides\/block-api\/block-attributes.md) of the deprecated form of the block.\n-   `supports` (Object): The [supports definition](\/docs\/reference-guides\/block-api\/block-registration.md) of the deprecated form of the block.\n-   `save` (Function): The [save implementation](\/docs\/reference-guides\/block-api\/block-edit-save.md) of the deprecated form of the block.\n-   `migrate`: (Function, Optional). A function which, given the old attributes and inner blocks is expected to return either the new attributes or a tuple array of attributes and inner blocks compatible with the block. As mentioned above, a deprecation's `migrate` will not be run if its `save` function does not return a valid block so you will need to make sure your migrations are available in all the deprecations where they are relevant.\n\t- _Parameters_\n\t\t- `attributes`: The block's old attributes.\n\t\t- `innerBlocks`: The block's old inner blocks.\n\t- _Return_\n\t\t- `Object | Array`: Either the updated block attributes or tuple array `[attributes, innerBlocks]`.\n-   `isEligible`: (Function, Optional). A function which returns `true` if the deprecation can handle the block migration even if the block is valid. It is particularly useful in cases where a block is technically valid even once deprecated, but still requires updates to its attributes or inner blocks. This function is **not** called when the results of all previous deprecations' save functions were invalid.\n\t- _Parameters_\n\t\t- `attributes`: The raw block attributes as parsed from the serialized HTML, and before the block type code is applied.\n\t\t- `innerBlocks`: The block's current inner blocks.\n\t\t- `data`: An object containing properties representing the block node and its resulting block object.\n\t\t\t- `data.blockNode`: The raw form of the block as a result of parsing the serialized HTML.\n\t\t\t- `data.block`: The block object, which is the result of applying the block type to the `blockNode`.\n\t- _Return_\n\t\t- `boolean`: Whether or not this otherwise valid block is eligible to be migrated by this deprecation.\n\n<div class=\"callout callout-alert\">\nIt's important to note that <code>attributes<\/code>, <code>supports<\/code>, and <code>save<\/code> are not automatically inherited from the current version, since they can impact parsing and serialization of a block, so they must be defined on the deprecated object in order to be processed during a migration.\n<\/div>\n\n### Example:\n\n```js\nconst { registerBlockType } = wp.blocks;\nconst attributes = {\n\ttext: {\n\t\ttype: 'string',\n\t\tdefault: 'some random value',\n\t},\n};\nconst supports = {\n\tclassName: false,\n};\n\nregisterBlockType( 'gutenberg\/block-with-deprecated-version', {\n\t\/\/ ... other block properties go here\n\n\tattributes,\n\n\tsupports,\n\n\tsave( props ) {\n\t\treturn <div>{ props.attributes.text }<\/div>;\n\t},\n\n\tdeprecated: [\n\t\t{\n\t\t\tattributes,\n\n\t\t\tsupports,\n\n\t\t\tsave( props ) {\n\t\t\t\treturn <p>{ props.attributes.text }<\/p>;\n\t\t\t},\n\t\t},\n\t],\n} );\n```\n\nIn the example above we updated the markup of the block to use a `div` instead of `p`.\n\n## Changing the attributes set\n\nSometimes, you need to update the attributes set to rename or modify old attributes.\n\n### Example:\n\n\n```js\nconst { registerBlockType } = wp.blocks;\n\nregisterBlockType( 'gutenberg\/block-with-deprecated-version', {\n\t\/\/ ... other block properties go here\n\n\tattributes: {\n\t\tcontent: {\n\t\t\ttype: 'string',\n\t\t\tdefault: 'some random value',\n\t\t},\n\t},\n\n\tsave( props ) {\n\t\treturn <div>{ props.attributes.content }<\/div>;\n\t},\n\n\tdeprecated: [\n\t\t{\n\t\t\tattributes: {\n\t\t\t\ttext: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: 'some random value',\n\t\t\t\t},\n\t\t\t},\n\n\t\t\tmigrate( { text } ) {\n\t\t\t\treturn {\n\t\t\t\t\tcontent: text,\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tsave( props ) {\n\t\t\t\treturn <p>{ props.attributes.text }<\/p>;\n\t\t\t},\n\t\t},\n\t],\n} );\n```\n\n\nIn the example above we updated the markup of the block to use a `div` instead of `p` and rename the `text` attribute to `content`.\n\n## Changing the innerBlocks\n\nSituations may exist where when migrating the block we may need to add or remove innerBlocks.\nE.g: a block wants to migrate a title attribute to a paragraph innerBlock.\n\n### Example:\n\n```js\nconst { registerBlockType } = wp.blocks;\n\nregisterBlockType( 'gutenberg\/block-with-deprecated-version', {\n\t\/\/ ... block properties go here\n\n\tsave( props ) {\n\t\treturn <p>{ props.attributes.title }<\/p>;\n\t},\n\n\tdeprecated: [\n\t\t{\n\t\t\tattributes: {\n\t\t\t\ttitle: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tsource: 'html',\n\t\t\t\t\tselector: 'p',\n\t\t\t\t},\n\t\t\t},\n\n\t\t\tmigrate( attributes, innerBlocks ) {\n\t\t\t\tconst { title, ...restAttributes } = attributes;\n\n\t\t\t\treturn [\n\t\t\t\t\trestAttributes,\n\t\t\t\t\t[\n\t\t\t\t\t\tcreateBlock( 'core\/paragraph', {\n\t\t\t\t\t\t\tcontent: attributes.title,\n\t\t\t\t\t\t\tfontSize: 'large',\n\t\t\t\t\t\t} ),\n\t\t\t\t\t\t...innerBlocks,\n\t\t\t\t\t],\n\t\t\t\t];\n\t\t\t},\n\n\t\t\tsave( props ) {\n\t\t\t\treturn <p>{ props.attributes.title }<\/p>;\n\t\t\t},\n\t\t},\n\t],\n} );\n```\n\nIn the example above we updated the block to use an inner Paragraph block with a title instead of a title attribute.\n\n_Above are example cases of block deprecation. For more, real-world examples, check for deprecations in the [core block library](https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/block-library\/src). Core blocks have been updated across releases and contain simple and complex deprecations._\n"
    },
    {
        "path": "\/markdown\/reference-guides\/block-api\/block-patterns.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Patterns<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Block Patterns are predefined block layouts available from the patterns tab of the block inserter. Once inserted into content, the blocks are ready for additional or modified content and configuration.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block patterns<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">register_block_pattern<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The editor comes with several core block patterns. Theme and plugin authors can register additional custom block patterns using the <code>register_block_pattern<\/code> helper function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>register_block_pattern<\/code> helper function receives two arguments.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>title<\/code>: A machine-readable title with a naming convention of <code>namespace\/title<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>properties<\/code>: An array describing properties of the pattern.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The properties available for block patterns are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>title<\/code> (required): A human-readable title for the pattern.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>content<\/code> (required): Block HTML Markup for the pattern.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>description<\/code> (optional): A visually hidden text used to describe the pattern in the inserter. A description is optional but it is strongly encouraged when the title does not fully describe what the pattern does. The description will help users discover the pattern while searching.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>categories<\/code> (optional): An array of registered pattern categories used to group block patterns. Block patterns can be shown on multiple categories. A category must be registered separately in order to be used here.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>keywords<\/code> (optional): An array of aliases or keywords that help users discover the pattern while searching.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>viewportWidth<\/code> (optional): An integer specifying the intended width of the pattern to allow for a scaled preview of the pattern in the inserter.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>blockTypes<\/code> (optional): An array of block types that the pattern is intended to be used with. Each value needs to be the declared block's <code>name<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>postTypes<\/code> (optional): An array of post types that the pattern is restricted to be used with. The pattern will only be available when editing one of the post types passed on the array. For all the other post types, the pattern is not available at all.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>templateTypes<\/code> (optional): An array of template types where the pattern makes sense, for example, <code>404<\/code> if the pattern is for a 404 page, <code>single-post<\/code> if the pattern is for showing a single post.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>inserter<\/code> (optional): By default, all patterns will appear in the inserter. To hide a pattern so that it can only be inserted programmatically, set the <code>inserter<\/code> to <code>false<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>source<\/code> (optional): A string that denotes the source of the pattern. For a plugin registering a pattern, pass the string <code>plugin<\/code>. For a theme, pass the string <code>theme<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The following code sample registers a block pattern named <code>my-plugin\/my-awesome-pattern<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>register_block_pattern(\n\t'my-plugin\/my-awesome-pattern',\n\tarray(\n\t\t'title'       => __( 'Two buttons', 'my-plugin' ),\n\t\t'description' => _x( 'Two horizontal buttons, the left button is filled in, and the right button is outlined.', 'Block pattern description', 'my-plugin' ),\n\t\t'content'     => \"\\n<div class=\"\\&quot;wp-block-buttons\">\\n<div class=\"\\&quot;wp-block-button\\&quot;\"><a class=\"\\&quot;wp-block-button__link\" has-background=\"\" has-very-dark-gray-background-color=\"\">\" . esc_html__( 'Button One', 'my-plugin' ) . \"<\/a><\/div>\\n\\n\\n\\n<div class=\"\\&quot;wp-block-button\"><a class=\"\\&quot;wp-block-button__link\" has-text-color=\"\" has-very-dark-gray-color=\"\">\" . esc_html__( 'Button Two', 'my-plugin' ) . \"<\/a><\/div>\\n<\/div>\\n\",\n\t)\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note that <code>register_block_pattern()<\/code> should be called from a handler attached to the <code>init<\/code> hook.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function my_plugin_register_my_patterns() {\n  register_block_pattern( ... );\n}\n\nadd_action( 'init', 'my_plugin_register_my_patterns' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Unregistering block patterns<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">unregister_block_pattern<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>unregister_block_pattern<\/code> helper function allows a previously registered block pattern to be unregistered from a theme or plugin and receives one argument.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>title<\/code>: The name of the block pattern to be unregistered.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The following code sample unregisters the block pattern named <code>my-plugin\/my-awesome-pattern<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>unregister_block_pattern( 'my-plugin\/my-awesome-pattern' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Note:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>unregister_block_pattern()<\/code> should be called from a handler attached to the init hook.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function my_plugin_unregister_my_patterns() {\n  unregister_block_pattern( ... );\n}\n\nadd_action( 'init', 'my_plugin_unregister_my_patterns' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block pattern categories<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Block patterns can be grouped using categories. The block editor comes with bundled categories you can use on your custom block patterns. You can also register your own block pattern categories.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">register_block_pattern_category<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>register_block_pattern_category<\/code> helper function receives two arguments.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>title<\/code>: A machine-readable title for the block pattern category.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>properties<\/code>: An array describing properties of the pattern category.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The properties of the pattern categories include:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>label<\/code> (required): A human-readable label for the pattern category.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The following code sample registers the category named <code>hero<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>register_block_pattern_category(\n\t'hero',\n\tarray( 'label' => __( 'Hero', 'my-plugin' ) )\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Note:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>register_block_pattern_category()<\/code> should be called from a handler attached to the init hook.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The category will not show under Patterns unless a pattern has been assigned to that category.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function my_plugin_register_my_pattern_categories() {\n  register_block_pattern_category( ... );\n}\n\nadd_action( 'init', 'my_plugin_register_my_pattern_categories' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">unregister_block_pattern_category<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>unregister_block_pattern_category<\/code> helper function allows for a previously registered block pattern category to be unregistered from a theme or plugin and receives one argument.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>title<\/code>: The name of the block pattern category to be unregistered.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The following code sample unregisters the category named <code>hero<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>unregister_block_pattern_category( 'hero' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Note:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>unregister_block_pattern_category()<\/code> should be called from a handler attached to the init hook.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function my_plugin_unregister_my_pattern_categories() {\n  unregister_block_pattern_category( ... );\n}\n\nadd_action( 'init', 'my_plugin_unregister_my_pattern_categories' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block patterns contextual to block types and pattern transformations<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It is possible to attach a block pattern to one or more block types. This adds the block pattern as an available transform for that block type.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Currently, these transformations are available only to simple blocks (blocks without inner blocks). In order for a pattern to be suggested, <strong>every selected block must be present in the block pattern<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For instance:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>register_block_pattern(\n\t'my-plugin\/powered-by-wordpress',\n\tarray(\n\t\t'title'      => __( 'Powered by WordPress', 'my-plugin' ),\n\t\t'blockTypes' => array( 'core\/paragraph' ),\n\t\t'content'    => '\n\t\t<p class=\"has-white-color has-black-background-color has-text-color has-background\">Powered by WordPress<\/p>\n\t\t',\n\t)\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The above code registers a block pattern named <code>my-plugin\/powered-by-wordpress<\/code> and shows the pattern in the \"transform menu\" of paragraph blocks. The transformation result will keep the paragraph's existing content and apply the other attributes - in this case, the background and text color.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As mentioned above, pattern transformations for simple blocks can also work if we have selected multiple blocks and there are matching contextual patterns to these blocks. Let's see an example of a pattern where two block types are attached.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>register_block_pattern(\n\t'my-plugin\/powered-by-wordpress',\n\tarray(\n\t\t'title'      => __( 'Powered by WordPress', 'my-plugin' ),\n\t\t'blockTypes' => array( 'core\/paragraph', 'core\/heading' ),\n\t\t'content'    => '\n\t\t\t\t\t\t<div class=\"wp-block-group\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<h2 class=\"has-large-font-size\"><span style=\"color:#ba0c49\" class=\"has-inline-color\">Hi everyone<\/span><\/h2>\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t<p class=\"has-white-color has-black-background-color has-text-color has-background\">Powered by WordPress<\/p>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<\/div>',\n\t)\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the above example, if we select <strong>one of the two<\/strong> block types, either a paragraph or a heading block, this pattern will be suggested by transforming the selected block using its content and will also add the remaining blocks from the pattern. If, on the other hand, we multi-select one paragraph and one heading block, both blocks will be transformed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Blocks can also use these contextual block patterns in other places. For instance, when inserting a new Query Loop block, the user is provided with a list of all patterns attached to the block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Semantic block patterns<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In block themes, you can also mark block patterns as \"header\" or \"footer\" patterns (template part areas). We call these \"semantic block patterns\". These patterns are shown to the user when inserting or replacing header or footer template parts.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>register_block_pattern(\n\t'my-plugin\/my-header',\n\tarray(\n\t\t'title'      => __( 'My Header', 'my-plugin' ),\n\t\t'categories' => array( 'header' ),\n\t\t\/\/ Assigning the pattern the \"header\" area.\n\t\t'blockTypes' => array( 'core\/template-part\/header' ),\n\t\t'content'    => 'Content of my block pattern',\n\t)\n);\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# Patterns\n\nBlock Patterns are predefined block layouts available from the patterns tab of the block inserter. Once inserted into content, the blocks are ready for additional or modified content and configuration.\n\n## Block patterns\n\n### register_block_pattern\n\nThe editor comes with several core block patterns. Theme and plugin authors can register additional custom block patterns using the `register_block_pattern` helper function.\n\nThe `register_block_pattern` helper function receives two arguments.\n-   `title`: A machine-readable title with a naming convention of `namespace\/title`.\n-\t`properties`: An array describing properties of the pattern.\n\nThe properties available for block patterns are:\n\n-   `title` (required): A human-readable title for the pattern.\n-   `content` (required): Block HTML Markup for the pattern.\n-   `description` (optional): A visually hidden text used to describe the pattern in the inserter. A description is optional but it is strongly encouraged when the title does not fully describe what the pattern does. The description will help users discover the pattern while searching.\n-   `categories` (optional): An array of registered pattern categories used to group block patterns. Block patterns can be shown on multiple categories. A category must be registered separately in order to be used here.\n-   `keywords` (optional): An array of aliases or keywords that help users discover the pattern while searching.\n-   `viewportWidth` (optional): An integer specifying the intended width of the pattern to allow for a scaled preview of the pattern in the inserter.\n-   `blockTypes` (optional): An array of block types that the pattern is intended to be used with. Each value needs to be the declared block's `name`.\n-   `postTypes` (optional): An array of post types that the pattern is restricted to be used with. The pattern will only be available when editing one of the post types passed on the array. For all the other post types, the pattern is not available at all.\n-   `templateTypes` (optional): An array of template types where the pattern makes sense, for example, `404` if the pattern is for a 404 page, `single-post` if the pattern is for showing a single post.\n-   `inserter` (optional): By default, all patterns will appear in the inserter. To hide a pattern so that it can only be inserted programmatically, set the `inserter` to `false`.\n-   `source` (optional): A string that denotes the source of the pattern. For a plugin registering a pattern, pass the string `plugin`. For a theme, pass the string `theme`.\n\nThe following code sample registers a block pattern named `my-plugin\/my-awesome-pattern`:\n\n```php\nregister_block_pattern(\n\t'my-plugin\/my-awesome-pattern',\n\tarray(\n\t\t'title'       => __( 'Two buttons', 'my-plugin' ),\n\t\t'description' => _x( 'Two horizontal buttons, the left button is filled in, and the right button is outlined.', 'Block pattern description', 'my-plugin' ),\n\t\t'content'     => \"<!-- wp:buttons {\\\"align\\\":\\\"center\\\"} -->\\n<div class=\\\"wp-block-buttons aligncenter\\\"><!-- wp:button {\\\"backgroundColor\\\":\\\"very-dark-gray\\\",\\\"borderRadius\\\":0} -->\\n<div class=\\\"wp-block-button\\\"><a class=\\\"wp-block-button__link has-background has-very-dark-gray-background-color no-border-radius\\\">\" . esc_html__( 'Button One', 'my-plugin' ) . \"<\/a><\/div>\\n<!-- \/wp:button -->\\n\\n<!-- wp:button {\\\"textColor\\\":\\\"very-dark-gray\\\",\\\"borderRadius\\\":0,\\\"className\\\":\\\"is-style-outline\\\"} -->\\n<div class=\\\"wp-block-button is-style-outline\\\"><a class=\\\"wp-block-button__link has-text-color has-very-dark-gray-color no-border-radius\\\">\" . esc_html__( 'Button Two', 'my-plugin' ) . \"<\/a><\/div>\\n<!-- \/wp:button --><\/div>\\n<!-- \/wp:buttons -->\",\n\t)\n);\n```\n\nNote that `register_block_pattern()` should be called from a handler attached to the `init` hook.\n\n```php\nfunction my_plugin_register_my_patterns() {\n  register_block_pattern( ... );\n}\n\nadd_action( 'init', 'my_plugin_register_my_patterns' );\n```\n\n## Unregistering block patterns\n\n### unregister_block_pattern\n\nThe `unregister_block_pattern` helper function allows a previously registered block pattern to be unregistered from a theme or plugin and receives one argument.\n\n-   `title`: The name of the block pattern to be unregistered.\n\nThe following code sample unregisters the block pattern named `my-plugin\/my-awesome-pattern`:\n\n```php\nunregister_block_pattern( 'my-plugin\/my-awesome-pattern' );\n```\n\n_Note:_\n\n`unregister_block_pattern()` should be called from a handler attached to the init hook.\n\n```php\nfunction my_plugin_unregister_my_patterns() {\n  unregister_block_pattern( ... );\n}\n\nadd_action( 'init', 'my_plugin_unregister_my_patterns' );\n```\n\n## Block pattern categories\n\nBlock patterns can be grouped using categories. The block editor comes with bundled categories you can use on your custom block patterns. You can also register your own block pattern categories.\n\n### register_block_pattern_category\n\nThe `register_block_pattern_category` helper function receives two arguments.\n\n-   `title`: A machine-readable title for the block pattern category.\n-\t`properties`: An array describing properties of the pattern category.\n\nThe properties of the pattern categories include:\n\n-   `label` (required): A human-readable label for the pattern category.\n\nThe following code sample registers the category named `hero`:\n\n```php\nregister_block_pattern_category(\n\t'hero',\n\tarray( 'label' => __( 'Hero', 'my-plugin' ) )\n);\n```\n\n_Note:_\n\n`register_block_pattern_category()` should be called from a handler attached to the init hook.\n\nThe category will not show under Patterns unless a pattern has been assigned to that category.\n\n```php\nfunction my_plugin_register_my_pattern_categories() {\n  register_block_pattern_category( ... );\n}\n\nadd_action( 'init', 'my_plugin_register_my_pattern_categories' );\n```\n\n### unregister_block_pattern_category\n\nThe `unregister_block_pattern_category` helper function allows for a previously registered block pattern category to be unregistered from a theme or plugin and receives one argument.\n\n-   `title`: The name of the block pattern category to be unregistered.\n\nThe following code sample unregisters the category named `hero`:\n\n```php\nunregister_block_pattern_category( 'hero' );\n```\n\n_Note:_\n\n`unregister_block_pattern_category()` should be called from a handler attached to the init hook.\n\n```php\nfunction my_plugin_unregister_my_pattern_categories() {\n  unregister_block_pattern_category( ... );\n}\n\nadd_action( 'init', 'my_plugin_unregister_my_pattern_categories' );\n```\n\n## Block patterns contextual to block types and pattern transformations\n\nIt is possible to attach a block pattern to one or more block types. This adds the block pattern as an available transform for that block type.\n\nCurrently, these transformations are available only to simple blocks (blocks without inner blocks). In order for a pattern to be suggested, **every selected block must be present in the block pattern**.\n\nFor instance:\n\n```php\nregister_block_pattern(\n\t'my-plugin\/powered-by-wordpress',\n\tarray(\n\t\t'title'      => __( 'Powered by WordPress', 'my-plugin' ),\n\t\t'blockTypes' => array( 'core\/paragraph' ),\n\t\t'content'    => '<!-- wp:paragraph {\"backgroundColor\":\"black\",\"textColor\":\"white\"} -->\n\t\t<p class=\"has-white-color has-black-background-color has-text-color has-background\">Powered by WordPress<\/p>\n\t\t<!-- \/wp:paragraph -->',\n\t)\n);\n```\n\nThe above code registers a block pattern named `my-plugin\/powered-by-wordpress` and shows the pattern in the \"transform menu\" of paragraph blocks. The transformation result will keep the paragraph's existing content and apply the other attributes - in this case, the background and text color.\n\nAs mentioned above, pattern transformations for simple blocks can also work if we have selected multiple blocks and there are matching contextual patterns to these blocks. Let's see an example of a pattern where two block types are attached.\n\n```php\nregister_block_pattern(\n\t'my-plugin\/powered-by-wordpress',\n\tarray(\n\t\t'title'      => __( 'Powered by WordPress', 'my-plugin' ),\n\t\t'blockTypes' => array( 'core\/paragraph', 'core\/heading' ),\n\t\t'content'    => '<!-- wp:group -->\n\t\t\t\t\t\t<div class=\"wp-block-group\">\n\t\t\t\t\t\t<!-- wp:heading {\"fontSize\":\"large\"} -->\n\t\t\t\t\t\t<h2 class=\"has-large-font-size\"><span style=\"color:#ba0c49\" class=\"has-inline-color\">Hi everyone<\/span><\/h2>\n\t\t\t\t\t\t<!-- \/wp:heading -->\n\t\t\t\t\t\t<!-- wp:paragraph {\"backgroundColor\":\"black\",\"textColor\":\"white\"} -->\n\t\t\t\t\t\t<p class=\"has-white-color has-black-background-color has-text-color has-background\">Powered by WordPress<\/p>\n\t\t\t\t\t\t<!-- \/wp:paragraph -->\n\t\t\t\t\t\t<\/div><!-- \/wp:group -->',\n\t)\n);\n```\n\nIn the above example, if we select **one of the two** block types, either a paragraph or a heading block, this pattern will be suggested by transforming the selected block using its content and will also add the remaining blocks from the pattern. If, on the other hand, we multi-select one paragraph and one heading block, both blocks will be transformed.\n\nBlocks can also use these contextual block patterns in other places. For instance, when inserting a new Query Loop block, the user is provided with a list of all patterns attached to the block.\n\n## Semantic block patterns\n\nIn block themes, you can also mark block patterns as \"header\" or \"footer\" patterns (template part areas). We call these \"semantic block patterns\". These patterns are shown to the user when inserting or replacing header or footer template parts.\n\nExample:\n\n```php\n<?php\nregister_block_pattern(\n\t'my-plugin\/my-header',\n\tarray(\n\t\t'title'      => __( 'My Header', 'my-plugin' ),\n\t\t'categories' => array( 'header' ),\n\t\t\/\/ Assigning the pattern the \"header\" area.\n\t\t'blockTypes' => array( 'core\/template-part\/header' ),\n\t\t'content'    => 'Content of my block pattern',\n\t)\n);\n```\n"
    },
    {
        "path": "\/markdown\/reference-guides\/block-api\/block-supports.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Supports<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Block Supports is the API that allows a block to declare support for certain features.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Opting into any of these features will register additional attributes on the block and provide the UI to manipulate that attribute.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order for the attribute to get applied to the block the generated properties get added to the wrapping element of the block. They get added to the object you get returned from the <code>useBlockProps<\/code> hook.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>BlockEdit<\/code> function:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function BlockEdit() {\n\tconst blockProps = useBlockProps();\n\n\treturn <div {=\"\" ...blockprops=\"\" }=\"\">Hello World!<\/div>;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>save<\/code> function:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function BlockEdit() {\n\tconst blockProps = useBlockProps.save();\n\n\treturn <div {=\"\" ...blockprops=\"\" }=\"\">Hello World!<\/div>;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>For dynamic blocks that get rendered via a <code>render_callback<\/code> in PHP you can use the <code>get_block_wrapper_attributes()<\/code> function. It returns a string containing all the generated properties and needs to get output in the opening tag of the wrapping block element.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>render_callback<\/code> function:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function render_block() {\n\t$wrapper_attributes = get_block_wrapper_attributes();\n\n\treturn sprintf(\n\t\t'<div %1$s=\"\">%2$s<\/div>',\n\t\t$wrapper_attributes,\n\t\t'Hello World!'\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">anchor<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>false<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Anchors let you link directly to a specific block on a page. This property adds a field to define an id for the block and a button to copy the direct link. <em>Important: It doesn't work with dynamic blocks yet.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Declare support for anchor links.\nsupports: {\n\tanchor: true\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">align<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code> or <code>array<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>false<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This property adds block controls which allow you to change the block's alignment.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\t\/\/ Declare support for block's alignment.\n\t\/\/ This adds support for all the options:\n\t\/\/ left, center, right, wide, and full.\n\talign: true\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\t\/\/ Declare support for specific alignment options.\n\talign: &#91; 'left', 'right', 'full' ]\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When the block declares support for <code>align<\/code>, the attributes definition is extended to include an align attribute with a <code>string<\/code> type. By default, no alignment is assigned. The block can apply a default alignment by specifying its own <code>align<\/code> attribute with a default. For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>attributes: {\n    align: {\n        type: 'string',\n        default: 'right'\n    }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">alignWide<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>true<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This property allows to enable <a href=\"\/docs\/how-to-guides\/themes\/theme-support.md#wide-alignment\">wide alignment<\/a> for your theme. To disable this behavior for a single block, set this flag to <code>false<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\t\/\/ Remove the support for wide alignment.\n\talignWide: false\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ariaLabel<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>false<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>ARIA-labels let you define an accessible label for elements. This property allows enabling the definition of an aria-label for the block, without exposing a UI field.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\t\/\/ Add support for the aria label.\n\tariaLabel: true\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">background<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em><strong>Note:<\/strong> Since WordPress 6.5.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>Object<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>null<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Subproperties<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>backgroundImage<\/code>: type <code>boolean<\/code>, default value <code>false<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>backgroundSize<\/code>: type <code>boolean<\/code>, default value <code>false<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This value signals that a block supports some of the CSS style properties related to background. When it does, the block editor will show UI controls for the user to set their values if <a href=\"\/docs\/how-to-guides\/themes\/global-settings-and-styles.md#opt-in-into-ui-controls\">the theme declares support<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>backgroundImage<\/code> adds UI controls which allow the user to select a background image.<br><code>backgroundSize<\/code> adds the FocalPointPicker to pick the position of the background image and allow the user to select the background size (cover, contain, fixed).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\tbackground: {\n\t\tbackgroundImage: true \/\/ Enable background image control.\n\t\tbackgroundSize: true \/\/ Enable background image + size control.\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When a block declares support for a specific background property, its attributes definition is extended to include the <code>style<\/code> attribute.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When a background image is selected, the image data is stored in the <code>style.background.backgroundImage<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When a background images is selected and its position or size are changed, the background-position is stored in the <code>style.background.backgroundPosition<\/code> and its background-size in <code>style.background.backgroundSize<\/code> attribute.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>style<\/code>: an attribute of <code>object<\/code> type with no default assigned. This is added when <code>backgroundImage<\/code> or <code>backgroundSize<\/code> support is declared. It stores the custom values set by the user.<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>background<\/code>: an attribute of <code>object<\/code> type.<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>backgroundImage<\/code>: an attribute of <code>object<\/code> type, containing information about the selected image<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>url<\/code>: type <code>string<\/code>, URL to the image<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>id<\/code>: type <code>int<\/code>, media attachment ID<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>source<\/code>: type <code>string<\/code>, at the moment the only value is <code>file<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>title<\/code>: type <code>string<\/code>, title of the media attachment<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>backgroundPosition<\/code>: an attribute of <code>string<\/code> type, defining the background images position, selected by FocalPointPicker and used in CSS as the <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/background-position\"><code>background-position<\/code><\/a> value.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>backgroundSize<\/code>: an attribute of <code>string<\/code> type. defining the CSS <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/background-size\"><code>background-size<\/code><\/a> value.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The block can apply a default background image, position and size by specifying its own attribute with a default. For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>attributes: {\n    style: {\n        background: {\n            backgroundImage: {\n\t\t\t\t\"url\":\"IMAGE_URL\"\n\t\t\t}\n\t\t\tbackgroundPosition:\"50% 50%\",\n            backgroundSize: \"cover\"\n        }\n    }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">className<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>true<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>By default, the class <code>.wp-block-your-block-name<\/code> is added to the root element of your saved markup. This helps by providing a consistent mechanism for styling blocks that themes and plugins can rely on. If, for whatever reason, a class is not desired on the markup, this functionality can be disabled.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\t\/\/ Remove the support for the generated className.\n\tclassName: false\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">color<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>Object<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: null<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Subproperties:<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>background<\/code>: type <code>boolean<\/code>, default value <code>true<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>button<\/code>: type <code>boolean<\/code>, default value <code>false<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>enableContrastChecker<\/code>: type <code>boolean<\/code>, default value <code>true<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>gradients<\/code>: type <code>boolean<\/code>, default value <code>false<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>heading<\/code>: type <code>boolean<\/code>, default value <code>false<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>link<\/code>: type <code>boolean<\/code>, default value <code>false<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>text<\/code>: type <code>boolean<\/code>, default value <code>true<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This value signals that a block supports some of the properties related to color. When this value is present, the block editor will show UI controls for the user to set their values.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note that the <code>background<\/code> and <code>text<\/code> keys have a default value of <code>true<\/code>, so if the <code>color<\/code> property is present they will also be considered enabled:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\tcolor: {\n\t\t\/\/ This also enables text and background UI controls.\n\t\tgradients: true \/\/ Enables the gradients UI control.\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>It's possible to disable them individually:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n    color: { \/\/ Text UI control is enabled.\n        background: false, \/\/ Disables the background UI control.\n        gradients: true \/\/ Enables the gradients UI control.\n    }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">color.background<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This property adds UI controls which allow the user to apply a solid background color to a block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When color support is declared, this property is enabled by default (along with text), so simply setting color will enable background color.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n    color: true \/\/ Enables background and text color support.\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>To disable background support while keeping other color supports enabled, set to <code>false<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n    color: {\n        \/\/ Disables background support. Text color support is still enabled.\n        background: false\n    }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When the block declares support for <code>color.background<\/code>, the attributes definition is extended to include two new attributes: <code>backgroundColor<\/code> and <code>style<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The block can apply a default preset background color by specifying its own attribute with a default. For example:<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The block can apply a default custom background color by specifying its own attribute with a default. For example:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">color.button<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em><strong>Note:<\/strong> Since WordPress 6.5.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This property adds block controls which allow the user to set button colors (text, background) in a block. Button colors are disabled by default.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To enable button color support, set <code>color.button<\/code> to <code>true<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\tcolor: {\n\t\tbutton: true\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Button color presets are sourced from the <code>editor-color-palette<\/code> <a href=\"\/docs\/how-to-guides\/themes\/theme-support.md#block-color-palettes\">theme support<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When the block declares support for <code>color.button<\/code>, the attributes definition is extended to include the <code>style<\/code> attribute:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The block can apply a default button colors by specifying its own attribute with a default. For example:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">color.enableContrastChecker<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em><strong>Note:<\/strong> Since WordPress 6.5.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Determines whether the contrast checker widget displays in the block editor UI.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The contrast checker appears only if the block declares support for color. It tests the readability of color combinations and warns if there is a potential issue. The property is enabled by default. Set to <code>false<\/code> to explicitly disable:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\tcolor: {\n\t\tenableContrastChecker: false\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">color.__experimentalDuotone<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em><strong>Note:<\/strong> Deprecated since WordPress 6.3.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This property has been replaced by <a href=\"#filterduotone\"><code>filter.duotone<\/code><\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">color.gradients<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This property adds UI controls which allow the user to apply a gradient background to a block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n    color: {\n        gradients: true,\n        \/\/ Default values must be disabled if you don't want to use them with gradients.\n        background: false,\n        text: false\n    }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Gradient presets are sourced from <code>editor-gradient-presets<\/code> <a href=\"\/docs\/how-to-guides\/themes\/theme-support.md#block-gradient-presets\">theme support<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When the block declares support for <code>color.gradient<\/code>, the attributes definition is extended to include two new attributes: <code>gradient<\/code> and <code>style<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The block can apply a default preset gradient by specifying its own attribute with a default. For example:<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The block can apply a default custom gradient by specifying its own attribute with a default. For example:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">color.heading<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em><strong>Note:<\/strong> Since WordPress 6.5.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This property adds block controls which allow the user to set heading colors in a block. Heading colors are disabled by default.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To enable heading color support, set <code>color.heading<\/code> to <code>true<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\tcolor: {\n\t\t\/\/ Enable heading color support.\n\t\theading: true\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Heading color presets are sourced from the <code>editor-color-palette<\/code> <a href=\"\/docs\/how-to-guides\/themes\/theme-support.md#block-color-palettes\">theme support<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When the block declares support for <code>color.heading<\/code>, the attributes definition is extended to include the <code>style<\/code> attribute:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The block can apply default heading colors by specifying its own attribute with a default. For example:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">color.link<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This property adds block controls which allow the user to set link colors in a block. Link colors are disabled by default.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To enable link color support, set <code>color.link<\/code> to <code>true<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\tcolor: {\n\t\tlink: true\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Link color presets are sourced from the <code>editor-color-palette<\/code> <a href=\"\/docs\/how-to-guides\/themes\/theme-support.md#block-color-palettes\">theme support<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When the block declares support for <code>color.link<\/code>, the attributes definition is extended to include the <code>style<\/code> attribute:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The block can apply default link colors by specifying its own attribute with a default. For example:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">color.text<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This property adds block controls which allow the user to set text color in a block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When color support is declared, this property is enabled by default (along with background), so simply setting color will enable text color.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\tcolor: true \/\/ Enables background and text, but not link.\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>To disable text color support while keeping other color supports enabled, set <code>color.text<\/code> to <code>false<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\tcolor: {\n\t\t\/\/ Disable text color support.\n\t\ttext: false\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Text color presets are sourced from the <code>editor-color-palette<\/code> <a href=\"\/docs\/how-to-guides\/themes\/theme-support.md#block-color-palettes\">theme support<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When the block declares support for <code>color.text<\/code>, the attributes definition is extended to include two new attributes: <code>textColor<\/code> and <code>style<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The block can apply a default preset text color by specifying its own attribute with a default. For example:<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The block can apply a default custom text color by specifying its own attribute with a default. For example:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">customClassName<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>true<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This property adds a field to define a custom className for the block's wrapper.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\t\/\/ Remove the support for the custom className.\n\tcustomClassName: false\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">dimensions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em><strong>Note:<\/strong> Since WordPress 6.2.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>Object<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: null<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Subproperties:<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>minHeight<\/code>: type <code>boolean<\/code>, default value <code>false<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This value signals that a block supports some of the CSS style properties related to dimensions. When it does, the block editor will show UI controls for the user to set their values if <a href=\"\/docs\/how-to-guides\/themes\/global-settings-and-styles.md#opt-in-into-ui-controls\">the theme declares support<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\tdimensions: {\n\t\taspectRatio: true \/\/ Enable aspect ratio control.\n\t\tminHeight: true \/\/ Enable min height control.\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When a block declares support for a specific dimensions property, its attributes definition is extended to include the <code>style<\/code> attribute.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>style<\/code>: an attribute of <code>object<\/code> type with no default assigned. This is added when <code>aspectRatio<\/code> or <code>minHeight<\/code> support is declared. It stores the custom values set by the user. For example:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>attributes: {\n    style: {\n        dimensions: {\n            aspectRatio: \"16\/9\",\n            minHeight: \"50vh\"\n        }\n    }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">filter<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>Object<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: null<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Subproperties:<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>duotone<\/code>: type <code>boolean<\/code>, default value <code>false<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This value signals that a block supports some of the properties related to filters. When it does, the block editor will show UI controls for the user to set their values.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">filter.duotone<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This property adds UI controls which allow the user to apply a duotone filter to<br>a block or part of a block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n    filter: {\n        \/\/ Enable duotone support\n        duotone: true\n    }\n},\nselectors: {\n    filter: {\n        \/\/ Apply the filter to img elements inside the image block\n        duotone: '.wp-block-image img'\n    }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The filter can be applied to an element inside the block by setting the <code>selectors.filter.duotone<\/code> selector.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Duotone presets are sourced from <code>color.duotone<\/code> in <a href=\"\/docs\/how-to-guides\/themes\/global-settings-and-styles.md\">theme.json<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When the block declares support for <code>filter.duotone<\/code>, the attributes definition is extended to include the attribute <code>style<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The block can apply a default duotone color by specifying its own attribute with a default. For example:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">html<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>true<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>By default, a block's markup can be edited individually. To disable this behavior, set <code>html<\/code> to <code>false<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\t\/\/ Remove support for an HTML mode.\n\thtml: false\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">inserter<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>true<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>By default, all blocks will appear in the inserter, block transforms menu, Style Book, etc. To hide a block from all parts of the user interface so that it can only be inserted programmatically, set <code>inserter<\/code> to <code>false<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\t\/\/ Hide this block from the inserter.\n\tinserter: false\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">interactivity<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code> or <code>object<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>false<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Subproperties:<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>clientNavigation<\/code>: type <code>boolean<\/code>, default value <code>false<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>interactive<\/code>: type <code>boolean<\/code>, default value <code>false<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Indicates if the block is using Interactivity API features.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>clientNavigation<\/code> sub-property indicates whether a block is compatible with the Interactivity API client-side navigation.<br>Set it to true only if the block is not interactive or if it is interactive using the Interactivity API. Set it to false if the block is interactive but uses vanilla JS, jQuery or another JS framework\/library other than the Interactivity API.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>interactive<\/code> sub-property indicates whether the block is using the Interactivity API directives.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">layout<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code> or <code>Object<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: null<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Subproperties:<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>default<\/code>: type <code>Object<\/code>, default value null<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>allowSwitching<\/code>: type <code>boolean<\/code>, default value <code>false<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>allowEditing<\/code>: type <code>boolean<\/code>, default value <code>true<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>allowInheriting<\/code>: type <code>boolean<\/code>, default value <code>true<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>allowSizingOnChildren<\/code>: type <code>boolean<\/code>, default value <code>false<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>allowVerticalAlignment<\/code>: type <code>boolean<\/code>, default value <code>true<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>allowJustification<\/code>: type <code>boolean<\/code>, default value <code>true<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>allowOrientation<\/code>: type <code>boolean<\/code>, default value <code>true<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>allowCustomContentAndWideSize<\/code>: type <code>boolean<\/code>, default value <code>true<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This value only applies to blocks that are containers for inner blocks. If set to <code>true<\/code> the layout type will be <code>flow<\/code>. For other layout types it's necessary to set the <code>type<\/code> explicitly inside the <code>default<\/code> object.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">layout.default<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>Object<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: null<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Allows setting the <code>type<\/code> property to define what layout type is default for the block, and also default values for any properties inherent to that layout type. For example, for a <code>flex<\/code> layout, a default value can be set for <code>flexWrap<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">layout.allowSwitching<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>false<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Exposes a switcher control that allows toggling between all existing layout types.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">layout.allowEditing<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>true<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Determines display of layout controls in the block sidebar. If set to false, layout controls will be hidden.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">layout.allowInheriting<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>true<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For the <code>flow<\/code> layout type only, determines display of the \"Inner blocks use content width\" toggle.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">layout.allowSizingOnChildren<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>false<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For the <code>flex<\/code> layout type only, determines display of sizing controls (Fit\/Fill\/Fixed) on all child blocks of the flex block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">layout.allowVerticalAlignment<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>true<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For the <code>flex<\/code> layout type only, determines display of the vertical alignment control in the block toolbar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">layout.allowJustification<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>true<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For the <code>flex<\/code> layout type, determines display of the justification control in the block toolbar and block sidebar. For the <code>constrained<\/code> layout type, determines display of justification control in the block sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">layout.allowOrientation<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>true<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For the <code>flex<\/code> layout type only, determines display of the orientation control in the block toolbar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">layout.allowCustomContentAndWideSize<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>true<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For the <code>constrained<\/code> layout type only, determines display of the custom content and wide size controls in the block sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">lock<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>true<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>A block may want to disable the ability to toggle the lock state. It can be locked\/unlocked by a user from the block \"Options\" dropdown by default. To disable this behavior, set <code>lock<\/code> to <code>false<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\t\/\/ Remove support for locking UI.\n\tlock: false\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">multiple<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>true<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>A non-multiple block can be inserted into each post, one time only. For example, the built-in 'More' block cannot be inserted again if it already exists in the post being edited. A non-multiple block's icon is automatically dimmed (unclickable) to prevent multiple instances.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\t\/\/ Use the block just once per post\n\tmultiple: false\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">position<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em><strong>Note:<\/strong> Since WordPress 6.2.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>Object<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: null<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Subproperties:<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>sticky<\/code>: type <code>boolean<\/code>, default value <code>false<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This value signals that a block supports some of the CSS style properties related to position. When it does, the block editor will show UI controls for the user to set their values if <a href=\"\/docs\/how-to-guides\/themes\/global-settings-and-styles.md#opt-in-into-ui-controls\">the theme declares support<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note that sticky position controls are currently only available for blocks set at the root level of the document. Setting a block to the <code>sticky<\/code> position will stick the block to its most immediate parent when the user scrolls the page.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\tposition: {\n\t\tsticky: true \/\/ Enable selecting sticky position.\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When the block declares support for a specific position property, its attributes definition is extended to include the <code>style<\/code> attribute.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>style<\/code>: an attribute of <code>object<\/code> type with no default assigned. This is added when <code>sticky<\/code> support is declared. It stores the custom values set by the user. For example:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>attributes: {\n    style: {\n        position: {\n            type: \"sticky\",\n            top: \"0px\"\n        }\n    }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">renaming<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em><strong>Note:<\/strong> Since WordPress 6.5.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>true<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>By default, a block can be renamed by a user from the block 'Options' dropdown or the 'Advanced' panel. To disable this behavior, set renaming to false.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\t\/\/ Don't allow the block to be renamed in the editor.\n\trenaming: false,\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">reusable<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>true<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>A block may want to disable the ability of being converted into a reusable block. By default all blocks can be converted to a reusable block. If supports reusable is set to false, the option to convert the block into a reusable block will not appear.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\t\/\/ Don't allow the block to be converted into a reusable block.\n\treusable: false,\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">shadow<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em><strong>Note:<\/strong> Since WordPress 6.5.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>false<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This property adds block controls which allow the user to set a box shadow for a block. Shadows are disabled by default.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n\tshadow: true \/\/ Enable the box-shadow picker.\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Shadow presets are sourced from the shadow presets defined in <code>theme.json<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When the block declares support for <code>shadow<\/code>, the attributes definition is extended to include the <code>style<\/code> attribute:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The block can apply a default shadow by specifying its own attribute with a default. For example:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">spacing<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>Object<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: null<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Subproperties:<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>margin<\/code>: type <code>boolean<\/code> or <code>array<\/code>, default value <code>false<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>padding<\/code>: type <code>boolean<\/code> or <code>array<\/code>, default value <code>false<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>blockGap<\/code>: type <code>boolean<\/code> or <code>array<\/code>, default value <code>false<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This value signals that a block supports some of the CSS style properties related to spacing. When it does, the block editor will show UI controls for the user to set their values if <a href=\"\/docs\/how-to-guides\/themes\/theme-support.md#cover-block-padding\">the theme declares support<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n    spacing: {\n        margin: true,  \/\/ Enable margin UI control.\n        padding: true, \/\/ Enable padding UI control.\n        blockGap: true,  \/\/ Enables block spacing UI control for blocks that also use `layout`.\n    }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When the block declares support for a specific spacing property, its attributes definition is extended to include the <code>style<\/code> attribute.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>style<\/code>: an attribute of <code>object<\/code> type with no default assigned. This is added when <code>margin<\/code> or <code>padding<\/code> support is declared. It stores the custom values set by the user. For example:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>attributes: {\n    style: {\n        margin: 'value',\n        padding: {\n            top: 'value',\n        }\n    }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>A spacing property may define an array of allowable sides \u2013 'top', 'right', 'bottom', 'left' \u2013 that can be configured. When such arbitrary sides are defined, only UI controls for those sides are displayed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Axial sides are defined with the <code>vertical<\/code> and <code>horizontal<\/code> terms, and display a single UI control for each axial pair (for example, <code>vertical<\/code> controls both the top and bottom sides). A spacing property may support arbitrary individual sides <strong>or<\/strong> axial sides, but not a mix of both.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note: <code>blockGap<\/code> accepts <code>vertical<\/code> and <code>horizontal<\/code> axial sides, which adjust gap column and row values. <code>blockGap<\/code> doesn't support arbitrary sides.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n    spacing: {\n        margin: &#91; 'top', 'bottom' ],             \/\/ Enable margin for arbitrary sides.\n        padding: true,                           \/\/ Enable padding for all sides.\n        blockGap: &#91; 'horizontal', 'vertical' ],  \/\/ Enables axial (column\/row) block spacing controls\n    }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">typography<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>Object<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>null<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Subproperties:<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>fontSize<\/code>: type <code>boolean<\/code>, default value <code>false<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>lineHeight<\/code>: type <code>boolean<\/code>, default value <code>false<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The presence of this object signals that a block supports some typography related properties. When it does, the block editor will show a typography UI allowing the user to control their values.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n    typography: {\n        \/\/ Enable support and UI control for font-size.\n        fontSize: true,\n        \/\/ Enable support and UI control for line-height.\n        lineHeight: true,\n    },\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">typography.fontSize<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>false<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This value signals that a block supports the font-size CSS style property. When it does, the block editor will show an UI control for the user to set its value.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The values shown in this control are the ones declared by the theme via the <code>editor-font-sizes<\/code> <a href=\"\/docs\/how-to-guides\/themes\/theme-support.md#block-font-sizes\">theme support<\/a>, or the default ones if none are provided.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n    typography: {\n        \/\/ Enable support and UI control for font-size.\n        fontSize: true,\n    },\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When the block declares support for <code>fontSize<\/code>, the attributes definition is extended to include two new attributes: <code>fontSize<\/code> and <code>style<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>fontSize<\/code>: an attribute of <code>string<\/code> type with no default assigned. It stores any preset value selected by the user. The block can apply a default fontSize by specifying its own <code>fontSize<\/code> attribute with a default. For example:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>attributes: {\n    fontSize: {\n        type: 'string',\n        default: 'some-value',\n    }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>style<\/code>: an attribute of <code>object<\/code> type with no default assigned. It stores the custom values set by the user and is shared with other block supports such as color. The block can apply a default style by specifying its own <code>style<\/code> attribute with a default. For example:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>attributes: {\n    style: {\n        type: 'object',\n        default: {\n            typography: {\n                fontSize: 'value'\n            }\n        }\n    }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">typography.lineHeight<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Type: <code>boolean<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Default value: <code>false<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This value signals that a block supports the line-height CSS style property. When it does, the block editor will show an UI control for the user to set its value if <a href=\"\/docs\/how-to-guides\/themes\/theme-support.md#supporting-custom-line-heights\">the theme declares support<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>supports: {\n    typography: {\n        \/\/ Enable support and UI control for line-height.\n        lineHeight: true,\n    },\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When the block declares support for <code>lineHeight<\/code>, the attributes definition is extended to include a new attribute <code>style<\/code> of <code>object<\/code> type with no default assigned. It stores the custom value set by the user. The block can apply a default style by specifying its own <code>style<\/code> attribute with a default. For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>attributes: {\n    style: {\n        type: 'object',\n        default: {\n            typography: {\n                lineHeight: 'value'\n            }\n        }\n    }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# Supports\n\nBlock Supports is the API that allows a block to declare support for certain features.\n\nOpting into any of these features will register additional attributes on the block and provide the UI to manipulate that attribute.\n\nIn order for the attribute to get applied to the block the generated properties get added to the wrapping element of the block. They get added to the object you get returned from the `useBlockProps` hook.\n\n`BlockEdit` function:\n\n```js\nfunction BlockEdit() {\n\tconst blockProps = useBlockProps();\n\n\treturn <div { ...blockProps }>Hello World!<\/div>;\n}\n```\n\n`save` function:\n\n```js\nfunction BlockEdit() {\n\tconst blockProps = useBlockProps.save();\n\n\treturn <div { ...blockProps }>Hello World!<\/div>;\n}\n```\n\nFor dynamic blocks that get rendered via a `render_callback` in PHP you can use the `get_block_wrapper_attributes()` function. It returns a string containing all the generated properties and needs to get output in the opening tag of the wrapping block element.\n\n`render_callback` function:\n\n```php\nfunction render_block() {\n\t$wrapper_attributes = get_block_wrapper_attributes();\n\n\treturn sprintf(\n\t\t'<div %1$s>%2$s<\/div>',\n\t\t$wrapper_attributes,\n\t\t'Hello World!'\n\t);\n}\n```\n\n## anchor\n\n-   Type: `boolean`\n-   Default value: `false`\n\nAnchors let you link directly to a specific block on a page. This property adds a field to define an id for the block and a button to copy the direct link. _Important: It doesn't work with dynamic blocks yet._\n\n```js\n\/\/ Declare support for anchor links.\nsupports: {\n\tanchor: true\n}\n```\n\n## align\n\n-   Type: `boolean` or `array`\n-   Default value: `false`\n\nThis property adds block controls which allow you to change the block's alignment.\n\n```js\nsupports: {\n\t\/\/ Declare support for block's alignment.\n\t\/\/ This adds support for all the options:\n\t\/\/ left, center, right, wide, and full.\n\talign: true\n}\n```\n\n```js\nsupports: {\n\t\/\/ Declare support for specific alignment options.\n\talign: [ 'left', 'right', 'full' ]\n}\n```\n\nWhen the block declares support for `align`, the attributes definition is extended to include an align attribute with a `string` type. By default, no alignment is assigned. The block can apply a default alignment by specifying its own `align` attribute with a default. For example:\n\n```js\nattributes: {\n    align: {\n        type: 'string',\n        default: 'right'\n    }\n}\n```\n\n## alignWide\n\n-   Type: `boolean`\n-   Default value: `true`\n\nThis property allows to enable [wide alignment](\/docs\/how-to-guides\/themes\/theme-support.md#wide-alignment) for your theme. To disable this behavior for a single block, set this flag to `false`.\n\n```js\nsupports: {\n\t\/\/ Remove the support for wide alignment.\n\talignWide: false\n}\n```\n\n## ariaLabel\n\n-   Type: `boolean`\n-   Default value: `false`\n\nARIA-labels let you define an accessible label for elements. This property allows enabling the definition of an aria-label for the block, without exposing a UI field.\n\n```js\nsupports: {\n\t\/\/ Add support for the aria label.\n\tariaLabel: true\n}\n```\n\n## background\n\n_**Note:** Since WordPress 6.5._\n\n-   Type: `Object`\n-   Default value: `null`\n-   Subproperties\n    -   `backgroundImage`: type `boolean`, default value `false`\n    -   `backgroundSize`: type `boolean`, default value `false`\n\nThis value signals that a block supports some of the CSS style properties related to background. When it does, the block editor will show UI controls for the user to set their values if [the theme declares support](\/docs\/how-to-guides\/themes\/global-settings-and-styles.md#opt-in-into-ui-controls).\n\n`backgroundImage` adds UI controls which allow the user to select a background image.\n`backgroundSize` adds the FocalPointPicker to pick the position of the background image and allow the user to select the background size (cover, contain, fixed).\n\n```js\nsupports: {\n\tbackground: {\n\t\tbackgroundImage: true \/\/ Enable background image control.\n\t\tbackgroundSize: true \/\/ Enable background image + size control.\n\t}\n}\n```\n\nWhen a block declares support for a specific background property, its attributes definition is extended to include the `style` attribute.\n\nWhen a background image is selected, the image data is stored in the `style.background.backgroundImage`.\n\nWhen a background images is selected and its position or size are changed, the background-position is stored in the `style.background.backgroundPosition` and its background-size in `style.background.backgroundSize` attribute.\n\n-   `style`: an attribute of `object` type with no default assigned. This is added when `backgroundImage` or `backgroundSize` support is declared. It stores the custom values set by the user.\n    -   `background`: an attribute of `object` type. \n        - `backgroundImage`: an attribute of `object` type, containing information about the selected image \n            - `url`: type `string`, URL to the image\n            - `id`: type `int`, media attachment ID\n            - `source`: type `string`, at the moment the only value is `file`\n            - `title`: type `string`, title of the media attachment \n        - `backgroundPosition`: an attribute of `string` type, defining the background images position, selected by FocalPointPicker and used in CSS as the [`background-position`](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/background-position) value. \n        - `backgroundSize`: an attribute of `string` type. defining the CSS [`background-size`](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/background-size) value.\n\nThe block can apply a default background image, position and size by specifying its own attribute with a default. For example:\n\n```js\nattributes: {\n    style: {\n        background: {\n            backgroundImage: {\n\t\t\t\t\"url\":\"IMAGE_URL\"\n\t\t\t}\n\t\t\tbackgroundPosition:\"50% 50%\",\n            backgroundSize: \"cover\"\n        }\n    }\n}\n```\n\n## className\n\n-   Type: `boolean`\n-   Default value: `true`\n\nBy default, the class `.wp-block-your-block-name` is added to the root element of your saved markup. This helps by providing a consistent mechanism for styling blocks that themes and plugins can rely on. If, for whatever reason, a class is not desired on the markup, this functionality can be disabled.\n\n```js\nsupports: {\n\t\/\/ Remove the support for the generated className.\n\tclassName: false\n}\n```\n\n## color\n\n-   Type: `Object`\n-   Default value: null\n-   Subproperties:\n    -   `background`: type `boolean`, default value `true`\n    -   `button`: type `boolean`, default value `false`\n    -   `enableContrastChecker`: type `boolean`, default value `true`\n    -   `gradients`: type `boolean`, default value `false`\n    -   `heading`: type `boolean`, default value `false`\n    -   `link`: type `boolean`, default value `false`\n    -   `text`: type `boolean`, default value `true`\n\nThis value signals that a block supports some of the properties related to color. When this value is present, the block editor will show UI controls for the user to set their values.\n\nNote that the `background` and `text` keys have a default value of `true`, so if the `color` property is present they will also be considered enabled:\n\n```js\nsupports: {\n\tcolor: {\n\t\t\/\/ This also enables text and background UI controls.\n\t\tgradients: true \/\/ Enables the gradients UI control.\n\t}\n}\n```\n\nIt's possible to disable them individually:\n\n```js\nsupports: {\n    color: { \/\/ Text UI control is enabled.\n        background: false, \/\/ Disables the background UI control.\n        gradients: true \/\/ Enables the gradients UI control.\n    }\n}\n```\n\n### color.background\n\nThis property adds UI controls which allow the user to apply a solid background color to a block.\n\nWhen color support is declared, this property is enabled by default (along with text), so simply setting color will enable background color.\n\n```js\nsupports: {\n    color: true \/\/ Enables background and text color support.\n}\n```\n\nTo disable background support while keeping other color supports enabled, set to `false`.\n\n```js\nsupports: {\n    color: {\n        \/\/ Disables background support. Text color support is still enabled.\n        background: false\n    }\n}\n```\n\nWhen the block declares support for `color.background`, the attributes definition is extended to include two new attributes: `backgroundColor` and `style`:\n\n-   `backgroundColor`: an attribute of `string` type with no default assigned.\n\n    When a user chooses from the list of preset background colors, the preset slug is stored in the `backgroundColor` attribute.\n\n    Background color presets are sourced from the `editor-color-palette` [theme support](\/docs\/how-to-guides\/themes\/theme-support.md#block-color-palettes).\n\n    The block can apply a default preset background color by specifying its own attribute with a default. For example:\n\n    ```js\n    attributes: {\n        backgroundColor: {\n            type: 'string',\n            default: 'some-preset-background-slug',\n        }\n    }\n    ```\n\n-   `style`: attribute of `object` type with no default assigned.\n\n    When a custom background color is selected (i.e. using the custom color picker), the custom color value is stored in the `style.color.background` attribute.\n\n    The block can apply a default custom background color by specifying its own attribute with a default. For example:\n\n    ```js\n    attributes: {\n        style: {\n            type: 'object',\n            default: {\n                color: {\n                    background: '#aabbcc',\n                }\n            }\n        }\n    }\n    ```\n\n### color.button\n\n_**Note:** Since WordPress 6.5._\n\nThis property adds block controls which allow the user to set button colors (text, background) in a block. Button colors are disabled by default.\n\nTo enable button color support, set `color.button` to `true`.\n\n```js\nsupports: {\n\tcolor: {\n\t\tbutton: true\n\t}\n}\n```\n\nButton color presets are sourced from the `editor-color-palette` [theme support](\/docs\/how-to-guides\/themes\/theme-support.md#block-color-palettes).\n\nWhen the block declares support for `color.button`, the attributes definition is extended to include the `style` attribute:\n\n-   `style`: an attribute of `object` type with no default assigned.\n\n    When a button color is selected, the color value is stored in the `style.elements.button.color.text` and `style.elements.button.color.background` attribute.\n\n    The block can apply a default button colors by specifying its own attribute with a default. For example:\n\n    ```js\n    attributes: {\n        style: {\n            type: 'object',\n            default: {\n                elements: {\n                    button: {\n                        color: {\n                            text: 'var:preset|color|contrast',\n    \t\t\t\t\t    background: '#000000',\n                        }\n                    }\n                }\n            }\n        }\n    }\n    ```\n\n### color.enableContrastChecker\n\n_**Note:** Since WordPress 6.5._\n\nDetermines whether the contrast checker widget displays in the block editor UI.\n\nThe contrast checker appears only if the block declares support for color. It tests the readability of color combinations and warns if there is a potential issue. The property is enabled by default. Set to `false` to explicitly disable:\n\n```js\nsupports: {\n\tcolor: {\n\t\tenableContrastChecker: false\n\t}\n}\n```\n\n### color.\\_\\_experimentalDuotone\n\n_**Note:** Deprecated since WordPress 6.3._\n\nThis property has been replaced by [`filter.duotone`](#filterduotone).\n\n### color.gradients\n\nThis property adds UI controls which allow the user to apply a gradient background to a block.\n\n```js\nsupports: {\n    color: {\n        gradients: true,\n        \/\/ Default values must be disabled if you don't want to use them with gradients.\n        background: false,\n        text: false\n    }\n}\n```\n\nGradient presets are sourced from `editor-gradient-presets` [theme support](\/docs\/how-to-guides\/themes\/theme-support.md#block-gradient-presets).\n\nWhen the block declares support for `color.gradient`, the attributes definition is extended to include two new attributes: `gradient` and `style`:\n\n-   `gradient`: an attribute of `string` type with no default assigned.\n\n    When a user chooses from the list of preset gradients, the preset slug is stored in the `gradient` attribute.\n\n    The block can apply a default preset gradient by specifying its own attribute with a default. For example:\n\n    ```js\n    attributes: {\n        gradient: {\n            type: 'string',\n            default: 'some-preset-gradient-slug',\n        }\n    }\n    ```\n\n-   `style`: an attribute of `object` type with no default assigned.\n\n    When a custom gradient is selected (i.e. using the custom gradient picker), the custom gradient value is stored in the `style.color.gradient` attribute.\n\n    The block can apply a default custom gradient by specifying its own attribute with a default. For example:\n\n    ```js\n    attributes: {\n        style: {\n            type: 'object',\n            default: {\n                color: {\n                    gradient: 'linear-gradient(135deg,rgb(170,187,204) 0%,rgb(17,34,51) 100%)',\n                }\n            }\n        }\n    }\n    ```\n\n### color.heading\n\n_**Note:** Since WordPress 6.5._\n\nThis property adds block controls which allow the user to set heading colors in a block. Heading colors are disabled by default.\n\nTo enable heading color support, set `color.heading` to `true`.\n\n```js\nsupports: {\n\tcolor: {\n\t\t\/\/ Enable heading color support.\n\t\theading: true\n\t}\n}\n```\n\nHeading color presets are sourced from the `editor-color-palette` [theme support](\/docs\/how-to-guides\/themes\/theme-support.md#block-color-palettes).\n\nWhen the block declares support for `color.heading`, the attributes definition is extended to include the `style` attribute:\n\n-   `style`: an attribute of `object` type with no default assigned.\n\n    When a heading color is selected, the color value is stored in the `style.elements.heading.color.text` and `style.elements.heading.color.background` attribute.\n\n    The block can apply default heading colors by specifying its own attribute with a default. For example:\n\n    ```js\n    attributes: {\n        style: {\n            type: 'object',\n            default: {\n                elements: {\n                    heading: {\n                        color: {\n                            text: 'var:preset|color|contrast',\n    \t\t\t\t\t    background: '#000000',\n                        }\n                    }\n                }\n            }\n        }\n    }\n    ```\n\n### color.link\n\nThis property adds block controls which allow the user to set link colors in a block. Link colors are disabled by default.\n\nTo enable link color support, set `color.link` to `true`.\n\n```js\nsupports: {\n\tcolor: {\n\t\tlink: true\n\t}\n}\n```\n\nLink color presets are sourced from the `editor-color-palette` [theme support](\/docs\/how-to-guides\/themes\/theme-support.md#block-color-palettes).\n\nWhen the block declares support for `color.link`, the attributes definition is extended to include the `style` attribute:\n\n-   `style`: an attribute of `object` type with no default assigned.\n\n    When a link color is selected, the color value is stored in the `style.elements.link.color.text` and `style.elements.link.:hover.color.text` attribute.\n\n    The block can apply default link colors by specifying its own attribute with a default. For example:\n\n    ```js\n    attributes: {\n        style: {\n            type: 'object',\n            default: {\n                elements: {\n                    link: {\n                        color: {\n                            text: 'var:preset|color|contrast',\n                        },\n\t\t\t\t\t\t\":hover\": { \n\t\t\t\t\t\t\tcolor: { \n\t\t\t\t\t\t\t\ttext: \"#000000\" \n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t}\n                    }\n                }\n            }\n        }\n    }\n    ```\n\n### color.text\n\nThis property adds block controls which allow the user to set text color in a block.\n\nWhen color support is declared, this property is enabled by default (along with background), so simply setting color will enable text color.\n\n```js\nsupports: {\n\tcolor: true \/\/ Enables background and text, but not link.\n}\n```\n\nTo disable text color support while keeping other color supports enabled, set `color.text` to `false`.\n\n```js\nsupports: {\n\tcolor: {\n\t\t\/\/ Disable text color support.\n\t\ttext: false\n\t}\n}\n```\n\nText color presets are sourced from the `editor-color-palette` [theme support](\/docs\/how-to-guides\/themes\/theme-support.md#block-color-palettes).\n\nWhen the block declares support for `color.text`, the attributes definition is extended to include two new attributes: `textColor` and `style`:\n\n-   `textColor`: an attribute of `string` type with no default assigned.\n\n    When a user chooses from the list of preset text colors, the preset slug is stored in the `textColor` attribute.\n\n    The block can apply a default preset text color by specifying its own attribute with a default. For example:\n\n    ```js\n    attributes: {\n        textColor: {\n            type: 'string',\n            default: 'some-preset-text-color-slug',\n        }\n    }\n    ```\n\n-   `style`: an attribute of `object` type with no default assigned.\n\n    When a custom text color is selected (i.e. using the custom color picker), the custom color value is stored in the `style.color.text` attribute.\n\n    The block can apply a default custom text color by specifying its own attribute with a default. For example:\n\n    ```js\n    attributes: {\n        style: {\n            type: 'object',\n            default: {\n                color: {\n                    text: '#aabbcc',\n                }\n            }\n        }\n    }\n    ```\n\n## customClassName\n\n-   Type: `boolean`\n-   Default value: `true`\n\nThis property adds a field to define a custom className for the block's wrapper.\n\n```js\nsupports: {\n\t\/\/ Remove the support for the custom className.\n\tcustomClassName: false\n}\n```\n\n## dimensions\n\n_**Note:** Since WordPress 6.2._\n\n-   Type: `Object`\n-   Default value: null\n-   Subproperties:\n    -   `minHeight`: type `boolean`, default value `false`\n\nThis value signals that a block supports some of the CSS style properties related to dimensions. When it does, the block editor will show UI controls for the user to set their values if [the theme declares support](\/docs\/how-to-guides\/themes\/global-settings-and-styles.md#opt-in-into-ui-controls).\n\n```js\nsupports: {\n\tdimensions: {\n\t\taspectRatio: true \/\/ Enable aspect ratio control.\n\t\tminHeight: true \/\/ Enable min height control.\n\t}\n}\n```\n\nWhen a block declares support for a specific dimensions property, its attributes definition is extended to include the `style` attribute.\n\n-   `style`: an attribute of `object` type with no default assigned. This is added when `aspectRatio` or `minHeight` support is declared. It stores the custom values set by the user. For example:\n\n```js\nattributes: {\n    style: {\n        dimensions: {\n            aspectRatio: \"16\/9\",\n            minHeight: \"50vh\"\n        }\n    }\n}\n```\n\n## filter\n\n-   Type: `Object`\n-   Default value: null\n-   Subproperties:\n    -   `duotone`: type `boolean`, default value `false`\n\nThis value signals that a block supports some of the properties related to filters. When it does, the block editor will show UI controls for the user to set their values.\n\n### filter.duotone\n\nThis property adds UI controls which allow the user to apply a duotone filter to\na block or part of a block.\n\n```js\nsupports: {\n    filter: {\n        \/\/ Enable duotone support\n        duotone: true\n    }\n},\nselectors: {\n    filter: {\n        \/\/ Apply the filter to img elements inside the image block\n        duotone: '.wp-block-image img'\n    }\n}\n```\n\nThe filter can be applied to an element inside the block by setting the `selectors.filter.duotone` selector.\n\nDuotone presets are sourced from `color.duotone` in [theme.json](\/docs\/how-to-guides\/themes\/global-settings-and-styles.md).\n\nWhen the block declares support for `filter.duotone`, the attributes definition is extended to include the attribute `style`:\n\n-   `style`: an attribute of `object` type with no default assigned.\n\n    The block can apply a default duotone color by specifying its own attribute with a default. For example:\n\n    ```js\n    attributes: {\n        style: {\n            type: 'object',\n            default: {\n                color: {\n                    duotone: [\n                        '#FFF',\n                        '#000'\n                    ]\n                }\n            }\n        }\n    }\n    ```\n\n## html\n\n-   Type: `boolean`\n-   Default value: `true`\n\nBy default, a block's markup can be edited individually. To disable this behavior, set `html` to `false`.\n\n```js\nsupports: {\n\t\/\/ Remove support for an HTML mode.\n\thtml: false\n}\n```\n\n## inserter\n\n-   Type: `boolean`\n-   Default value: `true`\n\nBy default, all blocks will appear in the inserter, block transforms menu, Style Book, etc. To hide a block from all parts of the user interface so that it can only be inserted programmatically, set `inserter` to `false`.\n\n```js\nsupports: {\n\t\/\/ Hide this block from the inserter.\n\tinserter: false\n}\n```\n\n## interactivity\n\n-   Type: `boolean` or `object`\n-   Default value: `false`\n-   Subproperties:\n    -   `clientNavigation`: type `boolean`, default value `false`\n    -   `interactive`: type `boolean`, default value `false`\n\nIndicates if the block is using Interactivity API features.\n\nThe `clientNavigation` sub-property indicates whether a block is compatible with the Interactivity API client-side navigation.\nSet it to true only if the block is not interactive or if it is interactive using the Interactivity API. Set it to false if the block is interactive but uses vanilla JS, jQuery or another JS framework\/library other than the Interactivity API.\n\nThe `interactive` sub-property indicates whether the block is using the Interactivity API directives.\n\n## layout\n\n-   Type: `boolean` or `Object`\n-   Default value: null\n-   Subproperties:\n    -   `default`: type `Object`, default value null\n    -   `allowSwitching`: type `boolean`, default value `false`\n    -   `allowEditing`: type `boolean`, default value `true`\n    -   `allowInheriting`: type `boolean`, default value `true`\n    -   `allowSizingOnChildren`: type `boolean`, default value `false`\n    -   `allowVerticalAlignment`: type `boolean`, default value `true`\n    -   `allowJustification`: type `boolean`, default value `true`\n    -   `allowOrientation`: type `boolean`, default value `true`\n    -   `allowCustomContentAndWideSize`: type `boolean`, default value `true`\n\nThis value only applies to blocks that are containers for inner blocks. If set to `true` the layout type will be `flow`. For other layout types it's necessary to set the `type` explicitly inside the `default` object.\n\n### layout.default\n\n-   Type: `Object`\n-   Default value: null\n\nAllows setting the `type` property to define what layout type is default for the block, and also default values for any properties inherent to that layout type. For example, for a `flex` layout, a default value can be set for `flexWrap`.\n\n### layout.allowSwitching\n\n-   Type: `boolean`\n-   Default value: `false`\n\nExposes a switcher control that allows toggling between all existing layout types.\n\n### layout.allowEditing\n\n-   Type: `boolean`\n-   Default value: `true`\n\nDetermines display of layout controls in the block sidebar. If set to false, layout controls will be hidden.\n\n### layout.allowInheriting\n\n-   Type: `boolean`\n-   Default value: `true`\n\nFor the `flow` layout type only, determines display of the \"Inner blocks use content width\" toggle.\n\n### layout.allowSizingOnChildren\n\n-   Type: `boolean`\n-   Default value: `false`\n\nFor the `flex` layout type only, determines display of sizing controls (Fit\/Fill\/Fixed) on all child blocks of the flex block.\n\n### layout.allowVerticalAlignment\n\n-   Type: `boolean`\n-   Default value: `true`\n\nFor the `flex` layout type only, determines display of the vertical alignment control in the block toolbar.\n\n### layout.allowJustification\n\n-   Type: `boolean`\n-   Default value: `true`\n\nFor the `flex` layout type, determines display of the justification control in the block toolbar and block sidebar. For the `constrained` layout type, determines display of justification control in the block sidebar.\n\n### layout.allowOrientation\n\n-   Type: `boolean`\n-   Default value: `true`\n\nFor the `flex` layout type only, determines display of the orientation control in the block toolbar.\n\n### layout.allowCustomContentAndWideSize\n\n-   Type: `boolean`\n-   Default value: `true`\n\nFor the `constrained` layout type only, determines display of the custom content and wide size controls in the block sidebar.\n\n## lock\n\n-   Type: `boolean`\n-   Default value: `true`\n\nA block may want to disable the ability to toggle the lock state. It can be locked\/unlocked by a user from the block \"Options\" dropdown by default. To disable this behavior, set `lock` to `false`.\n\n```js\nsupports: {\n\t\/\/ Remove support for locking UI.\n\tlock: false\n}\n```\n\n## multiple\n\n-   Type: `boolean`\n-   Default value: `true`\n\nA non-multiple block can be inserted into each post, one time only. For example, the built-in 'More' block cannot be inserted again if it already exists in the post being edited. A non-multiple block's icon is automatically dimmed (unclickable) to prevent multiple instances.\n\n```js\nsupports: {\n\t\/\/ Use the block just once per post\n\tmultiple: false\n}\n```\n\n## position\n\n_**Note:** Since WordPress 6.2._\n\n-   Type: `Object`\n-   Default value: null\n-   Subproperties:\n    -   `sticky`: type `boolean`, default value `false`\n\nThis value signals that a block supports some of the CSS style properties related to position. When it does, the block editor will show UI controls for the user to set their values if [the theme declares support](\/docs\/how-to-guides\/themes\/global-settings-and-styles.md#opt-in-into-ui-controls).\n\nNote that sticky position controls are currently only available for blocks set at the root level of the document. Setting a block to the `sticky` position will stick the block to its most immediate parent when the user scrolls the page.\n\n```js\nsupports: {\n\tposition: {\n\t\tsticky: true \/\/ Enable selecting sticky position.\n\t}\n}\n```\n\nWhen the block declares support for a specific position property, its attributes definition is extended to include the `style` attribute.\n\n-   `style`: an attribute of `object` type with no default assigned. This is added when `sticky` support is declared. It stores the custom values set by the user. For example:\n\n```js\nattributes: {\n    style: {\n        position: {\n            type: \"sticky\",\n            top: \"0px\"\n        }\n    }\n}\n```\n\n## renaming\n\n_**Note:** Since WordPress 6.5._\n\n-   Type: `boolean`\n-   Default value: `true`\n\nBy default, a block can be renamed by a user from the block 'Options' dropdown or the 'Advanced' panel. To disable this behavior, set renaming to false.\n\n```js\nsupports: {\n\t\/\/ Don't allow the block to be renamed in the editor.\n\trenaming: false,\n}\n```\n\n## reusable\n\n-   Type: `boolean`\n-   Default value: `true`\n\nA block may want to disable the ability of being converted into a reusable block. By default all blocks can be converted to a reusable block. If supports reusable is set to false, the option to convert the block into a reusable block will not appear.\n\n```js\nsupports: {\n\t\/\/ Don't allow the block to be converted into a reusable block.\n\treusable: false,\n}\n```\n\n## shadow\n\n_**Note:** Since WordPress 6.5._\n\n-   Type: `boolean`\n-   Default value: `false`\n\nThis property adds block controls which allow the user to set a box shadow for a block. Shadows are disabled by default.\n\n```js\nsupports: {\n\tshadow: true \/\/ Enable the box-shadow picker.\n}\n```\n\nShadow presets are sourced from the shadow presets defined in `theme.json`.\n\nWhen the block declares support for `shadow`, the attributes definition is extended to include the `style` attribute:\n\n-   `style`: an attribute of `object` type with no default assigned.\n\n    When a shadow is selected, the color value is stored in the `style.shadow`.\n\n    The block can apply a default shadow by specifying its own attribute with a default. For example:\n\n    ```js\n    attributes: {\n        style: {\n            type: 'object',\n            default: {\n    \t\t\tshadow: \"var:preset|shadow|deep\"\n            }\n        }\n    }\n    ```\n\n## spacing\n\n-   Type: `Object`\n-   Default value: null\n-   Subproperties:\n    -   `margin`: type `boolean` or `array`, default value `false`\n    -   `padding`: type `boolean` or `array`, default value `false`\n    -   `blockGap`: type `boolean` or `array`, default value `false`\n\nThis value signals that a block supports some of the CSS style properties related to spacing. When it does, the block editor will show UI controls for the user to set their values if [the theme declares support](\/docs\/how-to-guides\/themes\/theme-support.md#cover-block-padding).\n\n```js\nsupports: {\n    spacing: {\n        margin: true,  \/\/ Enable margin UI control.\n        padding: true, \/\/ Enable padding UI control.\n        blockGap: true,  \/\/ Enables block spacing UI control for blocks that also use `layout`.\n    }\n}\n```\n\nWhen the block declares support for a specific spacing property, its attributes definition is extended to include the `style` attribute.\n\n-   `style`: an attribute of `object` type with no default assigned. This is added when `margin` or `padding` support is declared. It stores the custom values set by the user. For example:\n\n```js\nattributes: {\n    style: {\n        margin: 'value',\n        padding: {\n            top: 'value',\n        }\n    }\n}\n```\n\nA spacing property may define an array of allowable sides \u2013 'top', 'right', 'bottom', 'left' \u2013 that can be configured. When such arbitrary sides are defined, only UI controls for those sides are displayed.\n\nAxial sides are defined with the `vertical` and `horizontal` terms, and display a single UI control for each axial pair (for example, `vertical` controls both the top and bottom sides). A spacing property may support arbitrary individual sides **or** axial sides, but not a mix of both.\n\nNote: `blockGap` accepts `vertical` and `horizontal` axial sides, which adjust gap column and row values. `blockGap` doesn't support arbitrary sides.\n\n```js\nsupports: {\n    spacing: {\n        margin: [ 'top', 'bottom' ],             \/\/ Enable margin for arbitrary sides.\n        padding: true,                           \/\/ Enable padding for all sides.\n        blockGap: [ 'horizontal', 'vertical' ],  \/\/ Enables axial (column\/row) block spacing controls\n    }\n}\n```\n\n## typography\n\n-   Type: `Object`\n-   Default value: `null`\n-   Subproperties:\n    -   `fontSize`: type `boolean`, default value `false`\n    -   `lineHeight`: type `boolean`, default value `false`\n\nThe presence of this object signals that a block supports some typography related properties. When it does, the block editor will show a typography UI allowing the user to control their values.\n\n```js\nsupports: {\n    typography: {\n        \/\/ Enable support and UI control for font-size.\n        fontSize: true,\n        \/\/ Enable support and UI control for line-height.\n        lineHeight: true,\n    },\n}\n```\n\n### typography.fontSize\n\n-   Type: `boolean`\n-   Default value: `false`\n\nThis value signals that a block supports the font-size CSS style property. When it does, the block editor will show an UI control for the user to set its value.\n\nThe values shown in this control are the ones declared by the theme via the `editor-font-sizes` [theme support](\/docs\/how-to-guides\/themes\/theme-support.md#block-font-sizes), or the default ones if none are provided.\n\n```js\nsupports: {\n    typography: {\n        \/\/ Enable support and UI control for font-size.\n        fontSize: true,\n    },\n}\n```\n\nWhen the block declares support for `fontSize`, the attributes definition is extended to include two new attributes: `fontSize` and `style`:\n\n-   `fontSize`: an attribute of `string` type with no default assigned. It stores any preset value selected by the user. The block can apply a default fontSize by specifying its own `fontSize` attribute with a default. For example:\n\n```js\nattributes: {\n    fontSize: {\n        type: 'string',\n        default: 'some-value',\n    }\n}\n```\n\n-   `style`: an attribute of `object` type with no default assigned. It stores the custom values set by the user and is shared with other block supports such as color. The block can apply a default style by specifying its own `style` attribute with a default. For example:\n\n```js\nattributes: {\n    style: {\n        type: 'object',\n        default: {\n            typography: {\n                fontSize: 'value'\n            }\n        }\n    }\n}\n```\n\n### typography.lineHeight\n\n-   Type: `boolean`\n-   Default value: `false`\n\nThis value signals that a block supports the line-height CSS style property. When it does, the block editor will show an UI control for the user to set its value if [the theme declares support](\/docs\/how-to-guides\/themes\/theme-support.md#supporting-custom-line-heights).\n\n```js\nsupports: {\n    typography: {\n        \/\/ Enable support and UI control for line-height.\n        lineHeight: true,\n    },\n}\n```\n\nWhen the block declares support for `lineHeight`, the attributes definition is extended to include a new attribute `style` of `object` type with no default assigned. It stores the custom value set by the user. The block can apply a default style by specifying its own `style` attribute with a default. For example:\n\n```js\nattributes: {\n    style: {\n        type: 'object',\n        default: {\n            typography: {\n                lineHeight: 'value'\n            }\n        }\n    }\n}\n```\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/data-core-keyboard-shortcuts.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">The Keyboard Shortcuts Data<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Namespace: <code>core\/keyboard-shortcuts<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/keyboard-shortcuts\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getAllShortcutKeyCombinations<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the shortcuts that include aliases for a given shortcut name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { store as keyboardShortcutsStore } from '@wordpress\/keyboard-shortcuts';\nimport { useSelect } from '@wordpress\/data';\nimport { createInterpolateElement } from '@wordpress\/element';\nimport { sprintf } from '@wordpress\/i18n';\n\nconst ExampleComponent = () => {\n\tconst allShortcutKeyCombinations = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getAllShortcutKeyCombinations(\n\t\t\t\t'core\/edit-post\/next-region'\n\t\t\t),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\tallShortcutKeyCombinations.length > 0 &amp;&amp; (\n\t\t\t<ul>\n\t\t\t\t{ allShortcutKeyCombinations.map(\n\t\t\t\t\t( { character, modifier }, index ) => (\n\t\t\t\t\t\t<li key=\"{\" index=\"\" }=\"\">\n\t\t\t\t\t\t\t{ createInterpolateElement(\n\t\t\t\t\t\t\t\tsprintf(\n\t\t\t\t\t\t\t\t\t'Character: <code>%s<\/code> \/ Modifier: <code>%s<\/code>',\n\t\t\t\t\t\t\t\t\tcharacter,\n\t\t\t\t\t\t\t\t\tmodifier\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcode: <code>,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t<\/code><\/li><code>\n\t\t\t\t\t)\n\t\t\t\t) }\n\t\t\t<\/code><\/ul><code>\n\t\t)\n\t);\n};\n<\/code><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Shortcut name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>WPShortcutKeyCombination[]<\/code>: Key combinations.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getAllShortcutRawKeyCombinations<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the raw representation of all the keyboard combinations of a given shortcut name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { store as keyboardShortcutsStore } from '@wordpress\/keyboard-shortcuts';\nimport { useSelect } from '@wordpress\/data';\nimport { createInterpolateElement } from '@wordpress\/element';\nimport { sprintf } from '@wordpress\/i18n';\n\nconst ExampleComponent = () => {\n\tconst allShortcutRawKeyCombinations = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getAllShortcutRawKeyCombinations(\n\t\t\t\t'core\/edit-post\/next-region'\n\t\t\t),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\tallShortcutRawKeyCombinations.length > 0 &amp;&amp; (\n\t\t\t<ul>\n\t\t\t\t{ allShortcutRawKeyCombinations.map(\n\t\t\t\t\t( shortcutRawKeyCombination, index ) => (\n\t\t\t\t\t\t<li key=\"{\" index=\"\" }=\"\">\n\t\t\t\t\t\t\t{ createInterpolateElement(\n\t\t\t\t\t\t\t\tsprintf(\n\t\t\t\t\t\t\t\t\t' <code>%s<\/code>',\n\t\t\t\t\t\t\t\t\tshortcutRawKeyCombination\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcode: <code>,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t<\/code><\/li><code>\n\t\t\t\t\t)\n\t\t\t\t) }\n\t\t\t<\/code><\/ul><code>\n\t\t)\n\t);\n};\n<\/code><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Shortcut name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string[]<\/code>: Shortcuts.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getCategoryShortcuts<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the shortcut names list for a given category name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { store as keyboardShortcutsStore } from '@wordpress\/keyboard-shortcuts';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst categoryShortcuts = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getCategoryShortcuts( 'block' ),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\tcategoryShortcuts.length > 0 &amp;&amp; (\n\t\t\t<ul>\n\t\t\t\t{ categoryShortcuts.map( ( categoryShortcut ) => (\n\t\t\t\t\t<li key=\"{\" categoryshortcut=\"\" }=\"\">{ categoryShortcut }<\/li>\n\t\t\t\t) ) }\n\t\t\t<\/ul>\n\t\t)\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Category name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string[]<\/code>: Shortcut names.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getShortcutAliases<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the aliases for a given shortcut name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { store as keyboardShortcutsStore } from '@wordpress\/keyboard-shortcuts';\nimport { useSelect } from '@wordpress\/data';\nimport { createInterpolateElement } from '@wordpress\/element';\nimport { sprintf } from '@wordpress\/i18n';\nconst ExampleComponent = () => {\n\tconst shortcutAliases = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getShortcutAliases(\n\t\t\t\t'core\/edit-post\/next-region'\n\t\t\t),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\tshortcutAliases.length > 0 &amp;&amp; (\n\t\t\t<ul>\n\t\t\t\t{ shortcutAliases.map( ( { character, modifier }, index ) => (\n\t\t\t\t\t<li key=\"{\" index=\"\" }=\"\">\n\t\t\t\t\t\t{ createInterpolateElement(\n\t\t\t\t\t\t\tsprintf(\n\t\t\t\t\t\t\t\t'Character: <code>%s<\/code> \/ Modifier: <code>%s<\/code>',\n\t\t\t\t\t\t\t\tcharacter,\n\t\t\t\t\t\t\t\tmodifier\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcode: <code>,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t) }\n\t\t\t\t\t<\/code><\/li><code>\n\t\t\t\t) ) }\n\t\t\t<\/code><\/ul><code>\n\t\t)\n\t);\n};\n<\/code><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Shortcut name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>WPShortcutKeyCombination[]<\/code>: Key combinations.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getShortcutDescription<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the shortcut description given its name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { store as keyboardShortcutsStore } from '@wordpress\/keyboard-shortcuts';\nimport { useSelect } from '@wordpress\/data';\nimport { __ } from '@wordpress\/i18n';\nconst ExampleComponent = () => {\n\tconst shortcutDescription = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getShortcutDescription(\n\t\t\t\t'core\/edit-post\/next-region'\n\t\t\t),\n\t\t&#91;]\n\t);\n\n\treturn shortcutDescription ? (\n\t\t<div>{ shortcutDescription }<\/div>\n\t) : (\n\t\t<div>{ __( 'No description.' ) }<\/div>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Shortcut name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string?<\/code>: Shortcut description.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getShortcutKeyCombination<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the main key combination for a given shortcut name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { store as keyboardShortcutsStore } from '@wordpress\/keyboard-shortcuts';\nimport { useSelect } from '@wordpress\/data';\nimport { createInterpolateElement } from '@wordpress\/element';\nimport { sprintf } from '@wordpress\/i18n';\nconst ExampleComponent = () => {\n\tconst { character, modifier } = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getShortcutKeyCombination(\n\t\t\t\t'core\/edit-post\/next-region'\n\t\t\t),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\t<div>\n\t\t\t{ createInterpolateElement(\n\t\t\t\tsprintf(\n\t\t\t\t\t'Character: <code>%s<\/code> \/ Modifier: <code>%s<\/code>',\n\t\t\t\t\tcharacter,\n\t\t\t\t\tmodifier\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tcode: <code>,\n\t\t\t\t}\n\t\t\t) }\n\t\t<\/code><\/div><code>\n\t);\n};\n<\/code><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Shortcut name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>WPShortcutKeyCombination?<\/code>: Key combination.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getShortcutRepresentation<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns a string representing the main key combination for a given shortcut name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { store as keyboardShortcutsStore } from '@wordpress\/keyboard-shortcuts';\nimport { useSelect } from '@wordpress\/data';\nimport { sprintf } from '@wordpress\/i18n';\n\nconst ExampleComponent = () => {\n\tconst { display, raw, ariaLabel } = useSelect( ( select ) => {\n\t\treturn {\n\t\t\tdisplay: select( keyboardShortcutsStore ).getShortcutRepresentation(\n\t\t\t\t'core\/edit-post\/next-region'\n\t\t\t),\n\t\t\traw: select( keyboardShortcutsStore ).getShortcutRepresentation(\n\t\t\t\t'core\/edit-post\/next-region',\n\t\t\t\t'raw'\n\t\t\t),\n\t\t\tariaLabel: select(\n\t\t\t\tkeyboardShortcutsStore\n\t\t\t).getShortcutRepresentation(\n\t\t\t\t'core\/edit-post\/next-region',\n\t\t\t\t'ariaLabel'\n\t\t\t),\n\t\t};\n\t}, &#91;] );\n\n\treturn (\n\t\t<ul>\n\t\t\t<li>{ sprintf( 'display string: %s', display ) }<\/li>\n\t\t\t<li>{ sprintf( 'raw string: %s', raw ) }<\/li>\n\t\t\t<li>{ sprintf( 'ariaLabel string: %s', ariaLabel ) }<\/li>\n\t\t<\/ul>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Shortcut name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>representation<\/em> <code>keyof FORMATTING_METHODS<\/code>: Type of representation (display, raw, ariaLabel).<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string?<\/code>: Shortcut representation.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/keyboard-shortcuts\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Actions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/keyboard-shortcuts\/src\/store\/actions.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">registerShortcut<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to register a new keyboard shortcut.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useEffect } from 'react';\nimport { store as keyboardShortcutsStore } from '@wordpress\/keyboard-shortcuts';\nimport { useSelect, useDispatch } from '@wordpress\/data';\nimport { __ } from '@wordpress\/i18n';\n\nconst ExampleComponent = () => {\n\tconst { registerShortcut } = useDispatch( keyboardShortcutsStore );\n\n\tuseEffect( () => {\n\t\tregisterShortcut( {\n\t\t\tname: 'custom\/my-custom-shortcut',\n\t\t\tcategory: 'my-category',\n\t\t\tdescription: __( 'My custom shortcut' ),\n\t\t\tkeyCombination: {\n\t\t\t\tmodifier: 'primary',\n\t\t\t\tcharacter: 'j',\n\t\t\t},\n\t\t} );\n\t}, &#91;] );\n\n\tconst shortcut = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getShortcutKeyCombination(\n\t\t\t\t'custom\/my-custom-shortcut'\n\t\t\t),\n\t\t&#91;]\n\t);\n\n\treturn shortcut ? (\n\t\t<p>{ __( 'Shortcut is registered.' ) }<\/p>\n\t) : (\n\t\t<p>{ __( 'Shortcut is not registered.' ) }<\/p>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>config<\/em> <code>WPShortcutConfig<\/code>: Shortcut config.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: action.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">unregisterShortcut<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to unregister a keyboard shortcut.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useEffect } from 'react';\nimport { store as keyboardShortcutsStore } from '@wordpress\/keyboard-shortcuts';\nimport { useSelect, useDispatch } from '@wordpress\/data';\nimport { __ } from '@wordpress\/i18n';\n\nconst ExampleComponent = () => {\n\tconst { unregisterShortcut } = useDispatch( keyboardShortcutsStore );\n\n\tuseEffect( () => {\n\t\tunregisterShortcut( 'core\/edit-post\/next-region' );\n\t}, &#91;] );\n\n\tconst shortcut = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getShortcutKeyCombination(\n\t\t\t\t'core\/edit-post\/next-region'\n\t\t\t),\n\t\t&#91;]\n\t);\n\n\treturn shortcut ? (\n\t\t<p>{ __( 'Shortcut is not unregistered.' ) }<\/p>\n\t) : (\n\t\t<p>{ __( 'Shortcut is unregistered.' ) }<\/p>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Shortcut name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: action.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/keyboard-shortcuts\/src\/store\/actions.js) -->\n<!-- \/wp:html -->",
        "markdown": "# The Keyboard Shortcuts Data\n\nNamespace: `core\/keyboard-shortcuts`.\n\n## Selectors\n\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/keyboard-shortcuts\/src\/store\/selectors.js) -->\n\n### getAllShortcutKeyCombinations\n\nReturns the shortcuts that include aliases for a given shortcut name.\n\n_Usage_\n\n```js\nimport { store as keyboardShortcutsStore } from '@wordpress\/keyboard-shortcuts';\nimport { useSelect } from '@wordpress\/data';\nimport { createInterpolateElement } from '@wordpress\/element';\nimport { sprintf } from '@wordpress\/i18n';\n\nconst ExampleComponent = () => {\n\tconst allShortcutKeyCombinations = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getAllShortcutKeyCombinations(\n\t\t\t\t'core\/edit-post\/next-region'\n\t\t\t),\n\t\t[]\n\t);\n\n\treturn (\n\t\tallShortcutKeyCombinations.length > 0 && (\n\t\t\t<ul>\n\t\t\t\t{ allShortcutKeyCombinations.map(\n\t\t\t\t\t( { character, modifier }, index ) => (\n\t\t\t\t\t\t<li key={ index }>\n\t\t\t\t\t\t\t{ createInterpolateElement(\n\t\t\t\t\t\t\t\tsprintf(\n\t\t\t\t\t\t\t\t\t'Character: <code>%s<\/code> \/ Modifier: <code>%s<\/code>',\n\t\t\t\t\t\t\t\t\tcharacter,\n\t\t\t\t\t\t\t\t\tmodifier\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcode: <code \/>,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t<\/li>\n\t\t\t\t\t)\n\t\t\t\t) }\n\t\t\t<\/ul>\n\t\t)\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Global state.\n-   _name_ `string`: Shortcut name.\n\n_Returns_\n\n-   `WPShortcutKeyCombination[]`: Key combinations.\n\n### getAllShortcutRawKeyCombinations\n\nReturns the raw representation of all the keyboard combinations of a given shortcut name.\n\n_Usage_\n\n```js\nimport { store as keyboardShortcutsStore } from '@wordpress\/keyboard-shortcuts';\nimport { useSelect } from '@wordpress\/data';\nimport { createInterpolateElement } from '@wordpress\/element';\nimport { sprintf } from '@wordpress\/i18n';\n\nconst ExampleComponent = () => {\n\tconst allShortcutRawKeyCombinations = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getAllShortcutRawKeyCombinations(\n\t\t\t\t'core\/edit-post\/next-region'\n\t\t\t),\n\t\t[]\n\t);\n\n\treturn (\n\t\tallShortcutRawKeyCombinations.length > 0 && (\n\t\t\t<ul>\n\t\t\t\t{ allShortcutRawKeyCombinations.map(\n\t\t\t\t\t( shortcutRawKeyCombination, index ) => (\n\t\t\t\t\t\t<li key={ index }>\n\t\t\t\t\t\t\t{ createInterpolateElement(\n\t\t\t\t\t\t\t\tsprintf(\n\t\t\t\t\t\t\t\t\t' <code>%s<\/code>',\n\t\t\t\t\t\t\t\t\tshortcutRawKeyCombination\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcode: <code \/>,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t<\/li>\n\t\t\t\t\t)\n\t\t\t\t) }\n\t\t\t<\/ul>\n\t\t)\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Global state.\n-   _name_ `string`: Shortcut name.\n\n_Returns_\n\n-   `string[]`: Shortcuts.\n\n### getCategoryShortcuts\n\nReturns the shortcut names list for a given category name.\n\n_Usage_\n\n```js\nimport { store as keyboardShortcutsStore } from '@wordpress\/keyboard-shortcuts';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst categoryShortcuts = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getCategoryShortcuts( 'block' ),\n\t\t[]\n\t);\n\n\treturn (\n\t\tcategoryShortcuts.length > 0 && (\n\t\t\t<ul>\n\t\t\t\t{ categoryShortcuts.map( ( categoryShortcut ) => (\n\t\t\t\t\t<li key={ categoryShortcut }>{ categoryShortcut }<\/li>\n\t\t\t\t) ) }\n\t\t\t<\/ul>\n\t\t)\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Global state.\n-   _name_ `string`: Category name.\n\n_Returns_\n\n-   `string[]`: Shortcut names.\n\n### getShortcutAliases\n\nReturns the aliases for a given shortcut name.\n\n_Usage_\n\n```js\nimport { store as keyboardShortcutsStore } from '@wordpress\/keyboard-shortcuts';\nimport { useSelect } from '@wordpress\/data';\nimport { createInterpolateElement } from '@wordpress\/element';\nimport { sprintf } from '@wordpress\/i18n';\nconst ExampleComponent = () => {\n\tconst shortcutAliases = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getShortcutAliases(\n\t\t\t\t'core\/edit-post\/next-region'\n\t\t\t),\n\t\t[]\n\t);\n\n\treturn (\n\t\tshortcutAliases.length > 0 && (\n\t\t\t<ul>\n\t\t\t\t{ shortcutAliases.map( ( { character, modifier }, index ) => (\n\t\t\t\t\t<li key={ index }>\n\t\t\t\t\t\t{ createInterpolateElement(\n\t\t\t\t\t\t\tsprintf(\n\t\t\t\t\t\t\t\t'Character: <code>%s<\/code> \/ Modifier: <code>%s<\/code>',\n\t\t\t\t\t\t\t\tcharacter,\n\t\t\t\t\t\t\t\tmodifier\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcode: <code \/>,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t) }\n\t\t\t\t\t<\/li>\n\t\t\t\t) ) }\n\t\t\t<\/ul>\n\t\t)\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Global state.\n-   _name_ `string`: Shortcut name.\n\n_Returns_\n\n-   `WPShortcutKeyCombination[]`: Key combinations.\n\n### getShortcutDescription\n\nReturns the shortcut description given its name.\n\n_Usage_\n\n```js\nimport { store as keyboardShortcutsStore } from '@wordpress\/keyboard-shortcuts';\nimport { useSelect } from '@wordpress\/data';\nimport { __ } from '@wordpress\/i18n';\nconst ExampleComponent = () => {\n\tconst shortcutDescription = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getShortcutDescription(\n\t\t\t\t'core\/edit-post\/next-region'\n\t\t\t),\n\t\t[]\n\t);\n\n\treturn shortcutDescription ? (\n\t\t<div>{ shortcutDescription }<\/div>\n\t) : (\n\t\t<div>{ __( 'No description.' ) }<\/div>\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Global state.\n-   _name_ `string`: Shortcut name.\n\n_Returns_\n\n-   `string?`: Shortcut description.\n\n### getShortcutKeyCombination\n\nReturns the main key combination for a given shortcut name.\n\n_Usage_\n\n```js\nimport { store as keyboardShortcutsStore } from '@wordpress\/keyboard-shortcuts';\nimport { useSelect } from '@wordpress\/data';\nimport { createInterpolateElement } from '@wordpress\/element';\nimport { sprintf } from '@wordpress\/i18n';\nconst ExampleComponent = () => {\n\tconst { character, modifier } = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getShortcutKeyCombination(\n\t\t\t\t'core\/edit-post\/next-region'\n\t\t\t),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<div>\n\t\t\t{ createInterpolateElement(\n\t\t\t\tsprintf(\n\t\t\t\t\t'Character: <code>%s<\/code> \/ Modifier: <code>%s<\/code>',\n\t\t\t\t\tcharacter,\n\t\t\t\t\tmodifier\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tcode: <code \/>,\n\t\t\t\t}\n\t\t\t) }\n\t\t<\/div>\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Global state.\n-   _name_ `string`: Shortcut name.\n\n_Returns_\n\n-   `WPShortcutKeyCombination?`: Key combination.\n\n### getShortcutRepresentation\n\nReturns a string representing the main key combination for a given shortcut name.\n\n_Usage_\n\n```js\nimport { store as keyboardShortcutsStore } from '@wordpress\/keyboard-shortcuts';\nimport { useSelect } from '@wordpress\/data';\nimport { sprintf } from '@wordpress\/i18n';\n\nconst ExampleComponent = () => {\n\tconst { display, raw, ariaLabel } = useSelect( ( select ) => {\n\t\treturn {\n\t\t\tdisplay: select( keyboardShortcutsStore ).getShortcutRepresentation(\n\t\t\t\t'core\/edit-post\/next-region'\n\t\t\t),\n\t\t\traw: select( keyboardShortcutsStore ).getShortcutRepresentation(\n\t\t\t\t'core\/edit-post\/next-region',\n\t\t\t\t'raw'\n\t\t\t),\n\t\t\tariaLabel: select(\n\t\t\t\tkeyboardShortcutsStore\n\t\t\t).getShortcutRepresentation(\n\t\t\t\t'core\/edit-post\/next-region',\n\t\t\t\t'ariaLabel'\n\t\t\t),\n\t\t};\n\t}, [] );\n\n\treturn (\n\t\t<ul>\n\t\t\t<li>{ sprintf( 'display string: %s', display ) }<\/li>\n\t\t\t<li>{ sprintf( 'raw string: %s', raw ) }<\/li>\n\t\t\t<li>{ sprintf( 'ariaLabel string: %s', ariaLabel ) }<\/li>\n\t\t<\/ul>\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Global state.\n-   _name_ `string`: Shortcut name.\n-   _representation_ `keyof FORMATTING_METHODS`: Type of representation (display, raw, ariaLabel).\n\n_Returns_\n\n-   `string?`: Shortcut representation.\n\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/keyboard-shortcuts\/src\/store\/selectors.js) -->\n\n## Actions\n\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/keyboard-shortcuts\/src\/store\/actions.js) -->\n\n### registerShortcut\n\nReturns an action object used to register a new keyboard shortcut.\n\n_Usage_\n\n```js\nimport { useEffect } from 'react';\nimport { store as keyboardShortcutsStore } from '@wordpress\/keyboard-shortcuts';\nimport { useSelect, useDispatch } from '@wordpress\/data';\nimport { __ } from '@wordpress\/i18n';\n\nconst ExampleComponent = () => {\n\tconst { registerShortcut } = useDispatch( keyboardShortcutsStore );\n\n\tuseEffect( () => {\n\t\tregisterShortcut( {\n\t\t\tname: 'custom\/my-custom-shortcut',\n\t\t\tcategory: 'my-category',\n\t\t\tdescription: __( 'My custom shortcut' ),\n\t\t\tkeyCombination: {\n\t\t\t\tmodifier: 'primary',\n\t\t\t\tcharacter: 'j',\n\t\t\t},\n\t\t} );\n\t}, [] );\n\n\tconst shortcut = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getShortcutKeyCombination(\n\t\t\t\t'custom\/my-custom-shortcut'\n\t\t\t),\n\t\t[]\n\t);\n\n\treturn shortcut ? (\n\t\t<p>{ __( 'Shortcut is registered.' ) }<\/p>\n\t) : (\n\t\t<p>{ __( 'Shortcut is not registered.' ) }<\/p>\n\t);\n};\n```\n\n_Parameters_\n\n-   _config_ `WPShortcutConfig`: Shortcut config.\n\n_Returns_\n\n-   `Object`: action.\n\n### unregisterShortcut\n\nReturns an action object used to unregister a keyboard shortcut.\n\n_Usage_\n\n```js\nimport { useEffect } from 'react';\nimport { store as keyboardShortcutsStore } from '@wordpress\/keyboard-shortcuts';\nimport { useSelect, useDispatch } from '@wordpress\/data';\nimport { __ } from '@wordpress\/i18n';\n\nconst ExampleComponent = () => {\n\tconst { unregisterShortcut } = useDispatch( keyboardShortcutsStore );\n\n\tuseEffect( () => {\n\t\tunregisterShortcut( 'core\/edit-post\/next-region' );\n\t}, [] );\n\n\tconst shortcut = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getShortcutKeyCombination(\n\t\t\t\t'core\/edit-post\/next-region'\n\t\t\t),\n\t\t[]\n\t);\n\n\treturn shortcut ? (\n\t\t<p>{ __( 'Shortcut is not unregistered.' ) }<\/p>\n\t) : (\n\t\t<p>{ __( 'Shortcut is unregistered.' ) }<\/p>\n\t);\n};\n```\n\n_Parameters_\n\n-   _name_ `string`: Shortcut name.\n\n_Returns_\n\n-   `Object`: action.\n\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/keyboard-shortcuts\/src\/store\/actions.js) -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/data-core-rich-text.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Rich Text<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Namespace: <code>core\/rich-text<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/rich-text\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getFormatType<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns a format type by name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __, sprintf } from '@wordpress\/i18n';\nimport { store as richTextStore } from '@wordpress\/rich-text';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n   const { getFormatType } = useSelect(\n       ( select ) => select( richTextStore ),\n       &#91;]\n   );\n\n   const boldFormat = getFormatType( 'core\/bold' );\n\n   return boldFormat ? (\n       <ul>\n           { Object.entries( boldFormat )?.map( ( &#91; key, value ] ) => (\n               <li>\n                   { key } : { value }\n               <\/li>\n          ) ) }\n      <\/ul>\n   ) : (\n       __( 'Not Found' )\n   ;\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Format type name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object?<\/code>: Format type.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getFormatTypeForBareElement<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Gets the format type, if any, that can handle a bare element (without a data-format-type attribute), given the tag name of this element.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __, sprintf } from '@wordpress\/i18n';\nimport { store as richTextStore } from '@wordpress\/rich-text';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst { getFormatTypeForBareElement } = useSelect(\n\t\t( select ) => select( richTextStore ),\n\t\t&#91;]\n\t);\n\n\tconst format = getFormatTypeForBareElement( 'strong' );\n\n\treturn format &amp;&amp; <p>{ sprintf( __( 'Format name: %s' ), format.name ) }<\/p>;\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>bareElementTagName<\/em> <code>string<\/code>: The tag name of the element to find a format type for.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?Object<\/code>: Format type.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getFormatTypeForClassName<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Gets the format type, if any, that can handle an element, given its classes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __, sprintf } from '@wordpress\/i18n';\nimport { store as richTextStore } from '@wordpress\/rich-text';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst { getFormatTypeForClassName } = useSelect(\n\t\t( select ) => select( richTextStore ),\n\t\t&#91;]\n\t);\n\n\tconst format = getFormatTypeForClassName( 'has-inline-color' );\n\n\treturn format &amp;&amp; <p>{ sprintf( __( 'Format name: %s' ), format.name ) }<\/p>;\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>elementClassName<\/em> <code>string<\/code>: The classes of the element to find a format type for.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?Object<\/code>: Format type.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getFormatTypes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns all the available format types.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __, sprintf } from '@wordpress\/i18n';\nimport { store as richTextStore } from '@wordpress\/rich-text';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst { getFormatTypes } = useSelect(\n\t\t( select ) => select( richTextStore ),\n\t\t&#91;]\n\t);\n\n\tconst availableFormats = getFormatTypes();\n\n\treturn availableFormats ? (\n\t\t<ul>\n\t\t\t{ availableFormats?.map( ( format ) => (\n\t\t\t\t<li>{ format.name }<\/li>\n\t\t\t) ) }\n\t\t<\/ul>\n\t) : (\n\t\t__( 'No Formats available' )\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: Format types.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/rich-text\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Actions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/rich-text\/src\/store\/actions.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Nothing to document.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/rich-text\/src\/store\/actions.js) -->\n<!-- \/wp:html -->",
        "markdown": "# Rich Text\n\nNamespace: `core\/rich-text`.\n\n## Selectors\n\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/rich-text\/src\/store\/selectors.js) -->\n\n### getFormatType\n\nReturns a format type by name.\n\n_Usage_\n\n```js\nimport { __, sprintf } from '@wordpress\/i18n';\nimport { store as richTextStore } from '@wordpress\/rich-text';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n   const { getFormatType } = useSelect(\n       ( select ) => select( richTextStore ),\n       []\n   );\n\n   const boldFormat = getFormatType( 'core\/bold' );\n\n   return boldFormat ? (\n       <ul>\n           { Object.entries( boldFormat )?.map( ( [ key, value ] ) => (\n               <li>\n                   { key } : { value }\n               <\/li>\n          ) ) }\n      <\/ul>\n   ) : (\n       __( 'Not Found' )\n   ;\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n-   _name_ `string`: Format type name.\n\n_Returns_\n\n-   `Object?`: Format type.\n\n### getFormatTypeForBareElement\n\nGets the format type, if any, that can handle a bare element (without a data-format-type attribute), given the tag name of this element.\n\n_Usage_\n\n```js\nimport { __, sprintf } from '@wordpress\/i18n';\nimport { store as richTextStore } from '@wordpress\/rich-text';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst { getFormatTypeForBareElement } = useSelect(\n\t\t( select ) => select( richTextStore ),\n\t\t[]\n\t);\n\n\tconst format = getFormatTypeForBareElement( 'strong' );\n\n\treturn format && <p>{ sprintf( __( 'Format name: %s' ), format.name ) }<\/p>;\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n-   _bareElementTagName_ `string`: The tag name of the element to find a format type for.\n\n_Returns_\n\n-   `?Object`: Format type.\n\n### getFormatTypeForClassName\n\nGets the format type, if any, that can handle an element, given its classes.\n\n_Usage_\n\n```js\nimport { __, sprintf } from '@wordpress\/i18n';\nimport { store as richTextStore } from '@wordpress\/rich-text';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst { getFormatTypeForClassName } = useSelect(\n\t\t( select ) => select( richTextStore ),\n\t\t[]\n\t);\n\n\tconst format = getFormatTypeForClassName( 'has-inline-color' );\n\n\treturn format && <p>{ sprintf( __( 'Format name: %s' ), format.name ) }<\/p>;\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n-   _elementClassName_ `string`: The classes of the element to find a format type for.\n\n_Returns_\n\n-   `?Object`: Format type.\n\n### getFormatTypes\n\nReturns all the available format types.\n\n_Usage_\n\n```js\nimport { __, sprintf } from '@wordpress\/i18n';\nimport { store as richTextStore } from '@wordpress\/rich-text';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst { getFormatTypes } = useSelect(\n\t\t( select ) => select( richTextStore ),\n\t\t[]\n\t);\n\n\tconst availableFormats = getFormatTypes();\n\n\treturn availableFormats ? (\n\t\t<ul>\n\t\t\t{ availableFormats?.map( ( format ) => (\n\t\t\t\t<li>{ format.name }<\/li>\n\t\t\t) ) }\n\t\t<\/ul>\n\t) : (\n\t\t__( 'No Formats available' )\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n\n_Returns_\n\n-   `Array`: Format types.\n\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/rich-text\/src\/store\/selectors.js) -->\n\n## Actions\n\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/rich-text\/src\/store\/actions.js) -->\n\nNothing to document.\n\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/rich-text\/src\/store\/actions.js) -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/data-core-edit-post.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">The Editor\u2019s UI Data<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Namespace: <code>core\/edit-post<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/edit-post\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">areMetaBoxesInitialized<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if meta boxes are initialized.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether meta boxes are initialized.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getActiveGeneralSidebarName<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the current active general sidebar name, or null if there is no general sidebar active. The active general sidebar is a unique name to identify either an editor or plugin sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Examples:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>edit-post\/document<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>my-plugin\/insert-image-sidebar<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?string<\/code>: Active general sidebar name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getActiveMetaBoxLocations<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an array of active meta box locations.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Post editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string[]<\/code>: Active meta box locations.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getAllMetaBoxes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the list of all the available meta boxes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: List of meta boxes.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditedPostTemplate<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Retrieves the template of the currently edited post.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object?<\/code>: Post Template.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditorMode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the current editing mode.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string<\/code>: Editing mode.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getHiddenBlockTypes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an array of blocks that are hidden.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: A list of the hidden block types<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getMetaBoxesPerLocation<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the list of all the available meta boxes for a given location.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>location<\/em> <code>string<\/code>: Meta box location to test.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?Array<\/code>: List of meta boxes.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getPreference<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>preferenceKey<\/em> <code>string<\/code>: Preference Key.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>defaultValue<\/em> <code>*<\/code>: Default Value.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>*<\/code>: Preference Value.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getPreferences<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the preferences (these preferences are persisted locally).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Preferences Object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasMetaBoxes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the post is using Meta Boxes<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether there are metaboxes or not.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isEditingTemplate<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the template editing mode is enabled.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isEditorPanelEnabled<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the given panel is enabled, or false otherwise. Panels are enabled by default.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>panelName<\/em> <code>string<\/code>: A string that identifies the panel.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether or not the panel is enabled.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isEditorPanelOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the given panel is open, or false otherwise. Panels are closed by default.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>panelName<\/em> <code>string<\/code>: A string that identifies the panel.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether or not the panel is open.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isEditorPanelRemoved<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the given panel was programmatically removed, or false otherwise. All panels are not removed by default.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>panelName<\/em> <code>string<\/code>: A string that identifies the panel.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether or not the panel is removed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isEditorSidebarOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the editor sidebar is opened.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the editor sidebar is opened.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isFeatureActive<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether the given feature is enabled or not.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>feature<\/em> <code>string<\/code>: Feature slug.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Is active.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isInserterOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the inserter is opened.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the inserter is opened.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isListViewOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the list view is opened.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the list view is opened.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isMetaBoxLocationActive<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if there is an active meta box in the given location, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Post editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>location<\/em> <code>string<\/code>: Meta box location to test.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the meta box location is active.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isMetaBoxLocationVisible<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if a metabox location is active and visible<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Post editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>location<\/em> <code>string<\/code>: Meta box location to test.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the meta box location is active and visible.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isModalActive<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> since WP 6.3 use <code>core\/interface<\/code> store's selector with the same name instead.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns true if a modal is active, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>modalName<\/em> <code>string<\/code>: A string that uniquely identifies the modal.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the modal is active.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isPluginItemPinned<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the plugin item is pinned to the header. When the value is not set it defaults to true.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>pluginName<\/em> <code>string<\/code>: Plugin item name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the plugin item is pinned.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isPluginSidebarOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the plugin sidebar is opened.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the plugin sidebar is opened.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isPublishSidebarOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the publish sidebar is opened.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the publish sidebar is open.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isSavingMetaBoxes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the Meta Boxes are being saved.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the metaboxes are being saved.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/edit-post\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Actions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/edit-post\/src\/store\/actions.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">closeGeneralSidebar<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object signalling that the user closed the sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">closeModal<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> since WP 6.3 use <code>core\/interface<\/code> store's action with the same name instead.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object signalling that the user closed a modal.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">closePublishSidebar<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that the user closed the publish sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hideBlockTypes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Update the provided block types to be hidden.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>blockNames<\/em> <code>string[]<\/code>: Names of block types to hide.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">initializeMetaBoxes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Initializes WordPress <code>postboxes<\/code> script and the logic for saving meta boxes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">metaBoxUpdatesFailure<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to signal a failed meta box update.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">metaBoxUpdatesSuccess<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to signal a successful meta box update.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">openGeneralSidebar<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that the user opened an editor sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>name<\/em> <code>?string<\/code>: Sidebar name to be opened.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">openModal<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> since WP 6.3 use <code>core\/interface<\/code> store's action with the same name instead.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that the user opened a modal.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: A string that uniquely identifies the modal.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">openPublishSidebar<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that the user opened the publish sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">removeEditorPanel<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to remove a panel from the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>panelName<\/em> <code>string<\/code>: A string that identifies the panel to remove.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">requestMetaBoxUpdates<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Update a metabox.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setAvailableMetaBoxesPerLocation<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Stores info about which Meta boxes are available in which location.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>metaBoxesPerLocation<\/em> <code>Object<\/code>: Meta boxes per location.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setIsEditingTemplate<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to switch to template editing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setIsInserterOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to open\/close the inserter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>value<\/em> <code>boolean|Object<\/code>: Whether the inserter should be opened (true) or closed (false).<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setIsListViewOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to open\/close the list view.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>isOpen<\/em> <code>boolean<\/code>: A boolean representing whether the list view should be opened or closed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">showBlockTypes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Update the provided block types to be visible.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>blockNames<\/em> <code>string[]<\/code>: Names of block types to show.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">switchEditorMode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Triggers an action used to switch editor mode.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>mode<\/em> <code>string<\/code>: The editor mode.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">toggleDistractionFree<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Action that toggles Distraction free mode. Distraction free mode expects there are no sidebars, as due to the z-index values set, you can't close sidebars.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">toggleEditorPanelEnabled<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to enable or disable a panel in the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>panelName<\/em> <code>string<\/code>: A string that identifies the panel to enable or disable.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">toggleEditorPanelOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Opens a closed panel and closes an open panel.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>panelName<\/em> <code>string<\/code>: A string that identifies the panel to open or close.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">toggleFeature<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Triggers an action used to toggle a feature flag.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>feature<\/em> <code>string<\/code>: Feature name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">togglePinnedPluginItem<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Triggers an action object used to toggle a plugin name flag.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>pluginName<\/em> <code>string<\/code>: Plugin name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">togglePublishSidebar<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that the user toggles the publish sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">updatePreferredStyleVariations<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signaling that a style should be auto-applied when a block is created.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/edit-post\/src\/store\/actions.js) -->\n<!-- \/wp:html -->",
        "markdown": "# The Editor\u2019s UI Data\n\nNamespace: `core\/edit-post`.\n\n## Selectors\n\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/edit-post\/src\/store\/selectors.js) -->\n\n### areMetaBoxesInitialized\n\nReturns true if meta boxes are initialized.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether meta boxes are initialized.\n\n### getActiveGeneralSidebarName\n\nReturns the current active general sidebar name, or null if there is no general sidebar active. The active general sidebar is a unique name to identify either an editor or plugin sidebar.\n\nExamples:\n\n-   `edit-post\/document`\n-   `my-plugin\/insert-image-sidebar`\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `?string`: Active general sidebar name.\n\n### getActiveMetaBoxLocations\n\nReturns an array of active meta box locations.\n\n_Parameters_\n\n-   _state_ `Object`: Post editor state.\n\n_Returns_\n\n-   `string[]`: Active meta box locations.\n\n### getAllMetaBoxes\n\nReturns the list of all the available meta boxes.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `Array`: List of meta boxes.\n\n### getEditedPostTemplate\n\nRetrieves the template of the currently edited post.\n\n_Returns_\n\n-   `Object?`: Post Template.\n\n### getEditorMode\n\nReturns the current editing mode.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `string`: Editing mode.\n\n### getHiddenBlockTypes\n\nReturns an array of blocks that are hidden.\n\n_Returns_\n\n-   `Array`: A list of the hidden block types\n\n### getMetaBoxesPerLocation\n\nReturns the list of all the available meta boxes for a given location.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _location_ `string`: Meta box location to test.\n\n_Returns_\n\n-   `?Array`: List of meta boxes.\n\n### getPreference\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _preferenceKey_ `string`: Preference Key.\n-   _defaultValue_ `*`: Default Value.\n\n_Returns_\n\n-   `*`: Preference Value.\n\n### getPreferences\n\nReturns the preferences (these preferences are persisted locally).\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `Object`: Preferences Object.\n\n### hasMetaBoxes\n\nReturns true if the post is using Meta Boxes\n\n_Parameters_\n\n-   _state_ `Object`: Global application state\n\n_Returns_\n\n-   `boolean`: Whether there are metaboxes or not.\n\n### isEditingTemplate\n\n> **Deprecated**\n\nReturns true if the template editing mode is enabled.\n\n### isEditorPanelEnabled\n\n> **Deprecated**\n\nReturns true if the given panel is enabled, or false otherwise. Panels are enabled by default.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _panelName_ `string`: A string that identifies the panel.\n\n_Returns_\n\n-   `boolean`: Whether or not the panel is enabled.\n\n### isEditorPanelOpened\n\n> **Deprecated**\n\nReturns true if the given panel is open, or false otherwise. Panels are closed by default.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _panelName_ `string`: A string that identifies the panel.\n\n_Returns_\n\n-   `boolean`: Whether or not the panel is open.\n\n### isEditorPanelRemoved\n\n> **Deprecated**\n\nReturns true if the given panel was programmatically removed, or false otherwise. All panels are not removed by default.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _panelName_ `string`: A string that identifies the panel.\n\n_Returns_\n\n-   `boolean`: Whether or not the panel is removed.\n\n### isEditorSidebarOpened\n\nReturns true if the editor sidebar is opened.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state\n\n_Returns_\n\n-   `boolean`: Whether the editor sidebar is opened.\n\n### isFeatureActive\n\nReturns whether the given feature is enabled or not.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _feature_ `string`: Feature slug.\n\n_Returns_\n\n-   `boolean`: Is active.\n\n### isInserterOpened\n\n> **Deprecated**\n\nReturns true if the inserter is opened.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the inserter is opened.\n\n### isListViewOpened\n\nReturns true if the list view is opened.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the list view is opened.\n\n### isMetaBoxLocationActive\n\nReturns true if there is an active meta box in the given location, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Post editor state.\n-   _location_ `string`: Meta box location to test.\n\n_Returns_\n\n-   `boolean`: Whether the meta box location is active.\n\n### isMetaBoxLocationVisible\n\nReturns true if a metabox location is active and visible\n\n_Parameters_\n\n-   _state_ `Object`: Post editor state.\n-   _location_ `string`: Meta box location to test.\n\n_Returns_\n\n-   `boolean`: Whether the meta box location is active and visible.\n\n### isModalActive\n\n> **Deprecated** since WP 6.3 use `core\/interface` store's selector with the same name instead.\n\nReturns true if a modal is active, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _modalName_ `string`: A string that uniquely identifies the modal.\n\n_Returns_\n\n-   `boolean`: Whether the modal is active.\n\n### isPluginItemPinned\n\nReturns true if the plugin item is pinned to the header. When the value is not set it defaults to true.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _pluginName_ `string`: Plugin item name.\n\n_Returns_\n\n-   `boolean`: Whether the plugin item is pinned.\n\n### isPluginSidebarOpened\n\nReturns true if the plugin sidebar is opened.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the plugin sidebar is opened.\n\n### isPublishSidebarOpened\n\nReturns true if the publish sidebar is opened.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state\n\n_Returns_\n\n-   `boolean`: Whether the publish sidebar is open.\n\n### isSavingMetaBoxes\n\nReturns true if the Meta Boxes are being saved.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the metaboxes are being saved.\n\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/edit-post\/src\/store\/selectors.js) -->\n\n## Actions\n\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/edit-post\/src\/store\/actions.js) -->\n\n### closeGeneralSidebar\n\nReturns an action object signalling that the user closed the sidebar.\n\n### closeModal\n\n> **Deprecated** since WP 6.3 use `core\/interface` store's action with the same name instead.\n\nReturns an action object signalling that the user closed a modal.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### closePublishSidebar\n\nReturns an action object used in signalling that the user closed the publish sidebar.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### hideBlockTypes\n\nUpdate the provided block types to be hidden.\n\n_Parameters_\n\n-   _blockNames_ `string[]`: Names of block types to hide.\n\n### initializeMetaBoxes\n\nInitializes WordPress `postboxes` script and the logic for saving meta boxes.\n\n### metaBoxUpdatesFailure\n\nReturns an action object used to signal a failed meta box update.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### metaBoxUpdatesSuccess\n\nReturns an action object used to signal a successful meta box update.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### openGeneralSidebar\n\nReturns an action object used in signalling that the user opened an editor sidebar.\n\n_Parameters_\n\n-   _name_ `?string`: Sidebar name to be opened.\n\n### openModal\n\n> **Deprecated** since WP 6.3 use `core\/interface` store's action with the same name instead.\n\nReturns an action object used in signalling that the user opened a modal.\n\n_Parameters_\n\n-   _name_ `string`: A string that uniquely identifies the modal.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### openPublishSidebar\n\nReturns an action object used in signalling that the user opened the publish sidebar.\n\n_Returns_\n\n-   `Object`: Action object\n\n### removeEditorPanel\n\n> **Deprecated**\n\nReturns an action object used to remove a panel from the editor.\n\n_Parameters_\n\n-   _panelName_ `string`: A string that identifies the panel to remove.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### requestMetaBoxUpdates\n\nUpdate a metabox.\n\n### setAvailableMetaBoxesPerLocation\n\nStores info about which Meta boxes are available in which location.\n\n_Parameters_\n\n-   _metaBoxesPerLocation_ `Object`: Meta boxes per location.\n\n### setIsEditingTemplate\n\n> **Deprecated**\n\nReturns an action object used to switch to template editing.\n\n### setIsInserterOpened\n\n> **Deprecated**\n\nReturns an action object used to open\/close the inserter.\n\n_Parameters_\n\n-   _value_ `boolean|Object`: Whether the inserter should be opened (true) or closed (false).\n\n### setIsListViewOpened\n\n> **Deprecated**\n\nReturns an action object used to open\/close the list view.\n\n_Parameters_\n\n-   _isOpen_ `boolean`: A boolean representing whether the list view should be opened or closed.\n\n### showBlockTypes\n\nUpdate the provided block types to be visible.\n\n_Parameters_\n\n-   _blockNames_ `string[]`: Names of block types to show.\n\n### switchEditorMode\n\n> **Deprecated**\n\nTriggers an action used to switch editor mode.\n\n_Parameters_\n\n-   _mode_ `string`: The editor mode.\n\n### toggleDistractionFree\n\n> **Deprecated**\n\nAction that toggles Distraction free mode. Distraction free mode expects there are no sidebars, as due to the z-index values set, you can't close sidebars.\n\n### toggleEditorPanelEnabled\n\n> **Deprecated**\n\nReturns an action object used to enable or disable a panel in the editor.\n\n_Parameters_\n\n-   _panelName_ `string`: A string that identifies the panel to enable or disable.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### toggleEditorPanelOpened\n\n> **Deprecated**\n\nOpens a closed panel and closes an open panel.\n\n_Parameters_\n\n-   _panelName_ `string`: A string that identifies the panel to open or close.\n\n### toggleFeature\n\nTriggers an action used to toggle a feature flag.\n\n_Parameters_\n\n-   _feature_ `string`: Feature name.\n\n### togglePinnedPluginItem\n\nTriggers an action object used to toggle a plugin name flag.\n\n_Parameters_\n\n-   _pluginName_ `string`: Plugin name.\n\n### togglePublishSidebar\n\nReturns an action object used in signalling that the user toggles the publish sidebar.\n\n_Returns_\n\n-   `Object`: Action object\n\n### updatePreferredStyleVariations\n\n> **Deprecated**\n\nReturns an action object used in signaling that a style should be auto-applied when a block is created.\n\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/edit-post\/src\/store\/actions.js) -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/data-core-notices.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Notices Data<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Namespace: <code>core\/notices<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/notices\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getNotices<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns all notices as an array, optionally for a given context. Defaults to the global context.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useSelect } from '@wordpress\/data';\nimport { store as noticesStore } from '@wordpress\/notices';\n\nconst ExampleComponent = () => {\n\tconst notices = useSelect( ( select ) =>\n\t\tselect( noticesStore ).getNotices()\n\t);\n\treturn (\n\t\t<ul>\n\t\t\t{ notices.map( ( notice ) => (\n\t\t\t\t<li key=\"{\" notice.id=\"\" }=\"\">{ notice.content }<\/li>\n\t\t\t) ) }\n\t\t<\/ul>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Notices state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>context<\/em> <code>?string<\/code>: Optional grouping context.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>WPNotice[]<\/code>: Array of notices.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/notices\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Actions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/notices\/src\/store\/actions.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">createErrorNotice<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that an error notice is to be created. Refer to <code>createNotice<\/code> for options documentation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>createNotice<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __ } from '@wordpress\/i18n';\nimport { useDispatch } from '@wordpress\/data';\nimport { store as noticesStore } from '@wordpress\/notices';\nimport { Button } from '@wordpress\/components';\n\nconst ExampleComponent = () => {\n\tconst { createErrorNotice } = useDispatch( noticesStore );\n\treturn (\n\t\t<button<br>\t\t\tonClick={ () =>\n\t\t\t\tcreateErrorNotice( __( 'An error occurred!' ), {\n\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t\texplicitDismiss: true,\n\t\t\t\t} )\n\t\t\t}\n\t\t>\n\t\t\t{ __(\n\t\t\t\t'Generate an snackbar error notice with explicit dismiss button.'\n\t\t\t) }\n\t\t\n\t);\n};\n<\/button<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>content<\/em> <code>string<\/code>: Notice message.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options<\/em> <code>[Object]<\/code>: Optional notice options.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">createInfoNotice<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that an info notice is to be created. Refer to <code>createNotice<\/code> for options documentation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>createNotice<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __ } from '@wordpress\/i18n';\nimport { useDispatch } from '@wordpress\/data';\nimport { store as noticesStore } from '@wordpress\/notices';\nimport { Button } from '@wordpress\/components';\n\nconst ExampleComponent = () => {\n\tconst { createInfoNotice } = useDispatch( noticesStore );\n\treturn (\n\t\t<button<br>\t\t\tonClick={ () =>\n\t\t\t\tcreateInfoNotice( __( 'Something happened!' ), {\n\t\t\t\t\tisDismissible: false,\n\t\t\t\t} )\n\t\t\t}\n\t\t>\n\t\t\t{ __( 'Generate a notice that cannot be dismissed.' ) }\n\t\t\n\t);\n};\n<\/button<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>content<\/em> <code>string<\/code>: Notice message.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options<\/em> <code>[Object]<\/code>: Optional notice options.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">createNotice<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that a notice is to be created.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __ } from '@wordpress\/i18n';\nimport { useDispatch } from '@wordpress\/data';\nimport { store as noticesStore } from '@wordpress\/notices';\nimport { Button } from '@wordpress\/components';\n\nconst ExampleComponent = () => {\n\tconst { createNotice } = useDispatch( noticesStore );\n\treturn (\n\t\t<button<br>\t\t\tonClick={ () => createNotice( 'success', __( 'Notice message' ) ) }\n\t\t>\n\t\t\t{ __( 'Generate a success notice!' ) }\n\t\t\n\t);\n};\n<\/button<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>status<\/em> <code>string|undefined<\/code>: Notice status (\"info\" if undefined is passed).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>content<\/em> <code>string<\/code>: Notice message.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options<\/em> <code>[Object]<\/code>: Notice options.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options.context<\/em> <code>[string]<\/code>: Context under which to group notice.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options.id<\/em> <code>[string]<\/code>: Identifier for notice. Automatically assigned if not specified.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options.isDismissible<\/em> <code>[boolean]<\/code>: Whether the notice can be dismissed by user.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options.type<\/em> <code>[string]<\/code>: Type of notice, one of <code>default<\/code>, or <code>snackbar<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options.speak<\/em> <code>[boolean]<\/code>: Whether the notice content should be announced to screen readers.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options.actions<\/em> <code>[Array&lt;WPNoticeAction>]<\/code>: User actions to be presented with notice.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options.icon<\/em> <code>[string]<\/code>: An icon displayed with the notice. Only used when type is set to <code>snackbar<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options.explicitDismiss<\/em> <code>[boolean]<\/code>: Whether the notice includes an explicit dismiss button and can't be dismissed by clicking the body of the notice. Only applies when type is set to <code>snackbar<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options.onDismiss<\/em> <code>[Function]<\/code>: Called when the notice is dismissed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">createSuccessNotice<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that a success notice is to be created. Refer to <code>createNotice<\/code> for options documentation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>createNotice<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __ } from '@wordpress\/i18n';\nimport { useDispatch } from '@wordpress\/data';\nimport { store as noticesStore } from '@wordpress\/notices';\nimport { Button } from '@wordpress\/components';\n\nconst ExampleComponent = () => {\n\tconst { createSuccessNotice } = useDispatch( noticesStore );\n\treturn (\n\t\t<button<br>\t\t\tonClick={ () =>\n\t\t\t\tcreateSuccessNotice( __( 'Success!' ), {\n\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t\ticon: '\ud83d\udd25',\n\t\t\t\t} )\n\t\t\t}\n\t\t>\n\t\t\t{ __( 'Generate a snackbar success notice!' ) }\n\t\t\n\t);\n};\n<\/button<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>content<\/em> <code>string<\/code>: Notice message.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options<\/em> <code>[Object]<\/code>: Optional notice options.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">createWarningNotice<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that a warning notice is to be created. Refer to <code>createNotice<\/code> for options documentation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>createNotice<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __ } from '@wordpress\/i18n';\nimport { useDispatch } from '@wordpress\/data';\nimport { store as noticesStore } from '@wordpress\/notices';\nimport { Button } from '@wordpress\/components';\n\nconst ExampleComponent = () => {\n\tconst { createWarningNotice, createInfoNotice } =\n\t\tuseDispatch( noticesStore );\n\treturn (\n\t\t<button<br>\t\t\tonClick={ () =>\n\t\t\t\tcreateWarningNotice( __( 'Warning!' ), {\n\t\t\t\t\tonDismiss: () => {\n\t\t\t\t\t\tcreateInfoNotice(\n\t\t\t\t\t\t\t__( 'The warning has been dismissed!' )\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t} )\n\t\t\t}\n\t\t>\n\t\t\t{ __( 'Generates a warning notice with onDismiss callback' ) }\n\t\t\n\t);\n};\n<\/button<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>content<\/em> <code>string<\/code>: Notice message.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options<\/em> <code>[Object]<\/code>: Optional notice options.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">removeAllNotices<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Removes all notices from a given context. Defaults to the default context.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __ } from '@wordpress\/i18n';\nimport { useDispatch, useSelect } from '@wordpress\/data';\nimport { store as noticesStore } from '@wordpress\/notices';\nimport { Button } from '@wordpress\/components';\n\nexport const ExampleComponent = () => {\n\tconst notices = useSelect( ( select ) =>\n\t\tselect( noticesStore ).getNotices()\n\t);\n\tconst { removeAllNotices } = useDispatch( noticesStore );\n\treturn (\n\t\t&lt;>\n\t\t\t<ul>\n\t\t\t\t{ notices.map( ( notice ) => (\n\t\t\t\t\t<li key=\"{\" notice.id=\"\" }=\"\">{ notice.content }<\/li>\n\t\t\t\t) ) }\n\t\t\t<\/ul>\n\t\t\t<button onclick=\"{\" ()=\"\"> removeAllNotices() }>\n\t\t\t\t{ __( 'Clear all notices', 'woo-gutenberg-products-block' ) }\n\t\t\t<\/button>\n\t\t\t<button onclick=\"{\" ()=\"\"> removeAllNotices( 'snackbar' ) }>\n\t\t\t\t{ __(\n\t\t\t\t\t'Clear all snackbar notices',\n\t\t\t\t\t'woo-gutenberg-products-block'\n\t\t\t\t) }\n\t\t\t<\/button>\n\t\t\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>noticeType<\/em> <code>string<\/code>: The context to remove all notices from.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>context<\/em> <code>string<\/code>: The context to remove all notices from.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">removeNotice<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that a notice is to be removed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __ } from '@wordpress\/i18n';\nimport { useDispatch } from '@wordpress\/data';\nimport { store as noticesStore } from '@wordpress\/notices';\nimport { Button } from '@wordpress\/components';\n\nconst ExampleComponent = () => {\n\tconst notices = useSelect( ( select ) =>\n\t\tselect( noticesStore ).getNotices()\n\t);\n\tconst { createWarningNotice, removeNotice } = useDispatch( noticesStore );\n\n\treturn (\n\t\t&lt;>\n\t\t\t<button<br>\t\t\t\tonClick={ () =>\n\t\t\t\t\tcreateWarningNotice( __( 'Warning!' ), {\n\t\t\t\t\t\tisDismissible: false,\n\t\t\t\t\t} )\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{ __( 'Generate a notice' ) }\n\t\t\t\n\t\t\t{ notices.length > 0 &amp;&amp; (\n\t\t\t\t<button onclick=\"{\" ()=\"\"> removeNotice( notices&#91; 0 ].id ) }>\n\t\t\t\t\t{ __( 'Remove the notice' ) }\n\t\t\t\t<\/button>\n\t\t\t) }\n\t\t\n\t);\n};\n<\/button<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>id<\/em> <code>string<\/code>: Notice unique identifier.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>context<\/em> <code>[string]<\/code>: Optional context (grouping) in which the notice is intended to appear. Defaults to default context.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">removeNotices<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that several notices are to be removed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __ } from '@wordpress\/i18n';\nimport { useDispatch, useSelect } from '@wordpress\/data';\nimport { store as noticesStore } from '@wordpress\/notices';\nimport { Button } from '@wordpress\/components';\n\nconst ExampleComponent = () => {\n\tconst notices = useSelect( ( select ) =>\n\t\tselect( noticesStore ).getNotices()\n\t);\n\tconst { removeNotices } = useDispatch( noticesStore );\n\treturn (\n\t\t&lt;>\n\t\t\t<ul>\n\t\t\t\t{ notices.map( ( notice ) => (\n\t\t\t\t\t<li key=\"{\" notice.id=\"\" }=\"\">{ notice.content }<\/li>\n\t\t\t\t) ) }\n\t\t\t<\/ul>\n\t\t\t<button<br>\t\t\t\tonClick={ () =>\n\t\t\t\t\tremoveNotices( notices.map( ( { id } ) => id ) )\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{ __( 'Clear all notices' ) }\n\t\t\t\n\t\t\n\t);\n};\n<\/button<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>ids<\/em> <code>string[]<\/code>: List of unique notice identifiers.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>context<\/em> <code>[string]<\/code>: Optional context (grouping) in which the notices are intended to appear. Defaults to default context.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/notices\/src\/store\/actions.js) -->\n<!-- \/wp:html -->",
        "markdown": "# Notices Data\n\nNamespace: `core\/notices`.\n\n## Selectors\n\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/notices\/src\/store\/selectors.js) -->\n\n### getNotices\n\nReturns all notices as an array, optionally for a given context. Defaults to the global context.\n\n_Usage_\n\n```js\nimport { useSelect } from '@wordpress\/data';\nimport { store as noticesStore } from '@wordpress\/notices';\n\nconst ExampleComponent = () => {\n\tconst notices = useSelect( ( select ) =>\n\t\tselect( noticesStore ).getNotices()\n\t);\n\treturn (\n\t\t<ul>\n\t\t\t{ notices.map( ( notice ) => (\n\t\t\t\t<li key={ notice.ID }>{ notice.content }<\/li>\n\t\t\t) ) }\n\t\t<\/ul>\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Notices state.\n-   _context_ `?string`: Optional grouping context.\n\n_Returns_\n\n-   `WPNotice[]`: Array of notices.\n\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/notices\/src\/store\/selectors.js) -->\n\n## Actions\n\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/notices\/src\/store\/actions.js) -->\n\n### createErrorNotice\n\nReturns an action object used in signalling that an error notice is to be created. Refer to `createNotice` for options documentation.\n\n_Related_\n\n-   createNotice\n\n_Usage_\n\n```js\nimport { __ } from '@wordpress\/i18n';\nimport { useDispatch } from '@wordpress\/data';\nimport { store as noticesStore } from '@wordpress\/notices';\nimport { Button } from '@wordpress\/components';\n\nconst ExampleComponent = () => {\n\tconst { createErrorNotice } = useDispatch( noticesStore );\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () =>\n\t\t\t\tcreateErrorNotice( __( 'An error occurred!' ), {\n\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t\texplicitDismiss: true,\n\t\t\t\t} )\n\t\t\t}\n\t\t>\n\t\t\t{ __(\n\t\t\t\t'Generate an snackbar error notice with explicit dismiss button.'\n\t\t\t) }\n\t\t<\/Button>\n\t);\n};\n```\n\n_Parameters_\n\n-   _content_ `string`: Notice message.\n-   _options_ `[Object]`: Optional notice options.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### createInfoNotice\n\nReturns an action object used in signalling that an info notice is to be created. Refer to `createNotice` for options documentation.\n\n_Related_\n\n-   createNotice\n\n_Usage_\n\n```js\nimport { __ } from '@wordpress\/i18n';\nimport { useDispatch } from '@wordpress\/data';\nimport { store as noticesStore } from '@wordpress\/notices';\nimport { Button } from '@wordpress\/components';\n\nconst ExampleComponent = () => {\n\tconst { createInfoNotice } = useDispatch( noticesStore );\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () =>\n\t\t\t\tcreateInfoNotice( __( 'Something happened!' ), {\n\t\t\t\t\tisDismissible: false,\n\t\t\t\t} )\n\t\t\t}\n\t\t>\n\t\t\t{ __( 'Generate a notice that cannot be dismissed.' ) }\n\t\t<\/Button>\n\t);\n};\n```\n\n_Parameters_\n\n-   _content_ `string`: Notice message.\n-   _options_ `[Object]`: Optional notice options.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### createNotice\n\nReturns an action object used in signalling that a notice is to be created.\n\n_Usage_\n\n```js\nimport { __ } from '@wordpress\/i18n';\nimport { useDispatch } from '@wordpress\/data';\nimport { store as noticesStore } from '@wordpress\/notices';\nimport { Button } from '@wordpress\/components';\n\nconst ExampleComponent = () => {\n\tconst { createNotice } = useDispatch( noticesStore );\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () => createNotice( 'success', __( 'Notice message' ) ) }\n\t\t>\n\t\t\t{ __( 'Generate a success notice!' ) }\n\t\t<\/Button>\n\t);\n};\n```\n\n_Parameters_\n\n-   _status_ `string|undefined`: Notice status (\"info\" if undefined is passed).\n-   _content_ `string`: Notice message.\n-   _options_ `[Object]`: Notice options.\n-   _options.context_ `[string]`: Context under which to group notice.\n-   _options.id_ `[string]`: Identifier for notice. Automatically assigned if not specified.\n-   _options.isDismissible_ `[boolean]`: Whether the notice can be dismissed by user.\n-   _options.type_ `[string]`: Type of notice, one of `default`, or `snackbar`.\n-   _options.speak_ `[boolean]`: Whether the notice content should be announced to screen readers.\n-   _options.actions_ `[Array<WPNoticeAction>]`: User actions to be presented with notice.\n-   _options.icon_ `[string]`: An icon displayed with the notice. Only used when type is set to `snackbar`.\n-   _options.explicitDismiss_ `[boolean]`: Whether the notice includes an explicit dismiss button and can't be dismissed by clicking the body of the notice. Only applies when type is set to `snackbar`.\n-   _options.onDismiss_ `[Function]`: Called when the notice is dismissed.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### createSuccessNotice\n\nReturns an action object used in signalling that a success notice is to be created. Refer to `createNotice` for options documentation.\n\n_Related_\n\n-   createNotice\n\n_Usage_\n\n```js\nimport { __ } from '@wordpress\/i18n';\nimport { useDispatch } from '@wordpress\/data';\nimport { store as noticesStore } from '@wordpress\/notices';\nimport { Button } from '@wordpress\/components';\n\nconst ExampleComponent = () => {\n\tconst { createSuccessNotice } = useDispatch( noticesStore );\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () =>\n\t\t\t\tcreateSuccessNotice( __( 'Success!' ), {\n\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t\ticon: '\ud83d\udd25',\n\t\t\t\t} )\n\t\t\t}\n\t\t>\n\t\t\t{ __( 'Generate a snackbar success notice!' ) }\n\t\t<\/Button>\n\t);\n};\n```\n\n_Parameters_\n\n-   _content_ `string`: Notice message.\n-   _options_ `[Object]`: Optional notice options.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### createWarningNotice\n\nReturns an action object used in signalling that a warning notice is to be created. Refer to `createNotice` for options documentation.\n\n_Related_\n\n-   createNotice\n\n_Usage_\n\n```js\nimport { __ } from '@wordpress\/i18n';\nimport { useDispatch } from '@wordpress\/data';\nimport { store as noticesStore } from '@wordpress\/notices';\nimport { Button } from '@wordpress\/components';\n\nconst ExampleComponent = () => {\n\tconst { createWarningNotice, createInfoNotice } =\n\t\tuseDispatch( noticesStore );\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () =>\n\t\t\t\tcreateWarningNotice( __( 'Warning!' ), {\n\t\t\t\t\tonDismiss: () => {\n\t\t\t\t\t\tcreateInfoNotice(\n\t\t\t\t\t\t\t__( 'The warning has been dismissed!' )\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t} )\n\t\t\t}\n\t\t>\n\t\t\t{ __( 'Generates a warning notice with onDismiss callback' ) }\n\t\t<\/Button>\n\t);\n};\n```\n\n_Parameters_\n\n-   _content_ `string`: Notice message.\n-   _options_ `[Object]`: Optional notice options.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### removeAllNotices\n\nRemoves all notices from a given context. Defaults to the default context.\n\n_Usage_\n\n```js\nimport { __ } from '@wordpress\/i18n';\nimport { useDispatch, useSelect } from '@wordpress\/data';\nimport { store as noticesStore } from '@wordpress\/notices';\nimport { Button } from '@wordpress\/components';\n\nexport const ExampleComponent = () => {\n\tconst notices = useSelect( ( select ) =>\n\t\tselect( noticesStore ).getNotices()\n\t);\n\tconst { removeAllNotices } = useDispatch( noticesStore );\n\treturn (\n\t\t<>\n\t\t\t<ul>\n\t\t\t\t{ notices.map( ( notice ) => (\n\t\t\t\t\t<li key={ notice.id }>{ notice.content }<\/li>\n\t\t\t\t) ) }\n\t\t\t<\/ul>\n\t\t\t<Button onClick={ () => removeAllNotices() }>\n\t\t\t\t{ __( 'Clear all notices', 'woo-gutenberg-products-block' ) }\n\t\t\t<\/Button>\n\t\t\t<Button onClick={ () => removeAllNotices( 'snackbar' ) }>\n\t\t\t\t{ __(\n\t\t\t\t\t'Clear all snackbar notices',\n\t\t\t\t\t'woo-gutenberg-products-block'\n\t\t\t\t) }\n\t\t\t<\/Button>\n\t\t<\/>\n\t);\n};\n```\n\n_Parameters_\n\n-   _noticeType_ `string`: The context to remove all notices from.\n-   _context_ `string`: The context to remove all notices from.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### removeNotice\n\nReturns an action object used in signalling that a notice is to be removed.\n\n_Usage_\n\n```js\nimport { __ } from '@wordpress\/i18n';\nimport { useDispatch } from '@wordpress\/data';\nimport { store as noticesStore } from '@wordpress\/notices';\nimport { Button } from '@wordpress\/components';\n\nconst ExampleComponent = () => {\n\tconst notices = useSelect( ( select ) =>\n\t\tselect( noticesStore ).getNotices()\n\t);\n\tconst { createWarningNotice, removeNotice } = useDispatch( noticesStore );\n\n\treturn (\n\t\t<>\n\t\t\t<Button\n\t\t\t\tonClick={ () =>\n\t\t\t\t\tcreateWarningNotice( __( 'Warning!' ), {\n\t\t\t\t\t\tisDismissible: false,\n\t\t\t\t\t} )\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{ __( 'Generate a notice' ) }\n\t\t\t<\/Button>\n\t\t\t{ notices.length > 0 && (\n\t\t\t\t<Button onClick={ () => removeNotice( notices[ 0 ].id ) }>\n\t\t\t\t\t{ __( 'Remove the notice' ) }\n\t\t\t\t<\/Button>\n\t\t\t) }\n\t\t<\/>\n\t);\n};\n```\n\n_Parameters_\n\n-   _id_ `string`: Notice unique identifier.\n-   _context_ `[string]`: Optional context (grouping) in which the notice is intended to appear. Defaults to default context.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### removeNotices\n\nReturns an action object used in signalling that several notices are to be removed.\n\n_Usage_\n\n```js\nimport { __ } from '@wordpress\/i18n';\nimport { useDispatch, useSelect } from '@wordpress\/data';\nimport { store as noticesStore } from '@wordpress\/notices';\nimport { Button } from '@wordpress\/components';\n\nconst ExampleComponent = () => {\n\tconst notices = useSelect( ( select ) =>\n\t\tselect( noticesStore ).getNotices()\n\t);\n\tconst { removeNotices } = useDispatch( noticesStore );\n\treturn (\n\t\t<>\n\t\t\t<ul>\n\t\t\t\t{ notices.map( ( notice ) => (\n\t\t\t\t\t<li key={ notice.id }>{ notice.content }<\/li>\n\t\t\t\t) ) }\n\t\t\t<\/ul>\n\t\t\t<Button\n\t\t\t\tonClick={ () =>\n\t\t\t\t\tremoveNotices( notices.map( ( { id } ) => id ) )\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{ __( 'Clear all notices' ) }\n\t\t\t<\/Button>\n\t\t<\/>\n\t);\n};\n```\n\n_Parameters_\n\n-   _ids_ `string[]`: List of unique notice identifiers.\n-   _context_ `[string]`: Optional context (grouping) in which the notices are intended to appear. Defaults to default context.\n\n_Returns_\n\n-   `Object`: Action object.\n\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/notices\/src\/store\/actions.js) -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Data Module Reference<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core.md\"><strong>core<\/strong>: WordPress Core Data<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-annotations.md\"><strong>core\/annotations<\/strong>: Annotations<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-block-directory.md\"><strong>core\/block-directory<\/strong>: Block directory<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-block-editor.md\"><strong>core\/block-editor<\/strong>: The Block Editor\u2019s Data<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-blocks.md\"><strong>core\/blocks<\/strong>: Block Types Data<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-commands.md\"><strong>core\/commands<\/strong>: Command Palette<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-customize-widgets.md\"><strong>core\/customize-widgets<\/strong>: Customize Widgets<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-edit-post.md\"><strong>core\/edit-post<\/strong>: The Editor\u2019s UI Data<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-edit-site.md\"><strong>core\/edit-site<\/strong>: Edit Site<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-edit-widgets.md\"><strong>core\/edit-widgets<\/strong>: Edit Widgets<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-editor.md\"><strong>core\/editor<\/strong>: The Post Editor\u2019s Data<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-keyboard-shortcuts.md\"><strong>core\/keyboard-shortcuts<\/strong>: The Keyboard Shortcuts Data<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-notices.md\"><strong>core\/notices<\/strong>: Notices Data<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-nux.md\"><strong>core\/nux<\/strong>: The NUX (New User Experience) Data<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-preferences.md\"><strong>core\/preferences<\/strong>: Preferences<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-reusable-blocks.md\"><strong>core\/reusable-blocks<\/strong>: Reusable blocks<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-rich-text.md\"><strong>core\/rich-text<\/strong>: Rich Text<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-viewport.md\"><strong>core\/viewport<\/strong>: The Viewport Data<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Data Module Reference\n\n-   [**core**: WordPress Core Data](\/docs\/reference-guides\/data\/data-core.md)\n-   [**core\/annotations**: Annotations](\/docs\/reference-guides\/data\/data-core-annotations.md)\n-   [**core\/block-directory**: Block directory](\/docs\/reference-guides\/data\/data-core-block-directory.md)\n-   [**core\/block-editor**: The Block Editor\u2019s Data](\/docs\/reference-guides\/data\/data-core-block-editor.md)\n-   [**core\/blocks**: Block Types Data](\/docs\/reference-guides\/data\/data-core-blocks.md)\n-   [**core\/commands**: Command Palette](\/docs\/reference-guides\/data\/data-core-commands.md)\n-   [**core\/customize-widgets**: Customize Widgets](\/docs\/reference-guides\/data\/data-core-customize-widgets.md)\n-   [**core\/edit-post**: The Editor\u2019s UI Data](\/docs\/reference-guides\/data\/data-core-edit-post.md)\n-   [**core\/edit-site**: Edit Site](\/docs\/reference-guides\/data\/data-core-edit-site.md)\n-   [**core\/edit-widgets**: Edit Widgets](\/docs\/reference-guides\/data\/data-core-edit-widgets.md)\n-   [**core\/editor**: The Post Editor\u2019s Data](\/docs\/reference-guides\/data\/data-core-editor.md)\n-   [**core\/keyboard-shortcuts**: The Keyboard Shortcuts Data](\/docs\/reference-guides\/data\/data-core-keyboard-shortcuts.md)\n-   [**core\/notices**: Notices Data](\/docs\/reference-guides\/data\/data-core-notices.md)\n-   [**core\/nux**: The NUX (New User Experience) Data](\/docs\/reference-guides\/data\/data-core-nux.md)\n-   [**core\/preferences**: Preferences](\/docs\/reference-guides\/data\/data-core-preferences.md)\n-   [**core\/reusable-blocks**: Reusable blocks](\/docs\/reference-guides\/data\/data-core-reusable-blocks.md)\n-   [**core\/rich-text**: Rich Text](\/docs\/reference-guides\/data\/data-core-rich-text.md)\n-   [**core\/viewport**: The Viewport Data](\/docs\/reference-guides\/data\/data-core-viewport.md)\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/data-core-editor.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">The Post Editor\u2019s Data<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Namespace: <code>core\/editor<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/editor\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">canInsertBlockType<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>canInsertBlockType in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">canUserUseUnfilteredHTML<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether or not the user has the unfiltered_html capability.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the user can or can't post unfiltered HTML.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">didPostSaveRequestFail<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if a previous post save was attempted but failed, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the post save failed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">didPostSaveRequestSucceed<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if a previous post save was attempted successfully, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the post was saved successfully.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getActivePostLock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the active post lock.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: The lock object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getAdjacentBlockClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getAdjacentBlockClientId in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getAutosaveAttribute<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> since 5.6. Callers should use the <code>getAutosave( postType, postId, userId )<\/code> selector from the '@wordpress\/core-data' package and access properties on the returned autosave object using getPostRawValue.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns an attribute value of the current autosave revision for a post, or null if there is no autosave for the post.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>attributeName<\/em> <code>string<\/code>: Autosave attribute name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>*<\/code>: Autosave attribute value.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getBlock in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockAttributes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getBlockAttributes in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockCount<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getBlockCount in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockHierarchyRootClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getBlockHierarchyRootClientId in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockIndex<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getBlockIndex in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockInsertionPoint<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getBlockInsertionPoint in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockListSettings<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getBlockListSettings in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockMode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getBlockMode in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockName<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getBlockName in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockOrder<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getBlockOrder in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockRootClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getBlockRootClientId in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getBlocks in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlocksByClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getBlocksByClientId in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockSelectionEnd<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getBlockSelectionEnd in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockSelectionStart<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getBlockSelectionStart in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getClientIdsOfDescendants<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getClientIdsOfDescendants in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getClientIdsWithDescendants<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getClientIdsWithDescendants in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getCurrentPost<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the post currently being edited in its last known saved state, not including unsaved edits. Returns an object containing relevant default post values if the post has not yet been saved.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Post object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getCurrentPostAttribute<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an attribute value of the saved post.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>attributeName<\/em> <code>string<\/code>: Post attribute name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>*<\/code>: Post attribute value.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getCurrentPostId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the ID of the post currently being edited, or null if the post has not yet been saved.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?number<\/code>: ID of current post.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getCurrentPostLastRevisionId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the last revision ID of the post currently being edited, or null if the post has no revisions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?number<\/code>: ID of the last revision.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getCurrentPostRevisionsCount<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the number of revisions of the post currently being edited.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>number<\/code>: Number of revisions.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getCurrentPostType<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the post type of the post currently being edited.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string<\/code>: Post type.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getCurrentTemplateId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the template ID currently being rendered\/edited<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string?<\/code>: Template ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getDeviceType<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the current editing canvas device type.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string<\/code>: Device type.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditedPostAttribute<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns a single attribute of the post being edited, preferring the unsaved edit if one exists, but falling back to the attribute for the last known saved state of the post.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>attributeName<\/em> <code>string<\/code>: Post attribute name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>*<\/code>: Post attribute value.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditedPostContent<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the content of the post being edited.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string<\/code>: Post content.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditedPostPreviewLink<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the post preview link<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string | undefined<\/code>: Preview Link.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditedPostSlug<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the slug for the post being edited, preferring a manually edited value if one exists, then a sanitized version of the current post title, and finally the post ID.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string<\/code>: The current slug to be displayed in the editor<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditedPostVisibility<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the current visibility of the post being edited, preferring the unsaved value if different than the saved post. The return value is one of \"private\", \"password\", or \"public\".<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string<\/code>: Post visibility.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditorBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Return the current block list.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: Block list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditorMode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the current editing mode.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string<\/code>: Editing mode.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditorSelection<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the current selection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>WPBlockSelection<\/code>: The selection end.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditorSelectionEnd<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> since Gutenberg 10.0.0.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns the current selection end.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>WPBlockSelection<\/code>: The selection end.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditorSelectionStart<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> since Gutenberg 10.0.0.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns the current selection start.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>WPBlockSelection<\/code>: The selection start.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditorSettings<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the post editor settings.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: The editor settings object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getFirstMultiSelectedBlockClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getFirstMultiSelectedBlockClientId in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getGlobalBlockCount<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getGlobalBlockCount in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getInserterItems<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getInserterItems in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getLastMultiSelectedBlockClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getLastMultiSelectedBlockClientId in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getMultiSelectedBlockClientIds<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getMultiSelectedBlockClientIds in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getMultiSelectedBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getMultiSelectedBlocks in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getMultiSelectedBlocksEndClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getMultiSelectedBlocksEndClientId in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getMultiSelectedBlocksStartClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getMultiSelectedBlocksStartClientId in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getNextBlockClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getNextBlockClientId in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getPermalink<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the permalink for the post.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?string<\/code>: The permalink, or null if the post is not viewable.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getPermalinkParts<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the permalink for a post, split into it's three parts: the prefix, the postName, and the suffix.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: An object containing the prefix, postName, and suffix for the permalink, or null if the post is not viewable.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getPostEdits<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns any post values which have been changed in the editor but not yet been saved.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Object of key value pairs comprising unsaved edits.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getPostLockUser<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns details about the post lock user.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: A user object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getPostTypeLabel<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns a post type label depending on the current post.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string|undefined<\/code>: The post type label if available, otherwise undefined.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getPreviousBlockClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getPreviousBlockClientId in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getRenderingMode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the post editor's rendering mode.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string<\/code>: Rendering mode.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getSelectedBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getSelectedBlock in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getSelectedBlockClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getSelectedBlockClientId in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getSelectedBlockCount<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getSelectedBlockCount in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getSelectedBlocksInitialCaretPosition<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getSelectedBlocksInitialCaretPosition in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getStateBeforeOptimisticTransaction<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> since Gutenberg 9.7.0.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns state object prior to a specified optimist transaction ID, or <code>null<\/code> if the transaction corresponding to the given ID cannot be found.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getSuggestedPostFormat<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns a suggested post format for the current post, inferred only if there is a single block within the post and it is of a type known to match a default post format. Returns null if the format cannot be determined.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?string<\/code>: Suggested post format.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getTemplate<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getTemplate in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getTemplateLock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getTemplateLock in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasChangedContent<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if content includes unsaved changes, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether content includes unsaved changes.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasEditorRedo<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if any future editor history snapshots exist, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether redo history exists.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasEditorUndo<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if any past editor history snapshots exist, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether undo history exists.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasInserterItems<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>hasInserterItems in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasMultiSelection<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>hasMultiSelection in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasNonPostEntityChanges<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if there are unsaved edits for entities other than the editor's post, and false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether there are edits or not.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasSelectedBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>hasSelectedBlock in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasSelectedInnerBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>hasSelectedInnerBlock in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">inSomeHistory<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> since Gutenberg 9.7.0.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns true if an optimistic transaction is pending commit, for which the before state satisfies the given predicate function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isAncestorMultiSelected<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>isAncestorMultiSelected in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isAutosavingPost<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the post is autosaving, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the post is autosaving.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isBlockInsertionPointVisible<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>isBlockInsertionPointVisible in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isBlockMultiSelected<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>isBlockMultiSelected in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isBlockSelected<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>isBlockSelected in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isBlockValid<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>isBlockValid in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isBlockWithinSelection<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>isBlockWithinSelection in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isCaretWithinFormattedText<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>isCaretWithinFormattedText in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isCleanNewPost<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if there are no unsaved values for the current edit session and if the currently edited post is new (has never been saved before).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether new post and unsaved values exist.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isCurrentPostPending<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if post is pending review.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether current post is pending review.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isCurrentPostPublished<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Return true if the current post has already been published.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>currentPost<\/em> <code>Object?<\/code>: Explicit current post for bypassing registry selector.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the post has been published.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isCurrentPostScheduled<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if post is already scheduled.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether current post is scheduled to be posted.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isDeletingPost<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the post is currently being deleted, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether post is being deleted.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isEditedPostAutosaveable<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the post can be autosaved, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>autosave<\/em> <code>Object<\/code>: A raw autosave object from the REST API.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the post can be autosaved.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isEditedPostBeingScheduled<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Return true if the post being edited is being scheduled. Preferring the unsaved status values.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the post has been published.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isEditedPostDateFloating<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether the current post should be considered to have a \"floating\" date (i.e. that it would publish \"Immediately\" rather than at a set time).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unlike in the PHP backend, the REST API returns a full date string for posts where the 0000-00-00T00:00:00 placeholder is present in the database. To infer that a post is set to publish \"Immediately\" we check whether the date and modified date are the same.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the edited post has a floating date value.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isEditedPostDirty<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if there are unsaved values for the current edit session, or false if the editing state matches the saved or new post.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether unsaved values exist.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isEditedPostEmpty<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the edited post has content. A post has content if it has at least one saveable block or otherwise has a non-empty content property assigned.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether post has content.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isEditedPostNew<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the currently edited post is yet to be saved, or false if the post has been saved.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the post is new.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isEditedPostPublishable<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Return true if the post being edited can be published.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the post can been published.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isEditedPostSaveable<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the post can be saved, or false otherwise. A post must contain a title, an excerpt, or non-empty content to be valid for save.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the post can be saved.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isEditorPanelEnabled<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the given panel is enabled, or false otherwise. Panels are enabled by default.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>panelName<\/em> <code>string<\/code>: A string that identifies the panel.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether or not the panel is enabled.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isEditorPanelOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the given panel is open, or false otherwise. Panels are closed by default.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>panelName<\/em> <code>string<\/code>: A string that identifies the panel.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether or not the panel is open.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isEditorPanelRemoved<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the given panel was programmatically removed, or false otherwise. All panels are not removed by default.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>panelName<\/em> <code>string<\/code>: A string that identifies the panel.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether or not the panel is removed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isFirstMultiSelectedBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>isFirstMultiSelectedBlock in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isInserterOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the inserter is opened.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the inserter is opened.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isListViewOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the list view is opened.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the list view is opened.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isMultiSelecting<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>isMultiSelecting in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isPermalinkEditable<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether the permalink is editable or not.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether or not the permalink is editable.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isPostAutosavingLocked<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether post autosaving is locked.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Is locked.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isPostLocked<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether the post is locked.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Is locked.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isPostLockTakeover<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether the edition of the post has been taken over.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Is post lock takeover.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isPostSavingLocked<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether post saving is locked.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Is locked.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isPreviewingPost<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the post is being previewed, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the post is being previewed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isPublishingPost<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the post is being published, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether post is being published.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isPublishSidebarEnabled<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether the pre-publish panel should be shown or skipped when the user clicks the \"publish\" button.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the pre-publish panel should be shown or not.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isSavingNonPostEntityChanges<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if non-post entities are currently being saved, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether non-post entities are being saved.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isSavingPost<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the post is currently being saved, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether post is being saved.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isSelectionEnabled<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>isSelectionEnabled in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isTyping<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>isTyping in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isValidTemplate<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>isValidTemplate in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/editor\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Actions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/editor\/src\/store\/actions.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">autosave<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that autosaves the current post. This includes server-side autosaving (default) and client-side (a.k.a. local) autosaving (e.g. on the Web, the post might be committed to Session Storage).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>options<\/em> <code>Object?<\/code>: Extra flags to identify the autosave.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">clearSelectedBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>clearSelectedBlock in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">createUndoLevel<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> Since WordPress 6.0<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Action that creates an undo history record.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">disablePublishSidebar<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Disables the publish sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">editPost<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that attributes of the post have been edited.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>edits<\/em> <code>Object<\/code>: Post attributes to edit.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options<\/em> <code>Object<\/code>: Options for the edit.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">enablePublishSidebar<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Enable the publish sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">enterFormattedText<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>enterFormattedText in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">exitFormattedText<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>exitFormattedText in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hideInsertionPoint<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>hideInsertionPoint in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">insertBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>insertBlock in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">insertBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>insertBlocks in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">insertDefaultBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>insertDefaultBlock in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">lockPostAutosaving<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that locks post autosaving.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Lock post autosaving with the lock key `mylock`:\nwp.data.dispatch( 'core\/editor' ).lockPostAutosaving( 'mylock' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>lockName<\/em> <code>string<\/code>: The lock name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">lockPostSaving<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that locks post saving.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const { subscribe } = wp.data;\n\nconst initialPostStatus = wp.data.select( 'core\/editor' ).getEditedPostAttribute( 'status' );\n\n\/\/ Only allow publishing posts that are set to a future date.\nif ( 'publish' !== initialPostStatus ) {\n\n\t\/\/ Track locking.\n\tlet locked = false;\n\n\t\/\/ Watch for the publish event.\n\tlet unssubscribe = subscribe( () => {\n\t\tconst currentPostStatus = wp.data.select( 'core\/editor' ).getEditedPostAttribute( 'status' );\n\t\tif ( 'publish' !== currentPostStatus ) {\n\n\t\t\t\/\/ Compare the post date to the current date, lock the post if the date isn't in the future.\n\t\t\tconst postDate = new Date( wp.data.select( 'core\/editor' ).getEditedPostAttribute( 'date' ) );\n\t\t\tconst currentDate = new Date();\n\t\t\tif ( postDate.getTime() &lt;= currentDate.getTime() ) {\n\t\t\t\tif ( ! locked ) {\n\t\t\t\t\tlocked = true;\n\t\t\t\t\twp.data.dispatch( 'core\/editor' ).lockPostSaving( 'futurelock' );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( locked ) {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\twp.data.dispatch( 'core\/editor' ).unlockPostSaving( 'futurelock' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} );\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>lockName<\/em> <code>string<\/code>: The lock name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">mergeBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>mergeBlocks in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">moveBlocksDown<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>moveBlocksDown in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">moveBlocksUp<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>moveBlocksUp in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">moveBlockToPosition<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>moveBlockToPosition in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">multiSelect<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>multiSelect in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">receiveBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>receiveBlocks in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">redo<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that restores last popped state in undo history.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">refreshPost<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> Since WordPress 6.0.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Action for refreshing the current post.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">removeBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>removeBlock in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">removeBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>removeBlocks in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">removeEditorPanel<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to remove a panel from the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>panelName<\/em> <code>string<\/code>: A string that identifies the panel to remove.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">replaceBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>replaceBlock in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">replaceBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>replaceBlocks in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">resetBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>resetBlocks in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">resetEditorBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to signal that the blocks have been updated.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>blocks<\/em> <code>Array<\/code>: Block Array.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options<\/em> <code>?Object<\/code>: Optional options.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">resetPost<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> Since WordPress 6.0.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that the latest version of the post has been received, either by initialization or save.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">savePost<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action for saving the current post in the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>options<\/em> <code>Object<\/code>:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">selectBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>selectBlock in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setDeviceType<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that changes the width of the editing canvas.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>deviceType<\/em> <code>string<\/code>:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setEditedPost<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action that sets the current post Type and post ID.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>postType<\/em> <code>string<\/code>: Post Type.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>postId<\/em> <code>string<\/code>: Post ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setIsInserterOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to open\/close the inserter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>value<\/em> <code>boolean|Object<\/code>: Whether the inserter should be opened (true) or closed (false). To specify an insertion point, use an object.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>value.rootClientId<\/em> <code>string<\/code>: The root client ID to insert at.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>value.insertionIndex<\/em> <code>number<\/code>: The index to insert at.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setIsListViewOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to open\/close the list view.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>isOpen<\/em> <code>boolean<\/code>: A boolean representing whether the list view should be opened or closed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setRenderingMode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action used to set the rendering mode of the post editor. We support multiple rendering modes:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>all<\/code>: This is the default mode. It renders the post editor with all the features available. If a template is provided, it's preferred over the post.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>post-only<\/code>: This mode extracts the post blocks from the template and renders only those. The idea is to allow the user to edit the post\/page in isolation without the wrapping template.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>template-locked<\/code>: This mode renders both the template and the post blocks but the template blocks are locked and can't be edited. The post blocks are editable.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>mode<\/em> <code>string<\/code>: Mode (one of 'post-only' or 'template-locked').<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setTemplateValidity<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>setTemplateValidity in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setupEditor<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action generator used in signalling that editor has initialized with the specified post object and editor settings.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>post<\/em> <code>Object<\/code>: Post object.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>edits<\/em> <code>Object<\/code>: Initial edited attributes object.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>template<\/em> <code>Array?<\/code>: Block Template.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setupEditorState<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Setup the editor state.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>post<\/em> <code>Object<\/code>: Post object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">showInsertionPoint<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>showInsertionPoint in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">startMultiSelect<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>startMultiSelect in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">startTyping<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>startTyping in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">stopMultiSelect<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>stopMultiSelect in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">stopTyping<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>stopTyping in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">switchEditorMode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Triggers an action used to switch editor mode.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>mode<\/em> <code>string<\/code>: The editor mode.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">synchronizeTemplate<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>synchronizeTemplate in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">toggleBlockMode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>toggleBlockMode in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">toggleDistractionFree<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that toggles Distraction free mode. Distraction free mode expects there are no sidebars, as due to the z-index values set, you can't close sidebars.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">toggleEditorPanelEnabled<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to enable or disable a panel in the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>panelName<\/em> <code>string<\/code>: A string that identifies the panel to enable or disable.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">toggleEditorPanelOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Opens a closed panel and closes an open panel.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>panelName<\/em> <code>string<\/code>: A string that identifies the panel to open or close.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">toggleSelection<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>toggleSelection in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">trashPost<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action for trashing the current post in the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">undo<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that pops a record from undo history and undoes the edit.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">unlockPostAutosaving<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that unlocks post autosaving.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Unlock post saving with the lock key `mylock`:\nwp.data.dispatch( 'core\/editor' ).unlockPostAutosaving( 'mylock' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>lockName<\/em> <code>string<\/code>: The lock name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">unlockPostSaving<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that unlocks post saving.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Unlock post saving with the lock key `mylock`:\nwp.data.dispatch( 'core\/editor' ).unlockPostSaving( 'mylock' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>lockName<\/em> <code>string<\/code>: The lock name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">updateBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>updateBlock in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">updateBlockAttributes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>updateBlockAttributes in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">updateBlockListSettings<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>updateBlockListSettings in core\/block-editor store.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">updateEditorSettings<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Undocumented declaration.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">updatePost<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> since Gutenberg 9.7.0.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that a patch of updates for the latest version of the post have been received.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">updatePostLock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that locks the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>lock<\/em> <code>Object<\/code>: Details about the post lock status, user, and nonce.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/editor\/src\/store\/actions.js) -->\n<!-- \/wp:html -->",
        "markdown": "# The Post Editor\u2019s Data\n\nNamespace: `core\/editor`.\n\n## Selectors\n\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/editor\/src\/store\/selectors.js) -->\n\n### canInsertBlockType\n\n_Related_\n\n-   canInsertBlockType in core\/block-editor store.\n\n### canUserUseUnfilteredHTML\n\nReturns whether or not the user has the unfiltered_html capability.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `boolean`: Whether the user can or can't post unfiltered HTML.\n\n### didPostSaveRequestFail\n\nReturns true if a previous post save was attempted but failed, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the post save failed.\n\n### didPostSaveRequestSucceed\n\nReturns true if a previous post save was attempted successfully, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the post was saved successfully.\n\n### getActivePostLock\n\nReturns the active post lock.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `Object`: The lock object.\n\n### getAdjacentBlockClientId\n\n_Related_\n\n-   getAdjacentBlockClientId in core\/block-editor store.\n\n### getAutosaveAttribute\n\n> **Deprecated** since 5.6. Callers should use the `getAutosave( postType, postId, userId )` selector from the '@wordpress\/core-data' package and access properties on the returned autosave object using getPostRawValue.\n\nReturns an attribute value of the current autosave revision for a post, or null if there is no autosave for the post.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _attributeName_ `string`: Autosave attribute name.\n\n_Returns_\n\n-   `*`: Autosave attribute value.\n\n### getBlock\n\n_Related_\n\n-   getBlock in core\/block-editor store.\n\n### getBlockAttributes\n\n_Related_\n\n-   getBlockAttributes in core\/block-editor store.\n\n### getBlockCount\n\n_Related_\n\n-   getBlockCount in core\/block-editor store.\n\n### getBlockHierarchyRootClientId\n\n_Related_\n\n-   getBlockHierarchyRootClientId in core\/block-editor store.\n\n### getBlockIndex\n\n_Related_\n\n-   getBlockIndex in core\/block-editor store.\n\n### getBlockInsertionPoint\n\n_Related_\n\n-   getBlockInsertionPoint in core\/block-editor store.\n\n### getBlockListSettings\n\n_Related_\n\n-   getBlockListSettings in core\/block-editor store.\n\n### getBlockMode\n\n_Related_\n\n-   getBlockMode in core\/block-editor store.\n\n### getBlockName\n\n_Related_\n\n-   getBlockName in core\/block-editor store.\n\n### getBlockOrder\n\n_Related_\n\n-   getBlockOrder in core\/block-editor store.\n\n### getBlockRootClientId\n\n_Related_\n\n-   getBlockRootClientId in core\/block-editor store.\n\n### getBlocks\n\n_Related_\n\n-   getBlocks in core\/block-editor store.\n\n### getBlocksByClientId\n\n_Related_\n\n-   getBlocksByClientId in core\/block-editor store.\n\n### getBlockSelectionEnd\n\n_Related_\n\n-   getBlockSelectionEnd in core\/block-editor store.\n\n### getBlockSelectionStart\n\n_Related_\n\n-   getBlockSelectionStart in core\/block-editor store.\n\n### getClientIdsOfDescendants\n\n_Related_\n\n-   getClientIdsOfDescendants in core\/block-editor store.\n\n### getClientIdsWithDescendants\n\n_Related_\n\n-   getClientIdsWithDescendants in core\/block-editor store.\n\n### getCurrentPost\n\nReturns the post currently being edited in its last known saved state, not including unsaved edits. Returns an object containing relevant default post values if the post has not yet been saved.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `Object`: Post object.\n\n### getCurrentPostAttribute\n\nReturns an attribute value of the saved post.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _attributeName_ `string`: Post attribute name.\n\n_Returns_\n\n-   `*`: Post attribute value.\n\n### getCurrentPostId\n\nReturns the ID of the post currently being edited, or null if the post has not yet been saved.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `?number`: ID of current post.\n\n### getCurrentPostLastRevisionId\n\nReturns the last revision ID of the post currently being edited, or null if the post has no revisions.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `?number`: ID of the last revision.\n\n### getCurrentPostRevisionsCount\n\nReturns the number of revisions of the post currently being edited.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `number`: Number of revisions.\n\n### getCurrentPostType\n\nReturns the post type of the post currently being edited.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `string`: Post type.\n\n### getCurrentTemplateId\n\nReturns the template ID currently being rendered\/edited\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `string?`: Template ID.\n\n### getDeviceType\n\nReturns the current editing canvas device type.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `string`: Device type.\n\n### getEditedPostAttribute\n\nReturns a single attribute of the post being edited, preferring the unsaved edit if one exists, but falling back to the attribute for the last known saved state of the post.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _attributeName_ `string`: Post attribute name.\n\n_Returns_\n\n-   `*`: Post attribute value.\n\n### getEditedPostContent\n\nReturns the content of the post being edited.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `string`: Post content.\n\n### getEditedPostPreviewLink\n\nReturns the post preview link\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `string | undefined`: Preview Link.\n\n### getEditedPostSlug\n\nReturns the slug for the post being edited, preferring a manually edited value if one exists, then a sanitized version of the current post title, and finally the post ID.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `string`: The current slug to be displayed in the editor\n\n### getEditedPostVisibility\n\nReturns the current visibility of the post being edited, preferring the unsaved value if different than the saved post. The return value is one of \"private\", \"password\", or \"public\".\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `string`: Post visibility.\n\n### getEditorBlocks\n\nReturn the current block list.\n\n_Parameters_\n\n-   _state_ `Object`:\n\n_Returns_\n\n-   `Array`: Block list.\n\n### getEditorMode\n\nReturns the current editing mode.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `string`: Editing mode.\n\n### getEditorSelection\n\nReturns the current selection.\n\n_Parameters_\n\n-   _state_ `Object`:\n\n_Returns_\n\n-   `WPBlockSelection`: The selection end.\n\n### getEditorSelectionEnd\n\n> **Deprecated** since Gutenberg 10.0.0.\n\nReturns the current selection end.\n\n_Parameters_\n\n-   _state_ `Object`:\n\n_Returns_\n\n-   `WPBlockSelection`: The selection end.\n\n### getEditorSelectionStart\n\n> **Deprecated** since Gutenberg 10.0.0.\n\nReturns the current selection start.\n\n_Parameters_\n\n-   _state_ `Object`:\n\n_Returns_\n\n-   `WPBlockSelection`: The selection start.\n\n### getEditorSettings\n\nReturns the post editor settings.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `Object`: The editor settings object.\n\n### getFirstMultiSelectedBlockClientId\n\n_Related_\n\n-   getFirstMultiSelectedBlockClientId in core\/block-editor store.\n\n### getGlobalBlockCount\n\n_Related_\n\n-   getGlobalBlockCount in core\/block-editor store.\n\n### getInserterItems\n\n_Related_\n\n-   getInserterItems in core\/block-editor store.\n\n### getLastMultiSelectedBlockClientId\n\n_Related_\n\n-   getLastMultiSelectedBlockClientId in core\/block-editor store.\n\n### getMultiSelectedBlockClientIds\n\n_Related_\n\n-   getMultiSelectedBlockClientIds in core\/block-editor store.\n\n### getMultiSelectedBlocks\n\n_Related_\n\n-   getMultiSelectedBlocks in core\/block-editor store.\n\n### getMultiSelectedBlocksEndClientId\n\n_Related_\n\n-   getMultiSelectedBlocksEndClientId in core\/block-editor store.\n\n### getMultiSelectedBlocksStartClientId\n\n_Related_\n\n-   getMultiSelectedBlocksStartClientId in core\/block-editor store.\n\n### getNextBlockClientId\n\n_Related_\n\n-   getNextBlockClientId in core\/block-editor store.\n\n### getPermalink\n\nReturns the permalink for the post.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `?string`: The permalink, or null if the post is not viewable.\n\n### getPermalinkParts\n\nReturns the permalink for a post, split into it's three parts: the prefix, the postName, and the suffix.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `Object`: An object containing the prefix, postName, and suffix for the permalink, or null if the post is not viewable.\n\n### getPostEdits\n\nReturns any post values which have been changed in the editor but not yet been saved.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `Object`: Object of key value pairs comprising unsaved edits.\n\n### getPostLockUser\n\nReturns details about the post lock user.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `Object`: A user object.\n\n### getPostTypeLabel\n\nReturns a post type label depending on the current post.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `string|undefined`: The post type label if available, otherwise undefined.\n\n### getPreviousBlockClientId\n\n_Related_\n\n-   getPreviousBlockClientId in core\/block-editor store.\n\n### getRenderingMode\n\nReturns the post editor's rendering mode.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `string`: Rendering mode.\n\n### getSelectedBlock\n\n_Related_\n\n-   getSelectedBlock in core\/block-editor store.\n\n### getSelectedBlockClientId\n\n_Related_\n\n-   getSelectedBlockClientId in core\/block-editor store.\n\n### getSelectedBlockCount\n\n_Related_\n\n-   getSelectedBlockCount in core\/block-editor store.\n\n### getSelectedBlocksInitialCaretPosition\n\n_Related_\n\n-   getSelectedBlocksInitialCaretPosition in core\/block-editor store.\n\n### getStateBeforeOptimisticTransaction\n\n> **Deprecated** since Gutenberg 9.7.0.\n\nReturns state object prior to a specified optimist transaction ID, or `null` if the transaction corresponding to the given ID cannot be found.\n\n### getSuggestedPostFormat\n\nReturns a suggested post format for the current post, inferred only if there is a single block within the post and it is of a type known to match a default post format. Returns null if the format cannot be determined.\n\n_Returns_\n\n-   `?string`: Suggested post format.\n\n### getTemplate\n\n_Related_\n\n-   getTemplate in core\/block-editor store.\n\n### getTemplateLock\n\n_Related_\n\n-   getTemplateLock in core\/block-editor store.\n\n### hasChangedContent\n\nReturns true if content includes unsaved changes, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `boolean`: Whether content includes unsaved changes.\n\n### hasEditorRedo\n\nReturns true if any future editor history snapshots exist, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether redo history exists.\n\n### hasEditorUndo\n\nReturns true if any past editor history snapshots exist, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether undo history exists.\n\n### hasInserterItems\n\n_Related_\n\n-   hasInserterItems in core\/block-editor store.\n\n### hasMultiSelection\n\n_Related_\n\n-   hasMultiSelection in core\/block-editor store.\n\n### hasNonPostEntityChanges\n\nReturns true if there are unsaved edits for entities other than the editor's post, and false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether there are edits or not.\n\n### hasSelectedBlock\n\n_Related_\n\n-   hasSelectedBlock in core\/block-editor store.\n\n### hasSelectedInnerBlock\n\n_Related_\n\n-   hasSelectedInnerBlock in core\/block-editor store.\n\n### inSomeHistory\n\n> **Deprecated** since Gutenberg 9.7.0.\n\nReturns true if an optimistic transaction is pending commit, for which the before state satisfies the given predicate function.\n\n### isAncestorMultiSelected\n\n_Related_\n\n-   isAncestorMultiSelected in core\/block-editor store.\n\n### isAutosavingPost\n\nReturns true if the post is autosaving, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the post is autosaving.\n\n### isBlockInsertionPointVisible\n\n_Related_\n\n-   isBlockInsertionPointVisible in core\/block-editor store.\n\n### isBlockMultiSelected\n\n_Related_\n\n-   isBlockMultiSelected in core\/block-editor store.\n\n### isBlockSelected\n\n_Related_\n\n-   isBlockSelected in core\/block-editor store.\n\n### isBlockValid\n\n_Related_\n\n-   isBlockValid in core\/block-editor store.\n\n### isBlockWithinSelection\n\n_Related_\n\n-   isBlockWithinSelection in core\/block-editor store.\n\n### isCaretWithinFormattedText\n\n_Related_\n\n-   isCaretWithinFormattedText in core\/block-editor store.\n\n### isCleanNewPost\n\nReturns true if there are no unsaved values for the current edit session and if the currently edited post is new (has never been saved before).\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether new post and unsaved values exist.\n\n### isCurrentPostPending\n\nReturns true if post is pending review.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether current post is pending review.\n\n### isCurrentPostPublished\n\nReturn true if the current post has already been published.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _currentPost_ `Object?`: Explicit current post for bypassing registry selector.\n\n_Returns_\n\n-   `boolean`: Whether the post has been published.\n\n### isCurrentPostScheduled\n\nReturns true if post is already scheduled.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether current post is scheduled to be posted.\n\n### isDeletingPost\n\nReturns true if the post is currently being deleted, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `boolean`: Whether post is being deleted.\n\n### isEditedPostAutosaveable\n\nReturns true if the post can be autosaved, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _autosave_ `Object`: A raw autosave object from the REST API.\n\n_Returns_\n\n-   `boolean`: Whether the post can be autosaved.\n\n### isEditedPostBeingScheduled\n\nReturn true if the post being edited is being scheduled. Preferring the unsaved status values.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the post has been published.\n\n### isEditedPostDateFloating\n\nReturns whether the current post should be considered to have a \"floating\" date (i.e. that it would publish \"Immediately\" rather than at a set time).\n\nUnlike in the PHP backend, the REST API returns a full date string for posts where the 0000-00-00T00:00:00 placeholder is present in the database. To infer that a post is set to publish \"Immediately\" we check whether the date and modified date are the same.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `boolean`: Whether the edited post has a floating date value.\n\n### isEditedPostDirty\n\nReturns true if there are unsaved values for the current edit session, or false if the editing state matches the saved or new post.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether unsaved values exist.\n\n### isEditedPostEmpty\n\nReturns true if the edited post has content. A post has content if it has at least one saveable block or otherwise has a non-empty content property assigned.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether post has content.\n\n### isEditedPostNew\n\nReturns true if the currently edited post is yet to be saved, or false if the post has been saved.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the post is new.\n\n### isEditedPostPublishable\n\nReturn true if the post being edited can be published.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the post can been published.\n\n### isEditedPostSaveable\n\nReturns true if the post can be saved, or false otherwise. A post must contain a title, an excerpt, or non-empty content to be valid for save.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the post can be saved.\n\n### isEditorPanelEnabled\n\nReturns true if the given panel is enabled, or false otherwise. Panels are enabled by default.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _panelName_ `string`: A string that identifies the panel.\n\n_Returns_\n\n-   `boolean`: Whether or not the panel is enabled.\n\n### isEditorPanelOpened\n\nReturns true if the given panel is open, or false otherwise. Panels are closed by default.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _panelName_ `string`: A string that identifies the panel.\n\n_Returns_\n\n-   `boolean`: Whether or not the panel is open.\n\n### isEditorPanelRemoved\n\nReturns true if the given panel was programmatically removed, or false otherwise. All panels are not removed by default.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _panelName_ `string`: A string that identifies the panel.\n\n_Returns_\n\n-   `boolean`: Whether or not the panel is removed.\n\n### isFirstMultiSelectedBlock\n\n_Related_\n\n-   isFirstMultiSelectedBlock in core\/block-editor store.\n\n### isInserterOpened\n\nReturns true if the inserter is opened.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the inserter is opened.\n\n### isListViewOpened\n\nReturns true if the list view is opened.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the list view is opened.\n\n### isMultiSelecting\n\n_Related_\n\n-   isMultiSelecting in core\/block-editor store.\n\n### isPermalinkEditable\n\nReturns whether the permalink is editable or not.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `boolean`: Whether or not the permalink is editable.\n\n### isPostAutosavingLocked\n\nReturns whether post autosaving is locked.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Is locked.\n\n### isPostLocked\n\nReturns whether the post is locked.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Is locked.\n\n### isPostLockTakeover\n\nReturns whether the edition of the post has been taken over.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Is post lock takeover.\n\n### isPostSavingLocked\n\nReturns whether post saving is locked.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Is locked.\n\n### isPreviewingPost\n\nReturns true if the post is being previewed, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the post is being previewed.\n\n### isPublishingPost\n\nReturns true if the post is being published, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether post is being published.\n\n### isPublishSidebarEnabled\n\nReturns whether the pre-publish panel should be shown or skipped when the user clicks the \"publish\" button.\n\n_Returns_\n\n-   `boolean`: Whether the pre-publish panel should be shown or not.\n\n### isSavingNonPostEntityChanges\n\nReturns true if non-post entities are currently being saved, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether non-post entities are being saved.\n\n### isSavingPost\n\nReturns true if the post is currently being saved, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether post is being saved.\n\n### isSelectionEnabled\n\n_Related_\n\n-   isSelectionEnabled in core\/block-editor store.\n\n### isTyping\n\n_Related_\n\n-   isTyping in core\/block-editor store.\n\n### isValidTemplate\n\n_Related_\n\n-   isValidTemplate in core\/block-editor store.\n\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/editor\/src\/store\/selectors.js) -->\n\n## Actions\n\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/editor\/src\/store\/actions.js) -->\n\n### autosave\n\nAction that autosaves the current post. This includes server-side autosaving (default) and client-side (a.k.a. local) autosaving (e.g. on the Web, the post might be committed to Session Storage).\n\n_Parameters_\n\n-   _options_ `Object?`: Extra flags to identify the autosave.\n\n### clearSelectedBlock\n\n_Related_\n\n-   clearSelectedBlock in core\/block-editor store.\n\n### createUndoLevel\n\n> **Deprecated** Since WordPress 6.0\n\nAction that creates an undo history record.\n\n### disablePublishSidebar\n\nDisables the publish sidebar.\n\n### editPost\n\nReturns an action object used in signalling that attributes of the post have been edited.\n\n_Parameters_\n\n-   _edits_ `Object`: Post attributes to edit.\n-   _options_ `Object`: Options for the edit.\n\n### enablePublishSidebar\n\nEnable the publish sidebar.\n\n### enterFormattedText\n\n_Related_\n\n-   enterFormattedText in core\/block-editor store.\n\n### exitFormattedText\n\n_Related_\n\n-   exitFormattedText in core\/block-editor store.\n\n### hideInsertionPoint\n\n_Related_\n\n-   hideInsertionPoint in core\/block-editor store.\n\n### insertBlock\n\n_Related_\n\n-   insertBlock in core\/block-editor store.\n\n### insertBlocks\n\n_Related_\n\n-   insertBlocks in core\/block-editor store.\n\n### insertDefaultBlock\n\n_Related_\n\n-   insertDefaultBlock in core\/block-editor store.\n\n### lockPostAutosaving\n\nAction that locks post autosaving.\n\n_Usage_\n\n    \/\/ Lock post autosaving with the lock key `mylock`:\n    wp.data.dispatch( 'core\/editor' ).lockPostAutosaving( 'mylock' );\n\n_Parameters_\n\n-   _lockName_ `string`: The lock name.\n\n_Returns_\n\n-   `Object`: Action object\n\n### lockPostSaving\n\nAction that locks post saving.\n\n_Usage_\n\n    const { subscribe } = wp.data;\n\n    const initialPostStatus = wp.data.select( 'core\/editor' ).getEditedPostAttribute( 'status' );\n\n    \/\/ Only allow publishing posts that are set to a future date.\n    if ( 'publish' !== initialPostStatus ) {\n\n    \t\/\/ Track locking.\n    \tlet locked = false;\n\n    \t\/\/ Watch for the publish event.\n    \tlet unssubscribe = subscribe( () => {\n    \t\tconst currentPostStatus = wp.data.select( 'core\/editor' ).getEditedPostAttribute( 'status' );\n    \t\tif ( 'publish' !== currentPostStatus ) {\n\n    \t\t\t\/\/ Compare the post date to the current date, lock the post if the date isn't in the future.\n    \t\t\tconst postDate = new Date( wp.data.select( 'core\/editor' ).getEditedPostAttribute( 'date' ) );\n    \t\t\tconst currentDate = new Date();\n    \t\t\tif ( postDate.getTime() <= currentDate.getTime() ) {\n    \t\t\t\tif ( ! locked ) {\n    \t\t\t\t\tlocked = true;\n    \t\t\t\t\twp.data.dispatch( 'core\/editor' ).lockPostSaving( 'futurelock' );\n    \t\t\t\t}\n    \t\t\t} else {\n    \t\t\t\tif ( locked ) {\n    \t\t\t\t\tlocked = false;\n    \t\t\t\t\twp.data.dispatch( 'core\/editor' ).unlockPostSaving( 'futurelock' );\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t} );\n    }\n\n_Parameters_\n\n-   _lockName_ `string`: The lock name.\n\n_Returns_\n\n-   `Object`: Action object\n\n### mergeBlocks\n\n_Related_\n\n-   mergeBlocks in core\/block-editor store.\n\n### moveBlocksDown\n\n_Related_\n\n-   moveBlocksDown in core\/block-editor store.\n\n### moveBlocksUp\n\n_Related_\n\n-   moveBlocksUp in core\/block-editor store.\n\n### moveBlockToPosition\n\n_Related_\n\n-   moveBlockToPosition in core\/block-editor store.\n\n### multiSelect\n\n_Related_\n\n-   multiSelect in core\/block-editor store.\n\n### receiveBlocks\n\n_Related_\n\n-   receiveBlocks in core\/block-editor store.\n\n### redo\n\nAction that restores last popped state in undo history.\n\n### refreshPost\n\n> **Deprecated** Since WordPress 6.0.\n\nAction for refreshing the current post.\n\n### removeBlock\n\n_Related_\n\n-   removeBlock in core\/block-editor store.\n\n### removeBlocks\n\n_Related_\n\n-   removeBlocks in core\/block-editor store.\n\n### removeEditorPanel\n\nReturns an action object used to remove a panel from the editor.\n\n_Parameters_\n\n-   _panelName_ `string`: A string that identifies the panel to remove.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### replaceBlock\n\n_Related_\n\n-   replaceBlock in core\/block-editor store.\n\n### replaceBlocks\n\n_Related_\n\n-   replaceBlocks in core\/block-editor store.\n\n### resetBlocks\n\n_Related_\n\n-   resetBlocks in core\/block-editor store.\n\n### resetEditorBlocks\n\nReturns an action object used to signal that the blocks have been updated.\n\n_Parameters_\n\n-   _blocks_ `Array`: Block Array.\n-   _options_ `?Object`: Optional options.\n\n### resetPost\n\n> **Deprecated** Since WordPress 6.0.\n\nReturns an action object used in signalling that the latest version of the post has been received, either by initialization or save.\n\n### savePost\n\nAction for saving the current post in the editor.\n\n_Parameters_\n\n-   _options_ `Object`:\n\n### selectBlock\n\n_Related_\n\n-   selectBlock in core\/block-editor store.\n\n### setDeviceType\n\nAction that changes the width of the editing canvas.\n\n_Parameters_\n\n-   _deviceType_ `string`:\n\n_Returns_\n\n-   `Object`: Action object.\n\n### setEditedPost\n\nReturns an action that sets the current post Type and post ID.\n\n_Parameters_\n\n-   _postType_ `string`: Post Type.\n-   _postId_ `string`: Post ID.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### setIsInserterOpened\n\nReturns an action object used to open\/close the inserter.\n\n_Parameters_\n\n-   _value_ `boolean|Object`: Whether the inserter should be opened (true) or closed (false). To specify an insertion point, use an object.\n-   _value.rootClientId_ `string`: The root client ID to insert at.\n-   _value.insertionIndex_ `number`: The index to insert at.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### setIsListViewOpened\n\nReturns an action object used to open\/close the list view.\n\n_Parameters_\n\n-   _isOpen_ `boolean`: A boolean representing whether the list view should be opened or closed.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### setRenderingMode\n\nReturns an action used to set the rendering mode of the post editor. We support multiple rendering modes:\n\n-   `all`: This is the default mode. It renders the post editor with all the features available. If a template is provided, it's preferred over the post.\n-   `post-only`: This mode extracts the post blocks from the template and renders only those. The idea is to allow the user to edit the post\/page in isolation without the wrapping template.\n-   `template-locked`: This mode renders both the template and the post blocks but the template blocks are locked and can't be edited. The post blocks are editable.\n\n_Parameters_\n\n-   _mode_ `string`: Mode (one of 'post-only' or 'template-locked').\n\n### setTemplateValidity\n\n_Related_\n\n-   setTemplateValidity in core\/block-editor store.\n\n### setupEditor\n\nReturns an action generator used in signalling that editor has initialized with the specified post object and editor settings.\n\n_Parameters_\n\n-   _post_ `Object`: Post object.\n-   _edits_ `Object`: Initial edited attributes object.\n-   _template_ `Array?`: Block Template.\n\n### setupEditorState\n\n> **Deprecated**\n\nSetup the editor state.\n\n_Parameters_\n\n-   _post_ `Object`: Post object.\n\n### showInsertionPoint\n\n_Related_\n\n-   showInsertionPoint in core\/block-editor store.\n\n### startMultiSelect\n\n_Related_\n\n-   startMultiSelect in core\/block-editor store.\n\n### startTyping\n\n_Related_\n\n-   startTyping in core\/block-editor store.\n\n### stopMultiSelect\n\n_Related_\n\n-   stopMultiSelect in core\/block-editor store.\n\n### stopTyping\n\n_Related_\n\n-   stopTyping in core\/block-editor store.\n\n### switchEditorMode\n\nTriggers an action used to switch editor mode.\n\n_Parameters_\n\n-   _mode_ `string`: The editor mode.\n\n### synchronizeTemplate\n\n_Related_\n\n-   synchronizeTemplate in core\/block-editor store.\n\n### toggleBlockMode\n\n_Related_\n\n-   toggleBlockMode in core\/block-editor store.\n\n### toggleDistractionFree\n\nAction that toggles Distraction free mode. Distraction free mode expects there are no sidebars, as due to the z-index values set, you can't close sidebars.\n\n### toggleEditorPanelEnabled\n\nReturns an action object used to enable or disable a panel in the editor.\n\n_Parameters_\n\n-   _panelName_ `string`: A string that identifies the panel to enable or disable.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### toggleEditorPanelOpened\n\nOpens a closed panel and closes an open panel.\n\n_Parameters_\n\n-   _panelName_ `string`: A string that identifies the panel to open or close.\n\n### toggleSelection\n\n_Related_\n\n-   toggleSelection in core\/block-editor store.\n\n### trashPost\n\nAction for trashing the current post in the editor.\n\n### undo\n\nAction that pops a record from undo history and undoes the edit.\n\n### unlockPostAutosaving\n\nAction that unlocks post autosaving.\n\n_Usage_\n\n    \/\/ Unlock post saving with the lock key `mylock`:\n    wp.data.dispatch( 'core\/editor' ).unlockPostAutosaving( 'mylock' );\n\n_Parameters_\n\n-   _lockName_ `string`: The lock name.\n\n_Returns_\n\n-   `Object`: Action object\n\n### unlockPostSaving\n\nAction that unlocks post saving.\n\n_Usage_\n\n    \/\/ Unlock post saving with the lock key `mylock`:\n    wp.data.dispatch( 'core\/editor' ).unlockPostSaving( 'mylock' );\n\n_Parameters_\n\n-   _lockName_ `string`: The lock name.\n\n_Returns_\n\n-   `Object`: Action object\n\n### updateBlock\n\n_Related_\n\n-   updateBlock in core\/block-editor store.\n\n### updateBlockAttributes\n\n_Related_\n\n-   updateBlockAttributes in core\/block-editor store.\n\n### updateBlockListSettings\n\n_Related_\n\n-   updateBlockListSettings in core\/block-editor store.\n\n### updateEditorSettings\n\nUndocumented declaration.\n\n### updatePost\n\n> **Deprecated** since Gutenberg 9.7.0.\n\nReturns an action object used in signalling that a patch of updates for the latest version of the post have been received.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### updatePostLock\n\nAction that locks the editor.\n\n_Parameters_\n\n-   _lock_ `Object`: Details about the post lock status, user, and nonce.\n\n_Returns_\n\n-   `Object`: Action object.\n\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/editor\/src\/store\/actions.js) -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/data-core-commands.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">The Commands Data<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Namespace: <code>core\/commands<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/commands\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getCommandLoaders<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the registered command loaders.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: State tree.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>contextual<\/em> <code>boolean<\/code>: Whether to return only contextual command loaders.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>import('.\/actions').WPCommandLoaderConfig[]<\/code>: The list of registered command loaders.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getCommands<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the registered static commands.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: State tree.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>contextual<\/em> <code>boolean<\/code>: Whether to return only contextual commands.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>import('.\/actions').WPCommandConfig[]<\/code>: The list of registered commands.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getContext<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether the active context.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: State tree.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string<\/code>: Context.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isOpen<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether the command palette is open.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: State tree.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Returns whether the command palette is open.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/commands\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Actions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/commands\/src\/store\/actions.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">close<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Closes the command palette.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: action.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">open<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Opens the command palette.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: action.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">registerCommand<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to register a new command.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>config<\/em> <code>WPCommandConfig<\/code>: Command config.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: action.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">registerCommandLoader<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Register command loader.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>config<\/em> <code>WPCommandLoaderConfig<\/code>: Command loader config.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: action.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">unregisterCommand<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to unregister a command.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Command name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: action.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">unregisterCommandLoader<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Unregister command loader hook.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Command loader name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: action.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/commands\/src\/store\/actions.js) -->\n<!-- \/wp:html -->",
        "markdown": "# The Commands Data\n\nNamespace: `core\/commands`.\n\n## Selectors\n\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/commands\/src\/store\/selectors.js) -->\n\n### getCommandLoaders\n\nReturns the registered command loaders.\n\n_Parameters_\n\n-   _state_ `Object`: State tree.\n-   _contextual_ `boolean`: Whether to return only contextual command loaders.\n\n_Returns_\n\n-   `import('.\/actions').WPCommandLoaderConfig[]`: The list of registered command loaders.\n\n### getCommands\n\nReturns the registered static commands.\n\n_Parameters_\n\n-   _state_ `Object`: State tree.\n-   _contextual_ `boolean`: Whether to return only contextual commands.\n\n_Returns_\n\n-   `import('.\/actions').WPCommandConfig[]`: The list of registered commands.\n\n### getContext\n\nReturns whether the active context.\n\n_Parameters_\n\n-   _state_ `Object`: State tree.\n\n_Returns_\n\n-   `string`: Context.\n\n### isOpen\n\nReturns whether the command palette is open.\n\n_Parameters_\n\n-   _state_ `Object`: State tree.\n\n_Returns_\n\n-   `boolean`: Returns whether the command palette is open.\n\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/commands\/src\/store\/selectors.js) -->\n\n## Actions\n\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/commands\/src\/store\/actions.js) -->\n\n### close\n\nCloses the command palette.\n\n_Returns_\n\n-   `Object`: action.\n\n### open\n\nOpens the command palette.\n\n_Returns_\n\n-   `Object`: action.\n\n### registerCommand\n\nReturns an action object used to register a new command.\n\n_Parameters_\n\n-   _config_ `WPCommandConfig`: Command config.\n\n_Returns_\n\n-   `Object`: action.\n\n### registerCommandLoader\n\nRegister command loader.\n\n_Parameters_\n\n-   _config_ `WPCommandLoaderConfig`: Command loader config.\n\n_Returns_\n\n-   `Object`: action.\n\n### unregisterCommand\n\nReturns an action object used to unregister a command.\n\n_Parameters_\n\n-   _name_ `string`: Command name.\n\n_Returns_\n\n-   `Object`: action.\n\n### unregisterCommandLoader\n\nUnregister command loader hook.\n\n_Parameters_\n\n-   _name_ `string`: Command loader name.\n\n_Returns_\n\n-   `Object`: action.\n\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/commands\/src\/store\/actions.js) -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/data-core-annotations.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Annotations<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Namespace: <code>core\/annotations<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-alert\">\nThis package is still experimental. \u201cExperimental\u201d means this is an early implementation subject to drastic and breaking changes.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/annotations\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Nothing to document.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/annotations\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Actions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/annotations\/src\/store\/actions.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Nothing to document.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/annotations\/src\/store\/actions.js) -->\n<!-- \/wp:html -->",
        "markdown": "# Annotations\n\nNamespace: `core\/annotations`.\n\n<div class=\"callout callout-alert\">\nThis package is still experimental. \u201cExperimental\u201d means this is an early implementation subject to drastic and breaking changes.\n<\/div>\n\n## Selectors\n\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/annotations\/src\/store\/selectors.js) -->\n\nNothing to document.\n\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/annotations\/src\/store\/selectors.js) -->\n\n## Actions\n\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/annotations\/src\/store\/actions.js) -->\n\nNothing to document.\n\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/annotations\/src\/store\/actions.js) -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/data-core-nux.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">The NUX (New User Experience) Data<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Namespace: <code>core\/nux<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/nux\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">areTipsEnabled<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether or not tips are globally enabled.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether tips are globally enabled.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getAssociatedGuide<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an object describing the guide, if any, that the given tip is a part of.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>tipId<\/em> <code>string<\/code>: The tip to query.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?NUXGuideInfo<\/code>: Information about the associated guide.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isTipVisible<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Determines whether or not the given tip is showing. Tips are hidden if they are disabled, have been dismissed, or are not the current tip in any guide that they have been added to.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>tipId<\/em> <code>string<\/code>: The tip to query.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether or not the given tip is showing.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/nux\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Actions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/nux\/src\/store\/actions.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">disableTips<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object that, when dispatched, prevents all tips from showing again.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">dismissTip<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object that, when dispatched, dismisses the given tip. A dismissed tip will not show again.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>id<\/em> <code>string<\/code>: The tip to dismiss.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">enableTips<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object that, when dispatched, makes all tips show again.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">triggerGuide<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object that, when dispatched, presents a guide that takes the user through a series of tips step by step.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>tipIds<\/em> <code>string[]<\/code>: Which tips to show in the guide.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/nux\/src\/store\/actions.js) -->\n<!-- \/wp:html -->",
        "markdown": "# The NUX (New User Experience) Data\n\nNamespace: `core\/nux`.\n\n## Selectors\n\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/nux\/src\/store\/selectors.js) -->\n\n### areTipsEnabled\n\nReturns whether or not tips are globally enabled.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether tips are globally enabled.\n\n### getAssociatedGuide\n\nReturns an object describing the guide, if any, that the given tip is a part of.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _tipId_ `string`: The tip to query.\n\n_Returns_\n\n-   `?NUXGuideInfo`: Information about the associated guide.\n\n### isTipVisible\n\nDetermines whether or not the given tip is showing. Tips are hidden if they are disabled, have been dismissed, or are not the current tip in any guide that they have been added to.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _tipId_ `string`: The tip to query.\n\n_Returns_\n\n-   `boolean`: Whether or not the given tip is showing.\n\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/nux\/src\/store\/selectors.js) -->\n\n## Actions\n\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/nux\/src\/store\/actions.js) -->\n\n### disableTips\n\nReturns an action object that, when dispatched, prevents all tips from showing again.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### dismissTip\n\nReturns an action object that, when dispatched, dismisses the given tip. A dismissed tip will not show again.\n\n_Parameters_\n\n-   _id_ `string`: The tip to dismiss.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### enableTips\n\nReturns an action object that, when dispatched, makes all tips show again.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### triggerGuide\n\nReturns an action object that, when dispatched, presents a guide that takes the user through a series of tips step by step.\n\n_Parameters_\n\n-   _tipIds_ `string[]`: Which tips to show in the guide.\n\n_Returns_\n\n-   `Object`: Action object.\n\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/nux\/src\/store\/actions.js) -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/data-core-edit-site.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Edit Site<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Namespace: <code>core\/edit-site<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/edit-site\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getCanUserCreateMedia<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether the current user can create media or not.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Whether the current user can create media or not.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getCurrentTemplateNavigationPanelSubMenu<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getCurrentTemplateTemplateParts<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the template parts and their blocks for the current edited template.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: Template parts and their blocks in an array.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditedPostContext<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns the edited post's context object.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Page.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditedPostId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the ID of the currently edited template or template part.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string?<\/code>: Post ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditedPostType<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the current edited post type (wp_template or wp_template_part).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>TemplateType?<\/code>: Template type.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditorMode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the current editing mode.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string<\/code>: Editing mode.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getHomeTemplateId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getNavigationPanelActiveMenu<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getPage<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns the current page object.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Page.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getReusableBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns any available Reusable blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: The available reusable blocks.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getSettings<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the site editor settings.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Settings.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasPageContentFocus<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Whether or not the editor allows only page content to be edited.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether or not focus is on editing page content.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isFeatureActive<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns whether the given feature is enabled or not.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>featureName<\/em> <code>string<\/code>: Feature slug.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Is active.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isInserterOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the inserter is opened.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the inserter is opened.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isListViewOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the list view is opened.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the list view is opened.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isNavigationOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isPage<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Whether or not the editor has a page loaded into it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>setPage<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether or not the editor has a page loaded into it.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isSaveViewOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the current opened\/closed state of the save panel.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: True if the save panel should be open; false if closed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/edit-site\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Actions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/edit-site\/src\/store\/actions.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">addTemplate<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Action that adds a new template and sets it as the current template.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>template<\/em> <code>Object<\/code>: The template.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object used to set the current template.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">closeGeneralSidebar<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that closes the sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">openGeneralSidebar<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that opens an editor sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>name<\/em> <code>?string<\/code>: Sidebar name to be opened.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">openNavigationPanelToMenu<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Opens the navigation panel and sets its active menu at the same time.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">removeTemplate<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that removes a template.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>template<\/em> <code>Object<\/code>: The template object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">revertTemplate<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Reverts a template to its original theme-provided file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>template<\/em> <code>Object<\/code>: The template to revert.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options<\/em> <code>[Object]<\/code>:<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options.allowUndo<\/em> <code>[boolean]<\/code>: Whether to allow the user to undo reverting the template. Default true.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setEditedEntity<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that sets an edited entity.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>postType<\/em> <code>string<\/code>: The entity's post type.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>postId<\/em> <code>string<\/code>: The entity's ID.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>context<\/em> <code>Object<\/code>: The entity's context.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setEditedPostContext<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Set's the current block editor context.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>context<\/em> <code>Object<\/code>: The context object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setHasPageContentFocus<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Sets whether or not the editor allows only page content to be edited.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>hasPageContentFocus<\/em> <code>boolean<\/code>: True to allow only page content to be edited, false to allow template to be edited.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setHomeTemplateId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setIsInserterOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to open\/close the inserter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>value<\/em> <code>boolean|Object<\/code>: Whether the inserter should be opened (true) or closed (false).<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setIsListViewOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to open\/close the list view.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>isOpen<\/em> <code>boolean<\/code>: A boolean representing whether the list view should be opened or closed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setIsNavigationPanelOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Sets whether the navigation panel should be open.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setIsSaveViewOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Sets whether the save view panel should be open.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>isOpen<\/em> <code>boolean<\/code>: If true, opens the save view. If false, closes it. It does not toggle the state, but sets it directly.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setNavigationMenu<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that sets a navigation menu.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>navigationMenuId<\/em> <code>string<\/code>: The Navigation Menu Post ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setNavigationPanelActiveMenu<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Action that sets the active navigation panel menu.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setPage<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Resolves the template for a page and displays both. If no path is given, attempts to use the postId to generate a path like <code>?p=${ postId }<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>number<\/code>: The resolved template ID for the page route.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setTemplate<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that sets a template, optionally fetching it from REST API.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setTemplatePart<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that sets a template part.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>templatePartId<\/em> <code>string<\/code>: The template part ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">switchEditorMode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Triggers an action used to switch editor mode.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>mode<\/em> <code>string<\/code>: The editor mode.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">toggleDistractionFree<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Action that toggles Distraction free mode. Distraction free mode expects there are no sidebars, as due to the z-index values set, you can't close sidebars.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">toggleFeature<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Dispatches an action that toggles a feature flag.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>featureName<\/em> <code>string<\/code>: Feature name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">updateSettings<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to update the settings.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>settings<\/em> <code>Object<\/code>: New settings.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/edit-site\/src\/store\/actions.js) -->\n<!-- \/wp:html -->",
        "markdown": "# Edit Site\n\nNamespace: `core\/edit-site`.\n\n## Selectors\n\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/edit-site\/src\/store\/selectors.js) -->\n\n### getCanUserCreateMedia\n\nReturns whether the current user can create media or not.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `Object`: Whether the current user can create media or not.\n\n### getCurrentTemplateNavigationPanelSubMenu\n\n> **Deprecated**\n\n### getCurrentTemplateTemplateParts\n\nReturns the template parts and their blocks for the current edited template.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `Array`: Template parts and their blocks in an array.\n\n### getEditedPostContext\n\n> **Deprecated**\n\nReturns the edited post's context object.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `Object`: Page.\n\n### getEditedPostId\n\nReturns the ID of the currently edited template or template part.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `string?`: Post ID.\n\n### getEditedPostType\n\nReturns the current edited post type (wp_template or wp_template_part).\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `TemplateType?`: Template type.\n\n### getEditorMode\n\nReturns the current editing mode.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `string`: Editing mode.\n\n### getHomeTemplateId\n\n> **Deprecated**\n\n### getNavigationPanelActiveMenu\n\n> **Deprecated**\n\n### getPage\n\n> **Deprecated**\n\nReturns the current page object.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `Object`: Page.\n\n### getReusableBlocks\n\nReturns any available Reusable blocks.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `Array`: The available reusable blocks.\n\n### getSettings\n\nReturns the site editor settings.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `Object`: Settings.\n\n### hasPageContentFocus\n\n> **Deprecated**\n\nWhether or not the editor allows only page content to be edited.\n\n_Returns_\n\n-   `boolean`: Whether or not focus is on editing page content.\n\n### isFeatureActive\n\n> **Deprecated**\n\nReturns whether the given feature is enabled or not.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _featureName_ `string`: Feature slug.\n\n_Returns_\n\n-   `boolean`: Is active.\n\n### isInserterOpened\n\n> **Deprecated**\n\nReturns true if the inserter is opened.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the inserter is opened.\n\n### isListViewOpened\n\nReturns true if the list view is opened.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the list view is opened.\n\n### isNavigationOpened\n\n> **Deprecated**\n\n### isPage\n\nWhether or not the editor has a page loaded into it.\n\n_Related_\n\n-   setPage\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether or not the editor has a page loaded into it.\n\n### isSaveViewOpened\n\nReturns the current opened\/closed state of the save panel.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: True if the save panel should be open; false if closed.\n\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/edit-site\/src\/store\/selectors.js) -->\n\n## Actions\n\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/edit-site\/src\/store\/actions.js) -->\n\n### addTemplate\n\n> **Deprecated**\n\nAction that adds a new template and sets it as the current template.\n\n_Parameters_\n\n-   _template_ `Object`: The template.\n\n_Returns_\n\n-   `Object`: Action object used to set the current template.\n\n### closeGeneralSidebar\n\nAction that closes the sidebar.\n\n### openGeneralSidebar\n\nAction that opens an editor sidebar.\n\n_Parameters_\n\n-   _name_ `?string`: Sidebar name to be opened.\n\n### openNavigationPanelToMenu\n\n> **Deprecated**\n\nOpens the navigation panel and sets its active menu at the same time.\n\n### removeTemplate\n\nAction that removes a template.\n\n_Parameters_\n\n-   _template_ `Object`: The template object.\n\n### revertTemplate\n\nReverts a template to its original theme-provided file.\n\n_Parameters_\n\n-   _template_ `Object`: The template to revert.\n-   _options_ `[Object]`:\n-   _options.allowUndo_ `[boolean]`: Whether to allow the user to undo reverting the template. Default true.\n\n### setEditedEntity\n\nAction that sets an edited entity.\n\n_Parameters_\n\n-   _postType_ `string`: The entity's post type.\n-   _postId_ `string`: The entity's ID.\n-   _context_ `Object`: The entity's context.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### setEditedPostContext\n\nSet's the current block editor context.\n\n_Parameters_\n\n-   _context_ `Object`: The context object.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### setHasPageContentFocus\n\nSets whether or not the editor allows only page content to be edited.\n\n_Parameters_\n\n-   _hasPageContentFocus_ `boolean`: True to allow only page content to be edited, false to allow template to be edited.\n\n### setHomeTemplateId\n\n> **Deprecated**\n\n### setIsInserterOpened\n\n> **Deprecated**\n\nReturns an action object used to open\/close the inserter.\n\n_Parameters_\n\n-   _value_ `boolean|Object`: Whether the inserter should be opened (true) or closed (false).\n\n### setIsListViewOpened\n\n> **Deprecated**\n\nReturns an action object used to open\/close the list view.\n\n_Parameters_\n\n-   _isOpen_ `boolean`: A boolean representing whether the list view should be opened or closed.\n\n### setIsNavigationPanelOpened\n\n> **Deprecated**\n\nSets whether the navigation panel should be open.\n\n### setIsSaveViewOpened\n\nSets whether the save view panel should be open.\n\n_Parameters_\n\n-   _isOpen_ `boolean`: If true, opens the save view. If false, closes it. It does not toggle the state, but sets it directly.\n\n### setNavigationMenu\n\nAction that sets a navigation menu.\n\n_Parameters_\n\n-   _navigationMenuId_ `string`: The Navigation Menu Post ID.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### setNavigationPanelActiveMenu\n\n> **Deprecated**\n\nAction that sets the active navigation panel menu.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### setPage\n\n> **Deprecated**\n\nResolves the template for a page and displays both. If no path is given, attempts to use the postId to generate a path like `?p=${ postId }`.\n\n_Returns_\n\n-   `number`: The resolved template ID for the page route.\n\n### setTemplate\n\nAction that sets a template, optionally fetching it from REST API.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### setTemplatePart\n\nAction that sets a template part.\n\n_Parameters_\n\n-   _templatePartId_ `string`: The template part ID.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### switchEditorMode\n\n> **Deprecated**\n\nTriggers an action used to switch editor mode.\n\n_Parameters_\n\n-   _mode_ `string`: The editor mode.\n\n### toggleDistractionFree\n\n> **Deprecated**\n\nAction that toggles Distraction free mode. Distraction free mode expects there are no sidebars, as due to the z-index values set, you can't close sidebars.\n\n### toggleFeature\n\nDispatches an action that toggles a feature flag.\n\n_Parameters_\n\n-   _featureName_ `string`: Feature name.\n\n### updateSettings\n\nReturns an action object used to update the settings.\n\n_Parameters_\n\n-   _settings_ `Object`: New settings.\n\n_Returns_\n\n-   `Object`: Action object.\n\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/edit-site\/src\/store\/actions.js) -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/data-core-preferences.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Preferences<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Namespace: <code>core\/preferences<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/preferences\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">get<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns a boolean indicating whether a prefer is active for a particular scope.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: The store state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>scope<\/em> <code>string<\/code>: The scope of the feature (e.g. core\/edit-post).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: The name of the feature.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>*<\/code>: Is the feature enabled?<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/preferences\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Actions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/preferences\/src\/store\/actions.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">set<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that a preference should be set to a value<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>scope<\/em> <code>string<\/code>: The preference scope (e.g. core\/edit-post).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: The preference name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>value<\/em> <code>*<\/code>: The value to set.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setDefaults<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that preference defaults should be set.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>scope<\/em> <code>string<\/code>: The preference scope (e.g. core\/edit-post).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>defaults<\/em> <code>Object&lt;string, *><\/code>: A key\/value map of preference names to values.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setPersistenceLayer<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Sets the persistence layer.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When a persistence layer is set, the preferences store will:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>call <code>get<\/code> immediately and update the store state to the value returned.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>call <code>set<\/code> with all preferences whenever a preference changes value.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><code>setPersistenceLayer<\/code> should ideally be dispatched at the start of an application's lifecycle, before any other actions have been dispatched to the preferences store.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>persistenceLayer<\/em> <code>WPPreferencesPersistenceLayer<\/code>: The persistence layer.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">toggle<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that a preference should be toggled.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>scope<\/em> <code>string<\/code>: The preference scope (e.g. core\/edit-post).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: The preference name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/preferences\/src\/store\/actions.js) -->\n<!-- \/wp:html -->",
        "markdown": "# Preferences\n\nNamespace: `core\/preferences`.\n\n## Selectors\n\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/preferences\/src\/store\/selectors.js) -->\n\n### get\n\nReturns a boolean indicating whether a prefer is active for a particular scope.\n\n_Parameters_\n\n-   _state_ `Object`: The store state.\n-   _scope_ `string`: The scope of the feature (e.g. core\/edit-post).\n-   _name_ `string`: The name of the feature.\n\n_Returns_\n\n-   `*`: Is the feature enabled?\n\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/preferences\/src\/store\/selectors.js) -->\n\n## Actions\n\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/preferences\/src\/store\/actions.js) -->\n\n### set\n\nReturns an action object used in signalling that a preference should be set to a value\n\n_Parameters_\n\n-   _scope_ `string`: The preference scope (e.g. core\/edit-post).\n-   _name_ `string`: The preference name.\n-   _value_ `*`: The value to set.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### setDefaults\n\nReturns an action object used in signalling that preference defaults should be set.\n\n_Parameters_\n\n-   _scope_ `string`: The preference scope (e.g. core\/edit-post).\n-   _defaults_ `Object<string, *>`: A key\/value map of preference names to values.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### setPersistenceLayer\n\nSets the persistence layer.\n\nWhen a persistence layer is set, the preferences store will:\n\n-   call `get` immediately and update the store state to the value returned.\n-   call `set` with all preferences whenever a preference changes value.\n\n`setPersistenceLayer` should ideally be dispatched at the start of an application's lifecycle, before any other actions have been dispatched to the preferences store.\n\n_Parameters_\n\n-   _persistenceLayer_ `WPPreferencesPersistenceLayer`: The persistence layer.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### toggle\n\nReturns an action object used in signalling that a preference should be toggled.\n\n_Parameters_\n\n-   _scope_ `string`: The preference scope (e.g. core\/edit-post).\n-   _name_ `string`: The preference name.\n\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/preferences\/src\/store\/actions.js) -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/data-core-block-directory.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Block directory<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Namespace: <code>core\/block-directory<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/block-directory\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getDownloadableBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the available uninstalled blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>filterValue<\/em> <code>string<\/code>: Search string.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: Downloadable blocks.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getErrorNoticeForBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the error notice for a given block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>blockId<\/em> <code>string<\/code>: The ID of the block plugin. eg: my-block<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string|boolean<\/code>: The error text, or false if no error.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getErrorNotices<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns all block error notices.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Object with error notices.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getInstalledBlockTypes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the block types that have been installed on the server in this session.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: Block type items<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getNewBlockTypes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns block types that have been installed on the server and used in the current post.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: Block type items.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getUnusedBlockTypes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the block types that have been installed on the server but are not used in the current post.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: Block type items.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isInstalling<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if a block plugin install is in progress.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>blockId<\/em> <code>string<\/code>: Id of the block.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether this block is currently being installed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isRequestingDownloadableBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if application is requesting for downloadable blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>filterValue<\/em> <code>string<\/code>: Search string.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether a request is in progress for the blocks list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/block-directory\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Actions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/block-directory\/src\/store\/actions.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">addInstalledBlockType<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to add a block type to the \"newly installed\" tracking list.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>item<\/em> <code>Object<\/code>: The block item with the block id and name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">clearErrorNotice<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Sets the error notice to empty for specific block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>blockId<\/em> <code>string<\/code>: The ID of the block plugin. eg: my-block<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">fetchDownloadableBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that the downloadable blocks have been requested and are loading.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>filterValue<\/em> <code>string<\/code>: Search string.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">installBlockType<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action triggered to install a block plugin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>block<\/em> <code>Object<\/code>: The block item returned by search.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the block was successfully installed &amp; loaded.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">receiveDownloadableBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that the downloadable blocks have been updated.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>downloadableBlocks<\/em> <code>Array<\/code>: Downloadable blocks.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>filterValue<\/em> <code>string<\/code>: Search string.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">removeInstalledBlockType<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to remove a block type from the \"newly installed\" tracking list.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>item<\/em> <code>string<\/code>: The block item with the block id and name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setErrorNotice<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Sets an error notice to be displayed to the user for a given block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>blockId<\/em> <code>string<\/code>: The ID of the block plugin. eg: my-block<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>message<\/em> <code>string<\/code>: The message shown in the notice.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>isFatal<\/em> <code>boolean<\/code>: Whether the user can recover from the error.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setIsInstalling<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to indicate install in progress.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>blockId<\/em> <code>string<\/code>:<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>isInstalling<\/em> <code>boolean<\/code>:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">uninstallBlockType<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action triggered to uninstall a block plugin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>block<\/em> <code>Object<\/code>: The blockType object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/block-directory\/src\/store\/actions.js) -->\n<!-- \/wp:html -->",
        "markdown": "# Block directory\n\nNamespace: `core\/block-directory`.\n\n## Selectors\n\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/block-directory\/src\/store\/selectors.js) -->\n\n### getDownloadableBlocks\n\nReturns the available uninstalled blocks.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _filterValue_ `string`: Search string.\n\n_Returns_\n\n-   `Array`: Downloadable blocks.\n\n### getErrorNoticeForBlock\n\nReturns the error notice for a given block.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _blockId_ `string`: The ID of the block plugin. eg: my-block\n\n_Returns_\n\n-   `string|boolean`: The error text, or false if no error.\n\n### getErrorNotices\n\nReturns all block error notices.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `Object`: Object with error notices.\n\n### getInstalledBlockTypes\n\nReturns the block types that have been installed on the server in this session.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `Array`: Block type items\n\n### getNewBlockTypes\n\nReturns block types that have been installed on the server and used in the current post.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `Array`: Block type items.\n\n### getUnusedBlockTypes\n\nReturns the block types that have been installed on the server but are not used in the current post.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `Array`: Block type items.\n\n### isInstalling\n\nReturns true if a block plugin install is in progress.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _blockId_ `string`: Id of the block.\n\n_Returns_\n\n-   `boolean`: Whether this block is currently being installed.\n\n### isRequestingDownloadableBlocks\n\nReturns true if application is requesting for downloadable blocks.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _filterValue_ `string`: Search string.\n\n_Returns_\n\n-   `boolean`: Whether a request is in progress for the blocks list.\n\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/block-directory\/src\/store\/selectors.js) -->\n\n## Actions\n\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/block-directory\/src\/store\/actions.js) -->\n\n### addInstalledBlockType\n\nReturns an action object used to add a block type to the \"newly installed\" tracking list.\n\n_Parameters_\n\n-   _item_ `Object`: The block item with the block id and name.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### clearErrorNotice\n\nSets the error notice to empty for specific block.\n\n_Parameters_\n\n-   _blockId_ `string`: The ID of the block plugin. eg: my-block\n\n_Returns_\n\n-   `Object`: Action object.\n\n### fetchDownloadableBlocks\n\nReturns an action object used in signalling that the downloadable blocks have been requested and are loading.\n\n_Parameters_\n\n-   _filterValue_ `string`: Search string.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### installBlockType\n\nAction triggered to install a block plugin.\n\n_Parameters_\n\n-   _block_ `Object`: The block item returned by search.\n\n_Returns_\n\n-   `boolean`: Whether the block was successfully installed & loaded.\n\n### receiveDownloadableBlocks\n\nReturns an action object used in signalling that the downloadable blocks have been updated.\n\n_Parameters_\n\n-   _downloadableBlocks_ `Array`: Downloadable blocks.\n-   _filterValue_ `string`: Search string.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### removeInstalledBlockType\n\nReturns an action object used to remove a block type from the \"newly installed\" tracking list.\n\n_Parameters_\n\n-   _item_ `string`: The block item with the block id and name.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### setErrorNotice\n\nSets an error notice to be displayed to the user for a given block.\n\n_Parameters_\n\n-   _blockId_ `string`: The ID of the block plugin. eg: my-block\n-   _message_ `string`: The message shown in the notice.\n-   _isFatal_ `boolean`: Whether the user can recover from the error.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### setIsInstalling\n\nReturns an action object used to indicate install in progress.\n\n_Parameters_\n\n-   _blockId_ `string`:\n-   _isInstalling_ `boolean`:\n\n_Returns_\n\n-   `Object`: Action object.\n\n### uninstallBlockType\n\nAction triggered to uninstall a block plugin.\n\n_Parameters_\n\n-   _block_ `Object`: The blockType object.\n\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/block-directory\/src\/store\/actions.js) -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/data-core-reusable-blocks.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Reusable blocks<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Namespace: <code>core\/reusable-blocks<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-alert\">\nThis package is still experimental. \u201cExperimental\u201d means this is an early implementation subject to drastic and breaking changes.\n<\/div>\n## Selectors\n<!-- \/wp:html -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/reusable-blocks\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Nothing to document.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/reusable-blocks\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Actions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/reusable-blocks\/src\/store\/actions.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Nothing to document.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/reusable-blocks\/src\/store\/actions.js) -->\n<!-- \/wp:html -->",
        "markdown": "# Reusable blocks\n\nNamespace: `core\/reusable-blocks`.\n\n<div class=\"callout callout-alert\">\nThis package is still experimental. \u201cExperimental\u201d means this is an early implementation subject to drastic and breaking changes.\n<\/div>\n## Selectors\n\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/reusable-blocks\/src\/store\/selectors.js) -->\n\nNothing to document.\n\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/reusable-blocks\/src\/store\/selectors.js) -->\n\n## Actions\n\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/reusable-blocks\/src\/store\/actions.js) -->\n\nNothing to document.\n\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/reusable-blocks\/src\/store\/actions.js) -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/data-core-customize-widgets.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Customize Widgets<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Namespace: <code>core\/customize-widgets<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/customize-widgets\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isInserterOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the inserter is opened.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { store as customizeWidgetsStore } from '@wordpress\/customize-widgets';\nimport { __ } from '@wordpress\/i18n';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst { isInserterOpened } = useSelect(\n\t\t( select ) => select( customizeWidgetsStore ),\n\t\t&#91;]\n\t);\n\n\treturn isInserterOpened()\n\t\t? __( 'Inserter is open' )\n\t\t: __( 'Inserter is closed.' );\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the inserter is opened.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/customize-widgets\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Actions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/customize-widgets\/src\/store\/actions.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setIsInserterOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to open\/close the inserter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useState } from 'react';\nimport { store as customizeWidgetsStore } from '@wordpress\/customize-widgets';\nimport { __ } from '@wordpress\/i18n';\nimport { useDispatch } from '@wordpress\/data';\nimport { Button } from '@wordpress\/components';\n\nconst ExampleComponent = () => {\n\tconst { setIsInserterOpened } = useDispatch( customizeWidgetsStore );\n\tconst &#91; isOpen, setIsOpen ] = useState( false );\n\n\treturn (\n\t\t<button<br>\t\t\tonClick={ () => {\n\t\t\t\tsetIsInserterOpened( ! isOpen );\n\t\t\t\tsetIsOpen( ! isOpen );\n\t\t\t} }\n\t\t>\n\t\t\t{ __( 'Open\/close inserter' ) }\n\t\t\n\t);\n};\n<\/button<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>value<\/em> <code>boolean|Object<\/code>: Whether the inserter should be opened (true) or closed (false). To specify an insertion point, use an object.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>value.rootClientId<\/em> <code>string<\/code>: The root client ID to insert at.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>value.insertionIndex<\/em> <code>number<\/code>: The index to insert at.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/customize-widgets\/src\/store\/actions.js) -->\n<!-- \/wp:html -->",
        "markdown": "# Customize Widgets\n\nNamespace: `core\/customize-widgets`.\n\n## Selectors\n\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/customize-widgets\/src\/store\/selectors.js) -->\n\n### isInserterOpened\n\nReturns true if the inserter is opened.\n\n_Usage_\n\n```js\nimport { store as customizeWidgetsStore } from '@wordpress\/customize-widgets';\nimport { __ } from '@wordpress\/i18n';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst { isInserterOpened } = useSelect(\n\t\t( select ) => select( customizeWidgetsStore ),\n\t\t[]\n\t);\n\n\treturn isInserterOpened()\n\t\t? __( 'Inserter is open' )\n\t\t: __( 'Inserter is closed.' );\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the inserter is opened.\n\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/customize-widgets\/src\/store\/selectors.js) -->\n\n## Actions\n\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/customize-widgets\/src\/store\/actions.js) -->\n\n### setIsInserterOpened\n\nReturns an action object used to open\/close the inserter.\n\n_Usage_\n\n```js\nimport { useState } from 'react';\nimport { store as customizeWidgetsStore } from '@wordpress\/customize-widgets';\nimport { __ } from '@wordpress\/i18n';\nimport { useDispatch } from '@wordpress\/data';\nimport { Button } from '@wordpress\/components';\n\nconst ExampleComponent = () => {\n\tconst { setIsInserterOpened } = useDispatch( customizeWidgetsStore );\n\tconst [ isOpen, setIsOpen ] = useState( false );\n\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () => {\n\t\t\t\tsetIsInserterOpened( ! isOpen );\n\t\t\t\tsetIsOpen( ! isOpen );\n\t\t\t} }\n\t\t>\n\t\t\t{ __( 'Open\/close inserter' ) }\n\t\t<\/Button>\n\t);\n};\n```\n\n_Parameters_\n\n-   _value_ `boolean|Object`: Whether the inserter should be opened (true) or closed (false). To specify an insertion point, use an object.\n-   _value.rootClientId_ `string`: The root client ID to insert at.\n-   _value.insertionIndex_ `number`: The index to insert at.\n\n_Returns_\n\n-   `Object`: Action object.\n\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/customize-widgets\/src\/store\/actions.js) -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/data-core-blocks.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Block Types Data<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Namespace: <code>core\/blocks<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/blocks\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getActiveBlockVariation<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the active block variation for a given block based on its attributes. Variations are determined by their <code>isActive<\/code> property. Which is either an array of block attribute keys or a function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In case of an array of block attribute keys, the <code>attributes<\/code> are compared to the variation's attributes using strict equality check.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In case of function type, the function should accept a block's attributes and the variation's attributes and determines if a variation is active. A function that accepts a block's attributes and the variation's attributes and determines if a variation is active.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __ } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { store as blockEditorStore } from '@wordpress\/block-editor';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\t\/\/ This example assumes that a core\/embed block is the first block in the Block Editor.\n\tconst activeBlockVariation = useSelect( ( select ) => {\n\t\t\/\/ Retrieve the list of blocks.\n\t\tconst &#91; firstBlock ] = select( blockEditorStore ).getBlocks();\n\n\t\t\/\/ Return the active block variation for the first block.\n\t\treturn select( blocksStore ).getActiveBlockVariation(\n\t\t\tfirstBlock.name,\n\t\t\tfirstBlock.attributes\n\t\t);\n\t}, &#91;] );\n\n\treturn activeBlockVariation &amp;&amp; activeBlockVariation.name === 'spotify' ? (\n\t\t<p>{ __( 'Spotify variation' ) }<\/p>\n\t) : (\n\t\t<p>{ __( 'Other variation' ) }<\/p>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>blockName<\/em> <code>string<\/code>: Name of block (example: \u201ccore\/columns\u201d).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>attributes<\/em> <code>Object<\/code>: Block attributes used to determine active variation.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>scope<\/em> <code>[WPBlockVariationScope]<\/code>: Block variation scope name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>(WPBlockVariation|undefined)<\/code>: Active block variation.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockStyles<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns block styles by block name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst buttonBlockStyles = useSelect(\n\t\t( select ) => select( blocksStore ).getBlockStyles( 'core\/button' ),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ buttonBlockStyles &amp;&amp;\n\t\t\t\tbuttonBlockStyles.map( ( style ) => (\n\t\t\t\t\t<li key=\"{\" style.name=\"\" }=\"\">{ style.label }<\/li>\n\t\t\t\t) ) }\n\t\t<\/ul>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Block type name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array?<\/code>: Block Styles.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockSupport<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the block support value for a feature, if defined.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst paragraphBlockSupportValue = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).getBlockSupport( 'core\/paragraph', 'anchor' ),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\t<p>\n\t\t\t{ sprintf(\n\t\t\t\t__( 'core\/paragraph supports.anchor value: %s' ),\n\t\t\t\tparagraphBlockSupportValue\n\t\t\t) }\n\t\t<\/p>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>nameOrType<\/em> <code>(string|Object)<\/code>: Block name or type object<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>feature<\/em> <code>Array|string<\/code>: Feature to retrieve<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>defaultSupports<\/em> <code>*<\/code>: Default value to return if not explicitly defined<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?*<\/code>: Block support value<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockType<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns a block type by name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst paragraphBlock = useSelect(\n\t\t( select ) => ( select ) =>\n\t\t\tselect( blocksStore ).getBlockType( 'core\/paragraph' ),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ paragraphBlock &amp;&amp;\n\t\t\t\tObject.entries( paragraphBlock.supports ).map(\n\t\t\t\t\t( blockSupportsEntry ) => {\n\t\t\t\t\t\tconst &#91; propertyName, value ] = blockSupportsEntry;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li<br>\t\t\t\t\t\t\t\tkey={ propertyName }\n\t\t\t\t\t\t\t>{ `${ propertyName } : ${ value }` }\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t) }\n\t\t<\/li<br><\/ul>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Block type name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object?<\/code>: Block Type.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockTypes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns all the available block types.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst blockTypes = useSelect(\n\t\t( select ) => select( blocksStore ).getBlockTypes(),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ blockTypes.map( ( block ) => (\n\t\t\t\t<li key=\"{\" block.name=\"\" }=\"\">{ block.title }<\/li>\n\t\t\t) ) }\n\t\t<\/ul>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: Block Types.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockVariations<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns block variations by block name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst socialLinkVariations = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).getBlockVariations( 'core\/social-link' ),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ socialLinkVariations &amp;&amp;\n\t\t\t\tsocialLinkVariations.map( ( variation ) => (\n\t\t\t\t\t<li key=\"{\" variation.name=\"\" }=\"\">{ variation.title }<\/li>\n\t\t\t\t) ) }\n\t\t<\/ul>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>blockName<\/em> <code>string<\/code>: Block type name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>scope<\/em> <code>[WPBlockVariationScope]<\/code>: Block variation scope name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>(WPBlockVariation[]|void)<\/code>: Block variations.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getCategories<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns all the available block categories.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst blockCategories = useSelect(\n\t\t( select ) => select( blocksStore ).getCategories(),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ blockCategories.map( ( category ) => (\n\t\t\t\t<li key=\"{\" category.slug=\"\" }=\"\">{ category.title }<\/li>\n\t\t\t) ) }\n\t\t<\/ul>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>WPBlockCategory[]<\/code>: Categories list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getChildBlockNames<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an array with the child blocks of a given block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst childBlockNames = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).getChildBlockNames( 'core\/navigation' ),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ childBlockNames &amp;&amp;\n\t\t\t\tchildBlockNames.map( ( child ) => (\n\t\t\t\t\t<li key=\"{\" child=\"\" }=\"\">{ child }<\/li>\n\t\t\t\t) ) }\n\t\t<\/ul>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>blockName<\/em> <code>string<\/code>: Block type name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: Array of child block names.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getCollections<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns all the available collections.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst blockCollections = useSelect(\n\t\t( select ) => select( blocksStore ).getCollections(),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ Object.values( blockCollections ).length > 0 &amp;&amp;\n\t\t\t\tObject.values( blockCollections ).map( ( collection ) => (\n\t\t\t\t\t<li key=\"{\" collection.title=\"\" }=\"\">{ collection.title }<\/li>\n\t\t\t\t) ) }\n\t\t<\/ul>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Collections list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getDefaultBlockName<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the name of the default block name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst defaultBlockName = useSelect(\n\t\t( select ) => select( blocksStore ).getDefaultBlockName(),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\tdefaultBlockName &amp;&amp; (\n\t\t\t<p>\n\t\t\t\t{ sprintf( __( 'Default block name: %s' ), defaultBlockName ) }\n\t\t\t<\/p>\n\t\t)\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string?<\/code>: Default block name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getDefaultBlockVariation<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the default block variation for the given block type. When there are multiple variations annotated as the default one, the last added item is picked. This simplifies registering overrides. When there is no default variation set, it returns the first item.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst defaultEmbedBlockVariation = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).getDefaultBlockVariation( 'core\/embed' ),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\tdefaultEmbedBlockVariation &amp;&amp; (\n\t\t\t<p>\n\t\t\t\t{ sprintf(\n\t\t\t\t\t__( 'core\/embed default variation: %s' ),\n\t\t\t\t\tdefaultEmbedBlockVariation.title\n\t\t\t\t) }\n\t\t\t<\/p>\n\t\t)\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>blockName<\/em> <code>string<\/code>: Block type name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>scope<\/em> <code>[WPBlockVariationScope]<\/code>: Block variation scope name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?WPBlockVariation<\/code>: The default block variation.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getFreeformFallbackBlockName<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the name of the block for handling non-block content.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst freeformFallbackBlockName = useSelect(\n\t\t( select ) => select( blocksStore ).getFreeformFallbackBlockName(),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\tfreeformFallbackBlockName &amp;&amp; (\n\t\t\t<p>\n\t\t\t\t{ sprintf(\n\t\t\t\t\t__( 'Freeform fallback block name: %s' ),\n\t\t\t\t\tfreeformFallbackBlockName\n\t\t\t\t) }\n\t\t\t<\/p>\n\t\t)\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string?<\/code>: Name of the block for handling non-block content.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getGroupingBlockName<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the name of the block for handling the grouping of blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst groupingBlockName = useSelect(\n\t\t( select ) => select( blocksStore ).getGroupingBlockName(),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\tgroupingBlockName &amp;&amp; (\n\t\t\t<p>\n\t\t\t\t{ sprintf(\n\t\t\t\t\t__( 'Default grouping block name: %s' ),\n\t\t\t\t\tgroupingBlockName\n\t\t\t\t) }\n\t\t\t<\/p>\n\t\t)\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string?<\/code>: Name of the block for handling the grouping of blocks.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getUnregisteredFallbackBlockName<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the name of the block for handling unregistered blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst unregisteredFallbackBlockName = useSelect(\n\t\t( select ) => select( blocksStore ).getUnregisteredFallbackBlockName(),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\tunregisteredFallbackBlockName &amp;&amp; (\n\t\t\t<p>\n\t\t\t\t{ sprintf(\n\t\t\t\t\t__( 'Unregistered fallback block name: %s' ),\n\t\t\t\t\tunregisteredFallbackBlockName\n\t\t\t\t) }\n\t\t\t<\/p>\n\t\t)\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string?<\/code>: Name of the block for handling unregistered blocks.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasBlockSupport<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the block defines support for a feature, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n    const paragraphBlockSupportClassName = useSelect( ( select ) =>\n        select( blocksStore ).hasBlockSupport( 'core\/paragraph', 'className' ),\n        &#91;]\n    );\n\n    return (\n        <p>\n            { sprintf(\n                __( 'core\/paragraph supports custom class name?: %s' ),\n                paragraphBlockSupportClassName\n            ) }\n        \/p>\n    );\n};\n<\/p><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>nameOrType<\/em> <code>(string|Object)<\/code>: Block name or type object.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>feature<\/em> <code>string<\/code>: Feature to test.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>defaultSupports<\/em> <code>boolean<\/code>: Whether feature is supported by default if not explicitly defined.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether block supports feature.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasChildBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns a boolean indicating if a block has child blocks or not.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst navigationBlockHasChildBlocks = useSelect(\n\t\t( select ) => select( blocksStore ).hasChildBlocks( 'core\/navigation' ),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\t<p>\n\t\t\t{ sprintf(\n\t\t\t\t__( 'core\/navigation has child blocks: %s' ),\n\t\t\t\tnavigationBlockHasChildBlocks\n\t\t\t) }\n\t\t<\/p>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>blockName<\/em> <code>string<\/code>: Block type name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: True if a block contains child blocks and false otherwise.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasChildBlocksWithInserterSupport<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns a boolean indicating if a block has at least one child block with inserter support.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst navigationBlockHasChildBlocksWithInserterSupport = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).hasChildBlocksWithInserterSupport(\n\t\t\t\t'core\/navigation'\n\t\t\t),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\t<p>\n\t\t\t{ sprintf(\n\t\t\t\t__(\n\t\t\t\t\t'core\/navigation has child blocks with inserter support: %s'\n\t\t\t\t),\n\t\t\t\tnavigationBlockHasChildBlocksWithInserterSupport\n\t\t\t) }\n\t\t<\/p>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>blockName<\/em> <code>string<\/code>: Block type name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: True if a block contains at least one child blocks with inserter support and false otherwise.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isMatchingSearchTerm<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the block type by the given name or object value matches a search term, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst termFound = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).isMatchingSearchTerm(\n\t\t\t\t'core\/navigation',\n\t\t\t\t'theme'\n\t\t\t),\n\t\t&#91;]\n\t);\n\n\treturn (\n\t\t<p>\n\t\t\t{ sprintf(\n\t\t\t\t__(\n\t\t\t\t\t'Search term was found in the title, keywords, category or description in block.json: %s'\n\t\t\t\t),\n\t\t\t\ttermFound\n\t\t\t) }\n\t\t<\/p>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Blocks state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>nameOrType<\/em> <code>(string|Object)<\/code>: Block name or type object.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>searchTerm<\/em> <code>string<\/code>: Search term by which to filter.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object[]<\/code>: Whether block type matches search term.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/blocks\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Actions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The actions in this package shouldn't be used directly. Instead, use the functions listed in the public API <a href=\"\/packages\/blocks\/README.md\">here<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/blocks\/src\/store\/actions.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">reapplyBlockTypeFilters<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Signals that all block types should be computed again. It uses stored unprocessed block types and all the most recent list of registered filters.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It addresses the issue where third party block filters get registered after third party blocks. A sample sequence: 1. Filter A. 2. Block B. 3. Block C. 4. Filter D. 5. Filter E. 6. Block F. 7. Filter G. In this scenario some filters would not get applied for all blocks because they are registered too late.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/blocks\/src\/store\/actions.js) -->\n<!-- \/wp:html -->",
        "markdown": "# Block Types Data\n\nNamespace: `core\/blocks`.\n\n## Selectors\n\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/blocks\/src\/store\/selectors.js) -->\n\n### getActiveBlockVariation\n\nReturns the active block variation for a given block based on its attributes. Variations are determined by their `isActive` property. Which is either an array of block attribute keys or a function.\n\nIn case of an array of block attribute keys, the `attributes` are compared to the variation's attributes using strict equality check.\n\nIn case of function type, the function should accept a block's attributes and the variation's attributes and determines if a variation is active. A function that accepts a block's attributes and the variation's attributes and determines if a variation is active.\n\n_Usage_\n\n```js\nimport { __ } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { store as blockEditorStore } from '@wordpress\/block-editor';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\t\/\/ This example assumes that a core\/embed block is the first block in the Block Editor.\n\tconst activeBlockVariation = useSelect( ( select ) => {\n\t\t\/\/ Retrieve the list of blocks.\n\t\tconst [ firstBlock ] = select( blockEditorStore ).getBlocks();\n\n\t\t\/\/ Return the active block variation for the first block.\n\t\treturn select( blocksStore ).getActiveBlockVariation(\n\t\t\tfirstBlock.name,\n\t\t\tfirstBlock.attributes\n\t\t);\n\t}, [] );\n\n\treturn activeBlockVariation && activeBlockVariation.name === 'spotify' ? (\n\t\t<p>{ __( 'Spotify variation' ) }<\/p>\n\t) : (\n\t\t<p>{ __( 'Other variation' ) }<\/p>\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n-   _blockName_ `string`: Name of block (example: \u201ccore\/columns\u201d).\n-   _attributes_ `Object`: Block attributes used to determine active variation.\n-   _scope_ `[WPBlockVariationScope]`: Block variation scope name.\n\n_Returns_\n\n-   `(WPBlockVariation|undefined)`: Active block variation.\n\n### getBlockStyles\n\nReturns block styles by block name.\n\n_Usage_\n\n```js\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst buttonBlockStyles = useSelect(\n\t\t( select ) => select( blocksStore ).getBlockStyles( 'core\/button' ),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ buttonBlockStyles &&\n\t\t\t\tbuttonBlockStyles.map( ( style ) => (\n\t\t\t\t\t<li key={ style.name }>{ style.label }<\/li>\n\t\t\t\t) ) }\n\t\t<\/ul>\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n-   _name_ `string`: Block type name.\n\n_Returns_\n\n-   `Array?`: Block Styles.\n\n### getBlockSupport\n\nReturns the block support value for a feature, if defined.\n\n_Usage_\n\n```js\nimport { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst paragraphBlockSupportValue = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).getBlockSupport( 'core\/paragraph', 'anchor' ),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<p>\n\t\t\t{ sprintf(\n\t\t\t\t__( 'core\/paragraph supports.anchor value: %s' ),\n\t\t\t\tparagraphBlockSupportValue\n\t\t\t) }\n\t\t<\/p>\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n-   _nameOrType_ `(string|Object)`: Block name or type object\n-   _feature_ `Array|string`: Feature to retrieve\n-   _defaultSupports_ `*`: Default value to return if not explicitly defined\n\n_Returns_\n\n-   `?*`: Block support value\n\n### getBlockType\n\nReturns a block type by name.\n\n_Usage_\n\n```js\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst paragraphBlock = useSelect(\n\t\t( select ) => ( select ) =>\n\t\t\tselect( blocksStore ).getBlockType( 'core\/paragraph' ),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ paragraphBlock &&\n\t\t\t\tObject.entries( paragraphBlock.supports ).map(\n\t\t\t\t\t( blockSupportsEntry ) => {\n\t\t\t\t\t\tconst [ propertyName, value ] = blockSupportsEntry;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\tkey={ propertyName }\n\t\t\t\t\t\t\t>{ `${ propertyName } : ${ value }` }<\/li>\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t) }\n\t\t<\/ul>\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n-   _name_ `string`: Block type name.\n\n_Returns_\n\n-   `Object?`: Block Type.\n\n### getBlockTypes\n\nReturns all the available block types.\n\n_Usage_\n\n```js\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst blockTypes = useSelect(\n\t\t( select ) => select( blocksStore ).getBlockTypes(),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ blockTypes.map( ( block ) => (\n\t\t\t\t<li key={ block.name }>{ block.title }<\/li>\n\t\t\t) ) }\n\t\t<\/ul>\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n\n_Returns_\n\n-   `Array`: Block Types.\n\n### getBlockVariations\n\nReturns block variations by block name.\n\n_Usage_\n\n```js\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst socialLinkVariations = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).getBlockVariations( 'core\/social-link' ),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ socialLinkVariations &&\n\t\t\t\tsocialLinkVariations.map( ( variation ) => (\n\t\t\t\t\t<li key={ variation.name }>{ variation.title }<\/li>\n\t\t\t\t) ) }\n\t\t<\/ul>\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n-   _blockName_ `string`: Block type name.\n-   _scope_ `[WPBlockVariationScope]`: Block variation scope name.\n\n_Returns_\n\n-   `(WPBlockVariation[]|void)`: Block variations.\n\n### getCategories\n\nReturns all the available block categories.\n\n_Usage_\n\n```js\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst blockCategories = useSelect(\n\t\t( select ) => select( blocksStore ).getCategories(),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ blockCategories.map( ( category ) => (\n\t\t\t\t<li key={ category.slug }>{ category.title }<\/li>\n\t\t\t) ) }\n\t\t<\/ul>\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n\n_Returns_\n\n-   `WPBlockCategory[]`: Categories list.\n\n### getChildBlockNames\n\nReturns an array with the child blocks of a given block.\n\n_Usage_\n\n```js\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst childBlockNames = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).getChildBlockNames( 'core\/navigation' ),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ childBlockNames &&\n\t\t\t\tchildBlockNames.map( ( child ) => (\n\t\t\t\t\t<li key={ child }>{ child }<\/li>\n\t\t\t\t) ) }\n\t\t<\/ul>\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n-   _blockName_ `string`: Block type name.\n\n_Returns_\n\n-   `Array`: Array of child block names.\n\n### getCollections\n\nReturns all the available collections.\n\n_Usage_\n\n```js\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst blockCollections = useSelect(\n\t\t( select ) => select( blocksStore ).getCollections(),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ Object.values( blockCollections ).length > 0 &&\n\t\t\t\tObject.values( blockCollections ).map( ( collection ) => (\n\t\t\t\t\t<li key={ collection.title }>{ collection.title }<\/li>\n\t\t\t\t) ) }\n\t\t<\/ul>\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n\n_Returns_\n\n-   `Object`: Collections list.\n\n### getDefaultBlockName\n\nReturns the name of the default block name.\n\n_Usage_\n\n```js\nimport { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst defaultBlockName = useSelect(\n\t\t( select ) => select( blocksStore ).getDefaultBlockName(),\n\t\t[]\n\t);\n\n\treturn (\n\t\tdefaultBlockName && (\n\t\t\t<p>\n\t\t\t\t{ sprintf( __( 'Default block name: %s' ), defaultBlockName ) }\n\t\t\t<\/p>\n\t\t)\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n\n_Returns_\n\n-   `string?`: Default block name.\n\n### getDefaultBlockVariation\n\nReturns the default block variation for the given block type. When there are multiple variations annotated as the default one, the last added item is picked. This simplifies registering overrides. When there is no default variation set, it returns the first item.\n\n_Usage_\n\n```js\nimport { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst defaultEmbedBlockVariation = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).getDefaultBlockVariation( 'core\/embed' ),\n\t\t[]\n\t);\n\n\treturn (\n\t\tdefaultEmbedBlockVariation && (\n\t\t\t<p>\n\t\t\t\t{ sprintf(\n\t\t\t\t\t__( 'core\/embed default variation: %s' ),\n\t\t\t\t\tdefaultEmbedBlockVariation.title\n\t\t\t\t) }\n\t\t\t<\/p>\n\t\t)\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n-   _blockName_ `string`: Block type name.\n-   _scope_ `[WPBlockVariationScope]`: Block variation scope name.\n\n_Returns_\n\n-   `?WPBlockVariation`: The default block variation.\n\n### getFreeformFallbackBlockName\n\nReturns the name of the block for handling non-block content.\n\n_Usage_\n\n```js\nimport { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst freeformFallbackBlockName = useSelect(\n\t\t( select ) => select( blocksStore ).getFreeformFallbackBlockName(),\n\t\t[]\n\t);\n\n\treturn (\n\t\tfreeformFallbackBlockName && (\n\t\t\t<p>\n\t\t\t\t{ sprintf(\n\t\t\t\t\t__( 'Freeform fallback block name: %s' ),\n\t\t\t\t\tfreeformFallbackBlockName\n\t\t\t\t) }\n\t\t\t<\/p>\n\t\t)\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n\n_Returns_\n\n-   `string?`: Name of the block for handling non-block content.\n\n### getGroupingBlockName\n\nReturns the name of the block for handling the grouping of blocks.\n\n_Usage_\n\n```js\nimport { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst groupingBlockName = useSelect(\n\t\t( select ) => select( blocksStore ).getGroupingBlockName(),\n\t\t[]\n\t);\n\n\treturn (\n\t\tgroupingBlockName && (\n\t\t\t<p>\n\t\t\t\t{ sprintf(\n\t\t\t\t\t__( 'Default grouping block name: %s' ),\n\t\t\t\t\tgroupingBlockName\n\t\t\t\t) }\n\t\t\t<\/p>\n\t\t)\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n\n_Returns_\n\n-   `string?`: Name of the block for handling the grouping of blocks.\n\n### getUnregisteredFallbackBlockName\n\nReturns the name of the block for handling unregistered blocks.\n\n_Usage_\n\n```js\nimport { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst unregisteredFallbackBlockName = useSelect(\n\t\t( select ) => select( blocksStore ).getUnregisteredFallbackBlockName(),\n\t\t[]\n\t);\n\n\treturn (\n\t\tunregisteredFallbackBlockName && (\n\t\t\t<p>\n\t\t\t\t{ sprintf(\n\t\t\t\t\t__( 'Unregistered fallback block name: %s' ),\n\t\t\t\t\tunregisteredFallbackBlockName\n\t\t\t\t) }\n\t\t\t<\/p>\n\t\t)\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n\n_Returns_\n\n-   `string?`: Name of the block for handling unregistered blocks.\n\n### hasBlockSupport\n\nReturns true if the block defines support for a feature, or false otherwise.\n\n_Usage_\n\n```js\nimport { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n    const paragraphBlockSupportClassName = useSelect( ( select ) =>\n        select( blocksStore ).hasBlockSupport( 'core\/paragraph', 'className' ),\n        []\n    );\n\n    return (\n        <p>\n            { sprintf(\n                __( 'core\/paragraph supports custom class name?: %s' ),\n                paragraphBlockSupportClassName\n            ) }\n        \/p>\n    );\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n-   _nameOrType_ `(string|Object)`: Block name or type object.\n-   _feature_ `string`: Feature to test.\n-   _defaultSupports_ `boolean`: Whether feature is supported by default if not explicitly defined.\n\n_Returns_\n\n-   `boolean`: Whether block supports feature.\n\n### hasChildBlocks\n\nReturns a boolean indicating if a block has child blocks or not.\n\n_Usage_\n\n```js\nimport { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst navigationBlockHasChildBlocks = useSelect(\n\t\t( select ) => select( blocksStore ).hasChildBlocks( 'core\/navigation' ),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<p>\n\t\t\t{ sprintf(\n\t\t\t\t__( 'core\/navigation has child blocks: %s' ),\n\t\t\t\tnavigationBlockHasChildBlocks\n\t\t\t) }\n\t\t<\/p>\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n-   _blockName_ `string`: Block type name.\n\n_Returns_\n\n-   `boolean`: True if a block contains child blocks and false otherwise.\n\n### hasChildBlocksWithInserterSupport\n\nReturns a boolean indicating if a block has at least one child block with inserter support.\n\n_Usage_\n\n```js\nimport { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst navigationBlockHasChildBlocksWithInserterSupport = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).hasChildBlocksWithInserterSupport(\n\t\t\t\t'core\/navigation'\n\t\t\t),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<p>\n\t\t\t{ sprintf(\n\t\t\t\t__(\n\t\t\t\t\t'core\/navigation has child blocks with inserter support: %s'\n\t\t\t\t),\n\t\t\t\tnavigationBlockHasChildBlocksWithInserterSupport\n\t\t\t) }\n\t\t<\/p>\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Data state.\n-   _blockName_ `string`: Block type name.\n\n_Returns_\n\n-   `boolean`: True if a block contains at least one child blocks with inserter support and false otherwise.\n\n### isMatchingSearchTerm\n\nReturns true if the block type by the given name or object value matches a search term, or false otherwise.\n\n_Usage_\n\n```js\nimport { __, sprintf } from '@wordpress\/i18n';\nimport { store as blocksStore } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\n\nconst ExampleComponent = () => {\n\tconst termFound = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).isMatchingSearchTerm(\n\t\t\t\t'core\/navigation',\n\t\t\t\t'theme'\n\t\t\t),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<p>\n\t\t\t{ sprintf(\n\t\t\t\t__(\n\t\t\t\t\t'Search term was found in the title, keywords, category or description in block.json: %s'\n\t\t\t\t),\n\t\t\t\ttermFound\n\t\t\t) }\n\t\t<\/p>\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Blocks state.\n-   _nameOrType_ `(string|Object)`: Block name or type object.\n-   _searchTerm_ `string`: Search term by which to filter.\n\n_Returns_\n\n-   `Object[]`: Whether block type matches search term.\n\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/blocks\/src\/store\/selectors.js) -->\n\n## Actions\n\nThe actions in this package shouldn't be used directly. Instead, use the functions listed in the public API [here](\/packages\/blocks\/README.md)\n\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/blocks\/src\/store\/actions.js) -->\n\n### reapplyBlockTypeFilters\n\nSignals that all block types should be computed again. It uses stored unprocessed block types and all the most recent list of registered filters.\n\nIt addresses the issue where third party block filters get registered after third party blocks. A sample sequence: 1. Filter A. 2. Block B. 3. Block C. 4. Filter D. 5. Filter E. 6. Block F. 7. Filter G. In this scenario some filters would not get applied for all blocks because they are registered too late.\n\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/blocks\/src\/store\/actions.js) -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/data-core-edit-widgets.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Edit Widgets<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Namespace: <code>core\/edit-widgets<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/edit-widgets\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">canInsertBlockInWidgetArea<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if a block can be inserted into a widget area.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Array<\/code>: The open state of the widget areas.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>blockName<\/em> <code>string<\/code>: The name of the block being inserted.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: True if the block can be inserted in a widget area.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditedWidgetAreas<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns all edited widget area entity records.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object[]<\/code>: List of edited widget area entity records.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getIsWidgetAreaOpen<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Gets whether the widget area is opened.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Array<\/code>: The open state of the widget areas.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: The clientId of the widget area.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: True if the widget area is open.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getParentWidgetAreaBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Given a child client id, returns the parent widget area block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: The client id of a block in a widget area.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>WPBlock<\/code>: The widget area block.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getReferenceWidgetBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns all blocks representing reference widgets.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>referenceWidgetName<\/em> <code>string<\/code>: Optional. If given, only reference widgets with this name will be returned.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: List of all blocks representing reference widgets<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getWidget<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns API widget data for a particular widget ID.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>id<\/em> <code>number<\/code>: Widget ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: API widget data for a particular widget ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getWidgetAreaForWidgetId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns widgetArea containing a block identify by given widgetId<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>widgetId<\/em> <code>string<\/code>: The ID of the widget.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Containing widget area.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getWidgetAreas<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns all API widget areas.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object[]<\/code>: API List of widget areas.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getWidgets<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns all API widgets.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object[]<\/code>: API List of widgets.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isInserterOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the inserter is opened.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the inserter is opened.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isListViewOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the list view is opened.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the list view is opened.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isSavingWidgetAreas<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if any widget area is currently being saved.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: True if any widget area is currently being saved. False otherwise.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/edit-widgets\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Actions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/edit-widgets\/src\/store\/actions.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">closeGeneralSidebar<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object signalling that the user closed the sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action creator.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">moveBlockToWidgetArea<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that handles moving a block between widget areas<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: The clientId of the block to move.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>widgetAreaId<\/em> <code>string<\/code>: The id of the widget area to move the block to.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">persistStubPost<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Persists a stub post with given ID to core data store. The post is meant to be in-memory only and shouldn't be saved via the API.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>id<\/em> <code>string<\/code>: Post ID.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>blocks<\/em> <code>Array<\/code>: Blocks the post should consist of.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: The post object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">saveEditedWidgetAreas<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Converts all the blocks from edited widget areas into widgets, and submits a batch request to save everything at once.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Creates a snackbar notice on either success or error.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Function<\/code>: An action creator.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">saveWidgetArea<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Converts all the blocks from a widget area specified by ID into widgets, and submits a batch request to save everything at once.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>widgetAreaId<\/em> <code>string<\/code>: ID of the widget area to process.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Function<\/code>: An action creator.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">saveWidgetAreas<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Converts all the blocks from specified widget areas into widgets, and submits a batch request to save everything at once.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>widgetAreas<\/em> <code>Object[]<\/code>: Widget areas to save.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Function<\/code>: An action creator.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setIsInserterOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to open\/close the inserter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>value<\/em> <code>boolean|Object<\/code>: Whether the inserter should be opened (true) or closed (false). To specify an insertion point, use an object.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>value.rootClientId<\/em> <code>string<\/code>: The root client ID to insert at.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>value.insertionIndex<\/em> <code>number<\/code>: The index to insert at.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setIsListViewOpened<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to open\/close the list view.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>isOpen<\/em> <code>boolean<\/code>: A boolean representing whether the list view should be opened or closed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setIsWidgetAreaOpen<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Sets the open state of the widget area.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: The clientId of the widget area.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>isOpen<\/em> <code>boolean<\/code>: Whether the widget area should be opened.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setWidgetAreasOpenState<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Sets the open state of all the widget areas.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>widgetAreasOpenState<\/em> <code>Object<\/code>: The open states of all the widget areas.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setWidgetIdForClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Sets the clientId stored for a particular widgetId.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>number<\/code>: Client id.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>widgetId<\/em> <code>number<\/code>: Widget id.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/edit-widgets\/src\/store\/actions.js) -->\n<!-- \/wp:html -->",
        "markdown": "# Edit Widgets\n\nNamespace: `core\/edit-widgets`.\n\n## Selectors\n\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/edit-widgets\/src\/store\/selectors.js) -->\n\n### canInsertBlockInWidgetArea\n\nReturns true if a block can be inserted into a widget area.\n\n_Parameters_\n\n-   _state_ `Array`: The open state of the widget areas.\n-   _blockName_ `string`: The name of the block being inserted.\n\n_Returns_\n\n-   `boolean`: True if the block can be inserted in a widget area.\n\n### getEditedWidgetAreas\n\nReturns all edited widget area entity records.\n\n_Returns_\n\n-   `Object[]`: List of edited widget area entity records.\n\n### getIsWidgetAreaOpen\n\nGets whether the widget area is opened.\n\n_Parameters_\n\n-   _state_ `Array`: The open state of the widget areas.\n-   _clientId_ `string`: The clientId of the widget area.\n\n_Returns_\n\n-   `boolean`: True if the widget area is open.\n\n### getParentWidgetAreaBlock\n\nGiven a child client id, returns the parent widget area block.\n\n_Parameters_\n\n-   _clientId_ `string`: The client id of a block in a widget area.\n\n_Returns_\n\n-   `WPBlock`: The widget area block.\n\n### getReferenceWidgetBlocks\n\nReturns all blocks representing reference widgets.\n\n_Parameters_\n\n-   _referenceWidgetName_ `string`: Optional. If given, only reference widgets with this name will be returned.\n\n_Returns_\n\n-   `Array`: List of all blocks representing reference widgets\n\n### getWidget\n\nReturns API widget data for a particular widget ID.\n\n_Parameters_\n\n-   _id_ `number`: Widget ID.\n\n_Returns_\n\n-   `Object`: API widget data for a particular widget ID.\n\n### getWidgetAreaForWidgetId\n\nReturns widgetArea containing a block identify by given widgetId\n\n_Parameters_\n\n-   _widgetId_ `string`: The ID of the widget.\n\n_Returns_\n\n-   `Object`: Containing widget area.\n\n### getWidgetAreas\n\nReturns all API widget areas.\n\n_Returns_\n\n-   `Object[]`: API List of widget areas.\n\n### getWidgets\n\nReturns all API widgets.\n\n_Returns_\n\n-   `Object[]`: API List of widgets.\n\n### isInserterOpened\n\nReturns true if the inserter is opened.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the inserter is opened.\n\n### isListViewOpened\n\nReturns true if the list view is opened.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the list view is opened.\n\n### isSavingWidgetAreas\n\nReturns true if any widget area is currently being saved.\n\n_Returns_\n\n-   `boolean`: True if any widget area is currently being saved. False otherwise.\n\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/edit-widgets\/src\/store\/selectors.js) -->\n\n## Actions\n\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/edit-widgets\/src\/store\/actions.js) -->\n\n### closeGeneralSidebar\n\nReturns an action object signalling that the user closed the sidebar.\n\n_Returns_\n\n-   `Object`: Action creator.\n\n### moveBlockToWidgetArea\n\nAction that handles moving a block between widget areas\n\n_Parameters_\n\n-   _clientId_ `string`: The clientId of the block to move.\n-   _widgetAreaId_ `string`: The id of the widget area to move the block to.\n\n### persistStubPost\n\nPersists a stub post with given ID to core data store. The post is meant to be in-memory only and shouldn't be saved via the API.\n\n_Parameters_\n\n-   _id_ `string`: Post ID.\n-   _blocks_ `Array`: Blocks the post should consist of.\n\n_Returns_\n\n-   `Object`: The post object.\n\n### saveEditedWidgetAreas\n\nConverts all the blocks from edited widget areas into widgets, and submits a batch request to save everything at once.\n\nCreates a snackbar notice on either success or error.\n\n_Returns_\n\n-   `Function`: An action creator.\n\n### saveWidgetArea\n\nConverts all the blocks from a widget area specified by ID into widgets, and submits a batch request to save everything at once.\n\n_Parameters_\n\n-   _widgetAreaId_ `string`: ID of the widget area to process.\n\n_Returns_\n\n-   `Function`: An action creator.\n\n### saveWidgetAreas\n\nConverts all the blocks from specified widget areas into widgets, and submits a batch request to save everything at once.\n\n_Parameters_\n\n-   _widgetAreas_ `Object[]`: Widget areas to save.\n\n_Returns_\n\n-   `Function`: An action creator.\n\n### setIsInserterOpened\n\nReturns an action object used to open\/close the inserter.\n\n_Parameters_\n\n-   _value_ `boolean|Object`: Whether the inserter should be opened (true) or closed (false). To specify an insertion point, use an object.\n-   _value.rootClientId_ `string`: The root client ID to insert at.\n-   _value.insertionIndex_ `number`: The index to insert at.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### setIsListViewOpened\n\nReturns an action object used to open\/close the list view.\n\n_Parameters_\n\n-   _isOpen_ `boolean`: A boolean representing whether the list view should be opened or closed.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### setIsWidgetAreaOpen\n\nSets the open state of the widget area.\n\n_Parameters_\n\n-   _clientId_ `string`: The clientId of the widget area.\n-   _isOpen_ `boolean`: Whether the widget area should be opened.\n\n_Returns_\n\n-   `Object`: Action.\n\n### setWidgetAreasOpenState\n\nSets the open state of all the widget areas.\n\n_Parameters_\n\n-   _widgetAreasOpenState_ `Object`: The open states of all the widget areas.\n\n_Returns_\n\n-   `Object`: Action.\n\n### setWidgetIdForClientId\n\nSets the clientId stored for a particular widgetId.\n\n_Parameters_\n\n-   _clientId_ `number`: Client id.\n-   _widgetId_ `number`: Widget id.\n\n_Returns_\n\n-   `Object`: Action.\n\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/edit-widgets\/src\/store\/actions.js) -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/data-core-block-editor.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">The Block Editor\u2019s Data<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Namespace: <code>core\/block-editor<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/block-editor\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">areInnerBlocksControlled<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Checks if a given block has controlled inner blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: The block to check.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: True if the block has controlled inner blocks.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">canEditBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Determines if the given block is allowed to be edited.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: The block client Id.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the given block is allowed to be edited.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">canInsertBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Determines if the given blocks are allowed to be inserted into the block list.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientIds<\/em> <code>string<\/code>: The block client IDs to be inserted.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional root client ID of block list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the given blocks are allowed to be inserted.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">canInsertBlockType<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Determines if the given block type is allowed to be inserted into the block list.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>blockName<\/em> <code>string<\/code>: The name of the block type, e.g.' core\/paragraph'.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional root client ID of block list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the given block type is allowed to be inserted.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">canLockBlockType<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Determines if the given block type can be locked\/unlocked by a user.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>nameOrType<\/em> <code>(string|Object)<\/code>: Block name or type object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether a given block type can be locked\/unlocked.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">canMoveBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Determines if the given block is allowed to be moved.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: The block client Id.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional root client ID of block list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean | undefined<\/code>: Whether the given block is allowed to be moved.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">canMoveBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Determines if the given blocks are allowed to be moved.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientIds<\/em> <code>string<\/code>: The block client IDs to be moved.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional root client ID of block list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the given blocks are allowed to be moved.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">canRemoveBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Determines if the given block is allowed to be deleted.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: The block client Id.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional root client ID of block list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the given block is allowed to be removed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">canRemoveBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Determines if the given blocks are allowed to be removed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientIds<\/em> <code>string<\/code>: The block client IDs to be removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional root client ID of block list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the given blocks are allowed to be removed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">didAutomaticChange<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the last change was an automatic change, false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the last change was automatic.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getAdjacentBlockClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the client ID of the block adjacent one at the given reference startClientId and modifier directionality. Defaults start startClientId to the selected block, and direction as next block. Returns null if there is no adjacent block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>startClientId<\/em> <code>?string<\/code>: Optional client ID of block from which to search.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>modifier<\/em> <code>?number<\/code>: Directionality multiplier (1 next, -1 previous).<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?string<\/code>: Return the client ID of the block, or null if none exists.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getAllowedBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the list of allowed inserter blocks for inner blocks children.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional root client ID of block list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array?<\/code>: The list of allowed block types.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns a block given its client ID. This is a parsed copy of the block, containing its <code>blockName<\/code>, <code>clientId<\/code>, and current <code>attributes<\/code> state. This is not the block's registration settings, which must be retrieved from the blocks module registration store.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>getBlock recurses through its inner blocks until all its children blocks have been retrieved. Note that getBlock will not return the child inner blocks of an inner block controller. This is because an inner block controller syncs itself with its own entity, and should therefore not be included with the blocks of a different entity. For example, say you call <code>getBlocks( TP )<\/code> to get the blocks of a template part. If another template part is a child of TP, then the nested template part's child blocks will not be returned. This way, the template block itself is considered part of the parent, but the children are not.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Parsed block object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockAttributes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns a block's attributes given its client ID, or null if no block exists with the client ID.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object?<\/code>: Block attributes.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockCount<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the number of blocks currently present in the post.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional root client ID of block list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>number<\/code>: Number of blocks in the post.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockEditingMode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the block editing mode for a given block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The mode can be one of three options:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>'disabled'<\/code>: Prevents editing the block entirely, i.e. it cannot be selected.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>'contentOnly'<\/code>: Hides all non-content UI, e.g. auxiliary controls in the toolbar, the block movers, block settings.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>'default'<\/code>: Allows editing the block as normal.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Blocks can set a mode using the <code>useBlockEditingMode<\/code> hook.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The mode is inherited by all of the block's inner blocks, unless they have their own mode.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A template lock can also set a mode. If the template lock is <code>'contentOnly'<\/code>, the block's mode is overridden to <code>'contentOnly'<\/code> if the block has a content role attribute, or <code>'disabled'<\/code> otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>useBlockEditingMode<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: The block client ID, or <code>''<\/code> for the root container.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>BlockEditingMode<\/code>: The block editing mode. One of <code>'disabled'<\/code>, <code>'contentOnly'<\/code>, or <code>'default'<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockHierarchyRootClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Given a block client ID, returns the root of the hierarchy from which the block is nested, return the block itself for root level blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block from which to find root client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string<\/code>: Root client ID<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockIndex<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the index at which the block corresponding to the specified client ID occurs within the block order, or <code>-1<\/code> if the block does not exist.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>number<\/code>: Index at which block exists in order.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockInsertionPoint<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the insertion point, the index at which the new inserted block would be placed. Defaults to the last index.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Insertion point object with <code>rootClientId<\/code>, <code>index<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockListSettings<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the Block List settings of a block, if any exist.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>?string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?Object<\/code>: Block settings of the block if set.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockMode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the block's editing mode, defaulting to \"visual\" if not explicitly assigned.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Block editing mode.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockName<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns a block's name given its client ID, or null if no block exists with the client ID.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string<\/code>: Block name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockNamesByClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Given an array of block client IDs, returns the corresponding array of block names.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientIds<\/em> <code>string[]<\/code>: Client IDs for which block names are to be returned.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string[]<\/code>: Block names.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockOrder<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an array containing all block client IDs in the editor in the order they appear. Optionally accepts a root client ID of the block list for which the order should be returned, defaulting to the top-level block order.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional root client ID of block list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: Ordered client IDs of editor blocks.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockParents<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Given a block client ID, returns the list of all its parents from top to bottom.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block from which to find root client ID.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>ascending<\/em> <code>boolean<\/code>: Order results from bottom to top (true) or top to bottom (false).<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: ClientIDs of the parent blocks.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockParentsByBlockName<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Given a block client ID and a block name, returns the list of all its parents from top to bottom, filtered by the given name(s). For example, if passed 'core\/group' as the blockName, it will only return parents which are group blocks. If passed <code>[ 'core\/group', 'core\/cover']<\/code>, as the blockName, it will return parents which are group blocks and parents which are cover blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block from which to find root client ID.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>blockName<\/em> <code>string|string[]<\/code>: Block name(s) to filter.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>ascending<\/em> <code>boolean<\/code>: Order results from bottom to top (true) or top to bottom (false).<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: ClientIDs of the parent blocks.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockRootClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Given a block client ID, returns the root block from which the block is nested, an empty string for top-level blocks, or null if the block does not exist.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block from which to find root client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?string<\/code>: Root client ID, if exists<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns all block objects for the current post being edited as an array in the order they appear in the post. Note that this will exclude child blocks of nested inner block controllers.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional root client ID of block list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object[]<\/code>: Post blocks.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlocksByClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Given an array of block client IDs, returns the corresponding array of block objects.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientIds<\/em> <code>string[]<\/code>: Client IDs for which blocks are to be returned.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>WPBlock[]<\/code>: Block objects.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlocksByName<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns all blocks that match a blockName. Results include nested blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>blockName<\/em> <code>?string<\/code>: Optional block name, if not specified, returns an empty array.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: Array of clientIds of blocks with name equal to blockName.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockSelectionEnd<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the current block selection end. This value may be null, and it may represent either a singular block selection or multi-selection end. A selection is singular if its start and end match.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?string<\/code>: Client ID of block selection end.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockSelectionStart<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the current block selection start. This value may be null, and it may represent either a singular block selection or multi-selection start. A selection is singular if its start and end match.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?string<\/code>: Client ID of block selection start.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockTransformItems<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Determines the items that appear in the available block transforms list.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Each item object contains what's necessary to display a menu item in the transform list and handle its selection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The 'frecency' property is a heuristic (<a href=\"https:\/\/en.wikipedia.org\/wiki\/Frecency\">https:\/\/en.wikipedia.org\/wiki\/Frecency<\/a>) that combines block usage frequenty and recency.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Items are returned ordered descendingly by their 'frecency'.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>blocks<\/em> <code>Object|Object[]<\/code>: Block object or array objects.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional root client ID of block list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>WPEditorTransformItem[]<\/code>: Items that appear in inserter.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Type Definition<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>WPEditorTransformItem<\/em> <code>Object<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Properties<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>id<\/em> <code>string<\/code>: Unique identifier for the item.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: The type of block to create.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>title<\/em> <code>string<\/code>: Title of the item, as it appears in the inserter.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>icon<\/em> <code>string<\/code>: Dashicon for the item, as it appears in the inserter.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>isDisabled<\/em> <code>boolean<\/code>: Whether or not the user should be prevented from inserting this item.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>frecency<\/em> <code>number<\/code>: Heuristic that combines frequency and recency.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getClientIdsOfDescendants<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an array containing the clientIds of all descendants of the blocks given. Returned ids are ordered first by the order of the ids given, then by the order that they appear in the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootIds<\/em> <code>string|string[]<\/code>: Client ID(s) for which descendant blocks are to be returned.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: Client IDs of descendants.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getClientIdsWithDescendants<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an array containing the clientIds of the top-level blocks and their descendants of any depth (for nested blocks). Ids are returned in the same order that they appear in the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: ids of top-level and descendant blocks.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getDirectInsertBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the block to be directly inserted by the block appender.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional root client ID of block list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>WPDirectInsertBlock|undefined<\/code>: The block type to be directly inserted.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Type Definition<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>WPDirectInsertBlock<\/em> <code>Object<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Properties<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: The type of block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>attributes<\/em> <code>?Object<\/code>: Attributes to pass to the newly created block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>attributesToCopy<\/em> <code>?Array&lt;string><\/code>: Attributes to be copied from adjecent blocks when inserted.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getDraggedBlockClientIds<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the client ids of any blocks being directly dragged.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This does not include children of a parent being dragged.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string[]<\/code>: Array of dragged block client ids.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getFirstMultiSelectedBlockClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the client ID of the first block in the multi-selection set, or null if there is no multi-selection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?string<\/code>: First block client ID in the multi-selection set.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getGlobalBlockCount<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the total number of blocks, or the total number of blocks with a specific name in a post. The number returned includes nested blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>blockName<\/em> <code>?string<\/code>: Optional block name, if specified only blocks of that type will be counted.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>number<\/code>: Number of blocks in the post, or number of blocks with name equal to blockName.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getInserterItems<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Determines the items that appear in the inserter. Includes both static items (e.g. a regular block type) and dynamic items (e.g. a reusable block).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Each item object contains what's necessary to display a button in the inserter and handle its selection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The 'frecency' property is a heuristic (<a href=\"https:\/\/en.wikipedia.org\/wiki\/Frecency\">https:\/\/en.wikipedia.org\/wiki\/Frecency<\/a>) that combines block usage frequenty and recency.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Items are returned ordered descendingly by their 'utility' and 'frecency'.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional root client ID of block list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>WPEditorInserterItem[]<\/code>: Items that appear in inserter.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Type Definition<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>WPEditorInserterItem<\/em> <code>Object<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Properties<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>id<\/em> <code>string<\/code>: Unique identifier for the item.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: The type of block to create.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>initialAttributes<\/em> <code>Object<\/code>: Attributes to pass to the newly created block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>title<\/em> <code>string<\/code>: Title of the item, as it appears in the inserter.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>icon<\/em> <code>string<\/code>: Dashicon for the item, as it appears in the inserter.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>category<\/em> <code>string<\/code>: Block category that the item is associated with.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>keywords<\/em> <code>string[]<\/code>: Keywords that can be searched to find this item.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>isDisabled<\/em> <code>boolean<\/code>: Whether or not the user should be prevented from inserting this item.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>frecency<\/em> <code>number<\/code>: Heuristic that combines frequency and recency.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getLastMultiSelectedBlockClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the client ID of the last block in the multi-selection set, or null if there is no multi-selection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?string<\/code>: Last block client ID in the multi-selection set.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getLowestCommonAncestorWithSelectedBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Given a block client ID, returns the lowest common ancestor with selected client ID.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block from which to find common ancestor client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string<\/code>: Common ancestor client ID or undefined<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getMultiSelectedBlockClientIds<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the current multi-selection set of block client IDs, or an empty array if there is no multi-selection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: Multi-selected block client IDs.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getMultiSelectedBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the current multi-selection set of blocks, or an empty array if there is no multi-selection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: Multi-selected block objects.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getMultiSelectedBlocksEndClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the client ID of the block which ends the multi-selection set, or null if there is no multi-selection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is not necessarily the last client ID in the selection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getLastMultiSelectedBlockClientId<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?string<\/code>: Client ID of block ending multi-selection.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getMultiSelectedBlocksStartClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the client ID of the block which begins the multi-selection set, or null if there is no multi-selection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is not necessarily the first client ID in the selection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>getFirstMultiSelectedBlockClientId<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?string<\/code>: Client ID of block beginning multi-selection.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getNextBlockClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the next block's client ID from the given reference start ID. Defaults start to the selected block. Returns null if there is no next block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>startClientId<\/em> <code>?string<\/code>: Optional client ID of block from which to search.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?string<\/code>: Adjacent block's client ID, or null if none exists.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getPatternsByBlockTypes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the list of patterns based on their declared <code>blockTypes<\/code> and a block's name. Patterns can use <code>blockTypes<\/code> to integrate in work flows like suggesting appropriate patterns in a Placeholder state(during insertion) or blocks transformations.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>blockNames<\/em> <code>string|string[]<\/code>: Block's name or array of block names to find matching pattens.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional target root client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: The list of matched block patterns based on declared <code>blockTypes<\/code> and block name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getPreviousBlockClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the previous block's client ID from the given reference start ID. Defaults start to the selected block. Returns null if there is no previous block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>startClientId<\/em> <code>?string<\/code>: Optional client ID of block from which to search.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?string<\/code>: Adjacent block's client ID, or null if none exists.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getSelectedBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the currently selected block, or null if there is no selected block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?Object<\/code>: Selected block.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getSelectedBlockClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the currently selected block client ID, or null if there is no selected block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?string<\/code>: Selected block client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getSelectedBlockClientIds<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the current selection set of block client IDs (multiselection or single selection).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array<\/code>: Multi-selected block client IDs.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getSelectedBlockCount<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the number of blocks currently selected in the post.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>number<\/code>: Number of blocks selected in the post.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getSelectedBlocksInitialCaretPosition<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the initial caret position for the selected block. This position is to used to position the caret properly when the selected block changes. If the current block is not a RichText, having initial position set to 0 means \"focus block\"<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>0|-1|null<\/code>: Initial position.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getSelectionEnd<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the current selection end block client ID, attribute key and text offset.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Block editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>WPBlockSelection<\/code>: Selection end information.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getSelectionStart<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the current selection start block client ID, attribute key and text offset.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Block editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>WPBlockSelection<\/code>: Selection start information.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getSettings<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the editor settings.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: The editor settings object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getTemplate<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the defined block template<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>boolean<\/code>:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?Array<\/code>: Block Template.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getTemplateLock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the defined block template lock. Optionally accepts a root block client ID as context, otherwise defaulting to the global context.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional block root client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string|false<\/code>: Block Template Lock<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasBlockMovingClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether block moving mode is enabled.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string<\/code>: Client Id of moving block.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasDraggedInnerBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if one of the block's inner blocks is dragged.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>deep<\/em> <code>boolean<\/code>: Perform a deep check.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the block has an inner block dragged<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasInserterItems<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Determines whether there are items to show in the inserter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional root client ID of block list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Items that appear in inserter.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasMultiSelection<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if a multi-selection has been made, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether multi-selection has been made.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasSelectedBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if there is a single selected block, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether a single block is selected.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasSelectedInnerBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if one of the block's inner blocks is selected.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>deep<\/em> <code>boolean<\/code>: Perform a deep check.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the block has an inner block selected<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isAncestorBeingDragged<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether a parent\/ancestor of the block is being dragged.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Client id for block to check.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the block's ancestor is being dragged.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isAncestorMultiSelected<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if an ancestor of the block is multi-selected, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether an ancestor of the block is in multi-selection set.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isBlockBeingDragged<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether the block is being dragged.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Only returns true if the block is being directly dragged, not if the block is a child of a parent being dragged. See <code>isAncestorBeingDragged<\/code> for child blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Client id for block to check.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the block is being dragged.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isBlockHighlighted<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the current highlighted block matches the block clientId.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: The block to check.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the block is currently highlighted.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isBlockInsertionPointVisible<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if we should show the block insertion point.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?boolean<\/code>: Whether the insertion point is visible or not.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isBlockMultiSelected<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the client ID occurs within the block multi-selection, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether block is in multi-selection set.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isBlockSelected<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the block corresponding to the specified client ID is currently selected and no multi-selection exists, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether block is selected and multi-selection exists.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isBlockValid<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether a block is valid or not.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Is Valid.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isBlockVisible<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Tells if the block is visible on the canvas or not.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>Object<\/code>: Client Id of the block.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: True if the block is visible.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isBlockWithinSelection<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the block corresponding to the specified client ID is currently selected but isn't the last of the selected blocks. Here \"last\" refers to the block sequence in the document, <em>not<\/em> the sequence of multi-selection, which is why <code>state.selectionEnd<\/code> isn't used.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether block is selected and not the last in the selection.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isCaretWithinFormattedText<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the caret is within formatted text, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the caret is within formatted text.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isDraggingBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the user is dragging blocks, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether user is dragging blocks.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isFirstMultiSelectedBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if a multi-selection exists, and the block corresponding to the specified client ID is the first block of the multi-selection set, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether block is first in multi-selection.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isGroupable<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Indicates if the provided blocks(by client ids) are groupable. We need to have at least one block, have a grouping block name set and be able to remove these blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientIds<\/em> <code>string[]<\/code>: Block client ids. If not passed the selected blocks client ids will be used.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: True if the blocks are groupable.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isLastBlockChangePersistent<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the most recent block change is be considered persistent, or false otherwise. A persistent change is one committed by BlockEditorProvider via its <code>onChange<\/code> callback, in addition to <code>onInput<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Block editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the most recent block change was persistent.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isMultiSelecting<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Whether in the process of multi-selecting or not. This flag is only true while the multi-selection is being selected (by mouse move), and is false once the multi-selection has been settled.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>hasMultiSelection<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: True if multi-selecting, false if not.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isNavigationMode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether the navigation mode is enabled.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Is navigation mode enabled.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isSelectionEnabled<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Selector that returns if multi-selection is enabled or not.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: True if it should be possible to multi-select blocks, false if multi-selection is disabled.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isTyping<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the user is typing, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether user is typing.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isUngroupable<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Indicates if a block is ungroupable. A block is ungroupable if it is a single grouping block with inner blocks. If a block has an <code>ungroup<\/code> transform, it is also ungroupable, without the requirement of being the default grouping block. Additionally a block can only be ungrouped if it has inner blocks and can be removed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Client Id of the block. If not passed the selected block's client id will be used.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: True if the block is ungroupable.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isValidTemplate<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether the blocks matches the template or not.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>boolean<\/code>:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>?boolean<\/code>: Whether the template is valid or not.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">wasBlockJustInserted<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Tells if the block with the passed clientId was just inserted.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Global application state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>clientId<\/em> <code>Object<\/code>: Client Id of the block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>source<\/em> <code>?string<\/code>: Optional insertion source of the block.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: True if the block matches the last block inserted from the specified source.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/block-editor\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Actions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/block-editor\/src\/store\/actions.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">clearSelectedBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that clears the block selection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">duplicateBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that duplicates a list of blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientIds<\/em> <code>string[]<\/code>:<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>updateSelection<\/em> <code>boolean<\/code>:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">enterFormattedText<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that the caret has entered formatted text.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">exitFormattedText<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that the user caret has exited formatted text.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">flashBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that \"flashes\" the block with a given <code>clientId<\/code> by rhythmically highlighting it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Target block client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hideInsertionPoint<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that hides the insertion point.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">insertAfterBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that inserts a default block after a given block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">insertBeforeBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that inserts a default block before a given block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">insertBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that inserts a single block, optionally at a specific index respective a root block list.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Only allowed blocks are inserted. The action may fail silently for blocks that are not allowed or if a templateLock is active on the block list.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>block<\/em> <code>Object<\/code>: Block object to insert.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>index<\/em> <code>?number<\/code>: Index at which block should be inserted.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional root client ID of block list on which to insert.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>updateSelection<\/em> <code>?boolean<\/code>: If true block selection will be updated. If false, block selection will not change. Defaults to true.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>meta<\/em> <code>?Object<\/code>: Optional Meta values to be passed to the action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">insertBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that inserts an array of blocks, optionally at a specific index respective a root block list.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Only allowed blocks are inserted. The action may fail silently for blocks that are not allowed or if a templateLock is active on the block list.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>blocks<\/em> <code>Object[]<\/code>: Block objects to insert.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>index<\/em> <code>?number<\/code>: Index at which block should be inserted.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional root client ID of block list on which to insert.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>updateSelection<\/em> <code>?boolean<\/code>: If true block selection will be updated. If false, block selection will not change. Defaults to true.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>initialPosition<\/em> <code>0|-1|null<\/code>: Initial focus position. Setting it to null prevent focusing the inserted block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>meta<\/em> <code>?Object<\/code>: Optional Meta values to be passed to the action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">insertDefaultBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that adds a new block of the default type to the block list.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>attributes<\/em> <code>?Object<\/code>: Optional attributes of the block to assign.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional root client ID of block list on which to append.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>index<\/em> <code>?number<\/code>: Optional index where to insert the default block.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">mergeBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that merges two blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>firstBlockClientId<\/em> <code>string<\/code>: Client ID of the first block to merge.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>secondBlockClientId<\/em> <code>string<\/code>: Client ID of the second block to merge.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">moveBlocksDown<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Undocumented declaration.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">moveBlocksToPosition<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that moves given blocks to a new position.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientIds<\/em> <code>?string<\/code>: The client IDs of the blocks.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>fromRootClientId<\/em> <code>?string<\/code>: Root client ID source.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>toRootClientId<\/em> <code>?string<\/code>: Root client ID destination.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>index<\/em> <code>number<\/code>: The index to move the blocks to.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">moveBlocksUp<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Undocumented declaration.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">moveBlockToPosition<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that moves given block to a new position.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>?string<\/code>: The client ID of the block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>fromRootClientId<\/em> <code>?string<\/code>: Root client ID source.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>toRootClientId<\/em> <code>?string<\/code>: Root client ID destination.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>index<\/em> <code>number<\/code>: The index to move the block to.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">multiSelect<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that changes block multi-selection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>start<\/em> <code>string<\/code>: First block of the multi selection.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>end<\/em> <code>string<\/code>: Last block of the multiselection.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>__experimentalInitialPosition<\/em> <code>number|null<\/code>: Optional initial position. Pass as null to skip focus within editor canvas.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">receiveBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that blocks have been received. Unlike resetBlocks, these should be appended to the existing known set, not replacing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>blocks<\/em> <code>Object[]<\/code>: Array of block objects.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">registerInserterMediaCategory<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Registers a new inserter media category. Once registered, the media category is available in the inserter's media tab.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following interfaces are used:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Type Definition<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>InserterMediaRequest<\/em> <code>Object<\/code>: Interface for inserter media requests.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Properties<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>per_page<\/em> <code>number<\/code>: How many items to fetch per page.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>search<\/em> <code>string<\/code>: The search term to use for filtering the results.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Type Definition<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>InserterMediaItem<\/em> <code>Object<\/code>: Interface for inserter media responses. Any media resource should map their response to this interface, in order to create the core WordPress media blocks (image, video, audio).<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Properties<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>title<\/em> <code>string<\/code>: The title of the media item.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>url<\/em> `string: The source url of the media item.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>previewUrl<\/em> <code>[string]<\/code>: The preview source url of the media item to display in the media list.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>id<\/em> <code>[number]<\/code>: The WordPress id of the media item.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>sourceId<\/em> <code>[number|string]<\/code>: The id of the media item from external source.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>alt<\/em> <code>[string]<\/code>: The alt text of the media item.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>caption<\/em> <code>[string]<\/code>: The caption of the media item.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.data.dispatch( 'core\/block-editor' ).registerInserterMediaCategory( {\n\tname: 'openverse',\n\tlabels: {\n\t\tname: 'Openverse',\n\t\tsearch_items: 'Search Openverse',\n\t},\n\tmediaType: 'image',\n\tasync fetch( query = {} ) {\n\t\tconst defaultArgs = {\n\t\t\tmature: false,\n\t\t\texcluded_source: 'flickr,inaturalist,wikimedia',\n\t\t\tlicense: 'pdm,cc0',\n\t\t};\n\t\tconst finalQuery = { ...query, ...defaultArgs };\n\t\t\/\/ Sometimes you might need to map the supported request params according to `InserterMediaRequest`.\n\t\t\/\/ interface. In this example the `search` query param is named `q`.\n\t\tconst mapFromInserterMediaRequest = {\n\t\t\tper_page: 'page_size',\n\t\t\tsearch: 'q',\n\t\t};\n\t\tconst url = new URL( 'https:\/\/api.openverse.engineering\/v1\/images\/' );\n\t\tObject.entries( finalQuery ).forEach( ( &#91; key, value ] ) => {\n\t\t\tconst queryKey = mapFromInserterMediaRequest&#91; key ] || key;\n\t\t\turl.searchParams.set( queryKey, value );\n\t\t} );\n\t\tconst response = await window.fetch( url, {\n\t\t\theaders: {\n\t\t\t\t'User-Agent': 'WordPress\/inserter-media-fetch',\n\t\t\t},\n\t\t} );\n\t\tconst jsonResponse = await response.json();\n\t\tconst results = jsonResponse.results;\n\t\treturn results.map( ( result ) => ( {\n\t\t\t...result,\n\t\t\t\/\/ If your response result includes an `id` prop that you want to access later, it should\n\t\t\t\/\/ be mapped to `InserterMediaItem`'s `sourceId` prop. This can be useful if you provide\n\t\t\t\/\/ a report URL getter.\n\t\t\t\/\/ Additionally you should always clear the `id` value of your response results because\n\t\t\t\/\/ it is used to identify WordPress media items.\n\t\t\tsourceId: result.id,\n\t\t\tid: undefined,\n\t\t\tcaption: result.caption,\n\t\t\tpreviewUrl: result.thumbnail,\n\t\t} ) );\n\t},\n\tgetReportUrl: ( { sourceId } ) =>\n\t\t`https:\/\/wordpress.org\/openverse\/image\/${ sourceId }\/report\/`,\n\tisExternalResource: true,\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>category<\/em> <code>InserterMediaCategory<\/code>: The inserter media category to register.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Type Definition<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>InserterMediaCategory<\/em> <code>Object<\/code>: Interface for inserter media category.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Properties<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: The name of the media category, that should be unique among all media categories.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>labels<\/em> <code>Object<\/code>: Labels for the media category.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>labels.name<\/em> <code>string<\/code>: General name of the media category. It's used in the inserter media items list.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>labels.search_items<\/em> <code>[string]<\/code>: Label for searching items. Default is \u2018Search Posts\u2019 \/ \u2018Search Pages\u2019.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>mediaType<\/em> <code>('image'|'audio'|'video')<\/code>: The media type of the media category.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>fetch<\/em> <code>(InserterMediaRequest) => Promise&lt;InserterMediaItem[]><\/code>: The function to fetch media items for the category.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>getReportUrl<\/em> <code>[(InserterMediaItem) => string]<\/code>: If the media category supports reporting media items, this function should return the report url for the media item. It accepts the <code>InserterMediaItem<\/code> as an argument.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>isExternalResource<\/em> <code>[boolean]<\/code>: If the media category is an external resource, this should be set to true. This is used to avoid making a request to the external resource when the user<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">removeBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that the block with the specified client ID is to be removed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Client ID of block to remove.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>selectPrevious<\/em> <code>boolean<\/code>: True if the previous block should be selected when a block is removed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">removeBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Yields action objects used in signalling that the blocks corresponding to the set of specified client IDs are to be removed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientIds<\/em> <code>string|string[]<\/code>: Client IDs of blocks to remove.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>selectPrevious<\/em> <code>boolean<\/code>: True if the previous block or the immediate parent (if no previous block exists) should be selected when a block is removed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">replaceBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that replaces a single block with one or more replacement blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>(string|string[])<\/code>: Block client ID to replace.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>block<\/em> <code>(Object|Object[])<\/code>: Replacement block(s).<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">replaceBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that replaces given blocks with one or more replacement blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientIds<\/em> <code>(string|string[])<\/code>: Block client ID(s) to replace.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>blocks<\/em> <code>(Object|Object[])<\/code>: Replacement block(s).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>indexToSelect<\/em> <code>number<\/code>: Index of replacement block to select.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>initialPosition<\/em> <code>0|-1|null<\/code>: Index of caret after in the selected block after the operation.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>meta<\/em> <code>?Object<\/code>: Optional Meta values to be passed to the action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">replaceInnerBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that the inner blocks with the specified client ID should be replaced.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>string<\/code>: Client ID of the block whose InnerBlocks will re replaced.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>blocks<\/em> <code>Object[]<\/code>: Block objects to insert as new InnerBlocks<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>updateSelection<\/em> <code>?boolean<\/code>: If true block selection will be updated. If false, block selection will not change. Defaults to false.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>initialPosition<\/em> <code>0|-1|null<\/code>: Initial block position.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">resetBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that resets blocks state to the specified array of blocks, taking precedence over any other content reflected as an edit in state.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>blocks<\/em> <code>Array<\/code>: Array of blocks.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">resetSelection<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that selection state should be reset to the specified selection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>selectionStart<\/em> <code>WPBlockSelection<\/code>: The selection start.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>selectionEnd<\/em> <code>WPBlockSelection<\/code>: The selection end.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>initialPosition<\/em> <code>0|-1|null<\/code>: Initial block position.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">selectBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that the block with the specified client ID has been selected, optionally accepting a position value reflecting its selection directionality. An initialPosition of -1 reflects a reverse selection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>initialPosition<\/em> <code>0|-1|null<\/code>: Optional initial position. Pass as -1 to reflect reverse selection.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">selectionChange<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that changes the position of the user caret.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string|WPSelection<\/code>: The selected block client ID.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>attributeKey<\/em> <code>string<\/code>: The selected block attribute key.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>startOffset<\/em> <code>number<\/code>: The start offset.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>endOffset<\/em> <code>number<\/code>: The end offset.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">selectNextBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Yields action objects used in signalling that the block following the given clientId should be selected.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">selectPreviousBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Yields action objects used in signalling that the block preceding the given clientId (or optionally, its first parent from bottom to top) should be selected.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>fallbackToParent<\/em> <code>boolean<\/code>: If true, select the first parent if there is no previous block.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setBlockEditingMode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Sets the block editing mode for a given block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>useBlockEditingMode<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: The block client ID, or <code>''<\/code> for the root container.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>mode<\/em> <code>BlockEditingMode<\/code>: The block editing mode. One of <code>'disabled'<\/code>, <code>'contentOnly'<\/code>, or <code>'default'<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setBlockMovingClientId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that enables or disables the block moving mode.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>hasBlockMovingClientId<\/em> <code>string|null<\/code>: Enable\/Disable block moving mode.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setBlockVisibility<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that sets whether given blocks are visible on the canvas.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>updates<\/em> <code>Record&lt;string,boolean><\/code>: For each block's clientId, its new visibility setting.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setHasControlledInnerBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that sets whether a block has controlled inner blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: The block's clientId.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>hasControlledInnerBlocks<\/em> <code>boolean<\/code>: True if the block's inner blocks are controlled.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setNavigationMode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that enables or disables the navigation mode.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>isNavigationMode<\/em> <code>boolean<\/code>: Enable\/Disable navigation mode.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">setTemplateValidity<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that resets the template validity.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>isValid<\/em> <code>boolean<\/code>: template validity flag.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">showInsertionPoint<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that shows the insertion point.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>rootClientId<\/em> <code>?string<\/code>: Optional root client ID of block list on which to insert.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>index<\/em> <code>?number<\/code>: Index at which block should be inserted.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>__unstableOptions<\/em> <code>?Object<\/code>: Additional options.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Properties<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>__unstableWithInserter<\/em> <code>boolean<\/code>: Whether or not to show an inserter button.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>operation<\/em> <code>WPDropOperation<\/code>: The operation to perform when applied, either 'insert' or 'replace' for now.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">startDraggingBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that the user has begun to drag blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientIds<\/em> <code>string[]<\/code>: An array of client ids being dragged<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">startMultiSelect<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that starts block multi-selection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">startTyping<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that the user has begun to type.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">stopDraggingBlocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that the user has stopped dragging blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">stopMultiSelect<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that stops block multi-selection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">stopTyping<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that the user has stopped typing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">synchronizeTemplate<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that synchronizes the template with the list of blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">toggleBlockHighlight<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that toggles the highlighted block state.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: The block's clientId.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>isHighlighted<\/em> <code>boolean<\/code>: The highlight state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">toggleBlockMode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to toggle the block editing mode between visual and HTML modes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">toggleSelection<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that enables or disables block selection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>isSelectionEnabled<\/em> <code>[boolean]<\/code>: Whether block selection should be enabled.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">unsetBlockEditingMode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Clears the block editing mode for a given block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Related<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>useBlockEditingMode<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: The block client ID, or <code>''<\/code> for the root container.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">updateBlock<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that updates the block with the specified client ID.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Block client ID.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>updates<\/em> <code>Object<\/code>: Block attributes to be merged.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">updateBlockAttributes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that updates attributes of multiple blocks with the specified client IDs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientIds<\/em> <code>string|string[]<\/code>: Block client IDs.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>attributes<\/em> <code>Object<\/code>: Block attributes to be merged. Should be keyed by clientIds if uniqueByBlock is true.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>uniqueByBlock<\/em> <code>boolean<\/code>: true if each block in clientIds array has a unique set of attributes<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">updateBlockListSettings<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that changes the nested settings of a given block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>clientId<\/em> <code>string<\/code>: Client ID of the block whose nested setting are being received.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>settings<\/em> <code>Object<\/code>: Object with the new settings for the nested block.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">updateSettings<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action that updates the block editor settings.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>settings<\/em> <code>Object<\/code>: Updated settings<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">validateBlocksToTemplate<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Block validity is a function of blocks state (at the point of a reset) and the template setting. As a compromise to its placement across distinct parts of state, it is implemented here as a side effect of the block reset action.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>blocks<\/em> <code>Array<\/code>: Array of blocks.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/block-editor\/src\/store\/actions.js) -->\n<!-- \/wp:html -->",
        "markdown": "# The Block Editor\u2019s Data\n\nNamespace: `core\/block-editor`.\n\n## Selectors\n\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/block-editor\/src\/store\/selectors.js) -->\n\n### areInnerBlocksControlled\n\nChecks if a given block has controlled inner blocks.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _clientId_ `string`: The block to check.\n\n_Returns_\n\n-   `boolean`: True if the block has controlled inner blocks.\n\n### canEditBlock\n\nDetermines if the given block is allowed to be edited.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: The block client Id.\n\n_Returns_\n\n-   `boolean`: Whether the given block is allowed to be edited.\n\n### canInsertBlocks\n\nDetermines if the given blocks are allowed to be inserted into the block list.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientIds_ `string`: The block client IDs to be inserted.\n-   _rootClientId_ `?string`: Optional root client ID of block list.\n\n_Returns_\n\n-   `boolean`: Whether the given blocks are allowed to be inserted.\n\n### canInsertBlockType\n\nDetermines if the given block type is allowed to be inserted into the block list.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _blockName_ `string`: The name of the block type, e.g.' core\/paragraph'.\n-   _rootClientId_ `?string`: Optional root client ID of block list.\n\n_Returns_\n\n-   `boolean`: Whether the given block type is allowed to be inserted.\n\n### canLockBlockType\n\nDetermines if the given block type can be locked\/unlocked by a user.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _nameOrType_ `(string|Object)`: Block name or type object.\n\n_Returns_\n\n-   `boolean`: Whether a given block type can be locked\/unlocked.\n\n### canMoveBlock\n\nDetermines if the given block is allowed to be moved.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: The block client Id.\n-   _rootClientId_ `?string`: Optional root client ID of block list.\n\n_Returns_\n\n-   `boolean | undefined`: Whether the given block is allowed to be moved.\n\n### canMoveBlocks\n\nDetermines if the given blocks are allowed to be moved.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientIds_ `string`: The block client IDs to be moved.\n-   _rootClientId_ `?string`: Optional root client ID of block list.\n\n_Returns_\n\n-   `boolean`: Whether the given blocks are allowed to be moved.\n\n### canRemoveBlock\n\nDetermines if the given block is allowed to be deleted.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: The block client Id.\n-   _rootClientId_ `?string`: Optional root client ID of block list.\n\n_Returns_\n\n-   `boolean`: Whether the given block is allowed to be removed.\n\n### canRemoveBlocks\n\nDetermines if the given blocks are allowed to be removed.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientIds_ `string`: The block client IDs to be removed.\n-   _rootClientId_ `?string`: Optional root client ID of block list.\n\n_Returns_\n\n-   `boolean`: Whether the given blocks are allowed to be removed.\n\n### didAutomaticChange\n\nReturns true if the last change was an automatic change, false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether the last change was automatic.\n\n### getAdjacentBlockClientId\n\nReturns the client ID of the block adjacent one at the given reference startClientId and modifier directionality. Defaults start startClientId to the selected block, and direction as next block. Returns null if there is no adjacent block.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _startClientId_ `?string`: Optional client ID of block from which to search.\n-   _modifier_ `?number`: Directionality multiplier (1 next, -1 previous).\n\n_Returns_\n\n-   `?string`: Return the client ID of the block, or null if none exists.\n\n### getAllowedBlocks\n\nReturns the list of allowed inserter blocks for inner blocks children.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _rootClientId_ `?string`: Optional root client ID of block list.\n\n_Returns_\n\n-   `Array?`: The list of allowed block types.\n\n### getBlock\n\nReturns a block given its client ID. This is a parsed copy of the block, containing its `blockName`, `clientId`, and current `attributes` state. This is not the block's registration settings, which must be retrieved from the blocks module registration store.\n\ngetBlock recurses through its inner blocks until all its children blocks have been retrieved. Note that getBlock will not return the child inner blocks of an inner block controller. This is because an inner block controller syncs itself with its own entity, and should therefore not be included with the blocks of a different entity. For example, say you call `getBlocks( TP )` to get the blocks of a template part. If another template part is a child of TP, then the nested template part's child blocks will not be returned. This way, the template block itself is considered part of the parent, but the children are not.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: Block client ID.\n\n_Returns_\n\n-   `Object`: Parsed block object.\n\n### getBlockAttributes\n\nReturns a block's attributes given its client ID, or null if no block exists with the client ID.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: Block client ID.\n\n_Returns_\n\n-   `Object?`: Block attributes.\n\n### getBlockCount\n\nReturns the number of blocks currently present in the post.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _rootClientId_ `?string`: Optional root client ID of block list.\n\n_Returns_\n\n-   `number`: Number of blocks in the post.\n\n### getBlockEditingMode\n\nReturns the block editing mode for a given block.\n\nThe mode can be one of three options:\n\n-   `'disabled'`: Prevents editing the block entirely, i.e. it cannot be selected.\n-   `'contentOnly'`: Hides all non-content UI, e.g. auxiliary controls in the toolbar, the block movers, block settings.\n-   `'default'`: Allows editing the block as normal.\n\nBlocks can set a mode using the `useBlockEditingMode` hook.\n\nThe mode is inherited by all of the block's inner blocks, unless they have their own mode.\n\nA template lock can also set a mode. If the template lock is `'contentOnly'`, the block's mode is overridden to `'contentOnly'` if the block has a content role attribute, or `'disabled'` otherwise.\n\n_Related_\n\n-   useBlockEditingMode\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _clientId_ `string`: The block client ID, or `''` for the root container.\n\n_Returns_\n\n-   `BlockEditingMode`: The block editing mode. One of `'disabled'`, `'contentOnly'`, or `'default'`.\n\n### getBlockHierarchyRootClientId\n\nGiven a block client ID, returns the root of the hierarchy from which the block is nested, return the block itself for root level blocks.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: Block from which to find root client ID.\n\n_Returns_\n\n-   `string`: Root client ID\n\n### getBlockIndex\n\nReturns the index at which the block corresponding to the specified client ID occurs within the block order, or `-1` if the block does not exist.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: Block client ID.\n\n_Returns_\n\n-   `number`: Index at which block exists in order.\n\n### getBlockInsertionPoint\n\nReturns the insertion point, the index at which the new inserted block would be placed. Defaults to the last index.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `Object`: Insertion point object with `rootClientId`, `index`.\n\n### getBlockListSettings\n\nReturns the Block List settings of a block, if any exist.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `?string`: Block client ID.\n\n_Returns_\n\n-   `?Object`: Block settings of the block if set.\n\n### getBlockMode\n\nReturns the block's editing mode, defaulting to \"visual\" if not explicitly assigned.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: Block client ID.\n\n_Returns_\n\n-   `Object`: Block editing mode.\n\n### getBlockName\n\nReturns a block's name given its client ID, or null if no block exists with the client ID.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: Block client ID.\n\n_Returns_\n\n-   `string`: Block name.\n\n### getBlockNamesByClientId\n\nGiven an array of block client IDs, returns the corresponding array of block names.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientIds_ `string[]`: Client IDs for which block names are to be returned.\n\n_Returns_\n\n-   `string[]`: Block names.\n\n### getBlockOrder\n\nReturns an array containing all block client IDs in the editor in the order they appear. Optionally accepts a root client ID of the block list for which the order should be returned, defaulting to the top-level block order.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _rootClientId_ `?string`: Optional root client ID of block list.\n\n_Returns_\n\n-   `Array`: Ordered client IDs of editor blocks.\n\n### getBlockParents\n\nGiven a block client ID, returns the list of all its parents from top to bottom.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: Block from which to find root client ID.\n-   _ascending_ `boolean`: Order results from bottom to top (true) or top to bottom (false).\n\n_Returns_\n\n-   `Array`: ClientIDs of the parent blocks.\n\n### getBlockParentsByBlockName\n\nGiven a block client ID and a block name, returns the list of all its parents from top to bottom, filtered by the given name(s). For example, if passed 'core\/group' as the blockName, it will only return parents which are group blocks. If passed `[ 'core\/group', 'core\/cover']`, as the blockName, it will return parents which are group blocks and parents which are cover blocks.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: Block from which to find root client ID.\n-   _blockName_ `string|string[]`: Block name(s) to filter.\n-   _ascending_ `boolean`: Order results from bottom to top (true) or top to bottom (false).\n\n_Returns_\n\n-   `Array`: ClientIDs of the parent blocks.\n\n### getBlockRootClientId\n\nGiven a block client ID, returns the root block from which the block is nested, an empty string for top-level blocks, or null if the block does not exist.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: Block from which to find root client ID.\n\n_Returns_\n\n-   `?string`: Root client ID, if exists\n\n### getBlocks\n\nReturns all block objects for the current post being edited as an array in the order they appear in the post. Note that this will exclude child blocks of nested inner block controllers.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _rootClientId_ `?string`: Optional root client ID of block list.\n\n_Returns_\n\n-   `Object[]`: Post blocks.\n\n### getBlocksByClientId\n\nGiven an array of block client IDs, returns the corresponding array of block objects.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientIds_ `string[]`: Client IDs for which blocks are to be returned.\n\n_Returns_\n\n-   `WPBlock[]`: Block objects.\n\n### getBlocksByName\n\nReturns all blocks that match a blockName. Results include nested blocks.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _blockName_ `?string`: Optional block name, if not specified, returns an empty array.\n\n_Returns_\n\n-   `Array`: Array of clientIds of blocks with name equal to blockName.\n\n### getBlockSelectionEnd\n\nReturns the current block selection end. This value may be null, and it may represent either a singular block selection or multi-selection end. A selection is singular if its start and end match.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `?string`: Client ID of block selection end.\n\n### getBlockSelectionStart\n\nReturns the current block selection start. This value may be null, and it may represent either a singular block selection or multi-selection start. A selection is singular if its start and end match.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `?string`: Client ID of block selection start.\n\n### getBlockTransformItems\n\nDetermines the items that appear in the available block transforms list.\n\nEach item object contains what's necessary to display a menu item in the transform list and handle its selection.\n\nThe 'frecency' property is a heuristic (<https:\/\/en.wikipedia.org\/wiki\/Frecency>) that combines block usage frequenty and recency.\n\nItems are returned ordered descendingly by their 'frecency'.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _blocks_ `Object|Object[]`: Block object or array objects.\n-   _rootClientId_ `?string`: Optional root client ID of block list.\n\n_Returns_\n\n-   `WPEditorTransformItem[]`: Items that appear in inserter.\n\n_Type Definition_\n\n-   _WPEditorTransformItem_ `Object`\n\n_Properties_\n\n-   _id_ `string`: Unique identifier for the item.\n-   _name_ `string`: The type of block to create.\n-   _title_ `string`: Title of the item, as it appears in the inserter.\n-   _icon_ `string`: Dashicon for the item, as it appears in the inserter.\n-   _isDisabled_ `boolean`: Whether or not the user should be prevented from inserting this item.\n-   _frecency_ `number`: Heuristic that combines frequency and recency.\n\n### getClientIdsOfDescendants\n\nReturns an array containing the clientIds of all descendants of the blocks given. Returned ids are ordered first by the order of the ids given, then by the order that they appear in the editor.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _rootIds_ `string|string[]`: Client ID(s) for which descendant blocks are to be returned.\n\n_Returns_\n\n-   `Array`: Client IDs of descendants.\n\n### getClientIdsWithDescendants\n\nReturns an array containing the clientIds of the top-level blocks and their descendants of any depth (for nested blocks). Ids are returned in the same order that they appear in the editor.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `Array`: ids of top-level and descendant blocks.\n\n### getDirectInsertBlock\n\nReturns the block to be directly inserted by the block appender.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _rootClientId_ `?string`: Optional root client ID of block list.\n\n_Returns_\n\n-   `WPDirectInsertBlock|undefined`: The block type to be directly inserted.\n\n_Type Definition_\n\n-   _WPDirectInsertBlock_ `Object`\n\n_Properties_\n\n-   _name_ `string`: The type of block.\n-   _attributes_ `?Object`: Attributes to pass to the newly created block.\n-   _attributesToCopy_ `?Array<string>`: Attributes to be copied from adjecent blocks when inserted.\n\n### getDraggedBlockClientIds\n\nReturns the client ids of any blocks being directly dragged.\n\nThis does not include children of a parent being dragged.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `string[]`: Array of dragged block client ids.\n\n### getFirstMultiSelectedBlockClientId\n\nReturns the client ID of the first block in the multi-selection set, or null if there is no multi-selection.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `?string`: First block client ID in the multi-selection set.\n\n### getGlobalBlockCount\n\nReturns the total number of blocks, or the total number of blocks with a specific name in a post. The number returned includes nested blocks.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _blockName_ `?string`: Optional block name, if specified only blocks of that type will be counted.\n\n_Returns_\n\n-   `number`: Number of blocks in the post, or number of blocks with name equal to blockName.\n\n### getInserterItems\n\nDetermines the items that appear in the inserter. Includes both static items (e.g. a regular block type) and dynamic items (e.g. a reusable block).\n\nEach item object contains what's necessary to display a button in the inserter and handle its selection.\n\nThe 'frecency' property is a heuristic (<https:\/\/en.wikipedia.org\/wiki\/Frecency>) that combines block usage frequenty and recency.\n\nItems are returned ordered descendingly by their 'utility' and 'frecency'.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _rootClientId_ `?string`: Optional root client ID of block list.\n\n_Returns_\n\n-   `WPEditorInserterItem[]`: Items that appear in inserter.\n\n_Type Definition_\n\n-   _WPEditorInserterItem_ `Object`\n\n_Properties_\n\n-   _id_ `string`: Unique identifier for the item.\n-   _name_ `string`: The type of block to create.\n-   _initialAttributes_ `Object`: Attributes to pass to the newly created block.\n-   _title_ `string`: Title of the item, as it appears in the inserter.\n-   _icon_ `string`: Dashicon for the item, as it appears in the inserter.\n-   _category_ `string`: Block category that the item is associated with.\n-   _keywords_ `string[]`: Keywords that can be searched to find this item.\n-   _isDisabled_ `boolean`: Whether or not the user should be prevented from inserting this item.\n-   _frecency_ `number`: Heuristic that combines frequency and recency.\n\n### getLastMultiSelectedBlockClientId\n\nReturns the client ID of the last block in the multi-selection set, or null if there is no multi-selection.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `?string`: Last block client ID in the multi-selection set.\n\n### getLowestCommonAncestorWithSelectedBlock\n\nGiven a block client ID, returns the lowest common ancestor with selected client ID.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: Block from which to find common ancestor client ID.\n\n_Returns_\n\n-   `string`: Common ancestor client ID or undefined\n\n### getMultiSelectedBlockClientIds\n\nReturns the current multi-selection set of block client IDs, or an empty array if there is no multi-selection.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `Array`: Multi-selected block client IDs.\n\n### getMultiSelectedBlocks\n\nReturns the current multi-selection set of blocks, or an empty array if there is no multi-selection.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `Array`: Multi-selected block objects.\n\n### getMultiSelectedBlocksEndClientId\n\nReturns the client ID of the block which ends the multi-selection set, or null if there is no multi-selection.\n\nThis is not necessarily the last client ID in the selection.\n\n_Related_\n\n-   getLastMultiSelectedBlockClientId\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `?string`: Client ID of block ending multi-selection.\n\n### getMultiSelectedBlocksStartClientId\n\nReturns the client ID of the block which begins the multi-selection set, or null if there is no multi-selection.\n\nThis is not necessarily the first client ID in the selection.\n\n_Related_\n\n-   getFirstMultiSelectedBlockClientId\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `?string`: Client ID of block beginning multi-selection.\n\n### getNextBlockClientId\n\nReturns the next block's client ID from the given reference start ID. Defaults start to the selected block. Returns null if there is no next block.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _startClientId_ `?string`: Optional client ID of block from which to search.\n\n_Returns_\n\n-   `?string`: Adjacent block's client ID, or null if none exists.\n\n### getPatternsByBlockTypes\n\nReturns the list of patterns based on their declared `blockTypes` and a block's name. Patterns can use `blockTypes` to integrate in work flows like suggesting appropriate patterns in a Placeholder state(during insertion) or blocks transformations.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _blockNames_ `string|string[]`: Block's name or array of block names to find matching pattens.\n-   _rootClientId_ `?string`: Optional target root client ID.\n\n_Returns_\n\n-   `Array`: The list of matched block patterns based on declared `blockTypes` and block name.\n\n### getPreviousBlockClientId\n\nReturns the previous block's client ID from the given reference start ID. Defaults start to the selected block. Returns null if there is no previous block.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _startClientId_ `?string`: Optional client ID of block from which to search.\n\n_Returns_\n\n-   `?string`: Adjacent block's client ID, or null if none exists.\n\n### getSelectedBlock\n\nReturns the currently selected block, or null if there is no selected block.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `?Object`: Selected block.\n\n### getSelectedBlockClientId\n\nReturns the currently selected block client ID, or null if there is no selected block.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `?string`: Selected block client ID.\n\n### getSelectedBlockClientIds\n\nReturns the current selection set of block client IDs (multiselection or single selection).\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `Array`: Multi-selected block client IDs.\n\n### getSelectedBlockCount\n\nReturns the number of blocks currently selected in the post.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `number`: Number of blocks selected in the post.\n\n### getSelectedBlocksInitialCaretPosition\n\nReturns the initial caret position for the selected block. This position is to used to position the caret properly when the selected block changes. If the current block is not a RichText, having initial position set to 0 means \"focus block\"\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `0|-1|null`: Initial position.\n\n### getSelectionEnd\n\nReturns the current selection end block client ID, attribute key and text offset.\n\n_Parameters_\n\n-   _state_ `Object`: Block editor state.\n\n_Returns_\n\n-   `WPBlockSelection`: Selection end information.\n\n### getSelectionStart\n\nReturns the current selection start block client ID, attribute key and text offset.\n\n_Parameters_\n\n-   _state_ `Object`: Block editor state.\n\n_Returns_\n\n-   `WPBlockSelection`: Selection start information.\n\n### getSettings\n\nReturns the editor settings.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `Object`: The editor settings object.\n\n### getTemplate\n\nReturns the defined block template\n\n_Parameters_\n\n-   _state_ `boolean`:\n\n_Returns_\n\n-   `?Array`: Block Template.\n\n### getTemplateLock\n\nReturns the defined block template lock. Optionally accepts a root block client ID as context, otherwise defaulting to the global context.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _rootClientId_ `?string`: Optional block root client ID.\n\n_Returns_\n\n-   `string|false`: Block Template Lock\n\n### hasBlockMovingClientId\n\nReturns whether block moving mode is enabled.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `string`: Client Id of moving block.\n\n### hasDraggedInnerBlock\n\nReturns true if one of the block's inner blocks is dragged.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: Block client ID.\n-   _deep_ `boolean`: Perform a deep check.\n\n_Returns_\n\n-   `boolean`: Whether the block has an inner block dragged\n\n### hasInserterItems\n\nDetermines whether there are items to show in the inserter.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _rootClientId_ `?string`: Optional root client ID of block list.\n\n_Returns_\n\n-   `boolean`: Items that appear in inserter.\n\n### hasMultiSelection\n\nReturns true if a multi-selection has been made, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `boolean`: Whether multi-selection has been made.\n\n### hasSelectedBlock\n\nReturns true if there is a single selected block, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `boolean`: Whether a single block is selected.\n\n### hasSelectedInnerBlock\n\nReturns true if one of the block's inner blocks is selected.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: Block client ID.\n-   _deep_ `boolean`: Perform a deep check.\n\n_Returns_\n\n-   `boolean`: Whether the block has an inner block selected\n\n### isAncestorBeingDragged\n\nReturns whether a parent\/ancestor of the block is being dragged.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _clientId_ `string`: Client id for block to check.\n\n_Returns_\n\n-   `boolean`: Whether the block's ancestor is being dragged.\n\n### isAncestorMultiSelected\n\nReturns true if an ancestor of the block is multi-selected, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: Block client ID.\n\n_Returns_\n\n-   `boolean`: Whether an ancestor of the block is in multi-selection set.\n\n### isBlockBeingDragged\n\nReturns whether the block is being dragged.\n\nOnly returns true if the block is being directly dragged, not if the block is a child of a parent being dragged. See `isAncestorBeingDragged` for child blocks.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _clientId_ `string`: Client id for block to check.\n\n_Returns_\n\n-   `boolean`: Whether the block is being dragged.\n\n### isBlockHighlighted\n\nReturns true if the current highlighted block matches the block clientId.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _clientId_ `string`: The block to check.\n\n_Returns_\n\n-   `boolean`: Whether the block is currently highlighted.\n\n### isBlockInsertionPointVisible\n\nReturns true if we should show the block insertion point.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `?boolean`: Whether the insertion point is visible or not.\n\n### isBlockMultiSelected\n\nReturns true if the client ID occurs within the block multi-selection, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: Block client ID.\n\n_Returns_\n\n-   `boolean`: Whether block is in multi-selection set.\n\n### isBlockSelected\n\nReturns true if the block corresponding to the specified client ID is currently selected and no multi-selection exists, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: Block client ID.\n\n_Returns_\n\n-   `boolean`: Whether block is selected and multi-selection exists.\n\n### isBlockValid\n\nReturns whether a block is valid or not.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: Block client ID.\n\n_Returns_\n\n-   `boolean`: Is Valid.\n\n### isBlockVisible\n\nTells if the block is visible on the canvas or not.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _clientId_ `Object`: Client Id of the block.\n\n_Returns_\n\n-   `boolean`: True if the block is visible.\n\n### isBlockWithinSelection\n\nReturns true if the block corresponding to the specified client ID is currently selected but isn't the last of the selected blocks. Here \"last\" refers to the block sequence in the document, _not_ the sequence of multi-selection, which is why `state.selectionEnd` isn't used.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: Block client ID.\n\n_Returns_\n\n-   `boolean`: Whether block is selected and not the last in the selection.\n\n### isCaretWithinFormattedText\n\n> **Deprecated**\n\nReturns true if the caret is within formatted text, or false otherwise.\n\n_Returns_\n\n-   `boolean`: Whether the caret is within formatted text.\n\n### isDraggingBlocks\n\nReturns true if the user is dragging blocks, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether user is dragging blocks.\n\n### isFirstMultiSelectedBlock\n\nReturns true if a multi-selection exists, and the block corresponding to the specified client ID is the first block of the multi-selection set, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n-   _clientId_ `string`: Block client ID.\n\n_Returns_\n\n-   `boolean`: Whether block is first in multi-selection.\n\n### isGroupable\n\nIndicates if the provided blocks(by client ids) are groupable. We need to have at least one block, have a grouping block name set and be able to remove these blocks.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _clientIds_ `string[]`: Block client ids. If not passed the selected blocks client ids will be used.\n\n_Returns_\n\n-   `boolean`: True if the blocks are groupable.\n\n### isLastBlockChangePersistent\n\nReturns true if the most recent block change is be considered persistent, or false otherwise. A persistent change is one committed by BlockEditorProvider via its `onChange` callback, in addition to `onInput`.\n\n_Parameters_\n\n-   _state_ `Object`: Block editor state.\n\n_Returns_\n\n-   `boolean`: Whether the most recent block change was persistent.\n\n### isMultiSelecting\n\nWhether in the process of multi-selecting or not. This flag is only true while the multi-selection is being selected (by mouse move), and is false once the multi-selection has been settled.\n\n_Related_\n\n-   hasMultiSelection\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: True if multi-selecting, false if not.\n\n### isNavigationMode\n\nReturns whether the navigation mode is enabled.\n\n_Parameters_\n\n-   _state_ `Object`: Editor state.\n\n_Returns_\n\n-   `boolean`: Is navigation mode enabled.\n\n### isSelectionEnabled\n\nSelector that returns if multi-selection is enabled or not.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: True if it should be possible to multi-select blocks, false if multi-selection is disabled.\n\n### isTyping\n\nReturns true if the user is typing, or false otherwise.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n\n_Returns_\n\n-   `boolean`: Whether user is typing.\n\n### isUngroupable\n\nIndicates if a block is ungroupable. A block is ungroupable if it is a single grouping block with inner blocks. If a block has an `ungroup` transform, it is also ungroupable, without the requirement of being the default grouping block. Additionally a block can only be ungrouped if it has inner blocks and can be removed.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _clientId_ `string`: Client Id of the block. If not passed the selected block's client id will be used.\n\n_Returns_\n\n-   `boolean`: True if the block is ungroupable.\n\n### isValidTemplate\n\nReturns whether the blocks matches the template or not.\n\n_Parameters_\n\n-   _state_ `boolean`:\n\n_Returns_\n\n-   `?boolean`: Whether the template is valid or not.\n\n### wasBlockJustInserted\n\nTells if the block with the passed clientId was just inserted.\n\n_Parameters_\n\n-   _state_ `Object`: Global application state.\n-   _clientId_ `Object`: Client Id of the block.\n-   _source_ `?string`: Optional insertion source of the block.\n\n_Returns_\n\n-   `boolean`: True if the block matches the last block inserted from the specified source.\n\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/block-editor\/src\/store\/selectors.js) -->\n\n## Actions\n\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/block-editor\/src\/store\/actions.js) -->\n\n### clearSelectedBlock\n\nAction that clears the block selection.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### duplicateBlocks\n\nAction that duplicates a list of blocks.\n\n_Parameters_\n\n-   _clientIds_ `string[]`:\n-   _updateSelection_ `boolean`:\n\n### enterFormattedText\n\n> **Deprecated**\n\nReturns an action object used in signalling that the caret has entered formatted text.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### exitFormattedText\n\n> **Deprecated**\n\nReturns an action object used in signalling that the user caret has exited formatted text.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### flashBlock\n\nAction that \"flashes\" the block with a given `clientId` by rhythmically highlighting it.\n\n_Parameters_\n\n-   _clientId_ `string`: Target block client ID.\n\n### hideInsertionPoint\n\nAction that hides the insertion point.\n\n### insertAfterBlock\n\nAction that inserts a default block after a given block.\n\n_Parameters_\n\n-   _clientId_ `string`:\n\n### insertBeforeBlock\n\nAction that inserts a default block before a given block.\n\n_Parameters_\n\n-   _clientId_ `string`:\n\n### insertBlock\n\nAction that inserts a single block, optionally at a specific index respective a root block list.\n\nOnly allowed blocks are inserted. The action may fail silently for blocks that are not allowed or if a templateLock is active on the block list.\n\n_Parameters_\n\n-   _block_ `Object`: Block object to insert.\n-   _index_ `?number`: Index at which block should be inserted.\n-   _rootClientId_ `?string`: Optional root client ID of block list on which to insert.\n-   _updateSelection_ `?boolean`: If true block selection will be updated. If false, block selection will not change. Defaults to true.\n-   _meta_ `?Object`: Optional Meta values to be passed to the action object.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### insertBlocks\n\nAction that inserts an array of blocks, optionally at a specific index respective a root block list.\n\nOnly allowed blocks are inserted. The action may fail silently for blocks that are not allowed or if a templateLock is active on the block list.\n\n_Parameters_\n\n-   _blocks_ `Object[]`: Block objects to insert.\n-   _index_ `?number`: Index at which block should be inserted.\n-   _rootClientId_ `?string`: Optional root client ID of block list on which to insert.\n-   _updateSelection_ `?boolean`: If true block selection will be updated. If false, block selection will not change. Defaults to true.\n-   _initialPosition_ `0|-1|null`: Initial focus position. Setting it to null prevent focusing the inserted block.\n-   _meta_ `?Object`: Optional Meta values to be passed to the action object.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### insertDefaultBlock\n\nAction that adds a new block of the default type to the block list.\n\n_Parameters_\n\n-   _attributes_ `?Object`: Optional attributes of the block to assign.\n-   _rootClientId_ `?string`: Optional root client ID of block list on which to append.\n-   _index_ `?number`: Optional index where to insert the default block.\n\n### mergeBlocks\n\nAction that merges two blocks.\n\n_Parameters_\n\n-   _firstBlockClientId_ `string`: Client ID of the first block to merge.\n-   _secondBlockClientId_ `string`: Client ID of the second block to merge.\n\n### moveBlocksDown\n\nUndocumented declaration.\n\n### moveBlocksToPosition\n\nAction that moves given blocks to a new position.\n\n_Parameters_\n\n-   _clientIds_ `?string`: The client IDs of the blocks.\n-   _fromRootClientId_ `?string`: Root client ID source.\n-   _toRootClientId_ `?string`: Root client ID destination.\n-   _index_ `number`: The index to move the blocks to.\n\n### moveBlocksUp\n\nUndocumented declaration.\n\n### moveBlockToPosition\n\nAction that moves given block to a new position.\n\n_Parameters_\n\n-   _clientId_ `?string`: The client ID of the block.\n-   _fromRootClientId_ `?string`: Root client ID source.\n-   _toRootClientId_ `?string`: Root client ID destination.\n-   _index_ `number`: The index to move the block to.\n\n### multiSelect\n\nAction that changes block multi-selection.\n\n_Parameters_\n\n-   _start_ `string`: First block of the multi selection.\n-   _end_ `string`: Last block of the multiselection.\n-   _\\_\\_experimentalInitialPosition_ `number|null`: Optional initial position. Pass as null to skip focus within editor canvas.\n\n### receiveBlocks\n\n> **Deprecated**\n\nReturns an action object used in signalling that blocks have been received. Unlike resetBlocks, these should be appended to the existing known set, not replacing.\n\n_Parameters_\n\n-   _blocks_ `Object[]`: Array of block objects.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### registerInserterMediaCategory\n\nRegisters a new inserter media category. Once registered, the media category is available in the inserter's media tab.\n\nThe following interfaces are used:\n\n_Type Definition_\n\n-   _InserterMediaRequest_ `Object`: Interface for inserter media requests.\n\n_Properties_\n\n-   _per_page_ `number`: How many items to fetch per page.\n-   _search_ `string`: The search term to use for filtering the results.\n\n_Type Definition_\n\n-   _InserterMediaItem_ `Object`: Interface for inserter media responses. Any media resource should map their response to this interface, in order to create the core WordPress media blocks (image, video, audio).\n\n_Properties_\n\n-   _title_ `string`: The title of the media item.\n-   _url_ \\`string: The source url of the media item.\n-   _previewUrl_ `[string]`: The preview source url of the media item to display in the media list.\n-   _id_ `[number]`: The WordPress id of the media item.\n-   _sourceId_ `[number|string]`: The id of the media item from external source.\n-   _alt_ `[string]`: The alt text of the media item.\n-   _caption_ `[string]`: The caption of the media item.\n\n_Usage_\n\n```js\nwp.data.dispatch( 'core\/block-editor' ).registerInserterMediaCategory( {\n\tname: 'openverse',\n\tlabels: {\n\t\tname: 'Openverse',\n\t\tsearch_items: 'Search Openverse',\n\t},\n\tmediaType: 'image',\n\tasync fetch( query = {} ) {\n\t\tconst defaultArgs = {\n\t\t\tmature: false,\n\t\t\texcluded_source: 'flickr,inaturalist,wikimedia',\n\t\t\tlicense: 'pdm,cc0',\n\t\t};\n\t\tconst finalQuery = { ...query, ...defaultArgs };\n\t\t\/\/ Sometimes you might need to map the supported request params according to `InserterMediaRequest`.\n\t\t\/\/ interface. In this example the `search` query param is named `q`.\n\t\tconst mapFromInserterMediaRequest = {\n\t\t\tper_page: 'page_size',\n\t\t\tsearch: 'q',\n\t\t};\n\t\tconst url = new URL( 'https:\/\/api.openverse.engineering\/v1\/images\/' );\n\t\tObject.entries( finalQuery ).forEach( ( [ key, value ] ) => {\n\t\t\tconst queryKey = mapFromInserterMediaRequest[ key ] || key;\n\t\t\turl.searchParams.set( queryKey, value );\n\t\t} );\n\t\tconst response = await window.fetch( url, {\n\t\t\theaders: {\n\t\t\t\t'User-Agent': 'WordPress\/inserter-media-fetch',\n\t\t\t},\n\t\t} );\n\t\tconst jsonResponse = await response.json();\n\t\tconst results = jsonResponse.results;\n\t\treturn results.map( ( result ) => ( {\n\t\t\t...result,\n\t\t\t\/\/ If your response result includes an `id` prop that you want to access later, it should\n\t\t\t\/\/ be mapped to `InserterMediaItem`'s `sourceId` prop. This can be useful if you provide\n\t\t\t\/\/ a report URL getter.\n\t\t\t\/\/ Additionally you should always clear the `id` value of your response results because\n\t\t\t\/\/ it is used to identify WordPress media items.\n\t\t\tsourceId: result.id,\n\t\t\tid: undefined,\n\t\t\tcaption: result.caption,\n\t\t\tpreviewUrl: result.thumbnail,\n\t\t} ) );\n\t},\n\tgetReportUrl: ( { sourceId } ) =>\n\t\t`https:\/\/wordpress.org\/openverse\/image\/${ sourceId }\/report\/`,\n\tisExternalResource: true,\n} );\n```\n\n_Parameters_\n\n-   _category_ `InserterMediaCategory`: The inserter media category to register.\n\n_Type Definition_\n\n-   _InserterMediaCategory_ `Object`: Interface for inserter media category.\n\n_Properties_\n\n-   _name_ `string`: The name of the media category, that should be unique among all media categories.\n-   _labels_ `Object`: Labels for the media category.\n-   _labels.name_ `string`: General name of the media category. It's used in the inserter media items list.\n-   _labels.search_items_ `[string]`: Label for searching items. Default is \u2018Search Posts\u2019 \/ \u2018Search Pages\u2019.\n-   _mediaType_ `('image'|'audio'|'video')`: The media type of the media category.\n-   _fetch_ `(InserterMediaRequest) => Promise<InserterMediaItem[]>`: The function to fetch media items for the category.\n-   _getReportUrl_ `[(InserterMediaItem) => string]`: If the media category supports reporting media items, this function should return the report url for the media item. It accepts the `InserterMediaItem` as an argument.\n-   _isExternalResource_ `[boolean]`: If the media category is an external resource, this should be set to true. This is used to avoid making a request to the external resource when the user\n\n### removeBlock\n\nReturns an action object used in signalling that the block with the specified client ID is to be removed.\n\n_Parameters_\n\n-   _clientId_ `string`: Client ID of block to remove.\n-   _selectPrevious_ `boolean`: True if the previous block should be selected when a block is removed.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### removeBlocks\n\nYields action objects used in signalling that the blocks corresponding to the set of specified client IDs are to be removed.\n\n_Parameters_\n\n-   _clientIds_ `string|string[]`: Client IDs of blocks to remove.\n-   _selectPrevious_ `boolean`: True if the previous block or the immediate parent (if no previous block exists) should be selected when a block is removed.\n\n### replaceBlock\n\nAction that replaces a single block with one or more replacement blocks.\n\n_Parameters_\n\n-   _clientId_ `(string|string[])`: Block client ID to replace.\n-   _block_ `(Object|Object[])`: Replacement block(s).\n\n_Returns_\n\n-   `Object`: Action object.\n\n### replaceBlocks\n\nAction that replaces given blocks with one or more replacement blocks.\n\n_Parameters_\n\n-   _clientIds_ `(string|string[])`: Block client ID(s) to replace.\n-   _blocks_ `(Object|Object[])`: Replacement block(s).\n-   _indexToSelect_ `number`: Index of replacement block to select.\n-   _initialPosition_ `0|-1|null`: Index of caret after in the selected block after the operation.\n-   _meta_ `?Object`: Optional Meta values to be passed to the action object.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### replaceInnerBlocks\n\nReturns an action object used in signalling that the inner blocks with the specified client ID should be replaced.\n\n_Parameters_\n\n-   _rootClientId_ `string`: Client ID of the block whose InnerBlocks will re replaced.\n-   _blocks_ `Object[]`: Block objects to insert as new InnerBlocks\n-   _updateSelection_ `?boolean`: If true block selection will be updated. If false, block selection will not change. Defaults to false.\n-   _initialPosition_ `0|-1|null`: Initial block position.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### resetBlocks\n\nAction that resets blocks state to the specified array of blocks, taking precedence over any other content reflected as an edit in state.\n\n_Parameters_\n\n-   _blocks_ `Array`: Array of blocks.\n\n### resetSelection\n\nReturns an action object used in signalling that selection state should be reset to the specified selection.\n\n_Parameters_\n\n-   _selectionStart_ `WPBlockSelection`: The selection start.\n-   _selectionEnd_ `WPBlockSelection`: The selection end.\n-   _initialPosition_ `0|-1|null`: Initial block position.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### selectBlock\n\nReturns an action object used in signalling that the block with the specified client ID has been selected, optionally accepting a position value reflecting its selection directionality. An initialPosition of -1 reflects a reverse selection.\n\n_Parameters_\n\n-   _clientId_ `string`: Block client ID.\n-   _initialPosition_ `0|-1|null`: Optional initial position. Pass as -1 to reflect reverse selection.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### selectionChange\n\nAction that changes the position of the user caret.\n\n_Parameters_\n\n-   _clientId_ `string|WPSelection`: The selected block client ID.\n-   _attributeKey_ `string`: The selected block attribute key.\n-   _startOffset_ `number`: The start offset.\n-   _endOffset_ `number`: The end offset.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### selectNextBlock\n\nYields action objects used in signalling that the block following the given clientId should be selected.\n\n_Parameters_\n\n-   _clientId_ `string`: Block client ID.\n\n### selectPreviousBlock\n\nYields action objects used in signalling that the block preceding the given clientId (or optionally, its first parent from bottom to top) should be selected.\n\n_Parameters_\n\n-   _clientId_ `string`: Block client ID.\n-   _fallbackToParent_ `boolean`: If true, select the first parent if there is no previous block.\n\n### setBlockEditingMode\n\nSets the block editing mode for a given block.\n\n_Related_\n\n-   useBlockEditingMode\n\n_Parameters_\n\n-   _clientId_ `string`: The block client ID, or `''` for the root container.\n-   _mode_ `BlockEditingMode`: The block editing mode. One of `'disabled'`, `'contentOnly'`, or `'default'`.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### setBlockMovingClientId\n\nAction that enables or disables the block moving mode.\n\n_Parameters_\n\n-   _hasBlockMovingClientId_ `string|null`: Enable\/Disable block moving mode.\n\n### setBlockVisibility\n\nAction that sets whether given blocks are visible on the canvas.\n\n_Parameters_\n\n-   _updates_ `Record<string,boolean>`: For each block's clientId, its new visibility setting.\n\n### setHasControlledInnerBlocks\n\nAction that sets whether a block has controlled inner blocks.\n\n_Parameters_\n\n-   _clientId_ `string`: The block's clientId.\n-   _hasControlledInnerBlocks_ `boolean`: True if the block's inner blocks are controlled.\n\n### setNavigationMode\n\nAction that enables or disables the navigation mode.\n\n_Parameters_\n\n-   _isNavigationMode_ `boolean`: Enable\/Disable navigation mode.\n\n### setTemplateValidity\n\nAction that resets the template validity.\n\n_Parameters_\n\n-   _isValid_ `boolean`: template validity flag.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### showInsertionPoint\n\nAction that shows the insertion point.\n\n_Parameters_\n\n-   _rootClientId_ `?string`: Optional root client ID of block list on which to insert.\n-   _index_ `?number`: Index at which block should be inserted.\n-   _\\_\\_unstableOptions_ `?Object`: Additional options.\n\n_Returns_\n\n-   `Object`: Action object.\n\n_Properties_\n\n-   _\\_\\_unstableWithInserter_ `boolean`: Whether or not to show an inserter button.\n-   _operation_ `WPDropOperation`: The operation to perform when applied, either 'insert' or 'replace' for now.\n\n### startDraggingBlocks\n\nReturns an action object used in signalling that the user has begun to drag blocks.\n\n_Parameters_\n\n-   _clientIds_ `string[]`: An array of client ids being dragged\n\n_Returns_\n\n-   `Object`: Action object.\n\n### startMultiSelect\n\nAction that starts block multi-selection.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### startTyping\n\nReturns an action object used in signalling that the user has begun to type.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### stopDraggingBlocks\n\nReturns an action object used in signalling that the user has stopped dragging blocks.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### stopMultiSelect\n\nAction that stops block multi-selection.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### stopTyping\n\nReturns an action object used in signalling that the user has stopped typing.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### synchronizeTemplate\n\nAction that synchronizes the template with the list of blocks.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### toggleBlockHighlight\n\nAction that toggles the highlighted block state.\n\n_Parameters_\n\n-   _clientId_ `string`: The block's clientId.\n-   _isHighlighted_ `boolean`: The highlight state.\n\n### toggleBlockMode\n\nReturns an action object used to toggle the block editing mode between visual and HTML modes.\n\n_Parameters_\n\n-   _clientId_ `string`: Block client ID.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### toggleSelection\n\nAction that enables or disables block selection.\n\n_Parameters_\n\n-   _isSelectionEnabled_ `[boolean]`: Whether block selection should be enabled.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### unsetBlockEditingMode\n\nClears the block editing mode for a given block.\n\n_Related_\n\n-   useBlockEditingMode\n\n_Parameters_\n\n-   _clientId_ `string`: The block client ID, or `''` for the root container.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### updateBlock\n\nAction that updates the block with the specified client ID.\n\n_Parameters_\n\n-   _clientId_ `string`: Block client ID.\n-   _updates_ `Object`: Block attributes to be merged.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### updateBlockAttributes\n\nAction that updates attributes of multiple blocks with the specified client IDs.\n\n_Parameters_\n\n-   _clientIds_ `string|string[]`: Block client IDs.\n-   _attributes_ `Object`: Block attributes to be merged. Should be keyed by clientIds if uniqueByBlock is true.\n-   _uniqueByBlock_ `boolean`: true if each block in clientIds array has a unique set of attributes\n\n_Returns_\n\n-   `Object`: Action object.\n\n### updateBlockListSettings\n\nAction that changes the nested settings of a given block.\n\n_Parameters_\n\n-   _clientId_ `string`: Client ID of the block whose nested setting are being received.\n-   _settings_ `Object`: Object with the new settings for the nested block.\n\n_Returns_\n\n-   `Object`: Action object\n\n### updateSettings\n\nAction that updates the block editor settings.\n\n_Parameters_\n\n-   _settings_ `Object`: Updated settings\n\n_Returns_\n\n-   `Object`: Action object\n\n### validateBlocksToTemplate\n\nBlock validity is a function of blocks state (at the point of a reset) and the template setting. As a compromise to its placement across distinct parts of state, it is implemented here as a side effect of the block reset action.\n\n_Parameters_\n\n-   _blocks_ `Array`: Array of blocks.\n\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/block-editor\/src\/store\/actions.js) -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/data-core-viewport.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">The Viewport Data<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Namespace: <code>core\/viewport<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/viewport\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isViewportMatch<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the viewport matches the given query, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { store as viewportStore } from '@wordpress\/viewport';\nimport { useSelect } from '@wordpress\/data';\nimport { __ } from '@wordpress\/i18n';\nconst ExampleComponent = () => {\n\tconst isMobile = useSelect(\n\t\t( select ) => select( viewportStore ).isViewportMatch( '&lt; small' ),\n\t\t&#91;]\n\t);\n\n\treturn isMobile ? (\n\t\t<div>{ __( 'Mobile' ) }<\/div>\n\t) : (\n\t\t<div>{ __( 'Not Mobile' ) }<\/div>\n\t);\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>Object<\/code>: Viewport state object.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>query<\/em> <code>string<\/code>: Query string. Includes operator and breakpoint name, space separated. Operator defaults to >=.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether viewport matches query.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/viewport\/src\/store\/selectors.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Actions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The actions in this package shouldn't be used directly.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/viewport\/src\/store\/actions.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Nothing to document.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/viewport\/src\/store\/actions.js) -->\n<!-- \/wp:html -->",
        "markdown": "# The Viewport Data\n\nNamespace: `core\/viewport`.\n\n## Selectors\n\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/viewport\/src\/store\/selectors.js) -->\n\n### isViewportMatch\n\nReturns true if the viewport matches the given query, or false otherwise.\n\n_Usage_\n\n```js\nimport { store as viewportStore } from '@wordpress\/viewport';\nimport { useSelect } from '@wordpress\/data';\nimport { __ } from '@wordpress\/i18n';\nconst ExampleComponent = () => {\n\tconst isMobile = useSelect(\n\t\t( select ) => select( viewportStore ).isViewportMatch( '< small' ),\n\t\t[]\n\t);\n\n\treturn isMobile ? (\n\t\t<div>{ __( 'Mobile' ) }<\/div>\n\t) : (\n\t\t<div>{ __( 'Not Mobile' ) }<\/div>\n\t);\n};\n```\n\n_Parameters_\n\n-   _state_ `Object`: Viewport state object.\n-   _query_ `string`: Query string. Includes operator and breakpoint name, space separated. Operator defaults to >=.\n\n_Returns_\n\n-   `boolean`: Whether viewport matches query.\n\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/viewport\/src\/store\/selectors.js) -->\n\n## Actions\n\nThe actions in this package shouldn't be used directly.\n\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/viewport\/src\/store\/actions.js) -->\n\nNothing to document.\n\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/viewport\/src\/store\/actions.js) -->\n"
    },
    {
        "path": "\/markdown\/reference-guides\/data\/data-core.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">WordPress Core Data<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Namespace: <code>core<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Selectors<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/core-data\/src\/selectors.ts) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">canUser<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether the current user can perform the given action on the given REST resource.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Calling this may trigger an OPTIONS request to the REST API via the <code>canUser()<\/code> resolver.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/developer.wordpress.org\/rest-api\/reference\/\">https:\/\/developer.wordpress.org\/rest-api\/reference\/<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>action<\/em> <code>string<\/code>: Action to check. One of: 'create', 'read', 'update', 'delete'.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>resource<\/em> <code>string<\/code>: REST resource to check, e.g. 'media' or 'posts'.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>id<\/em> <code>EntityRecordKey<\/code>: Optional ID of the rest resource to check.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean | undefined<\/code>: Whether or not the user can perform the action, or <code>undefined<\/code> if the OPTIONS request is still being made.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">canUserEditEntityRecord<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns whether the current user can edit the given entity.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Calling this may trigger an OPTIONS request to the REST API via the <code>canUser()<\/code> resolver.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/developer.wordpress.org\/rest-api\/reference\/\">https:\/\/developer.wordpress.org\/rest-api\/reference\/<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>recordId<\/em> <code>EntityRecordKey<\/code>: Record's id.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean | undefined<\/code>: Whether or not the user can edit, or <code>undefined<\/code> if the OPTIONS request is still being made.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getAuthors<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> since 11.3. Callers should use <code>select( 'core' ).getUsers({ who: 'authors' })<\/code> instead.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns all available authors.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>query<\/em> <code>GetRecordsHttpQuery<\/code>: Optional object of query parameters to include with request. For valid query parameters see the <a href=\"https:\/\/developer.wordpress.org\/rest-api\/reference\/users\/\">Users page<\/a> in the REST API Handbook and see the arguments for <a href=\"https:\/\/developer.wordpress.org\/rest-api\/reference\/users\/#list-users\">List Users<\/a> and <a href=\"https:\/\/developer.wordpress.org\/rest-api\/reference\/users\/#retrieve-a-user\">Retrieve a User<\/a>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>ET.User[]<\/code>: Authors list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getAutosave<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the autosave for the post and author.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>postType<\/em> <code>string<\/code>: The type of the parent post.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>postId<\/em> <code>EntityRecordKey<\/code>: The id of the parent post.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>authorId<\/em> <code>EntityRecordKey<\/code>: The id of the author.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>EntityRecord | undefined<\/code>: The autosave for the post and author.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getAutosaves<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the latest autosaves for the post.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>May return multiple autosaves since the backend stores one autosave per author for each post.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>postType<\/em> <code>string<\/code>: The type of the parent post.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>postId<\/em> <code>EntityRecordKey<\/code>: The id of the parent post.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array&lt; any > | undefined<\/code>: An array of autosaves for the post, or undefined if there is none.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockPatternCategories<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Retrieve the list of registered block pattern categories.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array&lt; any ><\/code>: Block pattern category list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getBlockPatterns<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Retrieve the list of registered block patterns.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array&lt; any ><\/code>: Block pattern list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getCurrentTheme<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Return the current theme.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>any<\/code>: The current theme.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getCurrentThemeGlobalStylesRevisions<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> since WordPress 6.5.0. Callers should use <code>select( 'core' ).getRevisions( 'root', 'globalStyles', ${ recordKey } )<\/code> instead, where <code>recordKey<\/code> is the id of the global styles parent post.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns the revisions of the current global styles theme.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array&lt; object > | null<\/code>: The current global styles.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getCurrentUser<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the current user.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>undefined&lt; 'edit' ><\/code>: Current user object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getDefaultTemplateId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the default template use to render a given query.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>query<\/em> <code>TemplateQuery<\/code>: Query.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>string<\/code>: The default template id for the given query.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEditedEntityRecord<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the specified entity record, merged with its edits.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>recordId<\/em> <code>EntityRecordKey<\/code>: Record ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>undefined&lt; EntityRecord > | undefined<\/code>: The entity record, merged with its edits.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEmbedPreview<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the embed preview for the given URL.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>url<\/em> <code>string<\/code>: Embedded URL.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>any<\/code>: Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEntitiesByKind<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> since WordPress 6.0. Use getEntitiesConfig instead<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns the loaded entities for the given kind.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array&lt; any ><\/code>: Array of entities with config matching kind.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEntitiesConfig<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the loaded entities for the given kind.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array&lt; any ><\/code>: Array of entities with config matching kind.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEntity<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> since WordPress 6.0. Use getEntityConfig instead<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns the entity config given its kind and name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>any<\/code>: Entity config<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEntityConfig<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the entity config given its kind and name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>any<\/code>: Entity config<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEntityRecord<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the Entity's record object by key. Returns <code>null<\/code> if the value is not yet received, undefined if the value entity is known to not exist, or the entity object if it exists and is received.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>key<\/em> <code>EntityRecordKey<\/code>: Record's key<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>query<\/em> <code>GetRecordsHttpQuery<\/code>: Optional query. If requesting specific fields, fields must always include the ID. For valid query parameters see the <a href=\"https:\/\/developer.wordpress.org\/rest-api\/reference\/\">Reference<\/a> in the REST API Handbook and select the entity kind. Then see the arguments available \"Retrieve a [Entity kind]\".<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>EntityRecord | undefined<\/code>: Record.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEntityRecordEdits<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the specified entity record's edits.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>recordId<\/em> <code>EntityRecordKey<\/code>: Record ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Optional&lt; any ><\/code>: The entity record's edits.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEntityRecordNonTransientEdits<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the specified entity record's non transient edits.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Transient edits don't create an undo level, and are not considered for change detection. They are defined in the entity's config.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>recordId<\/em> <code>EntityRecordKey<\/code>: Record ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Optional&lt; any ><\/code>: The entity record's non transient edits.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEntityRecords<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the Entity's records.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>query<\/em> <code>GetRecordsHttpQuery<\/code>: Optional terms query. If requesting specific fields, fields must always include the ID. For valid query parameters see the <a href=\"https:\/\/developer.wordpress.org\/rest-api\/reference\/\">Reference<\/a> in the REST API Handbook and select the entity kind. Then see the arguments available for \"List [Entity kind]s\".<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>EntityRecord[] | null<\/code>: Records.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEntityRecordsTotalItems<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the Entity's total available records for a given query (ignoring pagination).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>query<\/em> <code>GetRecordsHttpQuery<\/code>: Optional terms query. If requesting specific fields, fields must always include the ID. For valid query parameters see the <a href=\"https:\/\/developer.wordpress.org\/rest-api\/reference\/\">Reference<\/a> in the REST API Handbook and select the entity kind. Then see the arguments available for \"List [Entity kind]s\".<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>number | null<\/code>: number | null.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getEntityRecordsTotalPages<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the number of available pages for the given query.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>query<\/em> <code>GetRecordsHttpQuery<\/code>: Optional terms query. If requesting specific fields, fields must always include the ID. For valid query parameters see the <a href=\"https:\/\/developer.wordpress.org\/rest-api\/reference\/\">Reference<\/a> in the REST API Handbook and select the entity kind. Then see the arguments available for \"List [Entity kind]s\".<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>number | null<\/code>: number | null.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getLastEntityDeleteError<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the specified entity record's last delete error.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>recordId<\/em> <code>EntityRecordKey<\/code>: Record ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>any<\/code>: The entity record's save error.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getLastEntitySaveError<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the specified entity record's last save error.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>recordId<\/em> <code>EntityRecordKey<\/code>: Record ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>any<\/code>: The entity record's save error.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getRawEntityRecord<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns the entity's record object by key, with its attributes mapped to their raw values.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>key<\/em> <code>EntityRecordKey<\/code>: Record's key.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>EntityRecord | undefined<\/code>: Object with the entity's raw attributes.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getRedoEdit<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> since 6.3<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns the next edit from the current undo offset for the entity records edits history, if any.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Optional&lt; any ><\/code>: The edit.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getReferenceByDistinctEdits<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns a new reference when edited values have changed. This is useful in inferring where an edit has been made between states by comparison of the return values using strict equality.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Usage<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const hasEditOccurred = (\n   getReferenceByDistinctEdits( beforeState ) !==\n   getReferenceByDistinctEdits( afterState )\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> Editor state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>A value whose reference will change only when an edit occurs.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getRevision<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns a single, specific revision of a parent entity.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>recordKey<\/em> <code>EntityRecordKey<\/code>: The key of the entity record whose revisions you want to fetch.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>revisionKey<\/em> <code>EntityRecordKey<\/code>: The revision's key.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>query<\/em> <code>GetRecordsHttpQuery<\/code>: Optional query. If requesting specific fields, fields must always include the ID. For valid query parameters see revisions schema in <a href=\"https:\/\/developer.wordpress.org\/rest-api\/reference\/\">the REST API Handbook<\/a>. Then see the arguments available \"Retrieve a [entity kind]\".<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>RevisionRecord | Record&lt; PropertyKey, never > | undefined<\/code>: Record.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getRevisions<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an entity's revisions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>recordKey<\/em> <code>EntityRecordKey<\/code>: The key of the entity record whose revisions you want to fetch.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>query<\/em> <code>GetRecordsHttpQuery<\/code>: Optional query. If requesting specific fields, fields must always include the ID. For valid query parameters see revisions schema in <a href=\"https:\/\/developer.wordpress.org\/rest-api\/reference\/\">the REST API Handbook<\/a>. Then see the arguments available \"Retrieve a [Entity kind]\".<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>RevisionRecord[] | null<\/code>: Record.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getThemeSupports<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Return theme supports data in the index.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>any<\/code>: Index data.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getUndoEdit<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> since 6.3<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns the previous edit from the current undo offset for the entity records edits history, if any.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Optional&lt; any ><\/code>: The edit.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getUserPatternCategories<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Retrieve the registered user pattern categories.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Array&lt; UserPatternCategory ><\/code>: User patterns category array.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">getUserQueryResults<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns all the users returned by a query ID.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>queryID<\/em> <code>string<\/code>: Query ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>undefined&lt; 'edit' >[]<\/code>: Users list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasEditsForEntityRecord<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the specified entity record has edits, and false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>recordId<\/em> <code>EntityRecordKey<\/code>: Record ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the entity record has edits or not.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasEntityRecords<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if records have been received for the given set of parameters, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>query<\/em> <code>GetRecordsHttpQuery<\/code>: Optional terms query. For valid query parameters see the <a href=\"https:\/\/developer.wordpress.org\/rest-api\/reference\/\">Reference<\/a> in the REST API Handbook and select the entity kind. Then see the arguments available for \"List [Entity kind]s\".<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether entity records have been received.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasFetchedAutosaves<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the REST request for autosaves has completed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>postType<\/em> <code>string<\/code>: The type of the parent post.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>postId<\/em> <code>EntityRecordKey<\/code>: The id of the parent post.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: True if the REST request was completed. False otherwise.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasRedo<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if there is a next edit from the current undo offset for the entity records edits history, and false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether there is a next edit or not.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">hasUndo<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if there is a previous edit from the current undo offset for the entity records edits history, and false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether there is a previous edit or not.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isAutosavingEntityRecord<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the specified entity record is autosaving, and false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>recordId<\/em> <code>EntityRecordKey<\/code>: Record ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the entity record is autosaving or not.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isDeletingEntityRecord<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the specified entity record is deleting, and false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>recordId<\/em> <code>EntityRecordKey<\/code>: Record ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the entity record is deleting or not.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isPreviewEmbedFallback<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Determines if the returned preview is an oEmbed link fallback.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>WordPress can be configured to return a simple link to a URL if it is not embeddable. We need to be able to determine if a URL is embeddable or not, based on what we get back from the oEmbed preview API.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>url<\/em> <code>string<\/code>: Embedded URL.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Is the preview for the URL an oEmbed link fallback.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isRequestingEmbedPreview<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if a request is in progress for embed preview data, or false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: Data state.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>url<\/em> <code>string<\/code>: URL the preview would be for.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether a request is in progress for an embed preview.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">isSavingEntityRecord<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns true if the specified entity record is saving, and false otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>state<\/em> <code>State<\/code>: State tree.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Entity kind.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Entity name.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>recordId<\/em> <code>EntityRecordKey<\/code>: Record ID.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>boolean<\/code>: Whether the entity record is saving or not.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/core-data\/src\/selectors.ts) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Actions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/core-data\/src\/actions.js) -->\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">addEntities<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in adding new entities.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>entities<\/em> <code>Array<\/code>: Entities received.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">deleteEntityRecord<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action triggered to delete an entity record.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Kind of the deleted entity.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Name of the deleted entity.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>recordId<\/em> <code>string<\/code>: Record ID of the deleted entity.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>query<\/em> <code>?Object<\/code>: Special query parameters for the DELETE API call.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options<\/em> <code>[Object]<\/code>: Delete options.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options.__unstableFetch<\/em> <code>[Function]<\/code>: Internal use only. Function to call instead of <code>apiFetch()<\/code>. Must return a promise.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options.throwOnError<\/em> <code>[boolean]<\/code>: If false, this action suppresses all the exceptions. Defaults to false.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">editEntityRecord<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object that triggers an edit to an entity record.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Kind of the edited entity record.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Name of the edited entity record.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>recordId<\/em> <code>number|string<\/code>: Record ID of the edited entity record.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>edits<\/em> <code>Object<\/code>: The edits.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options<\/em> <code>Object<\/code>: Options for the edit.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options.undoIgnore<\/em> <code>[boolean]<\/code>: Whether to ignore the edit in undo history or not.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">receiveDefaultTemplateId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used to set the template for a given query.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>query<\/em> <code>Object<\/code>: The lookup query.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>templateId<\/em> <code>string<\/code>: The resolved template id.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">receiveEntityRecords<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that entity records have been received.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Kind of the received entity record.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Name of the received entity record.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>records<\/em> <code>Array|Object<\/code>: Records received.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>query<\/em> <code>?Object<\/code>: Query Object.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>invalidateCache<\/em> <code>?boolean<\/code>: Should invalidate query caches.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>edits<\/em> <code>?Object<\/code>: Edits to reset.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>meta<\/em> <code>?Object<\/code>: Meta information about pagination.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">receiveNavigationFallbackId<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object signalling that the fallback Navigation Menu id has been received.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>fallbackId<\/em> <code>integer<\/code>: the id of the fallback Navigation Menu<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">receiveRevisions<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action triggered to receive revision items.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Kind of the received entity record revisions.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Name of the received entity record revisions.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>recordKey<\/em> <code>number|string<\/code>: The key of the entity record whose revisions you want to fetch.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>records<\/em> <code>Array|Object<\/code>: Revisions received.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>query<\/em> <code>?Object<\/code>: Query Object.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>invalidateCache<\/em> <code>?boolean<\/code>: Should invalidate query caches.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>meta<\/em> <code>?Object<\/code>: Meta information about pagination.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">receiveThemeSupports<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> since WP 5.9, this is not useful anymore, use the selector direclty.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that the index has been received.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">receiveUploadPermissions<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>Deprecated<\/strong> since WP 5.9, use receiveUserPermission instead.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Returns an action object used in signalling that Upload permissions have been received.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>hasUploadPermissions<\/em> <code>boolean<\/code>: Does the user have permission to upload files?<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>Returns<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Object<\/code>: Action object.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">redo<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action triggered to redo the last undoed edit to an entity record, if any.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">saveEditedEntityRecord<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action triggered to save an entity record's edits.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Kind of the entity.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Name of the entity.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>recordId<\/em> <code>Object<\/code>: ID of the record.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options<\/em> <code>Object<\/code>: Saving options.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">saveEntityRecord<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action triggered to save an entity record.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Parameters<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><em>kind<\/em> <code>string<\/code>: Kind of the received entity.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>name<\/em> <code>string<\/code>: Name of the received entity.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>record<\/em> <code>Object<\/code>: Record to be saved.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options<\/em> <code>Object<\/code>: Saving options.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options.isAutosave<\/em> <code>[boolean]<\/code>: Whether this is an autosave.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options.__unstableFetch<\/em> <code>[Function]<\/code>: Internal use only. Function to call instead of <code>apiFetch()<\/code>. Must return a promise.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>options.throwOnError<\/em> <code>[boolean]<\/code>: If false, this action suppresses all the exceptions. Defaults to false.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">undo<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Action triggered to undo the last edit to an entity record, if any.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/core-data\/src\/actions.js) -->\n<!-- \/wp:html -->",
        "markdown": "# WordPress Core Data\n\nNamespace: `core`.\n\n## Selectors\n\n<!-- START TOKEN(Autogenerated selectors|..\/..\/..\/packages\/core-data\/src\/selectors.ts) -->\n\n### canUser\n\nReturns whether the current user can perform the given action on the given REST resource.\n\nCalling this may trigger an OPTIONS request to the REST API via the `canUser()` resolver.\n\n<https:\/\/developer.wordpress.org\/rest-api\/reference\/>\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n-   _action_ `string`: Action to check. One of: 'create', 'read', 'update', 'delete'.\n-   _resource_ `string`: REST resource to check, e.g. 'media' or 'posts'.\n-   _id_ `EntityRecordKey`: Optional ID of the rest resource to check.\n\n_Returns_\n\n-   `boolean | undefined`: Whether or not the user can perform the action, or `undefined` if the OPTIONS request is still being made.\n\n### canUserEditEntityRecord\n\nReturns whether the current user can edit the given entity.\n\nCalling this may trigger an OPTIONS request to the REST API via the `canUser()` resolver.\n\n<https:\/\/developer.wordpress.org\/rest-api\/reference\/>\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n-   _recordId_ `EntityRecordKey`: Record's id.\n\n_Returns_\n\n-   `boolean | undefined`: Whether or not the user can edit, or `undefined` if the OPTIONS request is still being made.\n\n### getAuthors\n\n> **Deprecated** since 11.3. Callers should use `select( 'core' ).getUsers({ who: 'authors' })` instead.\n\nReturns all available authors.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n-   _query_ `GetRecordsHttpQuery`: Optional object of query parameters to include with request. For valid query parameters see the [Users page](https:\/\/developer.wordpress.org\/rest-api\/reference\/users\/) in the REST API Handbook and see the arguments for [List Users](https:\/\/developer.wordpress.org\/rest-api\/reference\/users\/#list-users) and [Retrieve a User](https:\/\/developer.wordpress.org\/rest-api\/reference\/users\/#retrieve-a-user).\n\n_Returns_\n\n-   `ET.User[]`: Authors list.\n\n### getAutosave\n\nReturns the autosave for the post and author.\n\n_Parameters_\n\n-   _state_ `State`: State tree.\n-   _postType_ `string`: The type of the parent post.\n-   _postId_ `EntityRecordKey`: The id of the parent post.\n-   _authorId_ `EntityRecordKey`: The id of the author.\n\n_Returns_\n\n-   `EntityRecord | undefined`: The autosave for the post and author.\n\n### getAutosaves\n\nReturns the latest autosaves for the post.\n\nMay return multiple autosaves since the backend stores one autosave per author for each post.\n\n_Parameters_\n\n-   _state_ `State`: State tree.\n-   _postType_ `string`: The type of the parent post.\n-   _postId_ `EntityRecordKey`: The id of the parent post.\n\n_Returns_\n\n-   `Array< any > | undefined`: An array of autosaves for the post, or undefined if there is none.\n\n### getBlockPatternCategories\n\nRetrieve the list of registered block pattern categories.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n\n_Returns_\n\n-   `Array< any >`: Block pattern category list.\n\n### getBlockPatterns\n\nRetrieve the list of registered block patterns.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n\n_Returns_\n\n-   `Array< any >`: Block pattern list.\n\n### getCurrentTheme\n\nReturn the current theme.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n\n_Returns_\n\n-   `any`: The current theme.\n\n### getCurrentThemeGlobalStylesRevisions\n\n> **Deprecated** since WordPress 6.5.0. Callers should use `select( 'core' ).getRevisions( 'root', 'globalStyles', ${ recordKey } )` instead, where `recordKey` is the id of the global styles parent post.\n\nReturns the revisions of the current global styles theme.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n\n_Returns_\n\n-   `Array< object > | null`: The current global styles.\n\n### getCurrentUser\n\nReturns the current user.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n\n_Returns_\n\n-   `undefined< 'edit' >`: Current user object.\n\n### getDefaultTemplateId\n\nReturns the default template use to render a given query.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n-   _query_ `TemplateQuery`: Query.\n\n_Returns_\n\n-   `string`: The default template id for the given query.\n\n### getEditedEntityRecord\n\nReturns the specified entity record, merged with its edits.\n\n_Parameters_\n\n-   _state_ `State`: State tree.\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n-   _recordId_ `EntityRecordKey`: Record ID.\n\n_Returns_\n\n-   `undefined< EntityRecord > | undefined`: The entity record, merged with its edits.\n\n### getEmbedPreview\n\nReturns the embed preview for the given URL.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n-   _url_ `string`: Embedded URL.\n\n_Returns_\n\n-   `any`: Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.\n\n### getEntitiesByKind\n\n> **Deprecated** since WordPress 6.0. Use getEntitiesConfig instead\n\nReturns the loaded entities for the given kind.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n-   _kind_ `string`: Entity kind.\n\n_Returns_\n\n-   `Array< any >`: Array of entities with config matching kind.\n\n### getEntitiesConfig\n\nReturns the loaded entities for the given kind.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n-   _kind_ `string`: Entity kind.\n\n_Returns_\n\n-   `Array< any >`: Array of entities with config matching kind.\n\n### getEntity\n\n> **Deprecated** since WordPress 6.0. Use getEntityConfig instead\n\nReturns the entity config given its kind and name.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n\n_Returns_\n\n-   `any`: Entity config\n\n### getEntityConfig\n\nReturns the entity config given its kind and name.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n\n_Returns_\n\n-   `any`: Entity config\n\n### getEntityRecord\n\nReturns the Entity's record object by key. Returns `null` if the value is not yet received, undefined if the value entity is known to not exist, or the entity object if it exists and is received.\n\n_Parameters_\n\n-   _state_ `State`: State tree\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n-   _key_ `EntityRecordKey`: Record's key\n-   _query_ `GetRecordsHttpQuery`: Optional query. If requesting specific fields, fields must always include the ID. For valid query parameters see the [Reference](https:\/\/developer.wordpress.org\/rest-api\/reference\/) in the REST API Handbook and select the entity kind. Then see the arguments available \"Retrieve a [Entity kind]\".\n\n_Returns_\n\n-   `EntityRecord | undefined`: Record.\n\n### getEntityRecordEdits\n\nReturns the specified entity record's edits.\n\n_Parameters_\n\n-   _state_ `State`: State tree.\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n-   _recordId_ `EntityRecordKey`: Record ID.\n\n_Returns_\n\n-   `Optional< any >`: The entity record's edits.\n\n### getEntityRecordNonTransientEdits\n\nReturns the specified entity record's non transient edits.\n\nTransient edits don't create an undo level, and are not considered for change detection. They are defined in the entity's config.\n\n_Parameters_\n\n-   _state_ `State`: State tree.\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n-   _recordId_ `EntityRecordKey`: Record ID.\n\n_Returns_\n\n-   `Optional< any >`: The entity record's non transient edits.\n\n### getEntityRecords\n\nReturns the Entity's records.\n\n_Parameters_\n\n-   _state_ `State`: State tree\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n-   _query_ `GetRecordsHttpQuery`: Optional terms query. If requesting specific fields, fields must always include the ID. For valid query parameters see the [Reference](https:\/\/developer.wordpress.org\/rest-api\/reference\/) in the REST API Handbook and select the entity kind. Then see the arguments available for \"List [Entity kind]s\".\n\n_Returns_\n\n-   `EntityRecord[] | null`: Records.\n\n### getEntityRecordsTotalItems\n\nReturns the Entity's total available records for a given query (ignoring pagination).\n\n_Parameters_\n\n-   _state_ `State`: State tree\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n-   _query_ `GetRecordsHttpQuery`: Optional terms query. If requesting specific fields, fields must always include the ID. For valid query parameters see the [Reference](https:\/\/developer.wordpress.org\/rest-api\/reference\/) in the REST API Handbook and select the entity kind. Then see the arguments available for \"List [Entity kind]s\".\n\n_Returns_\n\n-   `number | null`: number | null.\n\n### getEntityRecordsTotalPages\n\nReturns the number of available pages for the given query.\n\n_Parameters_\n\n-   _state_ `State`: State tree\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n-   _query_ `GetRecordsHttpQuery`: Optional terms query. If requesting specific fields, fields must always include the ID. For valid query parameters see the [Reference](https:\/\/developer.wordpress.org\/rest-api\/reference\/) in the REST API Handbook and select the entity kind. Then see the arguments available for \"List [Entity kind]s\".\n\n_Returns_\n\n-   `number | null`: number | null.\n\n### getLastEntityDeleteError\n\nReturns the specified entity record's last delete error.\n\n_Parameters_\n\n-   _state_ `State`: State tree.\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n-   _recordId_ `EntityRecordKey`: Record ID.\n\n_Returns_\n\n-   `any`: The entity record's save error.\n\n### getLastEntitySaveError\n\nReturns the specified entity record's last save error.\n\n_Parameters_\n\n-   _state_ `State`: State tree.\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n-   _recordId_ `EntityRecordKey`: Record ID.\n\n_Returns_\n\n-   `any`: The entity record's save error.\n\n### getRawEntityRecord\n\nReturns the entity's record object by key, with its attributes mapped to their raw values.\n\n_Parameters_\n\n-   _state_ `State`: State tree.\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n-   _key_ `EntityRecordKey`: Record's key.\n\n_Returns_\n\n-   `EntityRecord | undefined`: Object with the entity's raw attributes.\n\n### getRedoEdit\n\n> **Deprecated** since 6.3\n\nReturns the next edit from the current undo offset for the entity records edits history, if any.\n\n_Parameters_\n\n-   _state_ `State`: State tree.\n\n_Returns_\n\n-   `Optional< any >`: The edit.\n\n### getReferenceByDistinctEdits\n\nReturns a new reference when edited values have changed. This is useful in inferring where an edit has been made between states by comparison of the return values using strict equality.\n\n_Usage_\n\n    const hasEditOccurred = (\n       getReferenceByDistinctEdits( beforeState ) !==\n       getReferenceByDistinctEdits( afterState )\n    );\n\n_Parameters_\n\n-   _state_ Editor state.\n\n_Returns_\n\n-   A value whose reference will change only when an edit occurs.\n\n### getRevision\n\nReturns a single, specific revision of a parent entity.\n\n_Parameters_\n\n-   _state_ `State`: State tree\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n-   _recordKey_ `EntityRecordKey`: The key of the entity record whose revisions you want to fetch.\n-   _revisionKey_ `EntityRecordKey`: The revision's key.\n-   _query_ `GetRecordsHttpQuery`: Optional query. If requesting specific fields, fields must always include the ID. For valid query parameters see revisions schema in [the REST API Handbook](https:\/\/developer.wordpress.org\/rest-api\/reference\/). Then see the arguments available \"Retrieve a [entity kind]\".\n\n_Returns_\n\n-   `RevisionRecord | Record< PropertyKey, never > | undefined`: Record.\n\n### getRevisions\n\nReturns an entity's revisions.\n\n_Parameters_\n\n-   _state_ `State`: State tree\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n-   _recordKey_ `EntityRecordKey`: The key of the entity record whose revisions you want to fetch.\n-   _query_ `GetRecordsHttpQuery`: Optional query. If requesting specific fields, fields must always include the ID. For valid query parameters see revisions schema in [the REST API Handbook](https:\/\/developer.wordpress.org\/rest-api\/reference\/). Then see the arguments available \"Retrieve a [Entity kind]\".\n\n_Returns_\n\n-   `RevisionRecord[] | null`: Record.\n\n### getThemeSupports\n\nReturn theme supports data in the index.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n\n_Returns_\n\n-   `any`: Index data.\n\n### getUndoEdit\n\n> **Deprecated** since 6.3\n\nReturns the previous edit from the current undo offset for the entity records edits history, if any.\n\n_Parameters_\n\n-   _state_ `State`: State tree.\n\n_Returns_\n\n-   `Optional< any >`: The edit.\n\n### getUserPatternCategories\n\nRetrieve the registered user pattern categories.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n\n_Returns_\n\n-   `Array< UserPatternCategory >`: User patterns category array.\n\n### getUserQueryResults\n\nReturns all the users returned by a query ID.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n-   _queryID_ `string`: Query ID.\n\n_Returns_\n\n-   `undefined< 'edit' >[]`: Users list.\n\n### hasEditsForEntityRecord\n\nReturns true if the specified entity record has edits, and false otherwise.\n\n_Parameters_\n\n-   _state_ `State`: State tree.\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n-   _recordId_ `EntityRecordKey`: Record ID.\n\n_Returns_\n\n-   `boolean`: Whether the entity record has edits or not.\n\n### hasEntityRecords\n\nReturns true if records have been received for the given set of parameters, or false otherwise.\n\n_Parameters_\n\n-   _state_ `State`: State tree\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n-   _query_ `GetRecordsHttpQuery`: Optional terms query. For valid query parameters see the [Reference](https:\/\/developer.wordpress.org\/rest-api\/reference\/) in the REST API Handbook and select the entity kind. Then see the arguments available for \"List [Entity kind]s\".\n\n_Returns_\n\n-   `boolean`: Whether entity records have been received.\n\n### hasFetchedAutosaves\n\nReturns true if the REST request for autosaves has completed.\n\n_Parameters_\n\n-   _state_ `State`: State tree.\n-   _postType_ `string`: The type of the parent post.\n-   _postId_ `EntityRecordKey`: The id of the parent post.\n\n_Returns_\n\n-   `boolean`: True if the REST request was completed. False otherwise.\n\n### hasRedo\n\nReturns true if there is a next edit from the current undo offset for the entity records edits history, and false otherwise.\n\n_Parameters_\n\n-   _state_ `State`: State tree.\n\n_Returns_\n\n-   `boolean`: Whether there is a next edit or not.\n\n### hasUndo\n\nReturns true if there is a previous edit from the current undo offset for the entity records edits history, and false otherwise.\n\n_Parameters_\n\n-   _state_ `State`: State tree.\n\n_Returns_\n\n-   `boolean`: Whether there is a previous edit or not.\n\n### isAutosavingEntityRecord\n\nReturns true if the specified entity record is autosaving, and false otherwise.\n\n_Parameters_\n\n-   _state_ `State`: State tree.\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n-   _recordId_ `EntityRecordKey`: Record ID.\n\n_Returns_\n\n-   `boolean`: Whether the entity record is autosaving or not.\n\n### isDeletingEntityRecord\n\nReturns true if the specified entity record is deleting, and false otherwise.\n\n_Parameters_\n\n-   _state_ `State`: State tree.\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n-   _recordId_ `EntityRecordKey`: Record ID.\n\n_Returns_\n\n-   `boolean`: Whether the entity record is deleting or not.\n\n### isPreviewEmbedFallback\n\nDetermines if the returned preview is an oEmbed link fallback.\n\nWordPress can be configured to return a simple link to a URL if it is not embeddable. We need to be able to determine if a URL is embeddable or not, based on what we get back from the oEmbed preview API.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n-   _url_ `string`: Embedded URL.\n\n_Returns_\n\n-   `boolean`: Is the preview for the URL an oEmbed link fallback.\n\n### isRequestingEmbedPreview\n\nReturns true if a request is in progress for embed preview data, or false otherwise.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n-   _url_ `string`: URL the preview would be for.\n\n_Returns_\n\n-   `boolean`: Whether a request is in progress for an embed preview.\n\n### isSavingEntityRecord\n\nReturns true if the specified entity record is saving, and false otherwise.\n\n_Parameters_\n\n-   _state_ `State`: State tree.\n-   _kind_ `string`: Entity kind.\n-   _name_ `string`: Entity name.\n-   _recordId_ `EntityRecordKey`: Record ID.\n\n_Returns_\n\n-   `boolean`: Whether the entity record is saving or not.\n\n<!-- END TOKEN(Autogenerated selectors|..\/..\/..\/packages\/core-data\/src\/selectors.ts) -->\n\n## Actions\n\n<!-- START TOKEN(Autogenerated actions|..\/..\/..\/packages\/core-data\/src\/actions.js) -->\n\n### addEntities\n\nReturns an action object used in adding new entities.\n\n_Parameters_\n\n-   _entities_ `Array`: Entities received.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### deleteEntityRecord\n\nAction triggered to delete an entity record.\n\n_Parameters_\n\n-   _kind_ `string`: Kind of the deleted entity.\n-   _name_ `string`: Name of the deleted entity.\n-   _recordId_ `string`: Record ID of the deleted entity.\n-   _query_ `?Object`: Special query parameters for the DELETE API call.\n-   _options_ `[Object]`: Delete options.\n-   _options.\\_\\_unstableFetch_ `[Function]`: Internal use only. Function to call instead of `apiFetch()`. Must return a promise.\n-   _options.throwOnError_ `[boolean]`: If false, this action suppresses all the exceptions. Defaults to false.\n\n### editEntityRecord\n\nReturns an action object that triggers an edit to an entity record.\n\n_Parameters_\n\n-   _kind_ `string`: Kind of the edited entity record.\n-   _name_ `string`: Name of the edited entity record.\n-   _recordId_ `number|string`: Record ID of the edited entity record.\n-   _edits_ `Object`: The edits.\n-   _options_ `Object`: Options for the edit.\n-   _options.undoIgnore_ `[boolean]`: Whether to ignore the edit in undo history or not.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### receiveDefaultTemplateId\n\nReturns an action object used to set the template for a given query.\n\n_Parameters_\n\n-   _query_ `Object`: The lookup query.\n-   _templateId_ `string`: The resolved template id.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### receiveEntityRecords\n\nReturns an action object used in signalling that entity records have been received.\n\n_Parameters_\n\n-   _kind_ `string`: Kind of the received entity record.\n-   _name_ `string`: Name of the received entity record.\n-   _records_ `Array|Object`: Records received.\n-   _query_ `?Object`: Query Object.\n-   _invalidateCache_ `?boolean`: Should invalidate query caches.\n-   _edits_ `?Object`: Edits to reset.\n-   _meta_ `?Object`: Meta information about pagination.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### receiveNavigationFallbackId\n\nReturns an action object signalling that the fallback Navigation Menu id has been received.\n\n_Parameters_\n\n-   _fallbackId_ `integer`: the id of the fallback Navigation Menu\n\n_Returns_\n\n-   `Object`: Action object.\n\n### receiveRevisions\n\nAction triggered to receive revision items.\n\n_Parameters_\n\n-   _kind_ `string`: Kind of the received entity record revisions.\n-   _name_ `string`: Name of the received entity record revisions.\n-   _recordKey_ `number|string`: The key of the entity record whose revisions you want to fetch.\n-   _records_ `Array|Object`: Revisions received.\n-   _query_ `?Object`: Query Object.\n-   _invalidateCache_ `?boolean`: Should invalidate query caches.\n-   _meta_ `?Object`: Meta information about pagination.\n\n### receiveThemeSupports\n\n> **Deprecated** since WP 5.9, this is not useful anymore, use the selector direclty.\n\nReturns an action object used in signalling that the index has been received.\n\n_Returns_\n\n-   `Object`: Action object.\n\n### receiveUploadPermissions\n\n> **Deprecated** since WP 5.9, use receiveUserPermission instead.\n\nReturns an action object used in signalling that Upload permissions have been received.\n\n_Parameters_\n\n-   _hasUploadPermissions_ `boolean`: Does the user have permission to upload files?\n\n_Returns_\n\n-   `Object`: Action object.\n\n### redo\n\nAction triggered to redo the last undoed edit to an entity record, if any.\n\n### saveEditedEntityRecord\n\nAction triggered to save an entity record's edits.\n\n_Parameters_\n\n-   _kind_ `string`: Kind of the entity.\n-   _name_ `string`: Name of the entity.\n-   _recordId_ `Object`: ID of the record.\n-   _options_ `Object`: Saving options.\n\n### saveEntityRecord\n\nAction triggered to save an entity record.\n\n_Parameters_\n\n-   _kind_ `string`: Kind of the received entity.\n-   _name_ `string`: Name of the received entity.\n-   _record_ `Object`: Record to be saved.\n-   _options_ `Object`: Saving options.\n-   _options.isAutosave_ `[boolean]`: Whether this is an autosave.\n-   _options.\\_\\_unstableFetch_ `[Function]`: Internal use only. Function to call instead of `apiFetch()`. Must return a promise.\n-   _options.throwOnError_ `[boolean]`: If false, this action suppresses all the exceptions. Defaults to false.\n\n### undo\n\nAction triggered to undo the last edit to an entity record, if any.\n\n<!-- END TOKEN(Autogenerated actions|..\/..\/..\/packages\/core-data\/src\/actions.js) -->\n"
    },
    {
        "path": "\/markdown\/contributors\/design\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Design Contributions<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A guide on how to get started contributing design to the Gutenberg project.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Discussions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/make.wordpress.org\/design\/\">Make WordPress Design blog<\/a> is the primary spot for the latest information around WordPress Design Team: including announcements, product goals, meeting notes, meeting agendas, and more.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Real-time discussions for design take place in the <code>#design<\/code> channel in <a href=\"https:\/\/make.wordpress.org\/chat\">Make WordPress Slack<\/a> (registration required). Weekly meetings for the Design team are on Wednesdays at 19:00UTC.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">How can designers contribute?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Gutenberg project uses GitHub for managing code and tracking issues. The main repository is at: <a href=\"https:\/\/github.com\/WordPress\/gutenberg\">https:\/\/github.com\/WordPress\/gutenberg<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you'd like to contribute to the design or front-end, feel free to contribute to tickets labeled <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues?q=is%3Aissue+is%3Aopen+label%3A%22Needs+Design%22\">Needs Design<\/a> or <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues?q=is%3Aissue+is%3Aopen+label%3A%22Needs+Design+Feedback%22\">Needs Design Feedback<\/a>. We could use your thoughtful replies, mockups, animatics, sketches, doodles. Proposed changes are best done as minimal and specific iterations on the work that precedes it so we can compare.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"http:\/\/make.wordpress.org\/design\/\">WordPress Design team<\/a> uses <a href=\"https:\/\/www.figma.com\/\">Figma<\/a> to collaborate and share work. If you'd like to contribute, join the <a href=\"http:\/\/wordpress.slack.com\/messages\/design\/\">#design channel<\/a> in <a href=\"https:\/\/make.wordpress.org\/chat\/\">Slack<\/a> and ask the team to set you up with a free Figma account. This will give you access to a helpful <a href=\"https:\/\/www.figma.com\/file\/ZtN5xslEVYgzU7Dd5CxgGZwq\/WordPress-Components?node-id=0%3A1\">library of components<\/a> used in WordPress.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Principles<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This section outlines the design principles and patterns of the editor interface\u2014to explain the background of the design, inform future improvements, and help people design great blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<img width=\"200\" src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/contributors\/assets\/gutenberg-logo-black.svg\" alt=\"Gutenberg Logo\" \/>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>The Gutenberg logo was made by <a href=\"https:\/\/twitter.com\/cristelrossi\">Cristel Rossignol<\/a>, and is released under the GPL license. <a href=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/contributors\/assets\/gutenberg-logo-black.svg\">Download the SVG logo<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Goal of Gutenberg<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Gutenberg's all-encompassing goal is a post- and page-building experience that makes it easy to create rich layouts. The block editor was the first product launched following this methodology for working with content.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>From the <a href=\"https:\/\/make.wordpress.org\/core\/2017\/01\/04\/focus-tech-and-design-leads\/\">kickoff post<\/a>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>The editor will endeavor to create a new page and post building experience that makes writing rich posts effortless, and has \u201cblocks\u201d to make easy what today might take shortcodes, custom HTML, or \u201cmystery meat\u201d embed discovery.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>We can extract a few key principles from this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Authoring rich posts is a key strength of WordPress.<\/strong><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Blocks will unify features and types of interaction under a single interface.<\/strong> Users shouldn\u2019t have to write shortcodes, custom HTML, or paste URLs to embed. Users only need to learn how the block works in order to use all of its features.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Make core features more discoverable<\/strong>, reducing hard-to-find \u201cMystery meat.\u201d WordPress supports a large number of blocks and 30+ embeds. Let\u2019s increase their visibility.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Why<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>One thing that sets WordPress apart from other systems is that it allows users to create as rich a post layout as they can imagine \u2014 as long as they know HTML and CSS and build a custom theme.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Gutenberg reshapes the editor into a tool that allows users to write rich posts and build beautiful layouts in a few clicks \u2014 no technical knowledge needed. WordPress will become a powerful and flexible content tool that\u2019s accessible to all.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Vision<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Gutenberg wants to make it easier to author rich content. This means ensuring good defaults, bundling advanced layout options into blocks, and making the most important actions immediately available. Authoring content with WordPress should be accessible to anyone.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Everything on a WordPress website becomes a block:<\/strong> text, images, galleries, widgets, shortcodes, and even chunks of custom HTML, whether added by plugins or otherwise. Users will only have to learn a single interface \u2014\u2014 the block interface.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>All blocks are created equal.<\/strong> They all live in the same inserter interface. Recency, search, tabs, and grouping ensure that the most-used blocks are within easy reach.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Drag-and-drop is secondary.<\/strong> For greater accessibility and platform compatibility, drag-and-drop interactions are used as an additive enhancement on top of explicit actions like click, tab, and space.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Placeholders are key.<\/strong> If a block can have a neutral placeholder state, it should. An image placeholder block shows a button to open the media library, and a text placeholder block shows a writing prompt. By embracing placeholders we can predefine editable layouts, so all users have to do is fill in the blanks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Direct manipulation is intuitive.<\/strong> The block interface allows users to manipulate content directly on the page. Plugin and theme authors will support and extend this experience by building their own custom blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code editing shouldn't be necessary for customization.<\/strong> Customizing traditionally required complicated markup, and complicated markup is easy to break. With Gutenberg, customizing becomes more intuitive \u2014 and safer. A developer will be able to provide custom blocks that directly render portions of a layout (a three column grid of features, for instance) and clearly specify what can be directly edited by the user. That means the user can update text, swap images, reduce the number of columns, without having to ask a developer, or worrying about breaking things.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Design Contributions\n\nA guide on how to get started contributing design to the Gutenberg project.\n\n## Discussions\n\nThe [Make WordPress Design blog](https:\/\/make.wordpress.org\/design\/) is the primary spot for the latest information around WordPress Design Team: including announcements, product goals, meeting notes, meeting agendas, and more.\n\nReal-time discussions for design take place in the `#design` channel in [Make WordPress Slack](https:\/\/make.wordpress.org\/chat) (registration required). Weekly meetings for the Design team are on Wednesdays at 19:00UTC.\n\n## How can designers contribute?\n\nThe Gutenberg project uses GitHub for managing code and tracking issues. The main repository is at: [https:\/\/github.com\/WordPress\/gutenberg](https:\/\/github.com\/WordPress\/gutenberg).\n\nIf you'd like to contribute to the design or front-end, feel free to contribute to tickets labeled [Needs Design](https:\/\/github.com\/WordPress\/gutenberg\/issues?q=is%3Aissue+is%3Aopen+label%3A%22Needs+Design%22) or [Needs Design Feedback](https:\/\/github.com\/WordPress\/gutenberg\/issues?q=is%3Aissue+is%3Aopen+label%3A\"Needs+Design+Feedback%22). We could use your thoughtful replies, mockups, animatics, sketches, doodles. Proposed changes are best done as minimal and specific iterations on the work that precedes it so we can compare.\n\nThe [WordPress Design team](http:\/\/make.wordpress.org\/design\/) uses [Figma](https:\/\/www.figma.com\/) to collaborate and share work. If you'd like to contribute, join the [#design channel](http:\/\/wordpress.slack.com\/messages\/design\/) in [Slack](https:\/\/make.wordpress.org\/chat\/) and ask the team to set you up with a free Figma account. This will give you access to a helpful [library of components](https:\/\/www.figma.com\/file\/ZtN5xslEVYgzU7Dd5CxgGZwq\/WordPress-Components?node-id=0%3A1) used in WordPress.\n\n## Principles\n\nThis section outlines the design principles and patterns of the editor interface\u2014to explain the background of the design, inform future improvements, and help people design great blocks.\n\n<img width=\"200\" src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/contributors\/assets\/gutenberg-logo-black.svg\" alt=\"Gutenberg Logo\" \/>\n\nThe Gutenberg logo was made by [Cristel Rossignol](https:\/\/twitter.com\/cristelrossi), and is released under the GPL license. [Download the SVG logo](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/contributors\/assets\/gutenberg-logo-black.svg).\n\n### Goal of Gutenberg\n\nGutenberg's all-encompassing goal is a post- and page-building experience that makes it easy to create rich layouts. The block editor was the first product launched following this methodology for working with content.\n\nFrom the [kickoff post](https:\/\/make.wordpress.org\/core\/2017\/01\/04\/focus-tech-and-design-leads\/):\n\n> The editor will endeavor to create a new page and post building experience that makes writing rich posts effortless, and has \u201cblocks\u201d to make easy what today might take shortcodes, custom HTML, or \u201cmystery meat\u201d embed discovery.\n\nWe can extract a few key principles from this:\n\n-   **Authoring rich posts is a key strength of WordPress.**\n-   **Blocks will unify features and types of interaction under a single interface.** Users shouldn\u2019t have to write shortcodes, custom HTML, or paste URLs to embed. Users only need to learn how the block works in order to use all of its features.\n-   **Make core features more discoverable**, reducing hard-to-find \u201cMystery meat.\u201d WordPress supports a large number of blocks and 30+ embeds. Let\u2019s increase their visibility.\n\n### Why\n\nOne thing that sets WordPress apart from other systems is that it allows users to create as rich a post layout as they can imagine \u2014 as long as they know HTML and CSS and build a custom theme.\n\nGutenberg reshapes the editor into a tool that allows users to write rich posts and build beautiful layouts in a few clicks \u2014 no technical knowledge needed. WordPress will become a powerful and flexible content tool that\u2019s accessible to all.\n\n### Vision\n\nGutenberg wants to make it easier to author rich content. This means ensuring good defaults, bundling advanced layout options into blocks, and making the most important actions immediately available. Authoring content with WordPress should be accessible to anyone.\n\n**Everything on a WordPress website becomes a block:** text, images, galleries, widgets, shortcodes, and even chunks of custom HTML, whether added by plugins or otherwise. Users will only have to learn a single interface \u2014\u2014 the block interface.\n\n**All blocks are created equal.** They all live in the same inserter interface. Recency, search, tabs, and grouping ensure that the most-used blocks are within easy reach.\n\n**Drag-and-drop is secondary.** For greater accessibility and platform compatibility, drag-and-drop interactions are used as an additive enhancement on top of explicit actions like click, tab, and space.\n\n**Placeholders are key.** If a block can have a neutral placeholder state, it should. An image placeholder block shows a button to open the media library, and a text placeholder block shows a writing prompt. By embracing placeholders we can predefine editable layouts, so all users have to do is fill in the blanks.\n\n**Direct manipulation is intuitive.** The block interface allows users to manipulate content directly on the page. Plugin and theme authors will support and extend this experience by building their own custom blocks.\n\n**Code editing shouldn't be necessary for customization.** Customizing traditionally required complicated markup, and complicated markup is easy to break. With Gutenberg, customizing becomes more intuitive \u2014 and safer. A developer will be able to provide custom blocks that directly render portions of a layout (a three column grid of features, for instance) and clearly specify what can be directly edited by the user. That means the user can update text, swap images, reduce the number of columns, without having to ask a developer, or worrying about breaking things.\n"
    },
    {
        "path": "\/markdown\/contributors\/design\/the-block.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Blocks are the Interface<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>At the core of Gutenberg lies the concept of the block. From a technical point of view, blocks both raise the level of abstraction from a single document to a collection of meaningful elements, and they replace ambiguity\u2014inherent in HTML\u2014with explicit structure.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>From a user perspective, blocks allow any kind of content, media, or functionality to be directly added to their site in a more consistent and usable way. The \u201cadd block\u201d button gives the user access to an entire library of options all in one place, rather than having to hunt through menus or know shortcodes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But most importantly, Gutenberg is built on the principle of <em>direct manipulation<\/em>, which means that the primary options for how an element is displayed are controlled <em>in the context of the block itself<\/em>. This is a big shift from the traditional WordPress model, where options that were often buried deep in layers of navigation menus controlled the elements on a page through indirect mechanisms.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So, for example, a user can add an image, write its caption, change its width and layout, add a link around it, all from within the block interface in the canvas. The same principle should apply to more complex blocks, like a \"navigation menu\", with the user being able to add, edit, move, and finalize the full presentation of their navigation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Users only need to learn one interface \u2014 the block \u2014 to add and edit everything on their site. Users shouldn\u2019t have to write shortcodes, custom HTML, or understand hidden mechanisms to embed content.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Gutenberg makes core features more discoverable, reducing hard-to-find \u201cMystery meat.\u201d WordPress supports a large number of blocks and 30+ embeds. Let\u2019s increase their visibility.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Building blocks<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>What does this mean for designers and developers? The block structure plus the principle of direct manipulation mean thinking differently about how to design and develop WordPress components. Let\u2019s take another look at the architecture of a block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/cldup.com\/LQrPNubkJY.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Gutenberg Blueprint<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">The primary interface for a block is the content area of the block.<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The placeholder content in the content area of the block can be thought of as a guide or interface for users to follow a set of instructions or \u201cfill in the blanks\u201d (more on placeholders later). Since the content area represents what will actually appear on the site, interaction here hews closest to the principle of direct manipulation and will be most intuitive to the user. This should be thought of as the primary interface for adding and manipulating content and adjusting how it is displayed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">The block toolbar is the place for critical options that can\u2019t be incorporated into placeholder UI.<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Basic block settings won\u2019t always make sense in the context of the placeholder \/ content UI. As a secondary option, options that are critical to the functionality of a block can live in the block toolbar. The block toolbar is one step removed from direct manipulation, but is still highly contextual and visible on all screen sizes, so it is a great secondary option.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">The Settings Sidebar should only be used for advanced, tertiary controls.<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Settings Sidebar is not visible by default on a small \/ mobile screen, and may also be collapsed even in a desktop view. Therefore, it should not be relied on for anything that is necessary for the basic operation of the block. Pick good defaults, make important actions available in the block toolbar, and think of the sidebar as something that only power users may discover.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Blocks are the Interface\n\nAt the core of Gutenberg lies the concept of the block. From a technical point of view, blocks both raise the level of abstraction from a single document to a collection of meaningful elements, and they replace ambiguity\u2014inherent in HTML\u2014with explicit structure.\n\nFrom a user perspective, blocks allow any kind of content, media, or functionality to be directly added to their site in a more consistent and usable way. The \u201cadd block\u201d button gives the user access to an entire library of options all in one place, rather than having to hunt through menus or know shortcodes.\n\nBut most importantly, Gutenberg is built on the principle of _direct manipulation_, which means that the primary options for how an element is displayed are controlled _in the context of the block itself_. This is a big shift from the traditional WordPress model, where options that were often buried deep in layers of navigation menus controlled the elements on a page through indirect mechanisms.\n\nSo, for example, a user can add an image, write its caption, change its width and layout, add a link around it, all from within the block interface in the canvas. The same principle should apply to more complex blocks, like a \"navigation menu\", with the user being able to add, edit, move, and finalize the full presentation of their navigation.\n\n-   Users only need to learn one interface \u2014 the block \u2014 to add and edit everything on their site. Users shouldn\u2019t have to write shortcodes, custom HTML, or understand hidden mechanisms to embed content.\n-   Gutenberg makes core features more discoverable, reducing hard-to-find \u201cMystery meat.\u201d WordPress supports a large number of blocks and 30+ embeds. Let\u2019s increase their visibility.\n\n## Building blocks\n\nWhat does this mean for designers and developers? The block structure plus the principle of direct manipulation mean thinking differently about how to design and develop WordPress components. Let\u2019s take another look at the architecture of a block:\n\n![Gutenberg Blueprint](https:\/\/cldup.com\/LQrPNubkJY.png)\n\n### The primary interface for a block is the content area of the block.\n\nThe placeholder content in the content area of the block can be thought of as a guide or interface for users to follow a set of instructions or \u201cfill in the blanks\u201d (more on placeholders later). Since the content area represents what will actually appear on the site, interaction here hews closest to the principle of direct manipulation and will be most intuitive to the user. This should be thought of as the primary interface for adding and manipulating content and adjusting how it is displayed.\n\n### The block toolbar is the place for critical options that can\u2019t be incorporated into placeholder UI.\n\nBasic block settings won\u2019t always make sense in the context of the placeholder \/ content UI. As a secondary option, options that are critical to the functionality of a block can live in the block toolbar. The block toolbar is one step removed from direct manipulation, but is still highly contextual and visible on all screen sizes, so it is a great secondary option.\n\n### The Settings Sidebar should only be used for advanced, tertiary controls.\n\nThe Settings Sidebar is not visible by default on a small \/ mobile screen, and may also be collapsed even in a desktop view. Therefore, it should not be relied on for anything that is necessary for the basic operation of the block. Pick good defaults, make important actions available in the block toolbar, and think of the sidebar as something that only power users may discover.\n"
    },
    {
        "path": "\/markdown\/contributors\/documentation\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Documentation Contributions<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A guide on how to get started contributing documentation to the Gutenberg project.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Discussions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/make.wordpress.org\/docs\/\">Make WordPress Docs blog<\/a> is the primary spot for the latest information around WordPress documentation, including announcements, product goals, meeting notes, meeting agendas, and more.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Real-time discussions for documentation take place in the <code>#docs<\/code> channel in <a href=\"https:\/\/make.wordpress.org\/chat\">Make WordPress Slack<\/a> (registration required). Weekly meetings for the Documentation team are on Tuesdays at 14:00UTC.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The Gutenberg project uses GitHub for managing code and tracking issues. The main repository is at: <a href=\"https:\/\/github.com\/WordPress\/gutenberg\">https:\/\/github.com\/WordPress\/gutenberg<\/a>. To find documentation issues to work on, browse <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+is%3Aissue+label%3A%22%5BType%5D+Documentation%22+\">issues with documentation label<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Documentation types<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There are two major sets of documentation for the Gutenberg project:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/wordpress.org\/documentation\/article\/wordpress-block-editor\/\">User documentation<\/a> is information on how to use the Editor as an author publishing posts. For contributing to user docs, follow the docs blog or ask in the #docs Slack channel to understand the current priorities.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/\">Block editor handbook<\/a> is everything related to the Gutenberg project including: developing, extending, and\u2014what you are reading right now\u2014contributing specific to Gutenberg.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The rest of this document covers contributing to the block editor handbook.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block editor handbook process<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The block editor handbook is a mix of markdown files in the <code>\/docs\/<\/code> directory of the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/\">Gutenberg project repository<\/a> and generated documentation from the packages.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>An automated job publishes the docs every 15 minutes to the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/\">block editor handbook site<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See <a href=\"\/docs\/contributors\/code\/git-workflow.md\">the Git Workflow<\/a> documentation for how to use git to deploy changes using pull requests. Additionally, see the <a href=\"https:\/\/wordpress.tv\/2020\/09\/02\/marcus-kazmierczak-contribute-developer-documentation-to-gutenberg\/\">video walk-through<\/a> and the accompanying <a href=\"https:\/\/mkaz.blog\/wordpress\/contribute-developer-documentation-to-gutenberg\/\">slides for contributing documentation to Gutenberg<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Handbook structure<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The handbook is organized into four sections based on the functional types of documents. <a href=\"https:\/\/documentation.divio.com\/\">The Documentation System<\/a> does a great job explaining the needs and functions of each type, but in short, they are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Getting started tutorials<\/strong> - full lessons that take learners step by step to complete an objective, for example the <a href=\"\/docs\/getting-started\/devenv\/get-started-with-create-block.md\">create a block tutorial<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>How-to guides<\/strong> - short lessons specific to completing a small specific task, for example <a href=\"\/docs\/how-to-guides\/format-api.md\">how to add a button to the block toolbar<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Reference guides<\/strong> - API documentation, purely functional descriptions,<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Explanations<\/strong> - longer documentation focused on learning, not a specific task.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Templates<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A <a href=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/trunk\/docs\/contributors\/documentation\/how-to-guide-template.md\">how-to guide template<\/a> is available to provide a common structure to guides. If starting a new how-to guide, copy the markdown from the template to get started.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The template is based on examples from The Good Docs Project. See their <a href=\"https:\/\/github.com\/thegooddocsproject\/templates\">template repository<\/a> for additional examples to help you create quality documentation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Update a document<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To update an existing page:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Check out the Gutenberg repository.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create a branch to work, for example <code>docs\/update-contrib-guide<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Make the necessary changes to the existing document.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Commit your changes.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create a pull request using the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\/%5BType%5D%20Developer%20Documentation\">[Type] Developer Documentation<\/a> label.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Create a new document<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To add a new document requires a working JavaScript development environment to build the documentation, see the <a href=\"\/docs\/how-to-guides\/javascript\/js-build-setup.md\">JavaScript build setup documentation<\/a>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Create a Markdown file in the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/docs\">docs<\/a> folder, use lower-case, no spaces, if needed a dash separator, and <code>.md<\/code> extension.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Add content using markdown notation. All documents require one and only <code>h1<\/code> tag.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Add document entry to the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/docs\/toc.json\">toc.json<\/a> hierarchy. See existing entries for format.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Run <code>npm run docs:build<\/code> to update <code>manifest.json<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Commit <code>manifest.json<\/code> with other files updated.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>If you forget to run, <code>npm run docs:build<\/code> your PR will fail the static analysis check since the <code>manifest.json<\/code> file is an uncommitted local change that must be committed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Documenting packages<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Package documentation is generated automatically by the documentation tool by pulling the contents of the README.md file located in the root of the package. Sometimes, however, it is preferable to split the contents of the README into smaller, easier-to-read portions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This can be accomplished by creating a <code>docs<\/code> directory in the package and adding <code>toc.json<\/code> file that contains references other markdown files also contained in the <code>docs<\/code> directory. The <code>toc.json<\/code> file should contain an array of pages to be added as sub-pages of the main README file. The formatting follows the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/docs\/manifest.json\"><code>manifest.json<\/code><\/a> file that is generated automatically.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order for these pages to be nested under the main package name, be sure to set the <code>parent<\/code> property correctly. See the example below that adds child pages to the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/\"><code>@wordpress\/create-block<\/code> section<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&#91;\n\t{\n\t\t\"title\": \"@wordpress\/create-block External Template\",\n\t\t\"slug\": \"packages-create-block-external-template\",\n\t\t\"markdown_source\": \"..\/packages\/create-block\/docs\/external-template.md\",\n\t\t\"parent\": \"packages-create-block\"\n\t}\n]\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Using links<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It's likely at some point, you'll want to link to other internal documentation pages. It's worth emphasizing all documents can be browsed in different contexts:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Block editor handbook<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>GitHub website<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>npm website<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>To create links that work in all contexts, you must use absolute path links without the <code>https:\/\/github.com\/WordPress\/gutenberg<\/code> prefix. You can reference files using the following patterns:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>\/docs\/*.md<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>\/packages\/*\/README.md<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>\/packages\/components\/src\/**\/README.md<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This way, they will be properly handled in all three aforementioned contexts.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Use the full directory and filename from the Gutenberg repository, not the published path; the Block Editor Handbook creates short URLs\u2014you can see this in the tutorials section. Likewise, the <code>readme.md<\/code> portion is dropped in the handbook but should be included in the links.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>An example, the link to this page is: <code>\/docs\/contributors\/documentation\/README.md<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-warning\">\n<b>Note:<\/b> The usual link transformation is not applied to links in callouts. See below. \n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Code examples<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The code example in markdown should be wrapped in three tick marks ``` and should additionally include a language specifier. See this <a href=\"https:\/\/help.github.com\/en\/github\/writing-on-github\/creating-and-highlighting-code-blocks\">GitHub documentation around fenced code blocks<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A unique feature to the Gutenberg documentation is the <code>codetabs<\/code> toggle, this allows two versions of code to be shown at once. This is used for showing both <code>JSX<\/code> and <code>Plain<\/code> code samples.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here is an example <code>codetabs<\/code> section:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>    \\{\\% codetabs \\%\\}\n    \\{\\% JSX \\%\\}\n    ```js\n    \/\/ JSX code here\n    ```\n    \\{\\% Plain \\%\\}\n    ```js\n    \/\/ Plain code here\n    ```\n    \\{\\% end \\%\\}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The preferred format for code examples is JSX. This should be the default view. The example placed first in source will be shown as the default.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:<\/strong> It is not required to include plain JavaScript code examples for every guide. The recommendation is to include plain code for beginner tutorials or short examples, but the majority of code in Gutenberg packages and across the larger React and JavaScript ecosystem are in JSX that requires a build process.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Callout notices<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Block Editor handbook supports the same <a href=\"https:\/\/make.wordpress.org\/docs\/handbook\/documentation-team-handbook\/handbooks-style-and-formatting-guide\/#formatting\">notice styles as other WordPress handbooks<\/a>. However, the shortcode implementation is not ideal with the different locations the block editor handbook documentation is published (npm, GitHub).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The recommended way to implement in markdown is to use the raw HTML and <code>callout callout-LEVEL<\/code> classes. For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><div class=\"callout callout-info\">This is an **info** callout.<\/div>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The following classes are available: <code>info<\/code>, <code>tip<\/code>, <code>alert<\/code>, <code>warning<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\nThis is a **tip** callout.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\nThis is an **info** callout.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:html -->\n<div class=\"callout callout-alert\">\nThis is an **alert** callout.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:html -->\n<div class=\"callout callout-warning\">\nThis is a **warning** callout.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:html -->\n<div class=\"callout callout-warning\">\nNote: In callout notices, links also need to be HTML `&lt;a href>&lt;\/a>` notations. \nThe usual link transformation is not applied to links in callouts.\nFor instance, to reach the Getting started > Create Block page, the URL in GitHub is\nhttps:\/\/developer.wordpress.org\/docs\/getting-started\/devenv\/get-started-with-create-block.md\nand will have to be hardcoded for the endpoint in the Block Editor Handbook as \n<a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/create-block\/\">https:\/\/developer.wordpress.org\/block-editor\/getting-started\/create-block\/<\/a> to link correctly in the handbook. \n<\/div>\n### Editor config\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>You should configure your editor to use Prettier to auto-format markdown documents. See the <a href=\"\/docs\/contributors\/code\/getting-started-with-code-contribution.md\">Getting Started documentation<\/a> for complete details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>An example config for using Visual Studio Code and the Prettier extensions:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\"&#91;&#91;markdown]]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\nDepending on where you are viewing this document, the brackets may show as double. The proper format is just a single bracket.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Video embeds<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Videos in the Block Editor Handbook need to be hosted on the <a href=\"https:\/\/www.youtube.com\/@WordPress\">WordPress YouTube channel<\/a> as unlisted videos. This process requires additional permissions. Reach out in the #marketing Slack channel for assistance.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once the video has been uploaded to YouTube, retrieve the video embed link. It should look something like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>https:&#47;&#47;www.youtube.com\/embed\/nrut8SfXA44?si=YxvmHmAoYx-BDCog\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then, place the following code where you want the video to be embedded in the documentation. Update the embed link and video title accordingly.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><iframe width=\"960\" height=\"540\" src=\"&#91;Video embed link]\" title=\"&#91;Video title]\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"true\">\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\nVideos should have an aspect ratio of <code>16:9<\/code> and be filmed at the highest resolution possible.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/contributors\/documentation\/copy-guide.md\">Copy Guidelines<\/a> for writing instructions, documentation, or other contributions to the Gutenberg project.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/make.wordpress.org\/docs\/handbook\/documentation-team-handbook\/tone-and-voice-guide\/\">Tone and Voice Guide<\/a> from WordPress Documentation.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Documentation Contributions\n\nA guide on how to get started contributing documentation to the Gutenberg project.\n\n## Discussions\n\nThe [Make WordPress Docs blog](https:\/\/make.wordpress.org\/docs\/) is the primary spot for the latest information around WordPress documentation, including announcements, product goals, meeting notes, meeting agendas, and more.\n\nReal-time discussions for documentation take place in the `#docs` channel in [Make WordPress Slack](https:\/\/make.wordpress.org\/chat) (registration required). Weekly meetings for the Documentation team are on Tuesdays at 14:00UTC.\n\nThe Gutenberg project uses GitHub for managing code and tracking issues. The main repository is at: [https:\/\/github.com\/WordPress\/gutenberg](https:\/\/github.com\/WordPress\/gutenberg). To find documentation issues to work on, browse [issues with documentation label](https:\/\/github.com\/WordPress\/gutenberg\/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3A%22%5BType%5D+Documentation%22+).\n\n## Documentation types\n\nThere are two major sets of documentation for the Gutenberg project:\n\n1. [User documentation](https:\/\/wordpress.org\/documentation\/article\/wordpress-block-editor\/) is information on how to use the Editor as an author publishing posts. For contributing to user docs, follow the docs blog or ask in the #docs Slack channel to understand the current priorities.\n2. [Block editor handbook](https:\/\/developer.wordpress.org\/block-editor\/) is everything related to the Gutenberg project including: developing, extending, and\u2014what you are reading right now\u2014contributing specific to Gutenberg.\n\nThe rest of this document covers contributing to the block editor handbook.\n\n## Block editor handbook process\n\nThe block editor handbook is a mix of markdown files in the `\/docs\/` directory of the [Gutenberg project repository](https:\/\/github.com\/WordPress\/gutenberg\/) and generated documentation from the packages.\n\nAn automated job publishes the docs every 15 minutes to the [block editor handbook site](https:\/\/developer.wordpress.org\/block-editor\/).\n\nSee [the Git Workflow](\/docs\/contributors\/code\/git-workflow.md) documentation for how to use git to deploy changes using pull requests. Additionally, see the [video walk-through](https:\/\/wordpress.tv\/2020\/09\/02\/marcus-kazmierczak-contribute-developer-documentation-to-gutenberg\/) and the accompanying [slides for contributing documentation to Gutenberg](https:\/\/mkaz.blog\/wordpress\/contribute-developer-documentation-to-gutenberg\/).\n\n### Handbook structure\n\nThe handbook is organized into four sections based on the functional types of documents. [The Documentation System](https:\/\/documentation.divio.com\/) does a great job explaining the needs and functions of each type, but in short, they are:\n\n-   **Getting started tutorials** - full lessons that take learners step by step to complete an objective, for example the [create a block tutorial](\/docs\/getting-started\/devenv\/get-started-with-create-block.md).\n-   **How-to guides** - short lessons specific to completing a small specific task, for example [how to add a button to the block toolbar](\/docs\/how-to-guides\/format-api.md).\n-   **Reference guides** - API documentation, purely functional descriptions,\n-   **Explanations** - longer documentation focused on learning, not a specific task.\n\n### Templates\n\nA [how-to guide template](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/trunk\/docs\/contributors\/documentation\/how-to-guide-template.md) is available to provide a common structure to guides. If starting a new how-to guide, copy the markdown from the template to get started.\n\nThe template is based on examples from The Good Docs Project. See their [template repository](https:\/\/github.com\/thegooddocsproject\/templates) for additional examples to help you create quality documentation.\n\n### Update a document\n\nTo update an existing page:\n\n1. Check out the Gutenberg repository.\n2. Create a branch to work, for example `docs\/update-contrib-guide`.\n3. Make the necessary changes to the existing document.\n4. Commit your changes.\n5. Create a pull request using the [\\[Type\\] Developer Documentation](https:\/\/github.com\/WordPress\/gutenberg\/labels\/%5BType%5D%20Developer%20Documentation) label.\n\n### Create a new document\n\nTo add a new document requires a working JavaScript development environment to build the documentation, see the [JavaScript build setup documentation](\/docs\/how-to-guides\/javascript\/js-build-setup.md):\n\n1. Create a Markdown file in the [docs](https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/docs) folder, use lower-case, no spaces, if needed a dash separator, and `.md` extension.\n2. Add content using markdown notation. All documents require one and only `h1` tag.\n3. Add document entry to the [toc.json](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/docs\/toc.json) hierarchy. See existing entries for format.\n4. Run `npm run docs:build` to update `manifest.json`.\n5. Commit `manifest.json` with other files updated.\n\nIf you forget to run, `npm run docs:build` your PR will fail the static analysis check since the `manifest.json` file is an uncommitted local change that must be committed.\n\n### Documenting packages\n\nPackage documentation is generated automatically by the documentation tool by pulling the contents of the README.md file located in the root of the package. Sometimes, however, it is preferable to split the contents of the README into smaller, easier-to-read portions.\n\nThis can be accomplished by creating a `docs` directory in the package and adding `toc.json` file that contains references other markdown files also contained in the `docs` directory. The `toc.json` file should contain an array of pages to be added as sub-pages of the main README file. The formatting follows the [`manifest.json`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/docs\/manifest.json) file that is generated automatically.\n\nIn order for these pages to be nested under the main package name, be sure to set the `parent` property correctly. See the example below that adds child pages to the [`@wordpress\/create-block` section](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/).\n\n```json\n[\n\t{\n\t\t\"title\": \"@wordpress\/create-block External Template\",\n\t\t\"slug\": \"packages-create-block-external-template\",\n\t\t\"markdown_source\": \"..\/packages\/create-block\/docs\/external-template.md\",\n\t\t\"parent\": \"packages-create-block\"\n\t}\n]\n```\n\n### Using links\n\nIt's likely at some point, you'll want to link to other internal documentation pages. It's worth emphasizing all documents can be browsed in different contexts:\n\n-   Block editor handbook\n-   GitHub website\n-   npm website\n\nTo create links that work in all contexts, you must use absolute path links without the `https:\/\/github.com\/WordPress\/gutenberg` prefix. You can reference files using the following patterns:\n\n-   `\/docs\/*.md`\n-   `\/packages\/*\/README.md`\n-   `\/packages\/components\/src\/**\/README.md`\n\nThis way, they will be properly handled in all three aforementioned contexts.\n\nUse the full directory and filename from the Gutenberg repository, not the published path; the Block Editor Handbook creates short URLs\u2014you can see this in the tutorials section. Likewise, the `readme.md` portion is dropped in the handbook but should be included in the links.\n\nAn example, the link to this page is: `\/docs\/contributors\/documentation\/README.md`\n\n<div class=\"callout callout-warning\">\n<b>Note:<\/b> The usual link transformation is not applied to links in callouts. See below. \n<\/div>\n\n### Code examples\n\nThe code example in markdown should be wrapped in three tick marks \\`\\`\\` and should additionally include a language specifier. See this [GitHub documentation around fenced code blocks](https:\/\/help.github.com\/en\/github\/writing-on-github\/creating-and-highlighting-code-blocks).\n\nA unique feature to the Gutenberg documentation is the `codetabs` toggle, this allows two versions of code to be shown at once. This is used for showing both `JSX` and `Plain` code samples.\n\nHere is an example `codetabs` section:\n\n````md\n    \\{\\% codetabs \\%\\}\n    \\{\\% JSX \\%\\}\n    ```js\n    \/\/ JSX code here\n    ```\n    \\{\\% Plain \\%\\}\n    ```js\n    \/\/ Plain code here\n    ```\n    \\{\\% end \\%\\}\n````\n\nThe preferred format for code examples is JSX. This should be the default view. The example placed first in source will be shown as the default.\n\n**Note:** It is not required to include plain JavaScript code examples for every guide. The recommendation is to include plain code for beginner tutorials or short examples, but the majority of code in Gutenberg packages and across the larger React and JavaScript ecosystem are in JSX that requires a build process.\n\n### Callout notices\n\nThe Block Editor handbook supports the same [notice styles as other WordPress handbooks](https:\/\/make.wordpress.org\/docs\/handbook\/documentation-team-handbook\/handbooks-style-and-formatting-guide\/#formatting). However, the shortcode implementation is not ideal with the different locations the block editor handbook documentation is published (npm, GitHub).\n\nThe recommended way to implement in markdown is to use the raw HTML and `callout callout-LEVEL` classes. For example:\n\n```html\n<div class=\"callout callout-info\">This is an **info** callout.<\/div>\n```\n\nThe following classes are available: `info`, `tip`, `alert`, `warning`\n\n<div class=\"callout callout-tip\">\nThis is a **tip** callout.\n<\/div>\n\n<div class=\"callout callout-info\">\nThis is an **info** callout.\n<\/div>\n\n<div class=\"callout callout-alert\">\nThis is an **alert** callout.\n<\/div>\n\n<div class=\"callout callout-warning\">\nThis is a **warning** callout.\n<\/div>\n\n<div class=\"callout callout-warning\">\nNote: In callout notices, links also need to be HTML `&lt;a href>&lt;\/a>` notations. \nThe usual link transformation is not applied to links in callouts.\nFor instance, to reach the Getting started > Create Block page, the URL in GitHub is\nhttps:\/\/developer.wordpress.org\/docs\/getting-started\/devenv\/get-started-with-create-block.md\nand will have to be hardcoded for the endpoint in the Block Editor Handbook as \n<a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/create-block\/\">https:\/\/developer.wordpress.org\/block-editor\/getting-started\/create-block\/<\/a> to link correctly in the handbook. \n<\/div>\n### Editor config\n\nYou should configure your editor to use Prettier to auto-format markdown documents. See the [Getting Started documentation](\/docs\/contributors\/code\/getting-started-with-code-contribution.md) for complete details.\n\nAn example config for using Visual Studio Code and the Prettier extensions:\n\n```json\n\"[[markdown]]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n},\n```\n\n<div class=\"callout callout-info\">\nDepending on where you are viewing this document, the brackets may show as double. The proper format is just a single bracket.\n<\/div>\n\n### Video embeds\n\nVideos in the Block Editor Handbook need to be hosted on the [WordPress YouTube channel](https:\/\/www.youtube.com\/@WordPress) as unlisted videos. This process requires additional permissions. Reach out in the #marketing Slack channel for assistance.\n\nOnce the video has been uploaded to YouTube, retrieve the video embed link. It should look something like this: \n\n```\nhttps:\/\/www.youtube.com\/embed\/nrut8SfXA44?si=YxvmHmAoYx-BDCog\n```\n\nThen, place the following code where you want the video to be embedded in the documentation. Update the embed link and video title accordingly.\n\n```html\n<iframe width=\"960\" height=\"540\" src=\"[Video embed link]\" title=\"[Video title]\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"true\"><\/iframe>\n```\n\n<div class=\"callout callout-info\">\nVideos should have an aspect ratio of <code>16:9<\/code> and be filmed at the highest resolution possible.\n<\/div>\n\n## Resources\n\n-   [Copy Guidelines](\/docs\/contributors\/documentation\/copy-guide.md) for writing instructions, documentation, or other contributions to the Gutenberg project.\n\n-   [Tone and Voice Guide](https:\/\/make.wordpress.org\/docs\/handbook\/documentation-team-handbook\/tone-and-voice-guide\/) from WordPress Documentation.\n"
    },
    {
        "path": "\/markdown\/contributors\/documentation\/how-to-guide-template.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">How to guide template<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Overview<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A how to guide walks through a series of steps focused on completing a single task. The guide's goal is not on teaching concepts, but to answer the question \"how do I ... \".<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The overview section summarizes the problem and can include context on how and where you might use the solution properly.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Before you start<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Include a section on assumptions and prerequisites:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Pre-requisite one: WordPress development environment<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pre-requisite two: familiarity with JavaScript and Gutenberg<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pre-requisite three: custom block or theme<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Include other important information here, such as known issues or bugs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Step-by-step guide<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The guide should include step-by-step directions. Use code snippets, images, or screenshots to help illustrate each step. Include as many (or as few) steps as needed, try to keep each step short and easy to follow.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 1: Optional: title<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Brief instructions explaining the first step.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 2: Optional: title<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Lead-in sentence for an ordered list:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Sub-step A<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sub-step B<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sub-step C<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 3: Optional: title<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Lead-in sentence explaining the code snippet. For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm install\nnpm run build\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Troubleshooting<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>What can go wrong?<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>What are potential error messages and what to do?<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Provide a summary of the steps completed and explain what the user has achieved. You can include links to related articles, more complex examples, or how to learn more on the topic.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<!--\nThis documentation is based on templates from The Good Docs Project.\nThis comment can be removed in your guide.\n-->\n<!-- \/wp:html -->",
        "markdown": "# How to guide template\n\n## Overview\n\nA how to guide walks through a series of steps focused on completing a single task. The guide's goal is not on teaching concepts, but to answer the question \"how do I ... \".\n\nThe overview section summarizes the problem and can include context on how and where you might use the solution properly.\n\n## Before you start\n\nInclude a section on assumptions and prerequisites:\n\n-   Pre-requisite one: WordPress development environment\n-   Pre-requisite two: familiarity with JavaScript and Gutenberg\n-   Pre-requisite three: custom block or theme\n\nInclude other important information here, such as known issues or bugs.\n\n## Step-by-step guide\n\nThe guide should include step-by-step directions. Use code snippets, images, or screenshots to help illustrate each step. Include as many (or as few) steps as needed, try to keep each step short and easy to follow.\n\n### Step 1: Optional: title\n\nBrief instructions explaining the first step.\n\n### Step 2: Optional: title\n\nLead-in sentence for an ordered list:\n\n1. Sub-step A\n1. Sub-step B\n1. Sub-step C\n\n### Step 3: Optional: title\n\nLead-in sentence explaining the code snippet. For example:\n\n```shell\nnpm install\nnpm run build\n```\n\n## Troubleshooting\n\n-   What can go wrong?\n-   What are potential error messages and what to do?\n\n## Conclusion\n\nProvide a summary of the steps completed and explain what the user has achieved. You can include links to related articles, more complex examples, or how to learn more on the topic.\n\n<!--\nThis documentation is based on templates from The Good Docs Project.\nThis comment can be removed in your guide.\n-->\n"
    },
    {
        "path": "\/markdown\/contributors\/documentation\/copy-guide.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Copy Guidelines<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Longer Text<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Guidelines for writing multi-line\/step instructions or narrative introductions\/orientation to pages or features.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This will obviously vary quite a lot depending on the context, but here are some general tips:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">ONE: Contractions are your friends!<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>They\u2019re more conversational, and a simple way to make text sound friendlier and less formal. (And they save a bit of space as well: a win-win.)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">TWO: Cut phrases that inflate your word count without actually adding meaning.<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This happens frequently in two specific instances. First, when writing in the passive voice:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>This block can be used to display single images.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Any time you see phrases like \u201ccan be\u201d or \u201cis used\u201d: halt. You\u2019re writing in the passive voice. Try going active for a snappier (and shorter) sentence:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>This block displays single images.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Second, this happens when we hedge instead of making declarative statements:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>The gallery block can help you display multiple images in an elegant layout.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Does it or doesn\u2019t it? We\u2019re making this software: we\u2019re allowed to be declarative about what it is and does:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>The gallery block displays multiple images in an elegant layout.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>We also all do this a lot with the phrase \u201callows you to.\u201d<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Preformatted text allows you to keep your tabs and line breaks.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Features don\u2019t allow anyone to do anything; they\u2019re just tools that do specific things to achieve an end. Just say what they do:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Preformatted text preserves your tabs and line breaks.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>The more direct sentences are almost always clearer. Scan your copy for the words \u201ccan,\u201d \u201cbe,\u201d \u201cmight,\u201d \u201callows you to,\u201d and \u201chelps\u201d\u2014they\u2019re the most common culprits, and looking for those words specifically is a way to locate phrasing you can tighten up.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">THREE: Beware of \u201csimple,\u201d \u201ceasy,\u201d and \u201cjust.\u201d<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It is not for us to decide what is simple: it\u2019s for the user to decide. If we say something is easy and the user doesn\u2019t have an easy experience, it undermines their trust in us and what we\u2019re building. The same goes for \u201cjust\u201d\u2014many of us know to avoid \u201csimple,\u201d but still use \u201cjust\u201d all the time. \u201cJust click here.\u201d \u201cJust enter your username.\u201d It\u2019s the same thing: it implies that something will be no big deal, but we can\u2019t know what the user will find to be a big deal.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\u2019s also safer and more helpful to be specific. \u201cEasy\u201d and \u201csimple\u201d are shorthand for explanations that we haven\u2019t written; whenever you see them, take a minute to think about what they\u2019re standing in for. Maybe \u201cIt\u2019s easy to add a block by hitting \u2018enter\u2019\u201d really means \u201cYou can add more content to the page without taking your hands off the keyboard.\u201d Great! Say the specific thing instead of relying on \u201ceasy.\u201d<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This isn\u2019t to say that you should banish these words from your vocabulary. You might want to write a tooltip describing how the cover image block now requires less configuration, or an email about how we\u2019re building a tool for quick creation of custom blocks, and you could legitimately say that the cover image block has been simplified or that we\u2019re working to make custom block creation easier\u2014there, the terms are descriptive and relative. But be on the lookout for ways you might be using (or overusing) them to make absolute claims that something is easy or simple, and use those as opportunities to be more specific and clear.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">FOUR: Look out for \u201cwe.\u201d<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Any time text or instructions uses \u201cwe\u201d a lot, it means the focus of the text is on the people behind the software and not the people using the software. Sometimes that\u2019s what you actually want\u2014but it\u2019s usually not. The focus should typically be on the user, what they need, and how they benefit rather than \u201cwhat we did\u201d or \u201cwhat we want.\u201d<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We\u2019re the only ones that care about what we did or want; the user just wants software that works. If you see a lot of \u201cwe\u201ds, think about whether you should reframe what you\u2019re writing to focus on the benefits to and successes of the user.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Bulleted Lists<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Guidelines for (duh) writing bulleted lists.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">ONE: Keep sentence structures parallel across all bullets.<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Parallel structure makes lists easier to read quickly\u2014their predictability takes some cognitive load off the reader.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>GOOD:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>What can you do with this block? Lots of things!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Add a quote.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Highlight a link.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Display multiple images.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create a bulleted list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Every bullet is a full sentence, and ends with a period. (If your list is a bunch of one- or two-word items, those can often just turn into a single regular sentence\u2014easier to read, and space-saving.) Every line begins with a verb that tells the user what the block can do. The subject of the sentence is always the user.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A user can absorb this list quickly because once they read the first item, they understand how to read the rest and know what information they\u2019ll find.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>LESS GOOD:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>What can you do with this block? Lots of things!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>You can add a quote.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Highlighting a link you love.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>It displays multiple images. Nice for galleries!<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Bulleted lists<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Here, every line has different phrasing (some start with a verb, some with a noun) and the subject of the sentence changes (sometimes it\u2019s you, sometimes it\u2019s the block). Some lines have added description, some don't. There\u2019s an incomplete sentence, and punctuation is inconsistent.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reading this list takes more work because the reader has to parse each bullet anew. They can\u2019t assume each bullet will contain similar information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note: this doesn't mean every bullet has to be super short and start with an action verb! \u201cPredictable\u201d doesn\u2019t have to mean \u201csimple.\u201d It just means that each bullet should have the same sentence structure. This list would also be fine:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>What can you do with this block? Lots of things!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Try adding a quote. Sometimes someone else said things best!<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Use it to highlight a link you love\u2014sharing links is the currency of the internet.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create a gallery that displays multiple images, and show off your best photos.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Here, each bullet starts with a more user-focused verb and includes a piece of supplemental information for more interest. The punctuation varies a bit, which keeps the lines from feeling too formulaic, but since the basic structure of each is the same, they remain easy to read.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">TWO: When in doubt, start with a verb. (But not always the same verb.)<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Do you have to start with a verb? No. But if you\u2019re at a loss, you usually can\u2019t go wrong with a verb (especially since bulleted lists are often describing a series of actions or possible actions).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In a simple list that\u2019s meant to be purely instructional (e.g., in UI copy where you just need the user to make a decision), it might be fine to start every bullet with the same verb:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>To continue, choose an action:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Add a simple text block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Add a pullquote block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Add an image block.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>If your list is more persuasive (e.g., trying to convince someone to use a feature by listing its benefits) or includes multi-step instructions, you\u2019ll want to vary your verbs to keep the reader engaged with more interesting language, as in the example above:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>What can you do with this block? Lots of things!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Try adding a quote. Sometimes someone else said things best!<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Use it to highlight a link you love\u2014sharing links is the currency of the internet.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create a gallery that displays multiple images, and show off your best photos.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>These aren\u2019t hard-and-fast rules\u2014you might choose the use the same verb in a persuasive list to be more focused and powerful, for example. But they\u2019re good starting places for solid lists.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">THREE: When something's clearly a list, you don't have to tell us it's a list.<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>GOOD:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>What can you do with this block? Lots of things!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Add a quote.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Highlight a link you love.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Display multiple images.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>LESS GOOD:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>What can you do with this block? Lots of things! Here are some examples of ways you can use it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>You can add a quote.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Highlighting a link you love.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>It displays multiple images. Nice for galleries!<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Find the balance between being as clear as possible and trusting a user. On one hand, we know that people don\u2019t always read instructions; on the other, redundancy can make the user feel like we think they\u2019re stupid.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">FOUR: Bold is sometimes your friend.<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Use it to focus readers on the key information in a bulleted list. This is especially useful when your bullets include some supplemental but ultimately secondary information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u201cKey information\u201d is, well, key: bold draws the eye, so stick to the most vital piece of information in a given bullet:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>What can you do with this block? Lots of things!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Try adding a <strong>quote<\/strong>. Sometimes someone else said things best!<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Use it to highlight a <strong>link<\/strong> you love\u2014sharing links is the currency of the internet.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create a <strong>gallery<\/strong> that displays multiple images, and show off your best photos.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>On the flipside, bolding too many things creates visual confusion:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p><strong>What can you do with this block?<\/strong> Lots of things!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Try adding a <strong>quote<\/strong>. Sometimes someone else said things best!<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Use it to highlight a <strong>link<\/strong> you love\u2014sharing <strong>links<\/strong> is the currency of the internet.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create a <strong>gallery<\/strong> that displays <strong>multiple images<\/strong>, and show off your best <strong>photos<\/strong>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>When lists are short and basic, don't bother\u2014bolding just adds busy-ness.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>What can you do with this block? Lots of things!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Add a <strong>quote<\/strong>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Highlight a <strong>link<\/strong>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Display multiple <strong>images<\/strong>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>The lack of words creates its own focus; you don't have to add any more.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">UI Descriptions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Guidelines for writing one-line feature descriptions, or short descriptions to clarify options.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">ONE: Clarity above all!<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If the user doesn't understand what using a particular option will result in, it doesn't matter how clever your pun is. Wordplay and idioms are frequently unclear, and easily misunderstood. If you use them at all, they should be as supplemental information\u2014 never to explain the main idea\u2014and they should be something you\u2019re fairly certain will be understandable to a pretty wide range of people.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">TWO: Refer back to section one, and look out for those bulk-adding phrases.<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Active voice is typically the better way to go, and cutting out the bulky phrasing is particularly important when you\u2019ve got limited space and you need people to be able to make decisions and act. Often you can shorten a UI instruction phrase to be both shorter and clearer:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>When you click X, Y happens.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>vs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Click X to do Y.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>While it can feel like adding the extra words helps walk a user through the product, the extra words just serve to obscure the point being communicated:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>When you click the \u201csettings\u201d button, the pop-up will display the advanced settings that are available.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>vs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Click \u201csettings\u201d to access the advanced settings.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Similar phrases are \u201cOnce you do X\u2026\u201d or \u201cIf you want to do X\u2026\u201d Sometimes there are decision points where \u201cIf you want to do X\u2026\u201d is entirely appropriate because there are different paths the user can take based on their goal. But, we often use it to mean \u201cHere is a thing you can do,\u201d which you can express more simply as: \u201cTo do X\u2026\u201d<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">THREE: Be specific.<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When an action depends on the user having completed some prior action, be specific about what\u2019s required and what happens next. We often default to \u201cwhen you\u2019re ready.\u201d<br>Ready for what? Be specific about whatever the prerequisites are.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u201cWhen you\u2019re ready\u201d can mean:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>When you want to add another block\u201d<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>When you\u2019re satisfied with your post\u201d<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>After you\u2019ve finished proofreading your post\u201d<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>When you\u2019d like to add a featured image\u201d<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>After you\u2019ve configured all the settings\u201d<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>And when something means everything, it actually means nothing. The more specific instructions are, the more useful they are, and the more trust the person following them will have in the product.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">FOUR: This is still writing. It should have personality and interest.<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Clarity above all, yes, and space is often limited here\u2014but UI text can still be interesting to read.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Single lines of description can still be complete sentences.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>List. Numbered or bulleted.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>vs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Add a list, either numbered or bulleted.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>You can still use contractions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Add a list. We will provide formatting options.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>vs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Add a bulleted list\u2014we\u2019ll give you some formatting options.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>You can still use punctuation\u2014em dashes, colons, semicolons\u2014to control the flow of your words, link ideas, and create pauses.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>List. Numbered or bulleted.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>vs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Add a list\u2014numbered or bulleted. Your choice!<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>You can still try to avoid jargon in favor of plain language.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Add unordered or ordered list.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>vs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Add a list, either numbered or bulleted.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>(And because it bears repeating: no wordplay, please! \u201cPersonality\u201d can\u2014and in UI instructions, should\u2014be subtle. We\u2019re talking about text that sounds like it was said by a human being, not forced attempts at whimsy.)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">FIVE: Pay attention to capitalization.<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When it comes to headlines and subheads, there are two ways to capitalize:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In Title Case, the First Letter of Almost Every Word Is Capitalized<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In sentence case, only the first letter of the line is capitalized<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Feature names and dashboard sections typically use title case (think \u201cSite Stats\u201d or \u201cRecently Published\u201d), whereas feature labels typically use sentence case (like \u201cShow buttons on\u201d or \u201cComment Likes are,\u201d where \u201cLikes\u201d is capitalized because it\u2019s the feature name, but the overall label is using sentence case).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you\u2019re looking at a full page of UI copy, make sure you\u2019re being consistent across all of it, and that all similar kinds of copy\u2014headlines, tooltips, buttons, etc.\u2014are using the same case.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Error Messaging<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Guidelines for writing error messages that are understandable and useful.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">ONE: Don\u2019t ignore voice\/tone in error messaging\u2014they communicate a lot.<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Voice and tone can say as much as the individual words themselves. Error messages have to convey a significant amount of information and usually need to be fairly short, but try not to sacrifice tone, or to go too far in either a negative or positive direction.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s say someone\u2019s trying to publish a post, but their user role doesn\u2019t allow them to do that. Here are some ways we could\u2014but should not\u2014communicate that:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Your user role is incorrect.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Here, we sound distant and uncaring.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Stop! You do not have permission to do this.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Here, we sound unnecessarily alarmist and stern.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Oopsie, we can\u2019t let you do that!<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Here, we sound too cute.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We can stay direct, positive, and friendly, even in error messages. How? With tips two through four!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">TWO: Whenever possible, offer a path to resolution.<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A good error message doesn\u2019t just alert someone to the fact that something is wrong.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Your user role is incorrect.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Okay, fine. Why does that matter? What do I do about it? How does this message help me? I need to know why my user role matters, and how to get the role I need so I can complete the action I want to complete. An error message that doesn\u2019t provide any instruction leaves the user without a path forward; they can\u2019t avoid repeating the action that led to the error if we don\u2019t tell them now.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">THREE: Don\u2019t lean on jargon to cut down on words when space is tight.<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Your user role is incorrect. Contact a site administrator.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Maybe we\u2019re getting somewhere here: now I know there\u2019s something I can do about things, which is good.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then again, maybe we\u2019re not: I still don\u2019t know what my role is, or why it matters. Also, now I\u2019m not sure what a site administrator is, who mine is, or how to contact them.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>All the information in this error message is technically entirely correct, but that doesn\u2019t mean it communicates anything useful. If the goal is understanding and resolution, technical accuracy doesn\u2019t always get us there.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u201cYour account does not have permission to publish posts\u201d doesn\u2019t use the language of the user roles UI, but it does explain what\u2019s gone wrong and I can understand it even if I don\u2019t know what a user role is. And since I understand, I\u2019m also better placed to understand the resolution, even if the message ended here: I can see that I need to get permission.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Consistency with existing UI language is great, but not when it gets in the way of understanding.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">FOUR: Don\u2019t assume people understand where the error came from.<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Your user role is incorrect.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>It might seem obvious to us that the user got this message when they tried to publish something or change a setting that they don\u2019t have permission for. It might not be so obvious to the user: people click around a lot, especially when we\u2019re unsure how to do something, and we don\u2019t always remember what page or setting we were just looking at (or why!).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A good error message also includes some context that orients the user. \u201cYour account does not have permission to publish posts\u201d reminds them that they were trying to publish a post, and that that\u2019s the particular stumbling block that caused the error.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Copy Guidelines\n\n## Longer Text\n\nGuidelines for writing multi-line\/step instructions or narrative introductions\/orientation to pages or features.\n\nThis will obviously vary quite a lot depending on the context, but here are some general tips:\n\n#### ONE: Contractions are your friends!\n\nThey\u2019re more conversational, and a simple way to make text sound friendlier and less formal. (And they save a bit of space as well: a win-win.)\n\n#### TWO: Cut phrases that inflate your word count without actually adding meaning.\n\nThis happens frequently in two specific instances. First, when writing in the passive voice:\n\n> This block can be used to display single images.\n\nAny time you see phrases like \u201ccan be\u201d or \u201cis used\u201d: halt. You\u2019re writing in the passive voice. Try going active for a snappier (and shorter) sentence:\n\n> This block displays single images.\n\nSecond, this happens when we hedge instead of making declarative statements:\n\n> The gallery block can help you display multiple images in an elegant layout.\n\nDoes it or doesn\u2019t it? We\u2019re making this software: we\u2019re allowed to be declarative about what it is and does:\n\n> The gallery block displays multiple images in an elegant layout.\n\nWe also all do this a lot with the phrase \u201callows you to.\u201d\n\n> Preformatted text allows you to keep your tabs and line breaks.\n\nFeatures don\u2019t allow anyone to do anything; they\u2019re just tools that do specific things to achieve an end. Just say what they do:\n\n> Preformatted text preserves your tabs and line breaks.\n\nThe more direct sentences are almost always clearer. Scan your copy for the words \u201ccan,\u201d \u201cbe,\u201d \u201cmight,\u201d \u201callows you to,\u201d and \u201chelps\u201d\u2014they\u2019re the most common culprits, and looking for those words specifically is a way to locate phrasing you can tighten up.\n\n#### THREE: Beware of \u201csimple,\u201d \u201ceasy,\u201d and \u201cjust.\u201d\n\nIt is not for us to decide what is simple: it\u2019s for the user to decide. If we say something is easy and the user doesn\u2019t have an easy experience, it undermines their trust in us and what we\u2019re building. The same goes for \u201cjust\u201d\u2014many of us know to avoid \u201csimple,\u201d but still use \u201cjust\u201d all the time. \u201cJust click here.\u201d \u201cJust enter your username.\u201d It\u2019s the same thing: it implies that something will be no big deal, but we can\u2019t know what the user will find to be a big deal.\n\nIt\u2019s also safer and more helpful to be specific. \u201cEasy\u201d and \u201csimple\u201d are shorthand for explanations that we haven\u2019t written; whenever you see them, take a minute to think about what they\u2019re standing in for. Maybe \u201cIt\u2019s easy to add a block by hitting \u2018enter\u2019\u201d really means \u201cYou can add more content to the page without taking your hands off the keyboard.\u201d Great! Say the specific thing instead of relying on \u201ceasy.\u201d\n\nThis isn\u2019t to say that you should banish these words from your vocabulary. You might want to write a tooltip describing how the cover image block now requires less configuration, or an email about how we\u2019re building a tool for quick creation of custom blocks, and you could legitimately say that the cover image block has been simplified or that we\u2019re working to make custom block creation easier\u2014there, the terms are descriptive and relative. But be on the lookout for ways you might be using (or overusing) them to make absolute claims that something is easy or simple, and use those as opportunities to be more specific and clear.\n\n#### FOUR: Look out for \u201cwe.\u201d\n\nAny time text or instructions uses \u201cwe\u201d a lot, it means the focus of the text is on the people behind the software and not the people using the software. Sometimes that\u2019s what you actually want\u2014but it\u2019s usually not. The focus should typically be on the user, what they need, and how they benefit rather than \u201cwhat we did\u201d or \u201cwhat we want.\u201d\n\nWe\u2019re the only ones that care about what we did or want; the user just wants software that works. If you see a lot of \u201cwe\u201ds, think about whether you should reframe what you\u2019re writing to focus on the benefits to and successes of the user.\n\n## Bulleted Lists\n\nGuidelines for (duh) writing bulleted lists.\n\n#### ONE: Keep sentence structures parallel across all bullets.\n\nParallel structure makes lists easier to read quickly\u2014their predictability takes some cognitive load off the reader.\n\nGOOD:\n\n> What can you do with this block? Lots of things!\n>\n> -   Add a quote.\n> -   Highlight a link.\n> -   Display multiple images.\n> -   Create a bulleted list.\n\nEvery bullet is a full sentence, and ends with a period. (If your list is a bunch of one- or two-word items, those can often just turn into a single regular sentence\u2014easier to read, and space-saving.) Every line begins with a verb that tells the user what the block can do. The subject of the sentence is always the user.\n\nA user can absorb this list quickly because once they read the first item, they understand how to read the rest and know what information they\u2019ll find.\n\nLESS GOOD:\n\n> What can you do with this block? Lots of things!\n>\n> -   You can add a quote.\n> -   Highlighting a link you love.\n> -   It displays multiple images. Nice for galleries!\n> -   Bulleted lists\n\nHere, every line has different phrasing (some start with a verb, some with a noun) and the subject of the sentence changes (sometimes it\u2019s you, sometimes it\u2019s the block). Some lines have added description, some don't. There\u2019s an incomplete sentence, and punctuation is inconsistent.\n\nReading this list takes more work because the reader has to parse each bullet anew. They can\u2019t assume each bullet will contain similar information.\n\nNote: this doesn't mean every bullet has to be super short and start with an action verb! \u201cPredictable\u201d doesn\u2019t have to mean \u201csimple.\u201d It just means that each bullet should have the same sentence structure. This list would also be fine:\n\n> What can you do with this block? Lots of things!\n>\n> -   Try adding a quote. Sometimes someone else said things best!\n> -   Use it to highlight a link you love\u2014sharing links is the currency of the internet.\n> -   Create a gallery that displays multiple images, and show off your best photos.\n\nHere, each bullet starts with a more user-focused verb and includes a piece of supplemental information for more interest. The punctuation varies a bit, which keeps the lines from feeling too formulaic, but since the basic structure of each is the same, they remain easy to read.\n\n#### TWO: When in doubt, start with a verb. (But not always the same verb.)\n\nDo you have to start with a verb? No. But if you\u2019re at a loss, you usually can\u2019t go wrong with a verb (especially since bulleted lists are often describing a series of actions or possible actions).\n\nIn a simple list that\u2019s meant to be purely instructional (e.g., in UI copy where you just need the user to make a decision), it might be fine to start every bullet with the same verb:\n\n> To continue, choose an action:\n>\n> -   Add a simple text block.\n> -   Add a pullquote block.\n> -   Add an image block.\n\nIf your list is more persuasive (e.g., trying to convince someone to use a feature by listing its benefits) or includes multi-step instructions, you\u2019ll want to vary your verbs to keep the reader engaged with more interesting language, as in the example above:\n\n> What can you do with this block? Lots of things!\n>\n> -   Try adding a quote. Sometimes someone else said things best!\n> -   Use it to highlight a link you love\u2014sharing links is the currency of the internet.\n> -   Create a gallery that displays multiple images, and show off your best photos.\n\nThese aren\u2019t hard-and-fast rules\u2014you might choose the use the same verb in a persuasive list to be more focused and powerful, for example. But they\u2019re good starting places for solid lists.\n\n#### THREE: When something's clearly a list, you don't have to tell us it's a list.\n\nGOOD:\n\n> What can you do with this block? Lots of things!\n>\n> -   Add a quote.\n> -   Highlight a link you love.\n> -   Display multiple images.\n\nLESS GOOD:\n\n> What can you do with this block? Lots of things! Here are some examples of ways you can use it.\n>\n> -   You can add a quote.\n> -   Highlighting a link you love.\n> -   It displays multiple images. Nice for galleries!\n\nFind the balance between being as clear as possible and trusting a user. On one hand, we know that people don\u2019t always read instructions; on the other, redundancy can make the user feel like we think they\u2019re stupid.\n\n#### FOUR: Bold is sometimes your friend.\n\nUse it to focus readers on the key information in a bulleted list. This is especially useful when your bullets include some supplemental but ultimately secondary information.\n\n\u201cKey information\u201d is, well, key: bold draws the eye, so stick to the most vital piece of information in a given bullet:\n\n> What can you do with this block? Lots of things!\n>\n> -   Try adding a **quote**. Sometimes someone else said things best!\n> -   Use it to highlight a **link** you love\u2014sharing links is the currency of the internet.\n> -   Create a **gallery** that displays multiple images, and show off your best photos.\n\nOn the flipside, bolding too many things creates visual confusion:\n\n> **What can you do with this block?** Lots of things!\n>\n> -   Try adding a **quote**. Sometimes someone else said things best!\n> -   Use it to highlight a **link** you love\u2014sharing **links** is the currency of the internet.\n> -   Create a **gallery** that displays **multiple images**, and show off your best **photos**.\n\nWhen lists are short and basic, don't bother\u2014bolding just adds busy-ness.\n\n> What can you do with this block? Lots of things!\n>\n> -   Add a **quote**.\n> -   Highlight a **link**.\n> -   Display multiple **images**.\n\nThe lack of words creates its own focus; you don't have to add any more.\n\n## UI Descriptions\n\nGuidelines for writing one-line feature descriptions, or short descriptions to clarify options.\n\n#### ONE: Clarity above all!\n\nIf the user doesn't understand what using a particular option will result in, it doesn't matter how clever your pun is. Wordplay and idioms are frequently unclear, and easily misunderstood. If you use them at all, they should be as supplemental information\u2014 never to explain the main idea\u2014and they should be something you\u2019re fairly certain will be understandable to a pretty wide range of people.\n\n#### TWO: Refer back to section one, and look out for those bulk-adding phrases.\n\nActive voice is typically the better way to go, and cutting out the bulky phrasing is particularly important when you\u2019ve got limited space and you need people to be able to make decisions and act. Often you can shorten a UI instruction phrase to be both shorter and clearer:\n\n> When you click X, Y happens.\n\nvs.\n\n> Click X to do Y.\n\nWhile it can feel like adding the extra words helps walk a user through the product, the extra words just serve to obscure the point being communicated:\n\n> When you click the \u201csettings\u201d button, the pop-up will display the advanced settings that are available.\n\nvs.\n\n> Click \u201csettings\u201d to access the advanced settings.\n\nSimilar phrases are \u201cOnce you do X\u2026\u201d or \u201cIf you want to do X\u2026\u201d Sometimes there are decision points where \u201cIf you want to do X\u2026\u201d is entirely appropriate because there are different paths the user can take based on their goal. But, we often use it to mean \u201cHere is a thing you can do,\u201d which you can express more simply as: \u201cTo do X\u2026\u201d\n\n#### THREE: Be specific.\n\nWhen an action depends on the user having completed some prior action, be specific about what\u2019s required and what happens next. We often default to \u201cwhen you\u2019re ready.\u201d\nReady for what? Be specific about whatever the prerequisites are.\n\n\u201cWhen you\u2019re ready\u201d can mean:\n\n-   When you want to add another block\u201d\n-   When you\u2019re satisfied with your post\u201d\n-   After you\u2019ve finished proofreading your post\u201d\n-   When you\u2019d like to add a featured image\u201d\n-   After you\u2019ve configured all the settings\u201d\n\nAnd when something means everything, it actually means nothing. The more specific instructions are, the more useful they are, and the more trust the person following them will have in the product.\n\n#### FOUR: This is still writing. It should have personality and interest.\n\nClarity above all, yes, and space is often limited here\u2014but UI text can still be interesting to read.\n\nSingle lines of description can still be complete sentences.\n\n> List. Numbered or bulleted.\n\nvs.\n\n> Add a list, either numbered or bulleted.\n\nYou can still use contractions.\n\n> Add a list. We will provide formatting options.\n\nvs.\n\n> Add a bulleted list\u2014we\u2019ll give you some formatting options.\n\nYou can still use punctuation\u2014em dashes, colons, semicolons\u2014to control the flow of your words, link ideas, and create pauses.\n\n> List. Numbered or bulleted.\n\nvs.\n\n> Add a list\u2014numbered or bulleted. Your choice!\n\nYou can still try to avoid jargon in favor of plain language.\n\n> Add unordered or ordered list.\n\nvs.\n\n> Add a list, either numbered or bulleted.\n\n(And because it bears repeating: no wordplay, please! \u201cPersonality\u201d can\u2014and in UI instructions, should\u2014be subtle. We\u2019re talking about text that sounds like it was said by a human being, not forced attempts at whimsy.)\n\n#### FIVE: Pay attention to capitalization.\n\nWhen it comes to headlines and subheads, there are two ways to capitalize:\n\nIn Title Case, the First Letter of Almost Every Word Is Capitalized\n\nIn sentence case, only the first letter of the line is capitalized\n\nFeature names and dashboard sections typically use title case (think \u201cSite Stats\u201d or \u201cRecently Published\u201d), whereas feature labels typically use sentence case (like \u201cShow buttons on\u201d or \u201cComment Likes are,\u201d where \u201cLikes\u201d is capitalized because it\u2019s the feature name, but the overall label is using sentence case).\n\nWhen you\u2019re looking at a full page of UI copy, make sure you\u2019re being consistent across all of it, and that all similar kinds of copy\u2014headlines, tooltips, buttons, etc.\u2014are using the same case.\n\n## Error Messaging\n\nGuidelines for writing error messages that are understandable and useful.\n\n#### ONE: Don\u2019t ignore voice\/tone in error messaging\u2014they communicate a lot.\n\nVoice and tone can say as much as the individual words themselves. Error messages have to convey a significant amount of information and usually need to be fairly short, but try not to sacrifice tone, or to go too far in either a negative or positive direction.\n\nLet\u2019s say someone\u2019s trying to publish a post, but their user role doesn\u2019t allow them to do that. Here are some ways we could\u2014but should not\u2014communicate that:\n\n> Your user role is incorrect.\n\nHere, we sound distant and uncaring.\n\n> Stop! You do not have permission to do this.\n\nHere, we sound unnecessarily alarmist and stern.\n\n> Oopsie, we can\u2019t let you do that!\n\nHere, we sound too cute.\n\nWe can stay direct, positive, and friendly, even in error messages. How? With tips two through four!\n\n#### TWO: Whenever possible, offer a path to resolution.\n\nA good error message doesn\u2019t just alert someone to the fact that something is wrong.\n\n> Your user role is incorrect.\n\nOkay, fine. Why does that matter? What do I do about it? How does this message help me? I need to know why my user role matters, and how to get the role I need so I can complete the action I want to complete. An error message that doesn\u2019t provide any instruction leaves the user without a path forward; they can\u2019t avoid repeating the action that led to the error if we don\u2019t tell them now.\n\n#### THREE: Don\u2019t lean on jargon to cut down on words when space is tight.\n\n> Your user role is incorrect. Contact a site administrator.\n\nMaybe we\u2019re getting somewhere here: now I know there\u2019s something I can do about things, which is good.\n\nThen again, maybe we\u2019re not: I still don\u2019t know what my role is, or why it matters. Also, now I\u2019m not sure what a site administrator is, who mine is, or how to contact them.\n\nAll the information in this error message is technically entirely correct, but that doesn\u2019t mean it communicates anything useful. If the goal is understanding and resolution, technical accuracy doesn\u2019t always get us there.\n\n\u201cYour account does not have permission to publish posts\u201d doesn\u2019t use the language of the user roles UI, but it does explain what\u2019s gone wrong and I can understand it even if I don\u2019t know what a user role is. And since I understand, I\u2019m also better placed to understand the resolution, even if the message ended here: I can see that I need to get permission.\n\nConsistency with existing UI language is great, but not when it gets in the way of understanding.\n\n#### FOUR: Don\u2019t assume people understand where the error came from.\n\n> Your user role is incorrect.\n\nIt might seem obvious to us that the user got this message when they tried to publish something or change a setting that they don\u2019t have permission for. It might not be so obvious to the user: people click around a lot, especially when we\u2019re unsure how to do something, and we don\u2019t always remember what page or setting we were just looking at (or why!).\n\nA good error message also includes some context that orients the user. \u201cYour account does not have permission to publish posts\u201d reminds them that they were trying to publish a post, and that that\u2019s the particular stumbling block that caused the error.\n"
    },
    {
        "path": "\/markdown\/contributors\/triage.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Triage<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To keep the repository healthy, it needs to be triaged regularly. <strong>Triage is the practice of reviewing existing issues and pull requests to make sure they\u2019re relevant, actionable, and have all the information they need<\/strong>. Anyone can help triage, although you\u2019ll need to be a member of the triage team for the Gutenberg repository to modify an issue\u2019s labels or edit its title.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Besides this page, the <a href=\"https:\/\/learn.wordpress.org\/tutorial\/how-to-do-triage-on-github\/\">How to do triage on GitHub<\/a> tutorial is another great resource to get introduced to triage<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Join the triage team<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The triage team is an open group of people with a particular role of making sure triage is done consistently across the Gutenberg repo. There are various types of triage which happen:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Regular self triage sessions done by members on their own time.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Organised triage sessions done as a group at a set time. You can <a href=\"https:\/\/make.wordpress.org\/meetings\/\">review the meetings page<\/a> to find these triage sessions and appropriate slack channels.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Focused triage sessions on a specific board, label or feature.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>These are the expectations of being a triage team member:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>You are expected to do some triage even if it is self triage at least once a week.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>As you can, try to join organized triage sessions.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If you join the triage team to focus on a specific label or board, the expectation is that your focus will be there. Please make this known to fellow triage team members.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>If you would like to join this team, simply ask in #core-editor <a href=\"https:\/\/make.wordpress.org\/chat\/\">Slack<\/a> at any time.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Triage your first issues<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To start simply choose from one of these filtered lists below. Note: You can find most of these filters by selecting the \u201cSort\u201d option from the <a href=\"https:\/\/github.com\/wordpress\/gutenberg\/issues\">overall Issues page<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>All Gutenberg issues <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues?q=is%3Aopen+is%3Aissue+no%3Alabel+sort%3Aupdated-asc\">without an assigned label<\/a><\/strong>. Triaging by simply adding labels helps people focused on certain aspects of Gutenberg find relevant issues easier and start working on them.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>All Gutenberg pull requests <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/pulls?q=is%3Aopen+is%3Apr+no%3Alabel\">without an assigned label<\/a><\/strong>. This requires a level of comfortability with code. For more guidance on which labels are best to use, please <a href=\"\/docs\/contributors\/repository-management.md#pull-requests\">review this section on labeling pull requests<\/a> for contributors. You can also always check with the person authoring the pull request to make sure the labels match what they are intending to do.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues?q=is%3Aopen+is%3Aissue+sort%3Aupdated-asc\">The least recently updated<\/a> Gutenberg issues<\/strong>. Triaging issues that are getting old and possibly out of date keeps important work from being overlooked.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>All Gutenberg issues <a href=\"https:\/\/github.com\/wordpress\/gutenberg\/issues?q=is%3Aissue+is%3Aopen+comments%3A0+\">with no comments<\/a><\/strong>. Triaging this list helps make sure all issues are acknowledged, and can help identify issues that may need more information or discussion before they are actionable.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/github.com\/wordpress\/gutenberg\/issues?q=is%3Aissue+is%3Aopen+sort%3Acomments-asc\">The least commented<\/a> on Gutenberg issues<\/strong>. Triaging this list helps the community figure out what things might still need traction for certain proposals.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/github.com\/wordpress\/gutenberg\/issues?q=is%3Aissue+is%3Aopen+sort%3Acomments-desc\">The most commented<\/a> on Gutenberg issues<\/strong>. If you feel comfortable chiming in and the conversation has stagnated, the best way to triage these kinds of issues is to summarize the discussion thus far and do your best to identify action items, blockers, etc. Triaging this list allows finding solutions to important and complex issues to move forward.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>You can also <strong>create your own custom set of filters on GitHub<\/strong>. If you have a filter you think might be useful for the community, feel free to submit a PR to add it to this list.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">General triage process<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When triaging, either one of the lists above or issues in general, work through issues one-by-one. Here are some steps you can perform for each issue:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>First <strong>search for duplicates<\/strong>. If the issue is duplicate, close it by commenting with \u201cDuplicate of #\u201d and add any relevant new details to the existing issue. (Don\u2019t forget to search for duplicates among closed issues as well!).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If the <strong>issue is missing labels, add some<\/strong> to better categorize it (requires proper permissions given after joining the triage team). A good starting place when adding labels is to apply one of the labels prefixed [Type] (e.g. [Type] Enhancement or [Type] Bug) to indicate what kind of issue it is. After that consider adding more descriptive labels. If the issue concerns a particular core block, add one of the labels prefixed [Block]. Or if the issue affects a particular feature there are [Feature] labels. Finally, there are labels that affect particular interest areas, like Accessibility and Internationalization. You can view all possible labels <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\">here<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If the <strong>title doesn\u2019t communicate the issue clearly enough, edit it for clarity<\/strong> (requires proper permissions). Specifically, we\u2019d recommend having the main feature the issue relates to in the beginning of the title (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\/6193\">example<\/a>) and for the title to generally be as succinct yet descriptive as possible (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\/6193\">example<\/a>).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If it\u2019s a <strong>bug report, test to confirm the report or add the <code>Needs Testing<\/code> label<\/strong>. If there is not enough information to confirm the report, add the <code>[Status] Needs More Info<\/code> label and ask for the details needed. It\u2019s particularly beneficial when a bug report has steps for reproduction so ask the reporter to add those if they\u2019re missing.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Remove the <code>[Status] Needs More Info<\/code> when is no longer needed<\/strong>, for example if the author of the issue has responded with enough details.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Close the inactive <code>[Status] Needs More Info<\/code> issues with a note<\/strong> if the author didn't respond in 2+ weeks.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If there was a conversation on the issue but <strong>no actionable steps identified, follow up with the participants to see what\u2019s actionable<\/strong>. Make sure to @ each participant when responding in a comment.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If you feel comfortable triaging the issue further, then you can also:<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Check that the bug report is valid by debugging it to see if you can track down the technical specifics.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Check if the issue is missing some detail and see if you can fill in those details. For instance, if a bug report is missing visual detail, it\u2019s helpful to reproduce the issue locally and upload a screenshot or GIF.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Consider adding the Good First Issue label if you believe this is a relatively easy issue for a first-time contributor to try to solve.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Commonly used labels<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Generally speaking, the following labels are very useful for triaging issues and will likely be the ones you use the most consistently. You can view all possible labels <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\">here<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Label                      | Reason                                                                                    |<br>| -------------------------- | ----------------------------------------------------------------------------------------- |<br>| <code>[Type] Bug<\/code>               | When an intended feature is broken.                                                       |<br>| <code>[Type] Enhancement<\/code>       | When someone is suggesting an enhancement to a current feature.                           |<br>| <code>[Type] Help Request<\/code>      | When someone is asking for general help with setup\/implementation.                        |<br>| <code>Needs Technical Feedback<\/code> | When you see new features or API changes proposed.                                        |<br>| <code>Needs More Info<\/code>          | When it\u2019s not clear what the issue is or it would help to provide additional details.     |<br>| <code>Needs Testing<\/code>            | When a new issue needs to be confirmed or old bugs seem like they are no longer relevant. |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Determining priority labels<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you have enough knowledge about the report at hand and feel confident in doing so, you can consider adding priority. Note that it\u2019s on purpose that no priority label infers a normal level.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Label                | Reason                                                                                                                                                                                                                                                     |<br>| -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |<br>| <code>Priority: High<\/code>     | Fits one of the current focuses and is causing a major broken experience (including flow, visual bugs and blocks).                                                                                                                                         |<br>| <code>Priority: Low<\/code>      | Enhancements that aren\u2019t part of focuses, niche bugs, problems with old browsers.                                                                                                                                                                          |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Closing issues<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Issues are closed for the following reasons:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>A PR and\/or latest release resolved the reported issue.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Duplicate of a current report.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Help request that is best handled in the WordPress.org forums.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>An issue that's not able to be replicated.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>An issue that needs more information that the author of the issue hasn't responded to for 2+ weeks.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>An item that is determined as unable to be fixed or is working as intended.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Specific triages<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Release specific triage<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Here are some guidelines to follow when doing triage specifically around the time of a release. This is important to differentiate compared to general triage so problematic, release blocking bugs are properly identified and solutions are found.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>If a bug is introduced in a release candidate (RC) and it's going to break many workflows<\/strong>, add it to the version milestone and flag in the <a href=\"https:\/\/wordpress.slack.com\/archives\/C02QB2JS7\">#core-editor<\/a> channel in WordPress.org slack.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>If a bug was introduced in the most recent version, and a next RC hasn\u2019t yet happened<\/strong>, ideally the developers can push to fix it prior to RC! The amount of push for a fix should scale proportional to the potential of breakage. In this case, add to the RC milestone and, if deemed urgent, ping in the <a href=\"https:\/\/wordpress.slack.com\/archives\/C02QB2JS7\">#core-editor<\/a> channel in WordPress.org slack.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>If a bug wasn\u2019t introduced in the most recent version<\/strong>, do not add a milestone. Instead, use labels like <code>[Priority] High<\/code> if it\u2019s a pressing issue, and if needed you can call attention to it in the weekly core meetings.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Design specific triage<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Along with the general triage flows listed previously, there are some specific additions to the flows for more design-centric triage for design minded folks participating in triage.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>PR testing and reviews: this should be your first stop for daily self triage.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Label <code>Needs Design Feedback<\/code>: check if the issue does need design feedback and, if possible, give it. You can organize this by priority, project boards or by least commented. Once there are enough opinions, please remove this label and decide on next steps (ie adding the Needs Design label).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Label  <code>Needs Design<\/code>: Does it really need a design? Does this fit a focus? If it has a design mark as <code>Needs Design Feedback<\/code> to better categorize the issue.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Reminders:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Ask for screenshots as needed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Ask for iterations and note any changes before merging.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If the issue isn\u2019t in a board, check to see if it doesn\u2019t fit in a specific focus.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If the issue\/pull has not been prioritized yet, consider adding a priority label to help move the issue forward.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For more detailed information about weekly design triage and to join in, please <a href=\"https:\/\/make.wordpress.org\/design\/handbook\/workflows\/weekly-gutenberg-design-triage\/\">review this guide<\/a>.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Triage\n\nTo keep the repository healthy, it needs to be triaged regularly. **Triage is the practice of reviewing existing issues and pull requests to make sure they\u2019re relevant, actionable, and have all the information they need**. Anyone can help triage, although you\u2019ll need to be a member of the triage team for the Gutenberg repository to modify an issue\u2019s labels or edit its title.\n\n> Besides this page, the [How to do triage on GitHub](https:\/\/learn.wordpress.org\/tutorial\/how-to-do-triage-on-github\/) tutorial is another great resource to get introduced to triage\n\n## Join the triage team\n\nThe triage team is an open group of people with a particular role of making sure triage is done consistently across the Gutenberg repo. There are various types of triage which happen:\n\n-   Regular self triage sessions done by members on their own time.\n-   Organised triage sessions done as a group at a set time. You can [review the meetings page](https:\/\/make.wordpress.org\/meetings\/) to find these triage sessions and appropriate slack channels.\n-   Focused triage sessions on a specific board, label or feature.\n\nThese are the expectations of being a triage team member:\n\n-   You are expected to do some triage even if it is self triage at least once a week.\n-   As you can, try to join organized triage sessions.\n-   If you join the triage team to focus on a specific label or board, the expectation is that your focus will be there. Please make this known to fellow triage team members.\n\nIf you would like to join this team, simply ask in #core-editor [Slack](https:\/\/make.wordpress.org\/chat\/) at any time.\n\n## Triage your first issues\n\nTo start simply choose from one of these filtered lists below. Note: You can find most of these filters by selecting the \u201cSort\u201d option from the [overall Issues page](https:\/\/github.com\/wordpress\/gutenberg\/issues).\n\n-   **All Gutenberg issues [without an assigned label](https:\/\/github.com\/WordPress\/gutenberg\/issues?q=is%3Aopen+is%3Aissue+no%3Alabel+sort%3Aupdated-asc)**. Triaging by simply adding labels helps people focused on certain aspects of Gutenberg find relevant issues easier and start working on them.\n-   **All Gutenberg pull requests [without an assigned label](https:\/\/github.com\/WordPress\/gutenberg\/pulls?q=is%3Aopen+is%3Apr+no%3Alabel)**. This requires a level of comfortability with code. For more guidance on which labels are best to use, please [review this section on labeling pull requests](\/docs\/contributors\/repository-management.md#pull-requests) for contributors. You can also always check with the person authoring the pull request to make sure the labels match what they are intending to do.\n-  **[The least recently updated](https:\/\/github.com\/WordPress\/gutenberg\/issues?q=is%3Aopen+is%3Aissue+sort%3Aupdated-asc) Gutenberg issues**. Triaging issues that are getting old and possibly out of date keeps important work from being overlooked.\n-  **All Gutenberg issues [with no comments](https:\/\/github.com\/wordpress\/gutenberg\/issues?q=is%3Aissue+is%3Aopen+comments%3A0+)**. Triaging this list helps make sure all issues are acknowledged, and can help identify issues that may need more information or discussion before they are actionable.\n-  **[The least commented](https:\/\/github.com\/wordpress\/gutenberg\/issues?q=is%3Aissue+is%3Aopen+sort%3Acomments-asc) on Gutenberg issues**. Triaging this list helps the community figure out what things might still need traction for certain proposals.\n-  **[The most commented](https:\/\/github.com\/wordpress\/gutenberg\/issues?q=is%3Aissue+is%3Aopen+sort%3Acomments-desc) on Gutenberg issues**. If you feel comfortable chiming in and the conversation has stagnated, the best way to triage these kinds of issues is to summarize the discussion thus far and do your best to identify action items, blockers, etc. Triaging this list allows finding solutions to important and complex issues to move forward.\n-  You can also **create your own custom set of filters on GitHub**. If you have a filter you think might be useful for the community, feel free to submit a PR to add it to this list.\n\n## General triage process\n\nWhen triaging, either one of the lists above or issues in general, work through issues one-by-one. Here are some steps you can perform for each issue:\n\n1. First **search for duplicates**. If the issue is duplicate, close it by commenting with \u201cDuplicate of #\u201d and add any relevant new details to the existing issue. (Don\u2019t forget to search for duplicates among closed issues as well!).\n2. If the **issue is missing labels, add some** to better categorize it (requires proper permissions given after joining the triage team). A good starting place when adding labels is to apply one of the labels prefixed [Type] (e.g. [Type] Enhancement or [Type] Bug) to indicate what kind of issue it is. After that consider adding more descriptive labels. If the issue concerns a particular core block, add one of the labels prefixed [Block]. Or if the issue affects a particular feature there are [Feature] labels. Finally, there are labels that affect particular interest areas, like Accessibility and Internationalization. You can view all possible labels [here](https:\/\/github.com\/WordPress\/gutenberg\/labels).\n3. If the **title doesn\u2019t communicate the issue clearly enough, edit it for clarity** (requires proper permissions). Specifically, we\u2019d recommend having the main feature the issue relates to in the beginning of the title ([example](https:\/\/github.com\/WordPress\/gutenberg\/issues\/6193)) and for the title to generally be as succinct yet descriptive as possible ([example](https:\/\/github.com\/WordPress\/gutenberg\/issues\/6193)).\n4. If it\u2019s a **bug report, test to confirm the report or add the `Needs Testing` label**. If there is not enough information to confirm the report, add the `[Status] Needs More Info` label and ask for the details needed. It\u2019s particularly beneficial when a bug report has steps for reproduction so ask the reporter to add those if they\u2019re missing.\n5. **Remove the `[Status] Needs More Info` when is no longer needed**, for example if the author of the issue has responded with enough details.\n6. **Close the inactive `[Status] Needs More Info` issues with a note** if the author didn't respond in 2+ weeks.\n7. If there was a conversation on the issue but **no actionable steps identified, follow up with the participants to see what\u2019s actionable**. Make sure to @ each participant when responding in a comment.\n8. If you feel comfortable triaging the issue further, then you can also:\n    - Check that the bug report is valid by debugging it to see if you can track down the technical specifics.\n    - Check if the issue is missing some detail and see if you can fill in those details. For instance, if a bug report is missing visual detail, it\u2019s helpful to reproduce the issue locally and upload a screenshot or GIF.\n    - Consider adding the Good First Issue label if you believe this is a relatively easy issue for a first-time contributor to try to solve.\n\n**Commonly used labels**\n\nGenerally speaking, the following labels are very useful for triaging issues and will likely be the ones you use the most consistently. You can view all possible labels [here](https:\/\/github.com\/WordPress\/gutenberg\/labels).\n\n| Label                      | Reason                                                                                    |\n| -------------------------- | ----------------------------------------------------------------------------------------- |\n| `[Type] Bug`               | When an intended feature is broken.                                                       |\n| `[Type] Enhancement`       | When someone is suggesting an enhancement to a current feature.                           |\n| `[Type] Help Request`      | When someone is asking for general help with setup\/implementation.                        |\n| `Needs Technical Feedback` | When you see new features or API changes proposed.                                        |\n| `Needs More Info`          | When it\u2019s not clear what the issue is or it would help to provide additional details.     |\n| `Needs Testing`            | When a new issue needs to be confirmed or old bugs seem like they are no longer relevant. |\n\n**Determining priority labels**\n\nIf you have enough knowledge about the report at hand and feel confident in doing so, you can consider adding priority. Note that it\u2019s on purpose that no priority label infers a normal level.\n\n| Label                | Reason                                                                                                                                                                                                                                                     |\n| -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Priority: High`     | Fits one of the current focuses and is causing a major broken experience (including flow, visual bugs and blocks).                                                                                                                                         |\n| `Priority: Low`      | Enhancements that aren\u2019t part of focuses, niche bugs, problems with old browsers.                                                                                                                                                                          |\n\n## Closing issues\n\nIssues are closed for the following reasons:\n\n-   A PR and\/or latest release resolved the reported issue.\n-   Duplicate of a current report.\n-   Help request that is best handled in the WordPress.org forums.\n-   An issue that's not able to be replicated.\n-   An issue that needs more information that the author of the issue hasn't responded to for 2+ weeks.\n-   An item that is determined as unable to be fixed or is working as intended.\n\n## Specific triages\n\n### Release specific triage\n\nHere are some guidelines to follow when doing triage specifically around the time of a release. This is important to differentiate compared to general triage so problematic, release blocking bugs are properly identified and solutions are found.\n\n-  **If a bug is introduced in a release candidate (RC) and it's going to break many workflows**, add it to the version milestone and flag in the [#core-editor](https:\/\/wordpress.slack.com\/archives\/C02QB2JS7) channel in WordPress.org slack.\n-  **If a bug was introduced in the most recent version, and a next RC hasn\u2019t yet happened**, ideally the developers can push to fix it prior to RC! The amount of push for a fix should scale proportional to the potential of breakage. In this case, add to the RC milestone and, if deemed urgent, ping in the [#core-editor](https:\/\/wordpress.slack.com\/archives\/C02QB2JS7) channel in WordPress.org slack.\n-  **If a bug wasn\u2019t introduced in the most recent version**, do not add a milestone. Instead, use labels like `[Priority] High` if it\u2019s a pressing issue, and if needed you can call attention to it in the weekly core meetings.\n\n### Design specific triage\n\nAlong with the general triage flows listed previously, there are some specific additions to the flows for more design-centric triage for design minded folks participating in triage.\n\n-   PR testing and reviews: this should be your first stop for daily self triage.\n-  Label `Needs Design Feedback`: check if the issue does need design feedback and, if possible, give it. You can organize this by priority, project boards or by least commented. Once there are enough opinions, please remove this label and decide on next steps (ie adding the Needs Design label).\n- Label  `Needs Design`: Does it really need a design? Does this fit a focus? If it has a design mark as `Needs Design Feedback` to better categorize the issue.\n\nReminders:\n\n-   Ask for screenshots as needed.\n-   Ask for iterations and note any changes before merging.\n-   If the issue isn\u2019t in a board, check to see if it doesn\u2019t fit in a specific focus.\n-   If the issue\/pull has not been prioritized yet, consider adding a priority label to help move the issue forward.\n\nFor more detailed information about weekly design triage and to join in, please [review this guide](https:\/\/make.wordpress.org\/design\/handbook\/workflows\/weekly-gutenberg-design-triage\/).\n"
    },
    {
        "path": "\/markdown\/contributors\/localizing.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Localizing Gutenberg<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Gutenberg plugin is translated via the general plugin translation system (GlotPress) at https:\/\/translate.wordpress.org. Review the <a href=\"https:\/\/make.wordpress.org\/polyglots\/handbook\/tools\/glotpress-translate-wordpress-org\/\">GlotPress translation process documentation<\/a> for additional information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To translate Gutenberg in your locale or language, <a href=\"https:\/\/translate.wordpress.org\/projects\/wp-plugins\/gutenberg\">select your locale here<\/a> and translate <em>Development<\/em> (which contains the plugin's string) and\/or <em>Development Readme<\/em> (please translate what you see in the Details tab of the <a href=\"https:\/\/wordpress.org\/plugins\/gutenberg\/\">plugin page<\/a>).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A Global Translation Editor (GTE) or Project Translation Editor (PTE) with suitable rights will process your translations in due time.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Language packs are automatically generated once 95% of the plugin's strings are translated and approved for a locale.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The inclusion of Gutenberg into WordPress core means that more than 51% of WordPress installations running a translated WordPress installation have Gutenberg's translated strings compiled into the core language pack as well.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Localizing Gutenberg\n\nThe Gutenberg plugin is translated via the general plugin translation system (GlotPress) at https:\/\/translate.wordpress.org. Review the [GlotPress translation process documentation](https:\/\/make.wordpress.org\/polyglots\/handbook\/tools\/glotpress-translate-wordpress-org\/) for additional information.\n\nTo translate Gutenberg in your locale or language, [select your locale here](https:\/\/translate.wordpress.org\/projects\/wp-plugins\/gutenberg) and translate *Development* (which contains the plugin's string) and\/or *Development Readme* (please translate what you see in the Details tab of the [plugin page](https:\/\/wordpress.org\/plugins\/gutenberg\/)).\n\nA Global Translation Editor (GTE) or Project Translation Editor (PTE) with suitable rights will process your translations in due time.\n\nLanguage packs are automatically generated once 95% of the plugin's strings are translated and approved for a locale.\n\nThe inclusion of Gutenberg into WordPress core means that more than 51% of WordPress installations running a translated WordPress installation have Gutenberg's translated strings compiled into the core language pack as well.\n"
    },
    {
        "path": "\/markdown\/contributors\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Contributor Guide<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Welcome to the Gutenberg Project Contributor Guide. This guide is here to help you get setup and start contributing to the project. If you have any questions, you'll find us in the #core-editor channel in the WordPress Core Slack, <a href=\"https:\/\/make.wordpress.org\/chat\/\">free to join<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Gutenberg is a sub-project of Core WordPress. Please see the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/\">Core Contributor Handbook<\/a> for additional information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Sections<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Find the section below based on what you are looking to contribute:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Code?<\/strong> See the <a href=\"\/docs\/contributors\/code\/README.md\">developer section<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Design?<\/strong> See the <a href=\"\/docs\/contributors\/design\/README.md\">design section<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Documentation?<\/strong> See the <a href=\"\/docs\/contributors\/documentation\/README.md\">documentation section<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Triage Support?<\/strong> See the <a href=\"\/docs\/contributors\/triage.md\">triaging issues section<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Internationalization?<\/strong> See the <a href=\"\/docs\/contributors\/localizing.md\">localizing and translating section<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Repository management<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Gutenberg project uses GitHub for managing code and tracking issues. Please see the following sections for the project methodologies using GitHub.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/contributors\/repository-management.md#issues\">Issue Management<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/contributors\/repository-management.md#pull-requests\">Pull Requests<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/contributors\/repository-management.md#teams\">Teams and Projects<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Guidelines<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>See the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/CONTRIBUTING.md\">Contributing Guidelines<\/a> for the rules around contributing: This includes the code of conduct and licensing information.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Contributor Guide\n\nWelcome to the Gutenberg Project Contributor Guide. This guide is here to help you get setup and start contributing to the project. If you have any questions, you'll find us in the #core-editor channel in the WordPress Core Slack, [free to join](https:\/\/make.wordpress.org\/chat\/).\n\nGutenberg is a sub-project of Core WordPress. Please see the [Core Contributor Handbook](https:\/\/make.wordpress.org\/core\/handbook\/) for additional information.\n\n## Sections\n\nFind the section below based on what you are looking to contribute:\n\n-   **Code?** See the [developer section](\/docs\/contributors\/code\/README.md).\n\n-   **Design?** See the [design section](\/docs\/contributors\/design\/README.md).\n\n-   **Documentation?** See the [documentation section](\/docs\/contributors\/documentation\/README.md)\n\n-   **Triage Support?** See the [triaging issues section](\/docs\/contributors\/triage.md)\n\n-   **Internationalization?** See the [localizing and translating section](\/docs\/contributors\/localizing.md)\n\n### Repository management\n\nThe Gutenberg project uses GitHub for managing code and tracking issues. Please see the following sections for the project methodologies using GitHub.\n\n-   [Issue Management](\/docs\/contributors\/repository-management.md#issues)\n\n-   [Pull Requests](\/docs\/contributors\/repository-management.md#pull-requests)\n\n-   [Teams and Projects](\/docs\/contributors\/repository-management.md#teams)\n\n## Guidelines\n\nSee the [Contributing Guidelines](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/CONTRIBUTING.md) for the rules around contributing: This includes the code of conduct and licensing information.\n"
    },
    {
        "path": "\/markdown\/contributors\/folder-structure.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Folder Structure<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The following snippet explains how the Gutenberg repository is structured omitting irrelevant or obvious items with further explanations:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\u2502\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 SECURITY.md\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u2502\n\u251c\u2500\u2500 .editorconfig\n\u251c\u2500\u2500 .eslintignore\n\u251c\u2500\u2500 .eslintrc\n\u251c\u2500\u2500 .jshintignore\n\u251c\u2500\u2500 .eslintignore\n\u251c\u2500\u2500 .prettierrc.js\n\u251c\u2500\u2500 .stylelintignore\n\u251c\u2500\u2500 .stylelintrc.json\n\u251c\u2500\u2500 .markdownlintignore\n\u251c\u2500\u2500 .npmpackagejsonlintrc.json\n\u251c\u2500\u2500 phpcs.xml.dist\n\u2502   Dot files and config files used to configure the various linting tools\n\u2502   used in the repository (PHP, JS, styles...).\n\u2502\n\u251c\u2500\u2500 .browserslistrc\n\u251c\u2500\u2500 babel.config.js\n\u251c\u2500\u2500 jsconfig.json\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 tsconfig.base.json\n\u251c\u2500\u2500 webpack.config.js\n\u2502   Transpilation and bundling Config files.\n\u2502\n\u251c\u2500\u2500 .wp-env.json\n\u2502   Config file for the development and testing environment.\n\u2502   Includes WordPress and the Gutenberg plugin.\n\u2502\n\u251c\u2500\u2500 composer.lock\n\u251c\u2500\u2500 composer.json\n\u2502   Handling of PHP dependencies. Essentially used for development tools.\n\u2502   The production code don't use external PHP dependencies.\n\u2502\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 package.json\n\u2502\tHandling of JavaScript dependencies. Both for development tools and\n\u2502   production dependencies.\n\u2502   The package.json also serves to define common tasks and scripts\n|   used for day to day development.\n\u2502\n\u251c\u2500\u2500 changelog.txt\n\u251c\u2500\u2500 readme.txt\n\u2502   Readme and Changelog of the Gutenberg plugin hosted on the WordPress\n\u2502   plugin repository.\n\u2502\n\u251c\u2500\u2500 gutenberg.php\n\u2502   Entry point of the Gutenberg plugin.\n\u2502\n\u251c\u2500\u2500 post-content.php\n\u2502   Demo post content used on the Gutenberg plugin to showcase the editor.\n\u2502\n\u251c\u2500\u2500 .github\/*\n\u2502   Config of the different GitHub features (issues and PR templates, CI, owners).\n\u2502\n\u251c\u2500\u2500 bin\/api-docs\n\u2502   Tool\/script used to generate the API Docs.\n\u2502\n\u251c\u2500\u2500 bin\/packages\n\u2502   Set of scripts used to build the WordPress packages.\n\u2502\n\u251c\u2500\u2500 bin\/plugin\n\u2502   Tool use to perform the Gutenberg plugin release and the npm releases as well.\n\u2502\n\u251c\u2500\u2500 docs\/tool\n\u2502   Tool used to generate the Block editor handbook's markdown pages.\n\u2502\n\u251c\u2500\u2500 docs\/*.md\n\u2502   Set of documentation pages composing the &#91;Block editor handbook](https:\/\/developer.wordpress.org\/block-editor\/).\n\u2502\n\u251c\u2500\u2500 lib\n\u2502   PHP Source code of the Gutenberg plugin.\n\u2502\n\u251c\u2500\u2500 packages\n\u2502   Source code of the WordPress packages.\n\u2502   Packages can be:\n\u2502    - Production JavaScript scripts and styles loaded on WordPress\n\u2502      and the Gutenberg plugin or distributed as npm packages.\n\u2502    - Development tools available on npm.\n\u2502\n\u251c\u2500\u2500 packages\/{packageName}\/package.json\n\u2502   Dependencies of the current package.\n\u2502\n\u251c\u2500\u2500 packages\/{packageName}\/CHANGELOG.md\n\u251c\u2500\u2500 packages\/{packageName}\/README.md\n\u2502\n\u251c\u2500\u2500 packages\/{packageName}\/src\/**\/*.js\n\u251c\u2500\u2500 packages\/{packageName}\/src\/**\/*.scss\n\u2502   Source code of a given package.\n|\n\u251c\u2500\u2500 packages\/{packageName}\/src\/**\/*.test.js\n\u2502   JavaScript unit tests.\n|\n\u251c\u2500\u2500 packages\/{packageName}\/src\/**\/{ComponentName}\/index.js\n\u2502   Entry point of a given component.\n|\n\u251c\u2500\u2500 packages\/{packageName}\/src\/**\/{ComponentName}\/style.scss\n\u2502   Style entry point for a given component.\n\u2502\n\u251c\u2500\u2500 packages\/{packageName}\/src\/**\/{ComponentName}\/stories\/*.js\n\u2502   Component Stories to load on the Gutenberg storybook.\n\u2502\n\u251c\u2500\u2500 packages\/e2e-tests\n\u2502   End-2-end tests of the Gutenberg plugin.\n\u2502   Distributed as a package for potential reuse in Core and other plugins.\n\u2502\n\u251c\u2500\u2500 phpunit\n\u2502   Unit tests for the PHP code of the Gutenberg plugin.\n\u2502\n\u251c\u2500\u2500 storybook\n\u2502   Config of the &#91;Gutenberg Storybook](https:\/\/wordpress.github.io\/gutenberg\/).\n\u2502\n\u251c\u2500\u2500 test\/integration\n\u2502   Set of WordPress packages integration tests.\n\u2502\n\u251c\u2500\u2500 test\/native\n\u2502   Configuration for the Gutenberg Mobile unit tests.\n\u2502\n\u2514\u2500\u2500 test\/unit\n\u2502   Configuration for the Packages unit tests.\n\u2502\n\u2514\u2500\u2500 tools\/eslint\n\u2502   Configuration files for the ESLint linter.\n\u2502\n\u2514\u2500\u2500 tools\/webpack\n\u2502   Configuration files for the webpack build.\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# Folder Structure\n\nThe following snippet explains how the Gutenberg repository is structured omitting irrelevant or obvious items with further explanations:\n\n    \u2502\n    \u251c\u2500\u2500 LICENSE\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 SECURITY.md\n    \u251c\u2500\u2500 CONTRIBUTING.md\n    \u2502\n    \u251c\u2500\u2500 .editorconfig\n    \u251c\u2500\u2500 .eslintignore\n    \u251c\u2500\u2500 .eslintrc\n    \u251c\u2500\u2500 .jshintignore\n    \u251c\u2500\u2500 .eslintignore\n    \u251c\u2500\u2500 .prettierrc.js\n    \u251c\u2500\u2500 .stylelintignore\n    \u251c\u2500\u2500 .stylelintrc.json\n    \u251c\u2500\u2500 .markdownlintignore\n    \u251c\u2500\u2500 .npmpackagejsonlintrc.json\n    \u251c\u2500\u2500 phpcs.xml.dist\n    \u2502   Dot files and config files used to configure the various linting tools\n    \u2502   used in the repository (PHP, JS, styles...).\n    \u2502\n    \u251c\u2500\u2500 .browserslistrc\n    \u251c\u2500\u2500 babel.config.js\n    \u251c\u2500\u2500 jsconfig.json\n    \u251c\u2500\u2500 tsconfig.json\n    \u251c\u2500\u2500 tsconfig.base.json\n    \u251c\u2500\u2500 webpack.config.js\n    \u2502   Transpilation and bundling Config files.\n    \u2502\n    \u251c\u2500\u2500 .wp-env.json\n    \u2502   Config file for the development and testing environment.\n    \u2502   Includes WordPress and the Gutenberg plugin.\n    \u2502\n    \u251c\u2500\u2500 composer.lock\n    \u251c\u2500\u2500 composer.json\n    \u2502   Handling of PHP dependencies. Essentially used for development tools.\n    \u2502   The production code don't use external PHP dependencies.\n    \u2502\n    \u251c\u2500\u2500 package-lock.json\n    \u251c\u2500\u2500 package.json\n    \u2502\tHandling of JavaScript dependencies. Both for development tools and\n    \u2502   production dependencies.\n    \u2502   The package.json also serves to define common tasks and scripts\n    |   used for day to day development.\n    \u2502\n    \u251c\u2500\u2500 changelog.txt\n    \u251c\u2500\u2500 readme.txt\n    \u2502   Readme and Changelog of the Gutenberg plugin hosted on the WordPress\n    \u2502   plugin repository.\n    \u2502\n    \u251c\u2500\u2500 gutenberg.php\n    \u2502   Entry point of the Gutenberg plugin.\n    \u2502\n    \u251c\u2500\u2500 post-content.php\n    \u2502   Demo post content used on the Gutenberg plugin to showcase the editor.\n    \u2502\n    \u251c\u2500\u2500 .github\/*\n    \u2502   Config of the different GitHub features (issues and PR templates, CI, owners).\n    \u2502\n    \u251c\u2500\u2500 bin\/api-docs\n    \u2502   Tool\/script used to generate the API Docs.\n    \u2502\n    \u251c\u2500\u2500 bin\/packages\n    \u2502   Set of scripts used to build the WordPress packages.\n    \u2502\n    \u251c\u2500\u2500 bin\/plugin\n    \u2502   Tool use to perform the Gutenberg plugin release and the npm releases as well.\n    \u2502\n    \u251c\u2500\u2500 docs\/tool\n    \u2502   Tool used to generate the Block editor handbook's markdown pages.\n    \u2502\n    \u251c\u2500\u2500 docs\/*.md\n    \u2502   Set of documentation pages composing the [Block editor handbook](https:\/\/developer.wordpress.org\/block-editor\/).\n    \u2502\n    \u251c\u2500\u2500 lib\n    \u2502   PHP Source code of the Gutenberg plugin.\n    \u2502\n    \u251c\u2500\u2500 packages\n    \u2502   Source code of the WordPress packages.\n    \u2502   Packages can be:\n    \u2502    - Production JavaScript scripts and styles loaded on WordPress\n    \u2502      and the Gutenberg plugin or distributed as npm packages.\n    \u2502    - Development tools available on npm.\n    \u2502\n    \u251c\u2500\u2500 packages\/{packageName}\/package.json\n    \u2502   Dependencies of the current package.\n    \u2502\n    \u251c\u2500\u2500 packages\/{packageName}\/CHANGELOG.md\n    \u251c\u2500\u2500 packages\/{packageName}\/README.md\n    \u2502\n    \u251c\u2500\u2500 packages\/{packageName}\/src\/**\/*.js\n    \u251c\u2500\u2500 packages\/{packageName}\/src\/**\/*.scss\n    \u2502   Source code of a given package.\n    |\n    \u251c\u2500\u2500 packages\/{packageName}\/src\/**\/*.test.js\n    \u2502   JavaScript unit tests.\n    |\n    \u251c\u2500\u2500 packages\/{packageName}\/src\/**\/{ComponentName}\/index.js\n    \u2502   Entry point of a given component.\n    |\n    \u251c\u2500\u2500 packages\/{packageName}\/src\/**\/{ComponentName}\/style.scss\n    \u2502   Style entry point for a given component.\n    \u2502\n    \u251c\u2500\u2500 packages\/{packageName}\/src\/**\/{ComponentName}\/stories\/*.js\n    \u2502   Component Stories to load on the Gutenberg storybook.\n    \u2502\n    \u251c\u2500\u2500 packages\/e2e-tests\n    \u2502   End-2-end tests of the Gutenberg plugin.\n    \u2502   Distributed as a package for potential reuse in Core and other plugins.\n    \u2502\n    \u251c\u2500\u2500 phpunit\n    \u2502   Unit tests for the PHP code of the Gutenberg plugin.\n    \u2502\n    \u251c\u2500\u2500 storybook\n    \u2502   Config of the [Gutenberg Storybook](https:\/\/wordpress.github.io\/gutenberg\/).\n    \u2502\n    \u251c\u2500\u2500 test\/integration\n    \u2502   Set of WordPress packages integration tests.\n    \u2502\n    \u251c\u2500\u2500 test\/native\n    \u2502   Configuration for the Gutenberg Mobile unit tests.\n    \u2502\n    \u2514\u2500\u2500 test\/unit\n    \u2502   Configuration for the Packages unit tests.\n    \u2502\n    \u2514\u2500\u2500 tools\/eslint\n    \u2502   Configuration files for the ESLint linter.\n    \u2502\n    \u2514\u2500\u2500 tools\/webpack\n    \u2502   Configuration files for the webpack build.\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/git-workflow.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Git Workflow<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This documentation is intended to help you get started using git with Gutenberg. Git is a powerful source code management tool; to learn git deeply, check out the <a href=\"https:\/\/git-scm.com\/book\/en\/v2\">Pro Git book<\/a> available free online under CC BY-NC-SA 3.0 license.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you are unfamiliar with using git, it is worthwhile to explore and play with it. Try out the <a href=\"https:\/\/git-scm.com\/docs\/gittutorial\">git tutorial<\/a> as well as the <a href=\"https:\/\/git-scm.com\/docs\/user-manual\">git user manual<\/a> for help getting started.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The Gutenberg project follows a standard pull request process for contributions. See GitHub's documentation for <a href=\"https:\/\/docs.github.com\/en\/github\/collaborating-with-issues-and-pull-requests\">additional details about pull requests<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Overview<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>An overview of the process for contributors is:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Fork the Gutenberg repository.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Clone the forked repository.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create a new branch.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Make code changes.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Confirm tests pass.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Commit the code changes within the newly created branch.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Push the branch to the forked repository.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Submit a pull request to the Gutenberg repository.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>See the <a href=\"\/docs\/contributors\/repository-management.md\">repository management document<\/a> for additional information on how the Gutenberg project uses GitHub.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Git Workflow Walkthrough<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The workflow for code and documentation is the same, since both are managed in GitHub. You can watch a <a href=\"https:\/\/wordpress.tv\/2020\/09\/02\/marcus-kazmierczak-contribute-developer-documentation-to-gutenberg\/\">video walk-through of contributing documentation<\/a> and the accompanying <a href=\"https:\/\/mkaz.blog\/wordpress\/contribute-developer-documentation-to-gutenberg\/\">tutorial for contributing to Gutenberg<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here is a visual overview of the Git workflow:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2020\/09\/git-workflow.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Visual Overview of Git Workflow<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 1<\/strong>: Go to the Gutenberg repository on GitHub and click Fork. This creates a copy of the main Gutenberg repository to your account.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2020\/09\/gutenberg-fork.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Screenshot showing fork button on GitHub<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 2<\/strong>: Clone your forked repository locally. It is located at: <code>https:\/\/github.com\/YOUR-USER-NAME\/gutenberg<\/code>. Cloning copies all the files to your computer. Open a terminal and run:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>git clone https:\/\/github.com\/YOUR-USER-NAME\/gutenberg\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This will create a directory called <code>gutenberg<\/code> with all the files for the project. It might take a couple of minutes because it is downloading the entire history of the Gutenberg project.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 3<\/strong>: Create a branch for your change (see below for branch naming). For this example, the branch name is the complete string: <code>update\/my-branch<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>git switch -c update\/my-branch\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 4<\/strong>: Make the code changes. Build, confirm, and test your change thoroughly. See <a href=\"\/docs\/contributors\/code\/coding-guidelines.md\">coding guidelines<\/a> and <a href=\"\/docs\/contributors\/code\/testing-overview.md\">testing overview<\/a> for guidance.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 5<\/strong>: Commit your change with a <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/commit-messages\/\">good commit message<\/a>. This will commit your change to your local copy of the repository.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>git commit -m \"Your Good Commit Message\" path\/to\/FILE\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 6<\/strong>: Push your change up to GitHub. The change will be pushed to your fork of the repository on the GitHub<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>git push -u origin update\/my-branch\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 7<\/strong>: Go to your forked repository on GitHub -- it will automatically detect the change and give you a link to create a pull request.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2020\/09\/pull-request-create.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Screenshot showing pull request link<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 8<\/strong>: Create the pull request. This will create the request on the WordPress Gutenberg repository to integrate the change from your forked repository.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 9<\/strong>: Keep up with new activity on the pull request. If any additional changes or updates are requested, then make the changes locally and push them up, following Steps 4-6.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Do not make a new pull request for updates; by pushing your change to your repository it will update the same PR. In this sense, the PR is a pointer on the WordPress Gutenberg repository to your copy. So when you update your copy, the PR is also updated.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That\u2019s it! Once approved and merged, your change will be incorporated into the main repository. \ud83c\udf89<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Branch naming<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You should name your branches using a prefixes and short description, like this: <code>[type]\/[change]<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Suggested prefixes:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>add\/<\/code> = add a new feature<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>try\/<\/code> = experimental feature, \"tentatively add\"<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>update\/<\/code> = update an existing feature<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>remove\/<\/code> = remove an existing feature<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>fix\/<\/code> = fix an existing issue<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For example, <code>add\/gallery-block<\/code> means you're working on adding a new gallery block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Keeping your branch up to date<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When many different people are working on a project simultaneously, pull requests can go stale quickly. A \"stale\" pull request is one that is no longer up to date with the main line of development, and it needs to be updated before it can be merged into the project.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are two ways to do this: merging and rebasing. In Gutenberg, the recommendation is to rebase. Rebasing means rewriting your changes as if they're happening on top of the main line of development. This ensures the commit history is always clean and linear. Rebasing can be performed as many times as needed while you're working on a pull request. <strong>Do share your work early on<\/strong> by opening a pull request and keeping your history rebase as you progress.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The main line of development is known as the <code>trunk<\/code> branch. If you have a pull-request branch that cannot be merged into <code>trunk<\/code> due to a conflict (this can happen for long-running pull requests), then in the course of rebasing you'll have to manually resolve any conflicts in your local copy. Learn more in <a href=\"https:\/\/github.com\/edx\/edx-platform\/wiki\/How-to-Rebase-a-Pull-Request#perform-a-rebase\">section <em>Perform a rebase<\/em><\/a> of <em>How to Rebase a Pull Request<\/em>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once you have resolved any conflicts locally you can update the pull request with <code>git push --force-with-lease<\/code>. Using the <code>--force-with-lease<\/code> parameter is important to guarantee that you don't accidentally overwrite someone else's work.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To sum it up, you need to fetch any new changes in the repository, rebase your branch on top of <code>trunk<\/code>, and push the result back to the repository. These are the corresponding commands:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>git fetch\ngit rebase trunk\ngit push --force-with-lease origin your-branch-name\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Keeping your fork up to date<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Working on pull request starts with forking the Gutenberg repository, your separate working copy. Which can easily go out of sync as new pull requests are merged into the main repository. Here your working repository is a <code>fork<\/code> and the main Gutenberg repository is <code>upstream<\/code>. When working on new pull request you should always update your fork before you do <code>git checkout -b my-new-branch<\/code> to work on a feature or fix.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You will need to add an <code>upstream<\/code> remote in order to keep your fork updated.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>git remote add upstream https:\/\/github.com\/WordPress\/gutenberg.git\ngit remote -v\norigin\tgit@github.com:your-account\/gutenberg.git (fetch)\norigin\tgit@github.com:your-account\/gutenberg.git (push)\nupstream\thttps:\/\/github.com\/WordPress\/gutenberg.git (fetch)\nupstream\thttps:\/\/github.com\/WordPress\/gutenberg.git (push)\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>To sync your fork, you first need to fetch the upstream changes and merge them into your local copy:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>git fetch upstream\ngit checkout trunk\ngit merge upstream\/trunk\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Once your local copy is updated, push your changes to update your fork on GitHub:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>git push\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The above commands will update your <code>trunk<\/code> branch from <em>upstream<\/em>. To update any other branch replace <code>trunk<\/code> with the respective branch name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Miscellaneous<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Git archeology<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When looking for a commit that introduced a specific change, it might be helpful to ignore revisions that only contain styling or formatting changes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Fortunately, newer versions of <code>git<\/code> gained the ability to skip commits in history:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>git blame --ignore-rev f63053cace3c02e284f00918e1854284c85b9132 -L 66,73 packages\/api-fetch\/src\/middlewares\/media-upload.js\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>All styling and formatting revisions are tracked using the <code>.git-blame-ignore-revs<\/code> file in the Gutenberg repository. You can use this file to ignore them all at once:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>git blame --ignore-revs-file .git-blame-ignore-revs -L 66,73 packages\/api-fetch\/src\/middlewares\/media-upload.js\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# Git Workflow\n\nThis documentation is intended to help you get started using git with Gutenberg. Git is a powerful source code management tool; to learn git deeply, check out the [Pro Git book](https:\/\/git-scm.com\/book\/en\/v2) available free online under CC BY-NC-SA 3.0 license.\n\nIf you are unfamiliar with using git, it is worthwhile to explore and play with it. Try out the [git tutorial](https:\/\/git-scm.com\/docs\/gittutorial) as well as the [git user manual](https:\/\/git-scm.com\/docs\/user-manual) for help getting started.\n\nThe Gutenberg project follows a standard pull request process for contributions. See GitHub's documentation for [additional details about pull requests](https:\/\/docs.github.com\/en\/github\/collaborating-with-issues-and-pull-requests).\n\n## Overview\n\nAn overview of the process for contributors is:\n\n-   Fork the Gutenberg repository.\n-   Clone the forked repository.\n-   Create a new branch.\n-   Make code changes.\n-   Confirm tests pass.\n-   Commit the code changes within the newly created branch.\n-   Push the branch to the forked repository.\n-   Submit a pull request to the Gutenberg repository.\n\nSee the [repository management document](\/docs\/contributors\/repository-management.md) for additional information on how the Gutenberg project uses GitHub.\n\n## Git Workflow Walkthrough\n\nThe workflow for code and documentation is the same, since both are managed in GitHub. You can watch a [video walk-through of contributing documentation](https:\/\/wordpress.tv\/2020\/09\/02\/marcus-kazmierczak-contribute-developer-documentation-to-gutenberg\/) and the accompanying [tutorial for contributing to Gutenberg](https:\/\/mkaz.blog\/wordpress\/contribute-developer-documentation-to-gutenberg\/).\n\nHere is a visual overview of the Git workflow:\n\n![Visual Overview of Git Workflow](https:\/\/developer.wordpress.org\/files\/2020\/09\/git-workflow.png)\n\n**Step 1**: Go to the Gutenberg repository on GitHub and click Fork. This creates a copy of the main Gutenberg repository to your account.\n\n![Screenshot showing fork button on GitHub](https:\/\/developer.wordpress.org\/files\/2020\/09\/gutenberg-fork.png)\n\n**Step 2**: Clone your forked repository locally. It is located at: `https:\/\/github.com\/YOUR-USER-NAME\/gutenberg`. Cloning copies all the files to your computer. Open a terminal and run:\n\n```bash\ngit clone https:\/\/github.com\/YOUR-USER-NAME\/gutenberg\n```\n\nThis will create a directory called `gutenberg` with all the files for the project. It might take a couple of minutes because it is downloading the entire history of the Gutenberg project.\n\n**Step 3**: Create a branch for your change (see below for branch naming). For this example, the branch name is the complete string: `update\/my-branch`\n\n```bash\ngit switch -c update\/my-branch\n```\n\n**Step 4**: Make the code changes. Build, confirm, and test your change thoroughly. See [coding guidelines](\/docs\/contributors\/code\/coding-guidelines.md) and [testing overview](\/docs\/contributors\/code\/testing-overview.md) for guidance.\n\n**Step 5**: Commit your change with a [good commit message](https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/commit-messages\/). This will commit your change to your local copy of the repository.\n\n```bash\ngit commit -m \"Your Good Commit Message\" path\/to\/FILE\n```\n\n**Step 6**: Push your change up to GitHub. The change will be pushed to your fork of the repository on the GitHub\n\n```bash\ngit push -u origin update\/my-branch\n```\n\n**Step 7**: Go to your forked repository on GitHub -- it will automatically detect the change and give you a link to create a pull request.\n\n![Screenshot showing pull request link](https:\/\/developer.wordpress.org\/files\/2020\/09\/pull-request-create.png)\n\n**Step 8**: Create the pull request. This will create the request on the WordPress Gutenberg repository to integrate the change from your forked repository.\n\n**Step 9**: Keep up with new activity on the pull request. If any additional changes or updates are requested, then make the changes locally and push them up, following Steps 4-6.\n\nDo not make a new pull request for updates; by pushing your change to your repository it will update the same PR. In this sense, the PR is a pointer on the WordPress Gutenberg repository to your copy. So when you update your copy, the PR is also updated.\n\nThat\u2019s it! Once approved and merged, your change will be incorporated into the main repository. \ud83c\udf89\n\n## Branch naming\n\nYou should name your branches using a prefixes and short description, like this: `[type]\/[change]`.\n\nSuggested prefixes:\n\n-   `add\/` = add a new feature\n-   `try\/` = experimental feature, \"tentatively add\"\n-   `update\/` = update an existing feature\n-   `remove\/` = remove an existing feature\n-   `fix\/` = fix an existing issue\n\nFor example, `add\/gallery-block` means you're working on adding a new gallery block.\n\n## Keeping your branch up to date\n\nWhen many different people are working on a project simultaneously, pull requests can go stale quickly. A \"stale\" pull request is one that is no longer up to date with the main line of development, and it needs to be updated before it can be merged into the project.\n\nThere are two ways to do this: merging and rebasing. In Gutenberg, the recommendation is to rebase. Rebasing means rewriting your changes as if they're happening on top of the main line of development. This ensures the commit history is always clean and linear. Rebasing can be performed as many times as needed while you're working on a pull request. **Do share your work early on** by opening a pull request and keeping your history rebase as you progress.\n\nThe main line of development is known as the `trunk` branch. If you have a pull-request branch that cannot be merged into `trunk` due to a conflict (this can happen for long-running pull requests), then in the course of rebasing you'll have to manually resolve any conflicts in your local copy. Learn more in [section _Perform a rebase_](https:\/\/github.com\/edx\/edx-platform\/wiki\/How-to-Rebase-a-Pull-Request#perform-a-rebase) of _How to Rebase a Pull Request_.\n\nOnce you have resolved any conflicts locally you can update the pull request with `git push --force-with-lease`. Using the `--force-with-lease` parameter is important to guarantee that you don't accidentally overwrite someone else's work.\n\nTo sum it up, you need to fetch any new changes in the repository, rebase your branch on top of `trunk`, and push the result back to the repository. These are the corresponding commands:\n\n```sh\ngit fetch\ngit rebase trunk\ngit push --force-with-lease origin your-branch-name\n```\n\n## Keeping your fork up to date\n\nWorking on pull request starts with forking the Gutenberg repository, your separate working copy. Which can easily go out of sync as new pull requests are merged into the main repository. Here your working repository is a `fork` and the main Gutenberg repository is `upstream`. When working on new pull request you should always update your fork before you do `git checkout -b my-new-branch` to work on a feature or fix.\n\nYou will need to add an `upstream` remote in order to keep your fork updated.\n\n```sh\ngit remote add upstream https:\/\/github.com\/WordPress\/gutenberg.git\ngit remote -v\norigin\tgit@github.com:your-account\/gutenberg.git (fetch)\norigin\tgit@github.com:your-account\/gutenberg.git (push)\nupstream\thttps:\/\/github.com\/WordPress\/gutenberg.git (fetch)\nupstream\thttps:\/\/github.com\/WordPress\/gutenberg.git (push)\n```\n\nTo sync your fork, you first need to fetch the upstream changes and merge them into your local copy:\n\n```sh\ngit fetch upstream\ngit checkout trunk\ngit merge upstream\/trunk\n```\n\nOnce your local copy is updated, push your changes to update your fork on GitHub:\n\n```\ngit push\n```\n\nThe above commands will update your `trunk` branch from _upstream_. To update any other branch replace `trunk` with the respective branch name.\n\n## Miscellaneous\n\n### Git archeology\n\nWhen looking for a commit that introduced a specific change, it might be helpful to ignore revisions that only contain styling or formatting changes.\n\nFortunately, newer versions of `git` gained the ability to skip commits in history:\n\n```\ngit blame --ignore-rev f63053cace3c02e284f00918e1854284c85b9132 -L 66,73 packages\/api-fetch\/src\/middlewares\/media-upload.js\n```\n\nAll styling and formatting revisions are tracked using the `.git-blame-ignore-revs` file in the Gutenberg repository. You can use this file to ignore them all at once:\n\n```\ngit blame --ignore-revs-file .git-blame-ignore-revs -L 66,73 packages\/api-fetch\/src\/middlewares\/media-upload.js\n```\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/deprecations.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Deprecations<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For features included in the Gutenberg plugin, the deprecation policy is intended to support backward compatibility for two minor plugin releases, when possible. Features and code included in a stable release of WordPress are not included in this deprecation timeline, and are instead subject to the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/about\/release-cycle\/version-numbering\/\">versioning policies of the WordPress project<\/a>. The current deprecations are listed below and are grouped by <em>the version at which they will be removed completely<\/em>. If your plugin depends on these behaviors, you must update to the recommended alternative before the noted version.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Unreleased<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>wp.blocks.isValidBlockContent<\/code> has been removed. Please use <code>wp.blocks.validateBlock<\/code> instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">11.0.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>wp.blocks.registerBlockTypeFromMetadata<\/code> method has been removed. Use <code>wp.blocks.registerBlockType<\/code> method instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">10.3.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Passing a tuple of components with <code>as<\/code> prop to <code>ActionItem.Slot<\/code> component is no longer supported. Please pass a component with <code>as<\/code> prop instead. Example:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">9.7.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>leftSidebar<\/code> prop in <code>InterfaceSkeleton<\/code> component has been removed. Use <code>secondarySidebar<\/code> prop instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8.6.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Block API integration with <a href=\"\/docs\/reference-guides\/block-api\/block-context.md\">Block Context<\/a> was updated. When registering a block use <code>usesContext<\/code> and <code>providesContext<\/code> pair in JavaScript files and <code>uses_context<\/code> and <code>provides_context<\/code> pair in PHP files instead of previous pair <code>context<\/code> and <code>providesContext<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">8.3.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_get_post_from_context<\/code> has been removed. Use <a href=\"\/docs\/reference-guides\/block-api\/block-context.md\">Block Context<\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The old Block Pattern APIs <code>register_pattern<\/code>\/<code>unregister_pattern<\/code> have been removed. Use the <a href=\"\/docs\/reference-guides\/block-api\/block-patterns.md#register_block_pattern\">new functions<\/a> instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5.5.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_init<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>is_gutenberg_page<\/code> has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/reference\/classes\/wp_screen\/is_block_editor\/\"><code>WP_Screen::is_block_editor<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>the_gutenberg_project<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_default_post_format_template<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_get_available_image_sizes<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_get_autosave_newer_than_post_save<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_editor_scripts_and_styles<\/code> has been removed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5.4.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_load_plugin_textdomain<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_get_jed_locale_data<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_load_locale_data<\/code> has been removed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5.3.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_redirect_to_classic_editor_when_saving_posts<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_revisions_link_to_editor<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_remember_classic_editor_when_saving_posts<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_can_edit_post_type<\/code> has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/use_block_editor_for_post_type\/\"><code>use_block_editor_for_post_type<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_can_edit_post<\/code> has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/use_block_editor_for_post\/\"><code>use_block_editor_for_post<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">5.2.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_parse_blocks<\/code> has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/parse_blocks\/\"><code>parse_blocks<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>get_dynamic_blocks_regex<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_render_block<\/code> has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/render_block\/\"><code>render_block<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>strip_dynamic_blocks<\/code> has been removed. For use in excerpt preparation, consider <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/excerpt_remove_blocks\/\"><code>excerpt_remove_blocks<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>strip_dynamic_blocks_add_filter<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>strip_dynamic_blocks_remove_filter<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_post_has_blocks<\/code> has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/has_blocks\/\"><code>has_blocks<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_content_has_blocks<\/code> has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/has_blocks\/\"><code>has_blocks<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_register_rest_routes<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_add_taxonomy_visibility_field<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_get_taxonomy_visibility_data<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_add_permalink_template_to_posts<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_add_block_format_to_post_content<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_add_target_schema_to_links<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_register_post_prepare_functions<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_silence_rest_errors<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_filter_post_type_labels<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_preload_api_request<\/code> has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/rest_preload_api_request\/\"><code>rest_preload_api_request<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_remove_wpcom_markdown_support<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_add_gutenberg_post_state<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_bulk_post_updated_messages<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_kses_allowedtags<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_add_responsive_body_class<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_add_edit_link_filters<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_add_edit_link<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_block_bulk_actions<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_replace_default_add_new_button<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_content_block_version<\/code> has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/block_version\/\"><code>block_version<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_get_block_categories<\/code> has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/get_block_categories\/\"><code>get_block_categories<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>register_tinymce_scripts<\/code> has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_tinymce_scripts\/\"><code>wp_register_tinymce_scripts<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_register_post_types<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The <code>gutenberg<\/code> theme support option has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/block-editor\/developers\/themes\/theme-support\/#wide-alignment\"><code>align-wide<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_prepare_blocks_for_js<\/code> has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/get_block_editor_server_block_settings\/\"><code>get_block_editor_server_block_settings<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_load_list_reusable_blocks<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>_gutenberg_utf8_split<\/code> has been removed. Use <code>_mb_substr<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_disable_editor_settings_wpautop<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_add_rest_nonce_to_heartbeat_response_headers<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_check_if_classic_needs_warning_about_blocks<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_warn_classic_about_blocks<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_show_privacy_policy_help_text<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_common_scripts_and_styles<\/code> has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_common_block_scripts_and_styles\/\"><code>wp_common_block_scripts_and_styles<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_enqueue_registered_block_scripts_and_styles<\/code> has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_enqueue_registered_block_scripts_and_styles\/\"><code>wp_enqueue_registered_block_scripts_and_styles<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_meta_box_save<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_meta_box_save_redirect<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_filter_meta_boxes<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_intercept_meta_box_render<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_override_meta_box_callback<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_show_meta_box_warning<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>the_gutenberg_metaboxes<\/code> has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/the_block_editor_meta_boxes\/\"><code>the_block_editor_meta_boxes<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_meta_box_post_form_hidden_fields<\/code> has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/the_block_editor_meta_box_post_form_hidden_fields\/\"><code>the_block_editor_meta_box_post_form_hidden_fields<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_toggle_custom_fields<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_collect_meta_box_data<\/code> has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/register_and_do_post_meta_boxes\/\"><code>register_and_do_post_meta_boxes<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>window._wpLoadGutenbergEditor<\/code> has been removed. Use <code>window._wpLoadBlockEditor<\/code> instead. Note: This is a private API, not intended for public use. It may be removed in the future.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_get_script_polyfill<\/code> has been removed. Use <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_get_script_polyfill\/\"><code>wp_get_script_polyfill<\/code><\/a> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The PHP function <code>gutenberg_add_admin_body_class<\/code> has been removed. Use the <code>.block-editor-page<\/code> class selector in your stylesheets if you need to scope styles to the block editor screen.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4.5.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Dropdown.refresh()<\/code> has been deprecated as the contained <code>Popover<\/code> is now automatically refreshed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.editor.PostPublishPanelToggle<\/code> has been deprecated in favor of <code>wp.editor.PostPublishButton<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4.4.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>wp.date.getSettings<\/code> has been removed. Please use <code>wp.date.__experimentalGetSettings<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.compose.remountOnPropChange<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The following editor store actions have been removed: <code>createNotice<\/code>, <code>removeNotice<\/code>, <code>createSuccessNotice<\/code>, <code>createInfoNotice<\/code>, <code>createErrorNotice<\/code>, <code>createWarningNotice<\/code>. Use the equivalent actions by the same name from the <code>@wordpress\/notices<\/code> module.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The id prop of wp.nux.DotTip has been removed. Please use the tipId prop instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.blocks.isValidBlock<\/code> has been removed. Please use <code>wp.blocks.isValidBlockContent<\/code> instead but keep in mind that the order of params has changed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.data<\/code> <code>registry.registerReducer<\/code> has been deprecated. Use <code>registry.registerStore<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.data<\/code> <code>registry.registerSelectors<\/code> has been deprecated. Use <code>registry.registerStore<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.data<\/code> <code>registry.registerActions<\/code> has been deprecated. Use <code>registry.registerStore<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.data<\/code> <code>registry.registerResolvers<\/code> has been deprecated. Use <code>registry.registerStore<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>moment<\/code> has been removed from the public API for the date module.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4.3.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>isEditorSidebarPanelOpened<\/code> selector (<code>core\/edit-post<\/code>) has been removed. Please use <code>isEditorPanelEnabled<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>toggleGeneralSidebarEditorPanel<\/code> action (<code>core\/edit-post<\/code>) has been removed. Please use <code>toggleEditorPanelOpened<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.components.PanelColor<\/code> component has been removed. Please use <code>wp.editor.PanelColorSettings<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.editor.PanelColor<\/code> component has been removed. Please use <code>wp.editor.PanelColorSettings<\/code> instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4.2.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Writing resolvers as async generators has been removed. Use the controls plugin instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.components.AccessibleSVG<\/code> component has been removed. Please use <code>wp.components.SVG<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The <code>wp.editor.UnsavedChangesWarning<\/code> component no longer accepts a <code>forceIsDirty<\/code> prop.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>setActiveMetaBoxLocations<\/code> action (<code>core\/edit-post<\/code>) has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>initializeMetaBoxState<\/code> action (<code>core\/edit-post<\/code>) has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.editPost.initializeEditor<\/code> no longer returns an object. Use the <code>setActiveMetaBoxLocations<\/code> action (<code>core\/edit-post<\/code>) in place of the existing object's <code>initializeMetaBoxes<\/code> function.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>setMetaBoxSavedData<\/code> action (<code>core\/edit-post<\/code>) has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>getMetaBoxes<\/code> selector (<code>core\/edit-post<\/code>) has been removed. Use <code>getActiveMetaBoxLocations<\/code> selector (<code>core\/edit-post<\/code>) instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>getMetaBox<\/code> selector (<code>core\/edit-post<\/code>) has been removed. Use <code>isMetaBoxLocationActive<\/code> selector (<code>core\/edit-post<\/code>) instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Attribute type coercion has been removed. Omit the source to preserve type via serialized comment demarcation.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>mediaDetails<\/code> in object passed to <code>onFileChange<\/code> callback of <code>wp.editor.mediaUpload<\/code>. Please use <code>media_details<\/code> property instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.components.CodeEditor<\/code> has been removed. Used <code>wp.codeEditor<\/code> directly instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.blocks.setUnknownTypeHandlerName<\/code> has been removed. Please use <code>setFreeformContentHandlerName<\/code> and <code>setUnregisteredTypeHandlerName<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.blocks.getUnknownTypeHandlerName<\/code> has been removed. Please use <code>getFreeformContentHandlerName<\/code> and <code>getUnregisteredTypeHandlerName<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The Reusable blocks Data API was marked as experimental as it's subject to change in the future.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4.1.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>wp.data.dispatch( 'core\/editor' ).checkTemplateValidity<\/code> has been removed. Validity is verified automatically upon block reset.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">4.0.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>wp.editor.RichTextProvider<\/code> has been removed. Please use <code>wp.data.select( 'core\/editor' )<\/code> methods instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.components.Draggable<\/code> as a DOM node drag handler has been removed. Please, use <code>wp.components.Draggable<\/code> as a wrap component for your DOM node drag handler.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.i18n.getI18n<\/code> has been removed. Use <code>__<\/code>, <code>_x<\/code>, <code>_n<\/code>, or <code>_nx<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.i18n.dcnpgettext<\/code> has been removed. Use <code>__<\/code>, <code>_x<\/code>, <code>_n<\/code>, or <code>_nx<\/code> instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3.9.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>RichText <code>getSettings<\/code> prop has been removed. The <code>unstableGetSettings<\/code> prop is available if continued use is required. Unstable APIs are strongly discouraged to be used, and are subject to removal without notice.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>RichText <code>onSetup<\/code> prop has been removed. The <code>unstableOnSetup<\/code> prop is available if continued use is required. Unstable APIs are strongly discouraged to be used, and are subject to removal without notice.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.editor.getColorName<\/code> has been removed. Please use <code>wp.editor.getColorObjectByColorValue<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.editor.getColorClass<\/code> has been renamed. Please use <code>wp.editor.getColorClassName<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>value<\/code> property in color objects passed by <code>wp.editor.withColors<\/code> has been removed. Please use color property instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The Subheading block has been removed. Please use the Paragraph block instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.blocks.getDefaultBlockForPostFormat<\/code> has been removed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3.8.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>wp.components.withContext<\/code> has been removed. Please use <code>wp.element.createContext<\/code> instead. See: https:\/\/reactjs.org\/docs\/context.html.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.coreBlocks.registerCoreBlocks<\/code> has been removed. Please use <code>wp.blockLibrary.registerCoreBlocks<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.editor.DocumentTitle<\/code> component has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>getDocumentTitle<\/code> selector (<code>core\/editor<\/code>) has been removed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3.7.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>wp.components.withAPIData<\/code> has been removed. Please use the Core Data module or <code>wp.apiFetch<\/code> directly instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.data.dispatch(\"core\").receiveTerms<\/code> has been deprecated. Please use <code>wp.data.dispatch(\"core\").receiveEntityRecords<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>getCategories<\/code> resolver has been deprecated. Please use <code>getEntityRecords<\/code> resolver instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.data.select(\"core\").getTerms<\/code> has been deprecated. Please use <code>wp.data.select(\"core\").getEntityRecords<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.data.select(\"core\").getCategories<\/code> has been deprecated. Please use <code>wp.data.select(\"core\").getEntityRecords<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.data.select(\"core\").isRequestingCategories<\/code> has been deprecated. Please use <code>wp.data.select(\"core\/data\").isResolving<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.data.select(\"core\").isRequestingTerms<\/code> has been deprecated. Please use <code>wp.data.select(\"core\").isResolving<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.data.restrictPersistence<\/code>, <code>wp.data.setPersistenceStorage<\/code> and <code>wp.data.setupPersistence<\/code> has been removed. Please use the data persistence plugin instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3.6.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>wp.editor.editorMediaUpload<\/code> has been removed. Please use <code>wp.editor.mediaUpload<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.utils.getMimeTypesArray<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.utils.mediaUpload<\/code> has been removed. Please use <code>wp.editor.mediaUpload<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.utils.preloadImage<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>supports.wideAlign<\/code> has been removed from the Block API. Please use <code>supports.alignWide<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.blocks.isSharedBlock<\/code> has been removed. Use <code>wp.blocks.isReusableBlock<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>fetchSharedBlocks<\/code> action (<code>core\/editor<\/code>) has been removed. Use <code>fetchReusableBlocks<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>receiveSharedBlocks<\/code> action (<code>core\/editor<\/code>) has been removed. Use <code>receiveReusableBlocks<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>saveSharedBlock<\/code> action (<code>core\/editor<\/code>) has been removed. Use <code>saveReusableBlock<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>deleteSharedBlock<\/code> action (<code>core\/editor<\/code>) has been removed. Use <code>deleteReusableBlock<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>updateSharedBlockTitle<\/code> action (<code>core\/editor<\/code>) has been removed. Use <code>updateReusableBlockTitle<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>convertBlockToSaved<\/code> action (<code>core\/editor<\/code>) has been removed. Use <code>convertBlockToReusable<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>getSharedBlock<\/code> selector (<code>core\/editor<\/code>) has been removed. Use <code>getReusableBlock<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>isSavingSharedBlock<\/code> selector (<code>core\/editor<\/code>) has been removed. Use <code>isSavingReusableBlock<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>isFetchingSharedBlock<\/code> selector (<code>core\/editor<\/code>) has been removed. Use <code>isFetchingReusableBlock<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>getSharedBlocks<\/code> selector (<code>core\/editor<\/code>) has been removed. Use <code>getReusableBlocks<\/code> instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3.5.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>wp.components.ifCondition<\/code> has been removed. Please use <code>wp.compose.ifCondition<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.components.withGlobalEvents<\/code> has been removed. Please use <code>wp.compose.withGlobalEvents<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.components.withInstanceId<\/code> has been removed. Please use <code>wp.compose.withInstanceId<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.components.withSafeTimeout<\/code> has been removed. Please use <code>wp.compose.withSafeTimeout<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.components.withState<\/code> has been removed. Please use <code>wp.compose.withState<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.element.pure<\/code> has been removed. Please use <code>wp.compose.pure<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.element.compose<\/code> has been removed. Please use <code>wp.compose.compose<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.element.createHigherOrderComponent<\/code> has been removed. Please use <code>wp.compose.createHigherOrderComponent<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.utils.buildTermsTree<\/code> has been removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.utils.decodeEntities<\/code> has been removed. Please use <code>wp.htmlEntities.decodeEntities<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>All references to a block's <code>uid<\/code> have been replaced with equivalent props and selectors for <code>clientId<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The <code>wp.editor.MediaPlaceholder<\/code> component <code>onSelectUrl<\/code> prop has been renamed to <code>onSelectURL<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The <code>wp.editor.UrlInput<\/code> component has been renamed to <code>wp.editor.URLInput<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The Text Columns block has been removed. Please use the Columns block instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>InnerBlocks<\/code> grouped layout is removed. Use intermediary nested inner blocks instead. See Columns \/ Column block for reference implementation.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>RichText<\/code> explicit <code>element<\/code> format removed. Please use the compatible <code>children<\/code> format instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3.4.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>focusOnMount<\/code> prop in the <code>Popover<\/code> component has been changed from <code>Boolean<\/code>-only to an enum-style property that accepts <code>\"firstElement\"<\/code>, <code>\"container\"<\/code>, or <code>false<\/code>. Please convert any <code>&lt;Popover focusOnMount \/><\/code> usage to <code>&lt;Popover focusOnMount=\"firstElement\" \/><\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.utils.keycodes<\/code> utilities are removed. Please use <code>wp.keycodes<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Block <code>id<\/code> prop in <code>edit<\/code> function removed. Please use block <code>clientId<\/code> prop instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>property<\/code> source removed. Please use equivalent <code>text<\/code>, <code>html<\/code>, or <code>attribute<\/code> source, or comment attribute instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3.3.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>useOnce: true<\/code> has been removed from the Block API. Please use <code>supports.multiple: false<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Serializing components using <code>componentWillMount<\/code> lifecycle method. Please use the constructor instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>blocks.Autocomplete.completers<\/code> filter removed. Please use <code>editor.Autocomplete.completers<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>blocks.BlockEdit<\/code> filter removed. Please use <code>editor.BlockEdit<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>blocks.BlockListBlock<\/code> filter removed. Please use <code>editor.BlockListBlock<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>blocks.MediaUpload<\/code> filter removed. Please use <code>editor.MediaUpload<\/code> instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3.2.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>wp.data.withRehydratation<\/code> has been renamed to <code>wp.data.withRehydration<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The <code>wp.editor.ImagePlaceholder<\/code> component is removed. Please use <code>wp.editor.MediaPlaceholder<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.utils.deprecated<\/code> function removed. Please use <code>wp.deprecated<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.utils.blob<\/code> removed. Please use <code>wp.blob<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>getInserterItems<\/code>: the <code>allowedBlockTypes<\/code> argument was removed and the <code>parentUID<\/code> argument was added.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>getFrecentInserterItems<\/code> selector removed. Please use <code>getInserterItems<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>getSupportedBlocks<\/code> selector removed. Please use <code>canInsertBlockType<\/code> instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3.1.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>All components in <code>wp.blocks.*<\/code> are removed. Please use <code>wp.editor.*<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.blocks.withEditorSettings<\/code> is removed. Please use the data module to access the editor settings <code>wp.data.select( \"core\/editor\" ).getEditorSettings()<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>All DOM utils in <code>wp.utils.*<\/code> are removed. Please use <code>wp.dom.*<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>isPrivate: true<\/code> has been removed from the Block API. Please use <code>supports.inserter: false<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.utils.isExtraSmall<\/code> function removed. Please use <code>wp.viewport<\/code> module instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>getEditedPostExcerpt<\/code> selector removed (<code>core\/editor<\/code>). Use <code>getEditedPostAttribute( 'excerpt' )<\/code> instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3.0.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>wp.blocks.registerCoreBlocks<\/code> function removed. Please use <code>wp.coreBlocks.registerCoreBlocks<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Raw TinyMCE event handlers for <code>RichText<\/code> have been deprecated. Please use <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/v3.0.0\/editor\/components\/rich-text\/README.md\">documented props<\/a>, ancestor event handler, or onSetup access to the internal editor instance event hub instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2.8.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>Original autocompleter interface in wp.components.Autocomplete<\/code> updated. Please use <code>latest autocompleter interface<\/code> instead. See <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/v2.8.0\/components\/autocomplete\/README.md\">autocomplete<\/a> for more info.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>getInserterItems<\/code>: the <code>allowedBlockTypes<\/code> argument is now mandatory.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>getFrecentInserterItems<\/code>: the <code>allowedBlockTypes<\/code> argument is now mandatory.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2.7.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>wp.element.getWrapperDisplayName<\/code> function removed. Please use <code>wp.element.createHigherOrderComponent<\/code> instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2.6.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>wp.blocks.getBlockDefaultClassname<\/code> function removed. Please use <code>wp.blocks.getBlockDefaultClassName<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.blocks.Editable<\/code> component removed. Please use the <code>wp.blocks.RichText<\/code> component instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2.5.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Returning raw HTML from block <code>save<\/code> is unsupported. Please use the <code>wp.element.RawHTML<\/code> component instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.data.query<\/code> higher-order component removed. Please use <code>wp.data.withSelect<\/code> instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2.4.0<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>wp.blocks.BlockDescription<\/code> component removed. Please use the <code>description<\/code> block property instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.blocks.InspectorControls.*<\/code> components removed. Please use <code>wp.components.*<\/code> components instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.blocks.source.*<\/code> matchers removed. Please use the declarative attributes instead. See <a href=\"\/docs\/reference-guides\/block-api\/block-attributes.md\">block attributes<\/a> for more info.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.data.select( 'selector', ...args )<\/code> removed. Please use <code>wp.data.select( reducerKey' ).*<\/code> instead.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.blocks.MediaUploadButton<\/code> component removed. Please use <code>wp.blocks.MediaUpload<\/code> component instead.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Deprecations\n\nFor features included in the Gutenberg plugin, the deprecation policy is intended to support backward compatibility for two minor plugin releases, when possible. Features and code included in a stable release of WordPress are not included in this deprecation timeline, and are instead subject to the [versioning policies of the WordPress project](https:\/\/make.wordpress.org\/core\/handbook\/about\/release-cycle\/version-numbering\/). The current deprecations are listed below and are grouped by _the version at which they will be removed completely_. If your plugin depends on these behaviors, you must update to the recommended alternative before the noted version.\n\n## Unreleased\n\n-   `wp.blocks.isValidBlockContent` has been removed. Please use `wp.blocks.validateBlock` instead.\n\n## 11.0.0\n\n-   `wp.blocks.registerBlockTypeFromMetadata` method has been removed. Use `wp.blocks.registerBlockType` method instead.\n\n## 10.3.0\n\n-   Passing a tuple of components with `as` prop to `ActionItem.Slot` component is no longer supported. Please pass a component with `as` prop instead. Example:\n    ```diff\n    <ActionItem.Slot\n    \tname=\"my\/slot\"\n    \tlabel={ __( 'My slot' ) }\n    - \tas={ [ MenuGroup, MenuItem ] }\n    + \tas={ MenuGroup }\n    \/>\n    ```\n\n## 9.7.0\n\n-   `leftSidebar` prop in `InterfaceSkeleton` component has been removed. Use `secondarySidebar` prop instead.\n\n## 8.6.0\n\n-   Block API integration with [Block Context](\/docs\/reference-guides\/block-api\/block-context.md) was updated. When registering a block use `usesContext` and `providesContext` pair in JavaScript files and `uses_context` and `provides_context` pair in PHP files instead of previous pair `context` and `providesContext`.\n\n## 8.3.0\n\n-   The PHP function `gutenberg_get_post_from_context` has been removed. Use [Block Context](\/docs\/reference-guides\/block-api\/block-context.md) instead.\n-   The old Block Pattern APIs `register_pattern`\/`unregister_pattern` have been removed. Use the [new functions](\/docs\/reference-guides\/block-api\/block-patterns.md#register_block_pattern) instead.\n\n## 5.5.0\n\n-   The PHP function `gutenberg_init` has been removed.\n-   The PHP function `is_gutenberg_page` has been removed. Use [`WP_Screen::is_block_editor`](https:\/\/developer.wordpress.org\/reference\/classes\/wp_screen\/is_block_editor\/) instead.\n-   The PHP function `the_gutenberg_project` has been removed.\n-   The PHP function `gutenberg_default_post_format_template` has been removed.\n-   The PHP function `gutenberg_get_available_image_sizes` has been removed.\n-   The PHP function `gutenberg_get_autosave_newer_than_post_save` has been removed.\n-   The PHP function `gutenberg_editor_scripts_and_styles` has been removed.\n\n## 5.4.0\n\n-   The PHP function `gutenberg_load_plugin_textdomain` has been removed.\n-   The PHP function `gutenberg_get_jed_locale_data` has been removed.\n-   The PHP function `gutenberg_load_locale_data` has been removed.\n\n## 5.3.0\n\n-   The PHP function `gutenberg_redirect_to_classic_editor_when_saving_posts` has been removed.\n-   The PHP function `gutenberg_revisions_link_to_editor` has been removed.\n-   The PHP function `gutenberg_remember_classic_editor_when_saving_posts` has been removed.\n-   The PHP function `gutenberg_can_edit_post_type` has been removed. Use [`use_block_editor_for_post_type`](https:\/\/developer.wordpress.org\/reference\/functions\/use_block_editor_for_post_type\/) instead.\n-   The PHP function `gutenberg_can_edit_post` has been removed. Use [`use_block_editor_for_post`](https:\/\/developer.wordpress.org\/reference\/functions\/use_block_editor_for_post\/) instead.\n\n## 5.2.0\n\n-   The PHP function `gutenberg_parse_blocks` has been removed. Use [`parse_blocks`](https:\/\/developer.wordpress.org\/reference\/functions\/parse_blocks\/) instead.\n-   The PHP function `get_dynamic_blocks_regex` has been removed.\n-   The PHP function `gutenberg_render_block` has been removed. Use [`render_block`](https:\/\/developer.wordpress.org\/reference\/functions\/render_block\/) instead.\n-   The PHP function `strip_dynamic_blocks` has been removed. For use in excerpt preparation, consider [`excerpt_remove_blocks`](https:\/\/developer.wordpress.org\/reference\/functions\/excerpt_remove_blocks\/) instead.\n-   The PHP function `strip_dynamic_blocks_add_filter` has been removed.\n-   The PHP function `strip_dynamic_blocks_remove_filter` has been removed.\n-   The PHP function `gutenberg_post_has_blocks` has been removed. Use [`has_blocks`](https:\/\/developer.wordpress.org\/reference\/functions\/has_blocks\/) instead.\n-   The PHP function `gutenberg_content_has_blocks` has been removed. Use [`has_blocks`](https:\/\/developer.wordpress.org\/reference\/functions\/has_blocks\/) instead.\n-   The PHP function `gutenberg_register_rest_routes` has been removed.\n-   The PHP function `gutenberg_add_taxonomy_visibility_field` has been removed.\n-   The PHP function `gutenberg_get_taxonomy_visibility_data` has been removed.\n-   The PHP function `gutenberg_add_permalink_template_to_posts` has been removed.\n-   The PHP function `gutenberg_add_block_format_to_post_content` has been removed.\n-   The PHP function `gutenberg_add_target_schema_to_links` has been removed.\n-   The PHP function `gutenberg_register_post_prepare_functions` has been removed.\n-   The PHP function `gutenberg_silence_rest_errors` has been removed.\n-   The PHP function `gutenberg_filter_post_type_labels` has been removed.\n-   The PHP function `gutenberg_preload_api_request` has been removed. Use [`rest_preload_api_request`](https:\/\/developer.wordpress.org\/reference\/functions\/rest_preload_api_request\/) instead.\n-   The PHP function `gutenberg_remove_wpcom_markdown_support` has been removed.\n-   The PHP function `gutenberg_add_gutenberg_post_state` has been removed.\n-   The PHP function `gutenberg_bulk_post_updated_messages` has been removed.\n-   The PHP function `gutenberg_kses_allowedtags` has been removed.\n-   The PHP function `gutenberg_add_responsive_body_class` has been removed.\n-   The PHP function `gutenberg_add_edit_link_filters` has been removed.\n-   The PHP function `gutenberg_add_edit_link` has been removed.\n-   The PHP function `gutenberg_block_bulk_actions` has been removed.\n-   The PHP function `gutenberg_replace_default_add_new_button` has been removed.\n-   The PHP function `gutenberg_content_block_version` has been removed. Use [`block_version`](https:\/\/developer.wordpress.org\/reference\/functions\/block_version\/) instead.\n-   The PHP function `gutenberg_get_block_categories` has been removed. Use [`get_block_categories`](https:\/\/developer.wordpress.org\/reference\/functions\/get_block_categories\/) instead.\n-   The PHP function `register_tinymce_scripts` has been removed. Use [`wp_register_tinymce_scripts`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_register_tinymce_scripts\/) instead.\n-   The PHP function `gutenberg_register_post_types` has been removed.\n-   The `gutenberg` theme support option has been removed. Use [`align-wide`](https:\/\/developer.wordpress.org\/block-editor\/developers\/themes\/theme-support\/#wide-alignment) instead.\n-   The PHP function `gutenberg_prepare_blocks_for_js` has been removed. Use [`get_block_editor_server_block_settings`](https:\/\/developer.wordpress.org\/reference\/functions\/get_block_editor_server_block_settings\/) instead.\n-   The PHP function `gutenberg_load_list_reusable_blocks` has been removed.\n-   The PHP function `_gutenberg_utf8_split` has been removed. Use `_mb_substr` instead.\n-   The PHP function `gutenberg_disable_editor_settings_wpautop` has been removed.\n-   The PHP function `gutenberg_add_rest_nonce_to_heartbeat_response_headers` has been removed.\n-   The PHP function `gutenberg_check_if_classic_needs_warning_about_blocks` has been removed.\n-   The PHP function `gutenberg_warn_classic_about_blocks` has been removed.\n-   The PHP function `gutenberg_show_privacy_policy_help_text` has been removed.\n-   The PHP function `gutenberg_common_scripts_and_styles` has been removed. Use [`wp_common_block_scripts_and_styles`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_common_block_scripts_and_styles\/) instead.\n-   The PHP function `gutenberg_enqueue_registered_block_scripts_and_styles` has been removed. Use [`wp_enqueue_registered_block_scripts_and_styles`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_enqueue_registered_block_scripts_and_styles\/) instead.\n-   The PHP function `gutenberg_meta_box_save` has been removed.\n-   The PHP function `gutenberg_meta_box_save_redirect` has been removed.\n-   The PHP function `gutenberg_filter_meta_boxes` has been removed.\n-   The PHP function `gutenberg_intercept_meta_box_render` has been removed.\n-   The PHP function `gutenberg_override_meta_box_callback` has been removed.\n-   The PHP function `gutenberg_show_meta_box_warning` has been removed.\n-   The PHP function `the_gutenberg_metaboxes` has been removed. Use [`the_block_editor_meta_boxes`](https:\/\/developer.wordpress.org\/reference\/functions\/the_block_editor_meta_boxes\/) instead.\n-   The PHP function `gutenberg_meta_box_post_form_hidden_fields` has been removed. Use [`the_block_editor_meta_box_post_form_hidden_fields`](https:\/\/developer.wordpress.org\/reference\/functions\/the_block_editor_meta_box_post_form_hidden_fields\/) instead.\n-   The PHP function `gutenberg_toggle_custom_fields` has been removed.\n-   The PHP function `gutenberg_collect_meta_box_data` has been removed. Use [`register_and_do_post_meta_boxes`](https:\/\/developer.wordpress.org\/reference\/functions\/register_and_do_post_meta_boxes\/) instead.\n-   `window._wpLoadGutenbergEditor` has been removed. Use `window._wpLoadBlockEditor` instead. Note: This is a private API, not intended for public use. It may be removed in the future.\n-   The PHP function `gutenberg_get_script_polyfill` has been removed. Use [`wp_get_script_polyfill`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_get_script_polyfill\/) instead.\n-   The PHP function `gutenberg_add_admin_body_class` has been removed. Use the `.block-editor-page` class selector in your stylesheets if you need to scope styles to the block editor screen.\n\n## 4.5.0\n\n-   `Dropdown.refresh()` has been deprecated as the contained `Popover` is now automatically refreshed.\n-   `wp.editor.PostPublishPanelToggle` has been deprecated in favor of `wp.editor.PostPublishButton`.\n\n## 4.4.0\n\n-   `wp.date.getSettings` has been removed. Please use `wp.date.__experimentalGetSettings` instead.\n-   `wp.compose.remountOnPropChange` has been removed.\n-   The following editor store actions have been removed: `createNotice`, `removeNotice`, `createSuccessNotice`, `createInfoNotice`, `createErrorNotice`, `createWarningNotice`. Use the equivalent actions by the same name from the `@wordpress\/notices` module.\n-   The id prop of wp.nux.DotTip has been removed. Please use the tipId prop instead.\n-   `wp.blocks.isValidBlock` has been removed. Please use `wp.blocks.isValidBlockContent` instead but keep in mind that the order of params has changed.\n-   `wp.data` `registry.registerReducer` has been deprecated. Use `registry.registerStore` instead.\n-   `wp.data` `registry.registerSelectors` has been deprecated. Use `registry.registerStore` instead.\n-   `wp.data` `registry.registerActions` has been deprecated. Use `registry.registerStore` instead.\n-   `wp.data` `registry.registerResolvers` has been deprecated. Use `registry.registerStore` instead.\n-   `moment` has been removed from the public API for the date module.\n\n## 4.3.0\n\n-   `isEditorSidebarPanelOpened` selector (`core\/edit-post`) has been removed. Please use `isEditorPanelEnabled` instead.\n-   `toggleGeneralSidebarEditorPanel` action (`core\/edit-post`) has been removed. Please use `toggleEditorPanelOpened` instead.\n-   `wp.components.PanelColor` component has been removed. Please use `wp.editor.PanelColorSettings` instead.\n-   `wp.editor.PanelColor` component has been removed. Please use `wp.editor.PanelColorSettings` instead.\n\n## 4.2.0\n\n-   Writing resolvers as async generators has been removed. Use the controls plugin instead.\n-   `wp.components.AccessibleSVG` component has been removed. Please use `wp.components.SVG` instead.\n-   The `wp.editor.UnsavedChangesWarning` component no longer accepts a `forceIsDirty` prop.\n-   `setActiveMetaBoxLocations` action (`core\/edit-post`) has been removed.\n-   `initializeMetaBoxState` action (`core\/edit-post`) has been removed.\n-   `wp.editPost.initializeEditor` no longer returns an object. Use the `setActiveMetaBoxLocations` action (`core\/edit-post`) in place of the existing object's `initializeMetaBoxes` function.\n-   `setMetaBoxSavedData` action (`core\/edit-post`) has been removed.\n-   `getMetaBoxes` selector (`core\/edit-post`) has been removed. Use `getActiveMetaBoxLocations` selector (`core\/edit-post`) instead.\n-   `getMetaBox` selector (`core\/edit-post`) has been removed. Use `isMetaBoxLocationActive` selector (`core\/edit-post`) instead.\n-   Attribute type coercion has been removed. Omit the source to preserve type via serialized comment demarcation.\n-   `mediaDetails` in object passed to `onFileChange` callback of `wp.editor.mediaUpload`. Please use `media_details` property instead.\n-   `wp.components.CodeEditor` has been removed. Used `wp.codeEditor` directly instead.\n-   `wp.blocks.setUnknownTypeHandlerName` has been removed. Please use `setFreeformContentHandlerName` and `setUnregisteredTypeHandlerName` instead.\n-   `wp.blocks.getUnknownTypeHandlerName` has been removed. Please use `getFreeformContentHandlerName` and `getUnregisteredTypeHandlerName` instead.\n-   The Reusable blocks Data API was marked as experimental as it's subject to change in the future.\n\n## 4.1.0\n\n-   `wp.data.dispatch( 'core\/editor' ).checkTemplateValidity` has been removed. Validity is verified automatically upon block reset.\n\n## 4.0.0\n\n-   `wp.editor.RichTextProvider` has been removed. Please use `wp.data.select( 'core\/editor' )` methods instead.\n-   `wp.components.Draggable` as a DOM node drag handler has been removed. Please, use `wp.components.Draggable` as a wrap component for your DOM node drag handler.\n-   `wp.i18n.getI18n` has been removed. Use `__`, `_x`, `_n`, or `_nx` instead.\n-   `wp.i18n.dcnpgettext` has been removed. Use `__`, `_x`, `_n`, or `_nx` instead.\n\n## 3.9.0\n\n-   RichText `getSettings` prop has been removed. The `unstableGetSettings` prop is available if continued use is required. Unstable APIs are strongly discouraged to be used, and are subject to removal without notice.\n-   RichText `onSetup` prop has been removed. The `unstableOnSetup` prop is available if continued use is required. Unstable APIs are strongly discouraged to be used, and are subject to removal without notice.\n-   `wp.editor.getColorName` has been removed. Please use `wp.editor.getColorObjectByColorValue` instead.\n-   `wp.editor.getColorClass` has been renamed. Please use `wp.editor.getColorClassName` instead.\n-   `value` property in color objects passed by `wp.editor.withColors` has been removed. Please use color property instead.\n-   The Subheading block has been removed. Please use the Paragraph block instead.\n-   `wp.blocks.getDefaultBlockForPostFormat` has been removed.\n\n## 3.8.0\n\n-   `wp.components.withContext` has been removed. Please use `wp.element.createContext` instead. See: https:\/\/reactjs.org\/docs\/context.html.\n-   `wp.coreBlocks.registerCoreBlocks` has been removed. Please use `wp.blockLibrary.registerCoreBlocks` instead.\n-   `wp.editor.DocumentTitle` component has been removed.\n-   `getDocumentTitle` selector (`core\/editor`) has been removed.\n\n## 3.7.0\n\n-   `wp.components.withAPIData` has been removed. Please use the Core Data module or `wp.apiFetch` directly instead.\n-   `wp.data.dispatch(\"core\").receiveTerms` has been deprecated. Please use `wp.data.dispatch(\"core\").receiveEntityRecords` instead.\n-   `getCategories` resolver has been deprecated. Please use `getEntityRecords` resolver instead.\n-   `wp.data.select(\"core\").getTerms` has been deprecated. Please use `wp.data.select(\"core\").getEntityRecords` instead.\n-   `wp.data.select(\"core\").getCategories` has been deprecated. Please use `wp.data.select(\"core\").getEntityRecords` instead.\n-   `wp.data.select(\"core\").isRequestingCategories` has been deprecated. Please use `wp.data.select(\"core\/data\").isResolving` instead.\n-   `wp.data.select(\"core\").isRequestingTerms` has been deprecated. Please use `wp.data.select(\"core\").isResolving` instead.\n-   `wp.data.restrictPersistence`, `wp.data.setPersistenceStorage` and `wp.data.setupPersistence` has been removed. Please use the data persistence plugin instead.\n\n## 3.6.0\n\n-   `wp.editor.editorMediaUpload` has been removed. Please use `wp.editor.mediaUpload` instead.\n-   `wp.utils.getMimeTypesArray` has been removed.\n-   `wp.utils.mediaUpload` has been removed. Please use `wp.editor.mediaUpload` instead.\n-   `wp.utils.preloadImage` has been removed.\n-   `supports.wideAlign` has been removed from the Block API. Please use `supports.alignWide` instead.\n-   `wp.blocks.isSharedBlock` has been removed. Use `wp.blocks.isReusableBlock` instead.\n-   `fetchSharedBlocks` action (`core\/editor`) has been removed. Use `fetchReusableBlocks` instead.\n-   `receiveSharedBlocks` action (`core\/editor`) has been removed. Use `receiveReusableBlocks` instead.\n-   `saveSharedBlock` action (`core\/editor`) has been removed. Use `saveReusableBlock` instead.\n-   `deleteSharedBlock` action (`core\/editor`) has been removed. Use `deleteReusableBlock` instead.\n-   `updateSharedBlockTitle` action (`core\/editor`) has been removed. Use `updateReusableBlockTitle` instead.\n-   `convertBlockToSaved` action (`core\/editor`) has been removed. Use `convertBlockToReusable` instead.\n-   `getSharedBlock` selector (`core\/editor`) has been removed. Use `getReusableBlock` instead.\n-   `isSavingSharedBlock` selector (`core\/editor`) has been removed. Use `isSavingReusableBlock` instead.\n-   `isFetchingSharedBlock` selector (`core\/editor`) has been removed. Use `isFetchingReusableBlock` instead.\n-   `getSharedBlocks` selector (`core\/editor`) has been removed. Use `getReusableBlocks` instead.\n\n## 3.5.0\n\n-   `wp.components.ifCondition` has been removed. Please use `wp.compose.ifCondition` instead.\n-   `wp.components.withGlobalEvents` has been removed. Please use `wp.compose.withGlobalEvents` instead.\n-   `wp.components.withInstanceId` has been removed. Please use `wp.compose.withInstanceId` instead.\n-   `wp.components.withSafeTimeout` has been removed. Please use `wp.compose.withSafeTimeout` instead.\n-   `wp.components.withState` has been removed. Please use `wp.compose.withState` instead.\n-   `wp.element.pure` has been removed. Please use `wp.compose.pure` instead.\n-   `wp.element.compose` has been removed. Please use `wp.compose.compose` instead.\n-   `wp.element.createHigherOrderComponent` has been removed. Please use `wp.compose.createHigherOrderComponent` instead.\n-   `wp.utils.buildTermsTree` has been removed.\n-   `wp.utils.decodeEntities` has been removed. Please use `wp.htmlEntities.decodeEntities` instead.\n-   All references to a block's `uid` have been replaced with equivalent props and selectors for `clientId`.\n-   The `wp.editor.MediaPlaceholder` component `onSelectUrl` prop has been renamed to `onSelectURL`.\n-   The `wp.editor.UrlInput` component has been renamed to `wp.editor.URLInput`.\n-   The Text Columns block has been removed. Please use the Columns block instead.\n-   `InnerBlocks` grouped layout is removed. Use intermediary nested inner blocks instead. See Columns \/ Column block for reference implementation.\n-   `RichText` explicit `element` format removed. Please use the compatible `children` format instead.\n\n## 3.4.0\n\n-   `focusOnMount` prop in the `Popover` component has been changed from `Boolean`-only to an enum-style property that accepts `\"firstElement\"`, `\"container\"`, or `false`. Please convert any `<Popover focusOnMount \/>` usage to `<Popover focusOnMount=\"firstElement\" \/>`.\n-   `wp.utils.keycodes` utilities are removed. Please use `wp.keycodes` instead.\n-   Block `id` prop in `edit` function removed. Please use block `clientId` prop instead.\n-   `property` source removed. Please use equivalent `text`, `html`, or `attribute` source, or comment attribute instead.\n\n## 3.3.0\n\n-   `useOnce: true` has been removed from the Block API. Please use `supports.multiple: false` instead.\n-   Serializing components using `componentWillMount` lifecycle method. Please use the constructor instead.\n-   `blocks.Autocomplete.completers` filter removed. Please use `editor.Autocomplete.completers` instead.\n-   `blocks.BlockEdit` filter removed. Please use `editor.BlockEdit` instead.\n-   `blocks.BlockListBlock` filter removed. Please use `editor.BlockListBlock` instead.\n-   `blocks.MediaUpload` filter removed. Please use `editor.MediaUpload` instead.\n\n## 3.2.0\n\n-   `wp.data.withRehydratation` has been renamed to `wp.data.withRehydration`.\n-   The `wp.editor.ImagePlaceholder` component is removed. Please use `wp.editor.MediaPlaceholder` instead.\n-   `wp.utils.deprecated` function removed. Please use `wp.deprecated` instead.\n-   `wp.utils.blob` removed. Please use `wp.blob` instead.\n-   `getInserterItems`: the `allowedBlockTypes` argument was removed and the `parentUID` argument was added.\n-   `getFrecentInserterItems` selector removed. Please use `getInserterItems` instead.\n-   `getSupportedBlocks` selector removed. Please use `canInsertBlockType` instead.\n\n## 3.1.0\n\n-   All components in `wp.blocks.*` are removed. Please use `wp.editor.*` instead.\n-   `wp.blocks.withEditorSettings` is removed. Please use the data module to access the editor settings `wp.data.select( \"core\/editor\" ).getEditorSettings()`.\n-   All DOM utils in `wp.utils.*` are removed. Please use `wp.dom.*` instead.\n-   `isPrivate: true` has been removed from the Block API. Please use `supports.inserter: false` instead.\n-   `wp.utils.isExtraSmall` function removed. Please use `wp.viewport` module instead.\n-   `getEditedPostExcerpt` selector removed (`core\/editor`). Use `getEditedPostAttribute( 'excerpt' )` instead.\n\n## 3.0.0\n\n-   `wp.blocks.registerCoreBlocks` function removed. Please use `wp.coreBlocks.registerCoreBlocks` instead.\n-   Raw TinyMCE event handlers for `RichText` have been deprecated. Please use [documented props](https:\/\/github.com\/WordPress\/gutenberg\/blob\/v3.0.0\/editor\/components\/rich-text\/README.md), ancestor event handler, or onSetup access to the internal editor instance event hub instead.\n\n## 2.8.0\n\n-   `Original autocompleter interface in wp.components.Autocomplete` updated. Please use `latest autocompleter interface` instead. See [autocomplete](https:\/\/github.com\/WordPress\/gutenberg\/blob\/v2.8.0\/components\/autocomplete\/README.md) for more info.\n-   `getInserterItems`: the `allowedBlockTypes` argument is now mandatory.\n-   `getFrecentInserterItems`: the `allowedBlockTypes` argument is now mandatory.\n\n## 2.7.0\n\n-   `wp.element.getWrapperDisplayName` function removed. Please use `wp.element.createHigherOrderComponent` instead.\n\n## 2.6.0\n\n-   `wp.blocks.getBlockDefaultClassname` function removed. Please use `wp.blocks.getBlockDefaultClassName` instead.\n-   `wp.blocks.Editable` component removed. Please use the `wp.blocks.RichText` component instead.\n\n## 2.5.0\n\n-   Returning raw HTML from block `save` is unsupported. Please use the `wp.element.RawHTML` component instead.\n-   `wp.data.query` higher-order component removed. Please use `wp.data.withSelect` instead.\n\n## 2.4.0\n\n-   `wp.blocks.BlockDescription` component removed. Please use the `description` block property instead.\n-   `wp.blocks.InspectorControls.*` components removed. Please use `wp.components.*` components instead.\n-   `wp.blocks.source.*` matchers removed. Please use the declarative attributes instead. See [block attributes](\/docs\/reference-guides\/block-api\/block-attributes.md) for more info.\n-   `wp.data.select( 'selector', ...args )` removed. Please use `wp.data.select( reducerKey' ).*` instead.\n-   `wp.blocks.MediaUploadButton` component removed. Please use `wp.blocks.MediaUpload` component instead.\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Code Contributions<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A guide on how to get started contributing code to the Gutenberg project.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Discussions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/make.wordpress.org\/core\/\">Make WordPress Core blog<\/a> is the primary spot for the latest information around WordPress development: including announcements, product goals, meeting notes, meeting agendas, and more.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Real-time discussions for development take place in <code>#core-editor<\/code> and <code>#core-js<\/code> channels in <a href=\"https:\/\/make.wordpress.org\/chat\">Make WordPress Slack<\/a> (registration required). Weekly meetings for the editor component are on Wednesdays at 14:00UTC, and for the JavaScript component on Tuesday at 15:00UTC, in their respective Slack channels.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Development Hub<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Gutenberg project uses GitHub for managing code and tracking issues. The main repository is at: <a href=\"https:\/\/github.com\/WordPress\/gutenberg\">https:\/\/github.com\/WordPress\/gutenberg<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Browse <a href=\"https:\/\/github.com\/wordpress\/gutenberg\/issues\">the issues list<\/a> to find issues to work on. The <a href=\"https:\/\/github.com\/wordpress\/gutenberg\/issues?q=is%3Aopen+is%3Aissue+label%3A%22Good+First+Issue%22\">good first issue<\/a> and <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/pulls?q=is%3Aopen+is%3Apr+label%3A%22Good+First+Review%22\">good first review<\/a> labels are good starting points.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Contributor resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/contributors\/code\/getting-started-with-code-contribution.md\">Getting Started<\/a> documents getting your development environment setup, this includes your test site and developer tools suggestions.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/contributors\/code\/git-workflow.md\">Git Workflow<\/a> documents the git process for deploying changes using pull requests.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/contributors\/code\/coding-guidelines.md\">Coding Guidelines<\/a> outline additional patterns and conventions used in the Gutenberg project.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/contributors\/code\/testing-overview.md\">Testing Overview<\/a> for PHP and JavaScript development in Gutenberg.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/contributors\/accessibility-testing.md\">Accessibility Testing<\/a> documents the process of testing accessibility in Gutenberg.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/contributors\/code\/managing-packages.md\">Managing Packages<\/a> documents the process for managing the npm packages.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/contributors\/code\/release.md\">Gutenberg Release Process<\/a> - a checklist for the different types of releases for the Gutenberg project.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/contributors\/code\/react-native\/README.md\">React Native mobile editor<\/a> - a guide on contributing to the React Native mobile editor.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/contributors\/code\/react-native\/integration-test-guide.md\">React Native Integration Test Guide<\/a> - a guide on creating integration tests for the mobile editor.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Code Contributions\n\nA guide on how to get started contributing code to the Gutenberg project.\n\n## Discussions\n\nThe [Make WordPress Core blog](https:\/\/make.wordpress.org\/core\/) is the primary spot for the latest information around WordPress development: including announcements, product goals, meeting notes, meeting agendas, and more.\n\nReal-time discussions for development take place in `#core-editor` and `#core-js` channels in [Make WordPress Slack](https:\/\/make.wordpress.org\/chat) (registration required). Weekly meetings for the editor component are on Wednesdays at 14:00UTC, and for the JavaScript component on Tuesday at 15:00UTC, in their respective Slack channels.\n\n## Development Hub\n\nThe Gutenberg project uses GitHub for managing code and tracking issues. The main repository is at: [https:\/\/github.com\/WordPress\/gutenberg](https:\/\/github.com\/WordPress\/gutenberg).\n\nBrowse [the issues list](https:\/\/github.com\/wordpress\/gutenberg\/issues) to find issues to work on. The [good first issue](https:\/\/github.com\/wordpress\/gutenberg\/issues?q=is%3Aopen+is%3Aissue+label%3A%22Good+First+Issue%22) and [good first review](https:\/\/github.com\/WordPress\/gutenberg\/pulls?q=is%3Aopen+is%3Apr+label%3A%22Good+First+Review%22) labels are good starting points.\n\n## Contributor resources\n\n-   [Getting Started](\/docs\/contributors\/code\/getting-started-with-code-contribution.md) documents getting your development environment setup, this includes your test site and developer tools suggestions.\n-   [Git Workflow](\/docs\/contributors\/code\/git-workflow.md) documents the git process for deploying changes using pull requests.\n-   [Coding Guidelines](\/docs\/contributors\/code\/coding-guidelines.md) outline additional patterns and conventions used in the Gutenberg project.\n-   [Testing Overview](\/docs\/contributors\/code\/testing-overview.md) for PHP and JavaScript development in Gutenberg.\n-   [Accessibility Testing](\/docs\/contributors\/accessibility-testing.md) documents the process of testing accessibility in Gutenberg.\n-   [Managing Packages](\/docs\/contributors\/code\/managing-packages.md) documents the process for managing the npm packages.\n-   [Gutenberg Release Process](\/docs\/contributors\/code\/release.md) - a checklist for the different types of releases for the Gutenberg project.\n-   [React Native mobile editor](\/docs\/contributors\/code\/react-native\/README.md) - a guide on contributing to the React Native mobile editor.\n-   [React Native Integration Test Guide](\/docs\/contributors\/code\/react-native\/integration-test-guide.md) - a guide on creating integration tests for the mobile editor.\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/react-native\/getting-started-react-native.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Getting Started for the React Native based Mobile Gutenberg<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Welcome! This is the Getting Started guide for the native mobile port of the block editor, targeting Android and iOS devices. Overall, it's a React Native library to be used in parent greenfield or brownfield apps. Continue reading for information on how to build, test, and run it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Prerequisites<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For a developer experience closer to the one the project maintainers current have, make sure you have the following tools installed:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>git<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/nvm-sh\/nvm\">nvm<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Node.js and npm (use nvm to install them)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.android.com\/studio\/\">Android Studio<\/a> to be able to compile the Android version of the app<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode<\/a> to be able to compile the iOS app<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>CocoaPods (<code>sudo gem install cocoapods<\/code>) needed to fetch React and third-party dependencies.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Note that the OS platform used by the maintainers is macOS but the tools and setup should be usable in other platforms too.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Clone the project<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>git clone https:\/\/github.com\/WordPress\/gutenberg.git\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Set up<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Note that the commands described here should be run in the top-level directory of the cloned project. Before running the demo app, you need to download and install the project dependencies. This is done via the following command:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>nvm install\nnpm ci\nnpm run native preios\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Run<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run native start:reset\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Runs the packager (Metro) in development mode. The packager stays running to serve the app bundle to the clients that request it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With the packager running, open another terminal window and use the following command to compile and run the Android app:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run native android\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The app should now open in a connected device or a running emulator and fetch the JavaScript code from the running packager.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To compile and run the iOS variant of the app using the <em>default<\/em> simulator device, use:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run native ios\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>which will attempt to open your app in the iOS Simulator if you're on a Mac and have it installed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Running on other iOS device simulators<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To compile and run the app using a different device simulator, use the following, noting the double sets of <code>--<\/code> to pass the simulator option down to the <code>react-native<\/code> CLI.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run native ios -- -- --simulator=\"DEVICE_NAME\"\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>For example, if you'd like to run in an iPhone Xs Max, try:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run native ios -- -- --simulator=\"iPhone Xs Max\"\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>To see a list of all of your available iOS devices, use <code>xcrun simctl list devices<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Customizing the demo Editor<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>By default, the Demo editor renders most of the supported core blocks. This is helpful to showcase the editor's capabilities, but can be distracting when focusing on a specific block or feature. One can customize the editor's initial state by leveraging the <code>native.block_editor_props<\/code> hook in a <code>packages\/react-native-editor\/src\/setup-local.js<\/code> file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<details><summary>Example setup-local.js<\/summary>\n<!-- \/wp:html -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * WordPress dependencies\n *\/\nimport { addFilter } from '@wordpress\/hooks';\n\nexport default () => {\n\taddFilter(\n\t\t'native.block_editor_props',\n\t\t'core\/react-native-editor',\n\t\t( props ) => {\n\t\t\treturn {\n\t\t\t\t...props,\n\t\t\t\tinitialHtml,\n\t\t\t};\n\t\t}\n\t);\n};\n\nconst initialHtml = `\n\n<h2 class=\"wp-block-heading\">Just a Heading<\/h2>\n\n`;\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:html -->\n<\/details>\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Troubleshooting<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If the Android emulator doesn't start correctly, or compiling fails with <code>Could not initialize class org.codehaus.groovy.runtime.InvokerHelper<\/code> or similar, it may help to double check the set up of your development environment against the latest requirements in <a href=\"https:\/\/reactnative.dev\/docs\/environment-setup\">React Native's documentation<\/a>. With Android Studio, for example, you will need to configure the <code>ANDROID_HOME<\/code> environment variable and ensure that your version of JDK matches the latest requirements.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some times, and especially when tweaking anything in the <code>package.json<\/code>, Babel configuration (<code>.babelrc<\/code>) or the Jest configuration (<code>jest.config.js<\/code>), your changes might seem to not take effect as expected. On those times, you might need to stop the metro bunder process and restart it with <code>npm run native start:reset<\/code>. Other times, you might want to reinstall the NPM packages from scratch and the <code>npm run native clean:install<\/code> script can be handy.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Developing with Visual Studio Code<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Although you're not required to use Visual Studio Code for developing gutenberg-mobile, it is the recommended IDE and we have some configuration for it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you first open the project in Visual Studio, you will be prompted to install some recommended extensions. This will help with some things like type checking and debugging.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>One of the extensions we are using is the <a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=vsmobile.vscode-react-native\">React Native Tools<\/a>. This allows you to run the packager from VSCode or launch the application on iOS or Android. It also adds some debug configurations so you can set breakpoints and debug the application directly from VSCode. Take a look at the <a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=vsmobile.vscode-react-native\">extension documentation<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Unit tests<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Use the following command to run the test suite:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run test:native\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>It will run the <a href=\"https:\/\/github.com\/facebook\/jest\">jest<\/a> test runner on your tests. The tests are running on the desktop against Node.js.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To run the tests with debugger support, start it with the following CLI command:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run test:native:debug\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then, open <code>chrome:\/\/inspect<\/code> in Chrome to attach the debugger (look into the \"Remote Target\" section). While testing\/developing, feel free to sprinkle <code>debugger<\/code> statements anywhere in the code that you'd like the debugger to break.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Writing and running unit tests<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This project is set up to use <a href=\"https:\/\/jestjs.io\/\">jest<\/a> for tests. You can configure whatever testing strategy you like, but jest works out of the box. Create test files in directories called <code>__tests__<\/code> or with the <code>.test.js<\/code> extension to have the files loaded by jest. See an example test <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/react-native-editor\/src\/test\/api-fetch-setup.test.js\">here<\/a>. The <a href=\"https:\/\/jestjs.io\/docs\/getting-started\">jest documentation<\/a> is also a wonderful resource, as is the <a href=\"https:\/\/jestjs.io\/docs\/tutorial-react-native\">React Native testing tutorial<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">End-to-end tests<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In addition to unit tests, the Mobile Gutenberg (MG) project relies upon end-to-end (E2E) tests to automate testing critical flows in an environment similar to that of an end user. We generally prefer unit tests due to their speed and ease of maintenance. However, assertions that require OS-level features (e.g. complex gestures, text selection) or visual regression testing (e.g. dark mode, contrast levels) we use E2E tests.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The E2E tests are found in the <a href=\"\/packages\/react-native-editor\/__device-tests__\"><code>packages\/react-native-editor\/__device-tests__<\/code><\/a> directory. Additional documentation on running and contributing to these tests can be found in the <a href=\"\/packages\/react-native-editor\/__device-tests__#readme\">tests directory<\/a>.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Getting Started for the React Native based Mobile Gutenberg\n\nWelcome! This is the Getting Started guide for the native mobile port of the block editor, targeting Android and iOS devices. Overall, it's a React Native library to be used in parent greenfield or brownfield apps. Continue reading for information on how to build, test, and run it.\n\n## Prerequisites\n\nFor a developer experience closer to the one the project maintainers current have, make sure you have the following tools installed:\n\n-   git\n-   [nvm](https:\/\/github.com\/nvm-sh\/nvm)\n-   Node.js and npm (use nvm to install them)\n-   [Android Studio](https:\/\/developer.android.com\/studio\/) to be able to compile the Android version of the app\n-   [Xcode](https:\/\/developer.apple.com\/xcode\/) to be able to compile the iOS app\n-   CocoaPods (`sudo gem install cocoapods`) needed to fetch React and third-party dependencies.\n\nNote that the OS platform used by the maintainers is macOS but the tools and setup should be usable in other platforms too.\n\n## Clone the project\n\n```sh\ngit clone https:\/\/github.com\/WordPress\/gutenberg.git\n```\n\n## Set up\n\nNote that the commands described here should be run in the top-level directory of the cloned project. Before running the demo app, you need to download and install the project dependencies. This is done via the following command:\n\n```sh\nnvm install\nnpm ci\nnpm run native preios\n```\n\n## Run\n\n```sh\nnpm run native start:reset\n```\n\nRuns the packager (Metro) in development mode. The packager stays running to serve the app bundle to the clients that request it.\n\nWith the packager running, open another terminal window and use the following command to compile and run the Android app:\n\n```sh\nnpm run native android\n```\n\nThe app should now open in a connected device or a running emulator and fetch the JavaScript code from the running packager.\n\nTo compile and run the iOS variant of the app using the _default_ simulator device, use:\n\n```sh\nnpm run native ios\n```\n\nwhich will attempt to open your app in the iOS Simulator if you're on a Mac and have it installed.\n\n### Running on other iOS device simulators\n\nTo compile and run the app using a different device simulator, use the following, noting the double sets of `--` to pass the simulator option down to the `react-native` CLI.\n\n```sh\nnpm run native ios -- -- --simulator=\"DEVICE_NAME\"\n```\n\nFor example, if you'd like to run in an iPhone Xs Max, try:\n\n```sh\nnpm run native ios -- -- --simulator=\"iPhone Xs Max\"\n```\n\nTo see a list of all of your available iOS devices, use `xcrun simctl list devices`.\n\n### Customizing the demo Editor\n\nBy default, the Demo editor renders most of the supported core blocks. This is helpful to showcase the editor's capabilities, but can be distracting when focusing on a specific block or feature. One can customize the editor's initial state by leveraging the `native.block_editor_props` hook in a `packages\/react-native-editor\/src\/setup-local.js` file.\n\n<details><summary>Example setup-local.js<\/summary>\n\n```js\n\/**\n * WordPress dependencies\n *\/\nimport { addFilter } from '@wordpress\/hooks';\n\nexport default () => {\n\taddFilter(\n\t\t'native.block_editor_props',\n\t\t'core\/react-native-editor',\n\t\t( props ) => {\n\t\t\treturn {\n\t\t\t\t...props,\n\t\t\t\tinitialHtml,\n\t\t\t};\n\t\t}\n\t);\n};\n\nconst initialHtml = `\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Just a Heading<\/h2>\n<!-- \/wp:heading -->\n`;\n```\n\n<\/details>\n\n### Troubleshooting\n\nIf the Android emulator doesn't start correctly, or compiling fails with `Could not initialize class org.codehaus.groovy.runtime.InvokerHelper` or similar, it may help to double check the set up of your development environment against the latest requirements in [React Native's documentation](https:\/\/reactnative.dev\/docs\/environment-setup). With Android Studio, for example, you will need to configure the `ANDROID_HOME` environment variable and ensure that your version of JDK matches the latest requirements.\n\nSome times, and especially when tweaking anything in the `package.json`, Babel configuration (`.babelrc`) or the Jest configuration (`jest.config.js`), your changes might seem to not take effect as expected. On those times, you might need to stop the metro bunder process and restart it with `npm run native start:reset`. Other times, you might want to reinstall the NPM packages from scratch and the `npm run native clean:install` script can be handy.\n\n## Developing with Visual Studio Code\n\nAlthough you're not required to use Visual Studio Code for developing gutenberg-mobile, it is the recommended IDE and we have some configuration for it.\n\nWhen you first open the project in Visual Studio, you will be prompted to install some recommended extensions. This will help with some things like type checking and debugging.\n\nOne of the extensions we are using is the [React Native Tools](https:\/\/marketplace.visualstudio.com\/items?itemName=vsmobile.vscode-react-native). This allows you to run the packager from VSCode or launch the application on iOS or Android. It also adds some debug configurations so you can set breakpoints and debug the application directly from VSCode. Take a look at the [extension documentation](https:\/\/marketplace.visualstudio.com\/items?itemName=vsmobile.vscode-react-native) for more details.\n\n## Unit tests\n\nUse the following command to run the test suite:\n\n```sh\nnpm run test:native\n```\n\nIt will run the [jest](https:\/\/github.com\/facebook\/jest) test runner on your tests. The tests are running on the desktop against Node.js.\n\nTo run the tests with debugger support, start it with the following CLI command:\n\n```sh\nnpm run test:native:debug\n```\n\nThen, open `chrome:\/\/inspect` in Chrome to attach the debugger (look into the \"Remote Target\" section). While testing\/developing, feel free to sprinkle `debugger` statements anywhere in the code that you'd like the debugger to break.\n\n## Writing and running unit tests\n\nThis project is set up to use [jest](https:\/\/jestjs.io\/) for tests. You can configure whatever testing strategy you like, but jest works out of the box. Create test files in directories called `__tests__` or with the `.test.js` extension to have the files loaded by jest. See an example test [here](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/react-native-editor\/src\/test\/api-fetch-setup.test.js). The [jest documentation](https:\/\/jestjs.io\/docs\/getting-started) is also a wonderful resource, as is the [React Native testing tutorial](https:\/\/jestjs.io\/docs\/tutorial-react-native).\n\n## End-to-end tests\n\nIn addition to unit tests, the Mobile Gutenberg (MG) project relies upon end-to-end (E2E) tests to automate testing critical flows in an environment similar to that of an end user. We generally prefer unit tests due to their speed and ease of maintenance. However, assertions that require OS-level features (e.g. complex gestures, text selection) or visual regression testing (e.g. dark mode, contrast levels) we use E2E tests.\n\nThe E2E tests are found in the [`packages\/react-native-editor\/__device-tests__`](\/packages\/react-native-editor\/__device-tests__) directory. Additional documentation on running and contributing to these tests can be found in the [tests directory](\/packages\/react-native-editor\/__device-tests__#readme).\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/react-native\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">React Native mobile editor<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Gutenberg repository includes the source for the <a href=\"https:\/\/reactnative.dev\/\">React Native<\/a> based editor for mobile.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Mind the mobile<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Contributors need to ensure that they update any affected native mobile files during code refactorings because we cannot yet rely on automated tooling to do this for us. For example, renaming a function or a prop should also be performed in the native modules too, otherwise, the mobile client will break. We have added some mobile specific CI tests as safeguards in place in PRs, but we're still far from done. Please bear with us and thank you in advance. \u2764\ufe0f\ud83d\ude47\u200d<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Native mobile specific files<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The majority of the code shared with native mobile is in the very same JavaScript module and SASS style files. In the cases where the code paths need to diverge, a <code>.native.js<\/code> or <code>.native.scss<\/code> variant of the file is created. In some cases, platform specific files can be also found for Android (<code>.android.js<\/code>) or iOS (<code>.ios.js<\/code>).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Running Gutenberg Mobile on Android and iOS<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For instructions on how to run the <strong>Gutenberg Mobile Demo App<\/strong> on Android or iOS, see <a href=\"\/docs\/contributors\/code\/react-native\/getting-started-react-native.md\">Getting Started for the React Native based Mobile Gutenberg<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Also, the mobile client is packaged and released via the <a href=\"https:\/\/wordpress.org\/mobile\/\">official WordPress apps<\/a>. Even though the build pipeline is slightly different then the mobile demo apps and lives in its own repo for now (<a href=\"https:\/\/github.com\/wordpress-mobile\/gutenberg-mobile\">here's the native mobile repo<\/a>), the source code itself is taken directly from this repo and the \"web\" side codepaths.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Native mobile E2E tests in Continuous Integration<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you encounter a failed Android\/iOS test on your pull request, we recommend the following steps:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Re-running the failed GitHub Action job (<a href=\"https:\/\/docs.github.com\/en\/actions\/configuring-and-managing-workflows\/managing-a-workflow-run#viewing-your-workflow-history\">guide for how to re-run<\/a>) - This should fix failed tests the majority of the time.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>You can check if the test is failing locally by following the steps to run the E2E test on your machine from the <a href=\"\/packages\/react-native-editor\/__device-tests__\/README.md\">E2E testing documentation<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>In addition to reading the logs from the E2E test, you can download a video recording from the Artifacts section of the GitHub job that may have additional useful information.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Check if any changes in your PR would require corresponding changes to <code>.native.js<\/code> versions of files.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Lastly, if you're stuck on a failing mobile test, feel free to reach out to contributors on Slack in the #mobile or #core-editor chats in the WordPress Core Slack, <a href=\"https:\/\/make.wordpress.org\/chat\/\">free to join<\/a>.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Debugging the native mobile unit tests<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Follow the instructions in <a href=\"\/docs\/contributors\/code\/react-native\/integration-test-guide.md\">Native mobile testing<\/a> to locally debug the native mobile unit tests when needed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Internationalization (i18n)<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Further information about this topic can be found in the <a href=\"\/docs\/contributors\/code\/react-native\/internationalization-guide.md\">React Native Internationalization Guide<\/a>.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# React Native mobile editor\n\nThe Gutenberg repository includes the source for the [React Native](https:\/\/reactnative.dev\/) based editor for mobile.\n\n## Mind the mobile\n\nContributors need to ensure that they update any affected native mobile files during code refactorings because we cannot yet rely on automated tooling to do this for us. For example, renaming a function or a prop should also be performed in the native modules too, otherwise, the mobile client will break. We have added some mobile specific CI tests as safeguards in place in PRs, but we're still far from done. Please bear with us and thank you in advance. \u2764\ufe0f\ud83d\ude47\u200d\n\n## Native mobile specific files\n\nThe majority of the code shared with native mobile is in the very same JavaScript module and SASS style files. In the cases where the code paths need to diverge, a `.native.js` or `.native.scss` variant of the file is created. In some cases, platform specific files can be also found for Android (`.android.js`) or iOS (`.ios.js`).\n\n## Running Gutenberg Mobile on Android and iOS\n\nFor instructions on how to run the **Gutenberg Mobile Demo App** on Android or iOS, see [Getting Started for the React Native based Mobile Gutenberg](\/docs\/contributors\/code\/react-native\/getting-started-react-native.md)\n\nAlso, the mobile client is packaged and released via the [official WordPress apps](https:\/\/wordpress.org\/mobile\/). Even though the build pipeline is slightly different then the mobile demo apps and lives in its own repo for now ([here's the native mobile repo](https:\/\/github.com\/wordpress-mobile\/gutenberg-mobile)), the source code itself is taken directly from this repo and the \"web\" side codepaths.\n\n## Native mobile E2E tests in Continuous Integration\n\nIf you encounter a failed Android\/iOS test on your pull request, we recommend the following steps:\n\n1. Re-running the failed GitHub Action job ([guide for how to re-run](https:\/\/docs.github.com\/en\/actions\/configuring-and-managing-workflows\/managing-a-workflow-run#viewing-your-workflow-history)) - This should fix failed tests the majority of the time.\n2. You can check if the test is failing locally by following the steps to run the E2E test on your machine from the [E2E testing documentation](\/packages\/react-native-editor\/__device-tests__\/README.md).\n3. In addition to reading the logs from the E2E test, you can download a video recording from the Artifacts section of the GitHub job that may have additional useful information.\n4. Check if any changes in your PR would require corresponding changes to `.native.js` versions of files.\n5. Lastly, if you're stuck on a failing mobile test, feel free to reach out to contributors on Slack in the #mobile or #core-editor chats in the WordPress Core Slack, [free to join](https:\/\/make.wordpress.org\/chat\/).\n\n## Debugging the native mobile unit tests\n\nFollow the instructions in [Native mobile testing](\/docs\/contributors\/code\/react-native\/integration-test-guide.md) to locally debug the native mobile unit tests when needed.\n\n## Internationalization (i18n)\n\nFurther information about this topic can be found in the [React Native Internationalization Guide](\/docs\/contributors\/code\/react-native\/internationalization-guide.md).\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/react-native\/internationalization-guide.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">React Native Internationalization Guide<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The native version of the editor references two types of string:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Strings used in web and native platforms.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Strings used only in the native platform.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Regarding the first type, these strings are translated following the same process described for the web version in <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/docs\/how-to-guides\/internationalization.md\">this guide<\/a>, however for the latter, it's required to provide your own translations.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Extract strings only used in the native platform<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order to identify these strings, you can use the script <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/react-native-editor\/bin\/extract-used-strings.js\"><code>extract-used-strings<\/code><\/a> located in <code>packages\/react-native-editor\/bin\/extract-used-strings.js<\/code> to generate a JSON object that contains all the strings referenced including the platforms where they are used, as well as the files that reference it. Here you can see the format:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code> {\n\t\"gutenberg\": {\n\t  \"<string>\": {\n\t    \"string\": String value.\n\t\t\"stringPlural\": String value with its plural form. &#91;optional]\n\t\t\"comments\": Comments for translators. &#91;default value is an empty string]\n\t\t\"reference\": Array containing the paths of the source files that reference the string.\n\t\t\"platforms\": Array containing the platforms where the string is being used, values are \"android\" | \"ios\" | \"web\".\n\t  },\n\t  ...\n\t},\n\t\"other-domain-plugin\": {\n\t  ...\n\t},\n    ...\n}\n<\/string><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This command also supports passing extra plugins, in case the React Native bundle of the editor is generated including other plugins.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's important to note that the JSON object contains all used strings, so in order to identify the ones only used in the native platform, it\u2019s required to provide your own script\/process to extract them. This can easily be done by going through the strings and filtering out the ones that include the \"web\" platform.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">NPM command<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Extract used strings:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run native i18n:extract-used-strings -- \"$PWD\/used-strings.json\"\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em><strong>NOTE:<\/strong> We need to pass absolute paths, otherwise it uses <code>packages\/react-native-editor<\/code> as root path for relative paths.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Extract used strings including extra plugins:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run native i18n:extract-used-strings -- \"$PWD\/used-strings.json\" \"domain-plugin-1\" <plugin-1_source_path> \"domain-plugin-2\" <plugin-2_source_path> ...\n<\/plugin-2_source_path><\/plugin-1_source_path><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Providing own translations (for strings only used in native platform)<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once you have the list of used strings in the native platform, the strings have to be translated, however, this process is out of the scope of the native version so you have to provide your own translations.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The process for injecting the translations data into the editor is via the <code>translations<\/code> initial prop which is passed to the editor during its initialization:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/72854b4d6b09bd7fb7f996a5c55dd3cc0613ddf8\/packages\/react-native-bridge\/android\/react-native-bridge\/src\/main\/java\/org\/wordpress\/mobile\/WPAndroidGlue\/GutenbergProps.kt#L34\">Android reference<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/72854b4d6b09bd7fb7f996a5c55dd3cc0613ddf8\/packages\/react-native-bridge\/ios\/GutenbergBridgeDataSource.swift#L39-L43\">iOS reference<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The mechanism for integrating the provided translations to the mobile client, via the mentioned <code>translations<\/code> initial prop, is not described here, as it's specific to the mobile client and could be achieved in different ways. Nevertheless, it's important that they're provided by the mentioned initial prop, as the editor is in charge of merging them with the translations already included in the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>NOTE:<\/strong> Keep in mind that those strings that match with ones already included in the editor will be overridden.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Fetch translations (for strings used in web and native platforms)<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A translation file is basically a JSON object that contains key-value items with the translation for each individual string. This content is fetched from <a href=\"https:\/\/translate.wordpress.org\/\">translate.wordpress.org<\/a> that holds translations for WordPress and a list of different plugins like Gutenberg.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>These files can be cached under a folder and optimized. Additionally, an index file is generated that acts as the entry point to import and fetches the plugin translations.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Fetched translations contain all the translatable plugin strings, including those not used in the native version of the editor. The file sizes, however, can be reduced by filtering out the strings not referenced in the used strings JSON file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>By default, when installing dependencies, un-optimized translations might be downloaded for Gutenberg and located in the <code>i18n-cache<\/code> folder if the cache is not present.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The strings included in these translation files are imported in the editor upon its initialization (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/154918b5770ac07c851169eaa35961c636eac5ba\/packages\/react-native-editor\/src\/index.js#L43-L49\">reference<\/a>) and will be merged with the extra translations provided by the <code>translations<\/code> initial prop.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">NPM command<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Fetch un-optimized translations:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run native i18n:fetch-translations -- \"gutenberg\" <output_path>\n<\/output_path><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em><strong>NOTE:<\/strong> We need to pass absolute paths, otherwise it uses <code>packages\/react-native-editor<\/code> as root path  for relative paths.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Fetch optimized translations:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run native i18n:fetch-translations -- \"gutenberg\" <output_path> <used_strings_file>\n<\/used_strings_file><\/output_path><\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# React Native Internationalization Guide\n\nThe native version of the editor references two types of string:\n1. Strings used in web and native platforms.\n2. Strings used only in the native platform.\n\nRegarding the first type, these strings are translated following the same process described for the web version in [this guide](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/docs\/how-to-guides\/internationalization.md), however for the latter, it's required to provide your own translations.\n\n## Extract strings only used in the native platform\n\nIn order to identify these strings, you can use the script [`extract-used-strings`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/react-native-editor\/bin\/extract-used-strings.js) located in `packages\/react-native-editor\/bin\/extract-used-strings.js` to generate a JSON object that contains all the strings referenced including the platforms where they are used, as well as the files that reference it. Here you can see the format:\n```\n {\n\t\"gutenberg\": {\n\t  \"<string>\": {\n\t    \"string\": String value.\n\t\t\"stringPlural\": String value with its plural form. [optional]\n\t\t\"comments\": Comments for translators. [default value is an empty string]\n\t\t\"reference\": Array containing the paths of the source files that reference the string.\n\t\t\"platforms\": Array containing the platforms where the string is being used, values are \"android\" | \"ios\" | \"web\".\n\t  },\n\t  ...\n\t},\n\t\"other-domain-plugin\": {\n\t  ...\n\t},\n    ...\n}\n```\n\nThis command also supports passing extra plugins, in case the React Native bundle of the editor is generated including other plugins.\n\nIt's important to note that the JSON object contains all used strings, so in order to identify the ones only used in the native platform, it\u2019s required to provide your own script\/process to extract them. This can easily be done by going through the strings and filtering out the ones that include the \"web\" platform.\n\n### NPM command\n\nExtract used strings:\n```sh\nnpm run native i18n:extract-used-strings -- \"$PWD\/used-strings.json\"\n```\n\n***NOTE:** We need to pass absolute paths, otherwise it uses `packages\/react-native-editor` as root path for relative paths.*\n\nExtract used strings including extra plugins:\n```sh\nnpm run native i18n:extract-used-strings -- \"$PWD\/used-strings.json\" \"domain-plugin-1\" <PLUGIN-1_SOURCE_PATH> \"domain-plugin-2\" <PLUGIN-2_SOURCE_PATH> ...\n```\n\n## Providing own translations (for strings only used in native platform)\n\nOnce you have the list of used strings in the native platform, the strings have to be translated, however, this process is out of the scope of the native version so you have to provide your own translations.\n\nThe process for injecting the translations data into the editor is via the `translations` initial prop which is passed to the editor during its initialization:\n- [Android reference](https:\/\/github.com\/WordPress\/gutenberg\/blob\/72854b4d6b09bd7fb7f996a5c55dd3cc0613ddf8\/packages\/react-native-bridge\/android\/react-native-bridge\/src\/main\/java\/org\/wordpress\/mobile\/WPAndroidGlue\/GutenbergProps.kt#L34)\n- [iOS reference](https:\/\/github.com\/WordPress\/gutenberg\/blob\/72854b4d6b09bd7fb7f996a5c55dd3cc0613ddf8\/packages\/react-native-bridge\/ios\/GutenbergBridgeDataSource.swift#L39-L43)\n\nThe mechanism for integrating the provided translations to the mobile client, via the mentioned `translations` initial prop, is not described here, as it's specific to the mobile client and could be achieved in different ways. Nevertheless, it's important that they're provided by the mentioned initial prop, as the editor is in charge of merging them with the translations already included in the editor.\n\n**NOTE:** Keep in mind that those strings that match with ones already included in the editor will be overridden.\n\n## Fetch translations (for strings used in web and native platforms)\n\nA translation file is basically a JSON object that contains key-value items with the translation for each individual string. This content is fetched from [translate.wordpress.org](https:\/\/translate.wordpress.org\/) that holds translations for WordPress and a list of different plugins like Gutenberg.\n\nThese files can be cached under a folder and optimized. Additionally, an index file is generated that acts as the entry point to import and fetches the plugin translations.\n\nFetched translations contain all the translatable plugin strings, including those not used in the native version of the editor. The file sizes, however, can be reduced by filtering out the strings not referenced in the used strings JSON file.\n\nBy default, when installing dependencies, un-optimized translations might be downloaded for Gutenberg and located in the `i18n-cache` folder if the cache is not present.\n\nThe strings included in these translation files are imported in the editor upon its initialization ([reference](https:\/\/github.com\/WordPress\/gutenberg\/blob\/154918b5770ac07c851169eaa35961c636eac5ba\/packages\/react-native-editor\/src\/index.js#L43-L49)) and will be merged with the extra translations provided by the `translations` initial prop.\n\n### NPM command\n\nFetch un-optimized translations:\n```sh\nnpm run native i18n:fetch-translations -- \"gutenberg\" <OUTPUT_PATH>\n```\n\n***NOTE:** We need to pass absolute paths, otherwise it uses `packages\/react-native-editor` as root path  for relative paths.*\n\nFetch optimized translations:\n```sh\nnpm run native i18n:fetch-translations -- \"gutenberg\" <OUTPUT_PATH> <USED_STRINGS_FILE>\n```\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/react-native\/integration-test-guide.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">React Native Integration Test Guide<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">What\u2019s an integration test?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Integration testing is defined as a type of testing where different parts are tested as a group. In our case, the parts that we want to test are the different components that are required to be rendered for a specific block or editor logic. In the end, they are very similar to unit tests as they are run with the same command using the Jest library. The main difference is that for the integration tests, we\u2019re going to use a specific library <a href=\"https:\/\/testing-library.com\/docs\/react-native-testing-library\/intro\/\"><code>react-native-testing-library<\/code><\/a> for testing how the editor renders the different components.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Anatomy of an integration test<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A test can be structured with the following parts:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"#setup\">Setup<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#rendering\">Rendering<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#query-elements\">Query elements<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#fire-events\">Fire events<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#expect-correct-element-behaviour\">Expect correct element behaviour<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#cleanup\">Cleanup<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>We also include examples of common tasks as well as tips in the following sections:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"#helpers\">Helpers<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#common-flows\">Common flows<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#tools\">Tools<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#common-pitfalls-and-caveats\">Common pitfalls and caveats<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Setup<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This part usually is covered by using the Jest callbacks <code>beforeAll<\/code> and <code>beforeEach<\/code>, the purpose is to prepare everything that the test might require like registering blocks or mocking parts of the logic.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here is an example of a common pattern if we expect all core blocks to be available:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>beforeAll( () => {\n\t\/\/ Register all core blocks\n\tregisterCoreBlocks();\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Rendering<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Before introducing the testing logic, we have to render the components that we want to test on. Depending on if we want to use the scoped component or entire editor approach, this part will be different.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Using the Scoped Component approach<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Here is an example of rendering the Cover block (extracted from <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/86cd187873984f80ddeeec3e82454b486dd1860f\/packages\/block-library\/src\/cover\/test\/edit.native.js#L82-L91\">this code<\/a>):<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ This import points to the index file of the block\nimport { metadata, settings, name } from '..\/index';\n\n...\n\nconst setAttributes = jest.fn();\nconst attributes = {\n\tbackgroundType: IMAGE_BACKGROUND_TYPE,\n\tfocalPoint: { x: '0.25', y: '0.75' },\n\thasParallax: false,\n\toverlayColor: { color: '#000000' },\n\turl: 'mock-url',\n};\n\n...\n\n\/\/ Simplified tree to render Cover edit within slot\nconst CoverEdit = ( props ) => (\n\t<slotfillprovider>\n\t\t<blockedit 0=\"\" isselected=\"\" name=\"{\" }=\"\" clientid=\"{\" {=\"\" ...props=\"\">\n\t\t<bottomsheetsettings isvisible=\"\">\n\t<\/bottomsheetsettings><\/blockedit><\/slotfillprovider>\n);\n\nconst { getByText, findByText } = render(\n\t<coveredit<br>\t\tattributes={ {\n\t\t\t...attributes,\n\t\t\turl: undefined,\n\t\t\tbackgroundType: undefined,\n\t\t} }\n\t\tsetAttributes={ setAttributes }\n\t\/>\n);\n<\/coveredit<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Using the Entire Editor approach<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Here is an example of rendering the Buttons block (extracted from <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/9201906891a68ca305daf7f8b6cd006e2b26291e\/packages\/block-library\/src\/buttons\/test\/edit.native.js#L32-L39\">this code<\/a>):<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const initialHtml = `\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" style=\"border-radius:5px\">Hello<\/a><\/div>\n<\/div>\n`;\nconst { getByLabelText } = initializeEditor( {\n\tinitialHtml,\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Query elements<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once the components are rendered, it\u2019s time to query them. An important note about this topic is that we should test from the user\u2019s perspective, this means that ideally we should query by elements that the user has access to like texts or accessibility labels.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When querying we should follow this priority order:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>getByText<\/code>: querying by text is the closest flow we can do from the user\u2019s perspective, as text is the visual clue for them to identify elements.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>getByLabelText<\/code>: in some cases, we want to query elements that don\u2019t provide text so in this case we can fallback to the accessibility label.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>getByTestId<\/code>: if none of the previous options fit and\/or we don\u2019t have any visual element that we can rely upon, we have to fallback to a specific test id, which can be defined using the <code>testID<\/code> attribute (see <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/e5b387b19ffc50555f52ea5f0b415ab846896def\/packages\/block-editor\/src\/components\/block-types-list\/index.native.js#L80\">here<\/a> for an example).<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Here are some examples:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const mediaLibraryButton = getByText( 'WordPress Media Library' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const missingBlock = getByLabelText( \/Unsupported Block\\. Row 1\/ );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const radiusSlider = getByTestId( 'Slider Border Radius' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note that either a plain string or a regular expression can be passed into these queries. A regular expression is best for querying part of a string (e.g. any element whose accessibility label contains <code>Unsupported Block. Row 1<\/code>). Note that special characters such as <code>.<\/code> need to be escaped.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Use of <code>find<\/code> queries<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>After rendering the components or firing an event, side effects might happen due to potential state updates so the element we\u2019re looking for might not be yet rendered. In this case, we would need to wait for the element to be available and for this purpose, we can use the <code>find*<\/code> versions of query functions, which internally use <code>waitFor<\/code> and periodically check whether the element appeared or not.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here are some examples:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const mediaLibraryButton = await findByText( 'WordPress Media Library' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const missingBlock = await findByLabelText( \/Unsupported Block\\. Row 1\/ );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const radiusSlider = await findByTestId( 'Slider Border Radius' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In most cases we\u2019ll use the <code>find*<\/code> functions, but it\u2019s important to note that it should be restricted to those queries that actually require waiting for the element to be available.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>within<\/code> queries<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It\u2019s also possible to query elements contained in other elements via the <code>within<\/code> function, here is an example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const missingBlock = await findByLabelText( \/Unsupported Block\\. Row 1\/ );\nconst translatedTableTitle = within( missingBlock ).getByText( 'Tabla' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Fire events<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As important as querying an element is to trigger events to simulate the user interaction, for this purpose we can use the <code>fireEvent<\/code> function (<a href=\"https:\/\/callstack.github.io\/react-native-testing-library\/docs\/api#fireevent\">documentation<\/a>).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here is an example of a press event:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Press event:<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>fireEvent.press( settingsButton );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>We can also trigger any type of event, including custom events, in the following example you can see how we trigger the <code>onValueChange<\/code> event (<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/520cbd9d2af4bbc275d388edf92a6cadb685de56\/packages\/components\/src\/mobile\/bottom-sheet\/range-cell.native.js#L227\">code reference<\/a>) for the Slider component:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Custom event \u2013 onValueChange:<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>fireEvent( heightSlider, 'valueChange', '50' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Expect correct element behaviour<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>After querying elements and firing events, we must verify that the logic works as expected. For this purpose we can use the same <code>expect<\/code> function from Jest that we use in unit tests. It is recommended to use the custom <code>toBeVisible<\/code> matcher to ensure the element is defined, is a valid React element, and visible.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here is an example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const translatedTableTitle = within( missingBlock ).getByText( 'Tabla' );\nexpect( translatedTableTitle ).toBeVisible();\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Additionally when rendering the entire editor, we can also verify if the HTML output is what we expect:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>expect( getEditorHtml() ).toBe(\n\t'\\n<div style=\"height:50px\" aria-hidden=\"true\" class=\"wp-block-spacer\">\\n'\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Cleanup<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>And finally, we have to clean up any potential modifications we\u2019ve made that could affect the following tests. Here is an example of a typical cleanup after registering blocks that implies unregistering all blocks:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>afterAll( () => {\n\t\/\/ Clean up registered blocks\n\tgetBlockTypes().forEach( ( block ) => {\n\t\tunregisterBlockType( block.name );\n\t} );\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Helpers<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In the spirit of making easier writing integration tests for the native version, you can find a list of helper functions in <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/test\/native\/integration-test-helpers\/README.md\">this README<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Common flows<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Query a block<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A common way to query a block is by its accessibility label, here is an example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const spacerBlock = await waitFor( () =>\n\tgetByLabelText( \/Spacer Block\\. Row 1\/ )\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>For further information about the accessibility label of a block, you can check the code of the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/520cbd9d2af4bbc275d388edf92a6cadb685de56\/packages\/blocks\/src\/api\/utils.js#L167-L234\">function <code>getAccessibleBlockLabel<\/code><\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Add a block<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Here is an example of how to insert a Paragraph block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Open the inserter menu\nfireEvent.press( await findByLabelText( 'Add block' ) );\n\nconst blockList = getByTestId( 'InserterUI-Blocks' );\n\/\/ onScroll event used to force the FlatList to render all items\nfireEvent.scroll( blockList, {\n\tnativeEvent: {\n\t\tcontentOffset: { y: 0, x: 0 },\n\t\tcontentSize: { width: 100, height: 100 },\n\t\tlayoutMeasurement: { width: 100, height: 100 },\n\t},\n} );\n\n\/\/ Insert a Paragraph block\nfireEvent.press( await findByText( `Paragraph` ) );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Open block settings<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The block settings can be accessed by tapping the \"Open Settings\" button after selecting the block, here is an example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>fireEvent.press( block );\n\nconst settingsButton = await findByLabelText( 'Open Settings' );\nfireEvent.press( settingsButton );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Using the Scoped Component approach<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When using the scoped component approach, we need first to render the <code>SlotFillProvider<\/code> and the <code>BottomSheetSettings<\/code> (note that we\u2019re passing the <code>isVisible<\/code> prop to force the bottom sheet to be displayed) along with the block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><slotfillprovider>\n\t<blockedit 0=\"\" isselected=\"\" name=\"{\" }=\"\" clientid=\"{\" {=\"\" ...props=\"\">\n\t<bottomsheetsettings isvisible=\"\">\n<\/bottomsheetsettings><\/blockedit><\/slotfillprovider>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>See examples:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/b403b977b029911f46247012fa2dcbc42a5aa3cf\/packages\/block-library\/src\/cover\/test\/edit.native.js#L37-L42\">Cover block<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">FlatList items<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>FlatList<\/code> component renders its items depending on the scroll position, the view and content size. This means that when rendering this component it might happen that some of the items can\u2019t be queried because they haven\u2019t been rendered yet. To address this issue we have to explicitly fire an event to make the <code>FlatList<\/code> render all the items.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here is an example of the FlatList used for rendering the block list in the inserter menu:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const blockList = getByTestId( 'InserterUI-Blocks' );\n\/\/ onScroll event used to force the FlatList to render all items\nfireEvent.scroll( blockList, {\n\tnativeEvent: {\n\t\tcontentOffset: { y: 0, x: 0 },\n\t\tcontentSize: { width: 100, height: 100 },\n\t\tlayoutMeasurement: { width: 100, height: 100 },\n\t},\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Sliders<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Sliders found in bottom sheets should be queried using their <code>testID<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const radiusSlider = await findByTestId( 'Slider Border Radius' );\nfireEvent( radiusSlider, 'valueChange', '30' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note that a slider\u2019s <code>testID<\/code> is \"Slider \" + label. So for a slider with a label of \"Border Radius\", <code>testID<\/code> is \"Slider Border Radius\".<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Selecting an inner block<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>One caveat when adding blocks is that if they contain inner blocks, these inner blocks are not rendered. The following example shows how we can make a Buttons block render its inner Button blocks (assumes we\u2019ve already obtained a reference to the Buttons block as <code>buttonsBlock<\/code>):<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const innerBlockListWrapper = await within( buttonsBlock ).findByTestId(\n\t'block-list-wrapper'\n);\nfireEvent( innerBlockListWrapper, 'layout', {\n\tnativeEvent: {\n\t\tlayout: {\n\t\t\twidth: 100,\n\t\t},\n\t},\n} );\n\nconst buttonInnerBlock = await within( buttonsBlock ).findByLabelText(\n\t\/Button Block\\. Row 1\/\n);\nfireEvent.press( buttonInnerBlock );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Tools<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Using the Accessibility Inspector<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you have trouble locating an element\u2019s identifier, you may wish to use Xcode\u2019s Accessibility Inspector. Most identifiers are cross-platform, so even though the tests are run on Android by default, the Accessibility Inspector can be used to find the right identifier.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/trunk\/docs\/assets\/xcode-accessibility-inspector-screenshot.png\" alt=\"Screenshot of the Xcode Accessibility Inspector app. The screenshot shows how to choose the correct target in the device dropdown, enable target mode, and locate accessibility labels after tapping on screen elements\"\/>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Common pitfalls and caveats<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">False positives when omitting <code>await<\/code> before <code>waitFor<\/code> function<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Omitting the <code>await<\/code> before a <code>waitFor<\/code> can lead to scenarios where tests pass but are not testing the intended behaviour. For example, if <code>toBeDefined<\/code> is used to assert the result of a call to <code>waitFor<\/code>, the assertion will pass because <code>waitFor<\/code> returns a value, even though it is not the <code>ReactTestInstance<\/code> we meant to check for. For this reason, it is recommended to use the custom matcher <code>toBeVisible<\/code> which guards against this type of false positive.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>waitFor<\/code> timeout<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The default timeout for the <code>waitFor<\/code> function is set to 1000 ms, so far this value is enough for all the render logic we\u2019re testing, however, if while testing we notice that an element requires more time to be rendered we should increase it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Replace current UI unit tests<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Some components already have unit tests that cover component rendering, although it\u2019s not mandatory, in these cases, it would be nice to analyze the potential migration to an integration test.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In case we want to keep both, we\u2019ll add the word \"integration\" to the integration test file to avoid naming conflicts, here is an example: <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/9201906891a68ca305daf7f8b6cd006e2b26291e\/packages\/block-library\/src\/missing\/test\/edit-integration.native.js\">packages\/block-library\/src\/missing\/test\/edit-integration.native.js<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Platform selection<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>By default, all tests run in Jest use the Android platform, so in case we need to test a specific behaviour related to a different platform, we would need to support platform test files.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In case we only need to test logic controlled by the Platform object, we can mock the module with the following code (in this case it\u2019s changing the platform to iOS):<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>jest.mock( 'Platform', () => {\n\tconst Platform = jest.requireActual( 'Platform' );\n\tPlatform.OS = 'ios';\n\tPlatform.select = jest.fn().mockImplementation( ( select ) => {\n\t\tconst value = select&#91; Platform.OS ];\n\t\treturn ! value ? select.default : value;\n\t} );\n\treturn Platform;\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# React Native Integration Test Guide\n\n## What\u2019s an integration test?\n\nIntegration testing is defined as a type of testing where different parts are tested as a group. In our case, the parts that we want to test are the different components that are required to be rendered for a specific block or editor logic. In the end, they are very similar to unit tests as they are run with the same command using the Jest library. The main difference is that for the integration tests, we\u2019re going to use a specific library [`react-native-testing-library`](https:\/\/testing-library.com\/docs\/react-native-testing-library\/intro\/) for testing how the editor renders the different components.\n\n## Anatomy of an integration test\n\nA test can be structured with the following parts:\n\n-   [Setup](#setup)\n-   [Rendering](#rendering)\n-   [Query elements](#query-elements)\n-   [Fire events](#fire-events)\n-   [Expect correct element behaviour](#expect-correct-element-behaviour)\n-   [Cleanup](#cleanup)\n\nWe also include examples of common tasks as well as tips in the following sections:\n\n-   [Helpers](#helpers)\n-   [Common flows](#common-flows)\n-   [Tools](#tools)\n-   [Common pitfalls and caveats](#common-pitfalls-and-caveats)\n\n## Setup\n\nThis part usually is covered by using the Jest callbacks `beforeAll` and `beforeEach`, the purpose is to prepare everything that the test might require like registering blocks or mocking parts of the logic.\n\nHere is an example of a common pattern if we expect all core blocks to be available:\n\n```js\nbeforeAll( () => {\n\t\/\/ Register all core blocks\n\tregisterCoreBlocks();\n} );\n```\n\n## Rendering\n\nBefore introducing the testing logic, we have to render the components that we want to test on. Depending on if we want to use the scoped component or entire editor approach, this part will be different.\n\n### Using the Scoped Component approach\n\nHere is an example of rendering the Cover block (extracted from [this code](https:\/\/github.com\/WordPress\/gutenberg\/blob\/86cd187873984f80ddeeec3e82454b486dd1860f\/packages\/block-library\/src\/cover\/test\/edit.native.js#L82-L91)):\n\n```js\n\/\/ This import points to the index file of the block\nimport { metadata, settings, name } from '..\/index';\n\n...\n\nconst setAttributes = jest.fn();\nconst attributes = {\n\tbackgroundType: IMAGE_BACKGROUND_TYPE,\n\tfocalPoint: { x: '0.25', y: '0.75' },\n\thasParallax: false,\n\toverlayColor: { color: '#000000' },\n\turl: 'mock-url',\n};\n\n...\n\n\/\/ Simplified tree to render Cover edit within slot\nconst CoverEdit = ( props ) => (\n\t<SlotFillProvider>\n\t\t<BlockEdit isSelected name={ name } clientId={ 0 } { ...props } \/>\n\t\t<BottomSheetSettings isVisible \/>\n\t<\/SlotFillProvider>\n);\n\nconst { getByText, findByText } = render(\n\t<CoverEdit\n\t\tattributes={ {\n\t\t\t...attributes,\n\t\t\turl: undefined,\n\t\t\tbackgroundType: undefined,\n\t\t} }\n\t\tsetAttributes={ setAttributes }\n\t\/>\n);\n```\n\n### Using the Entire Editor approach\n\nHere is an example of rendering the Buttons block (extracted from [this code](https:\/\/github.com\/WordPress\/gutenberg\/blob\/9201906891a68ca305daf7f8b6cd006e2b26291e\/packages\/block-library\/src\/buttons\/test\/edit.native.js#L32-L39)):\n\n```js\nconst initialHtml = `<!-- wp:buttons -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"style\":{\"border\":{\"radius\":\"5px\"}}} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" style=\"border-radius:5px\" >Hello<\/a><\/div>\n<!-- \/wp:button --><\/div>\n<!-- \/wp:buttons -->`;\nconst { getByLabelText } = initializeEditor( {\n\tinitialHtml,\n} );\n```\n\n## Query elements\n\nOnce the components are rendered, it\u2019s time to query them. An important note about this topic is that we should test from the user\u2019s perspective, this means that ideally we should query by elements that the user has access to like texts or accessibility labels.\n\nWhen querying we should follow this priority order:\n\n1. `getByText`: querying by text is the closest flow we can do from the user\u2019s perspective, as text is the visual clue for them to identify elements.\n2. `getByLabelText`: in some cases, we want to query elements that don\u2019t provide text so in this case we can fallback to the accessibility label.\n3. `getByTestId`: if none of the previous options fit and\/or we don\u2019t have any visual element that we can rely upon, we have to fallback to a specific test id, which can be defined using the `testID` attribute (see [here](https:\/\/github.com\/WordPress\/gutenberg\/blob\/e5b387b19ffc50555f52ea5f0b415ab846896def\/packages\/block-editor\/src\/components\/block-types-list\/index.native.js#L80) for an example).\n\nHere are some examples:\n\n```js\nconst mediaLibraryButton = getByText( 'WordPress Media Library' );\n```\n\n```js\nconst missingBlock = getByLabelText( \/Unsupported Block\\. Row 1\/ );\n```\n\n```js\nconst radiusSlider = getByTestId( 'Slider Border Radius' );\n```\n\nNote that either a plain string or a regular expression can be passed into these queries. A regular expression is best for querying part of a string (e.g. any element whose accessibility label contains `Unsupported Block. Row 1`). Note that special characters such as `.` need to be escaped.\n\n### Use of `find` queries\n\nAfter rendering the components or firing an event, side effects might happen due to potential state updates so the element we\u2019re looking for might not be yet rendered. In this case, we would need to wait for the element to be available and for this purpose, we can use the `find*` versions of query functions, which internally use `waitFor` and periodically check whether the element appeared or not.\n\nHere are some examples:\n\n```js\nconst mediaLibraryButton = await findByText( 'WordPress Media Library' );\n```\n\n```js\nconst missingBlock = await findByLabelText( \/Unsupported Block\\. Row 1\/ );\n```\n\n```js\nconst radiusSlider = await findByTestId( 'Slider Border Radius' );\n```\n\nIn most cases we\u2019ll use the `find*` functions, but it\u2019s important to note that it should be restricted to those queries that actually require waiting for the element to be available.\n\n### `within` queries\n\nIt\u2019s also possible to query elements contained in other elements via the `within` function, here is an example:\n\n```js\nconst missingBlock = await findByLabelText( \/Unsupported Block\\. Row 1\/ );\nconst translatedTableTitle = within( missingBlock ).getByText( 'Tabla' );\n```\n\n## Fire events\n\nAs important as querying an element is to trigger events to simulate the user interaction, for this purpose we can use the `fireEvent` function ([documentation](https:\/\/callstack.github.io\/react-native-testing-library\/docs\/api#fireevent)).\n\nHere is an example of a press event:\n\n**Press event:**\n\n```js\nfireEvent.press( settingsButton );\n```\n\nWe can also trigger any type of event, including custom events, in the following example you can see how we trigger the `onValueChange` event ([code reference](https:\/\/github.com\/WordPress\/gutenberg\/blob\/520cbd9d2af4bbc275d388edf92a6cadb685de56\/packages\/components\/src\/mobile\/bottom-sheet\/range-cell.native.js#L227)) for the Slider component:\n\n**Custom event \u2013 onValueChange:**\n\n```js\nfireEvent( heightSlider, 'valueChange', '50' );\n```\n\n## Expect correct element behaviour\n\nAfter querying elements and firing events, we must verify that the logic works as expected. For this purpose we can use the same `expect` function from Jest that we use in unit tests. It is recommended to use the custom `toBeVisible` matcher to ensure the element is defined, is a valid React element, and visible.\n\nHere is an example:\n\n```js\nconst translatedTableTitle = within( missingBlock ).getByText( 'Tabla' );\nexpect( translatedTableTitle ).toBeVisible();\n```\n\nAdditionally when rendering the entire editor, we can also verify if the HTML output is what we expect:\n\n```js\nexpect( getEditorHtml() ).toBe(\n\t'<!-- wp:spacer {\"height\":50} -->\\n<div style=\"height:50px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div>\\n<!-- \/wp:spacer -->'\n);\n```\n\n## Cleanup\n\nAnd finally, we have to clean up any potential modifications we\u2019ve made that could affect the following tests. Here is an example of a typical cleanup after registering blocks that implies unregistering all blocks:\n\n```js\nafterAll( () => {\n\t\/\/ Clean up registered blocks\n\tgetBlockTypes().forEach( ( block ) => {\n\t\tunregisterBlockType( block.name );\n\t} );\n} );\n```\n\n## Helpers\n\nIn the spirit of making easier writing integration tests for the native version, you can find a list of helper functions in [this README](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/test\/native\/integration-test-helpers\/README.md).\n\n## Common flows\n\n### Query a block\n\nA common way to query a block is by its accessibility label, here is an example:\n\n```js\nconst spacerBlock = await waitFor( () =>\n\tgetByLabelText( \/Spacer Block\\. Row 1\/ )\n);\n```\n\nFor further information about the accessibility label of a block, you can check the code of the [function `getAccessibleBlockLabel`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/520cbd9d2af4bbc275d388edf92a6cadb685de56\/packages\/blocks\/src\/api\/utils.js#L167-L234).\n\n### Add a block\n\nHere is an example of how to insert a Paragraph block:\n\n```js\n\/\/ Open the inserter menu\nfireEvent.press( await findByLabelText( 'Add block' ) );\n\nconst blockList = getByTestId( 'InserterUI-Blocks' );\n\/\/ onScroll event used to force the FlatList to render all items\nfireEvent.scroll( blockList, {\n\tnativeEvent: {\n\t\tcontentOffset: { y: 0, x: 0 },\n\t\tcontentSize: { width: 100, height: 100 },\n\t\tlayoutMeasurement: { width: 100, height: 100 },\n\t},\n} );\n\n\/\/ Insert a Paragraph block\nfireEvent.press( await findByText( `Paragraph` ) );\n```\n\n### Open block settings\n\nThe block settings can be accessed by tapping the \"Open Settings\" button after selecting the block, here is an example:\n\n```js\nfireEvent.press( block );\n\nconst settingsButton = await findByLabelText( 'Open Settings' );\nfireEvent.press( settingsButton );\n```\n\n#### Using the Scoped Component approach\n\nWhen using the scoped component approach, we need first to render the `SlotFillProvider` and the `BottomSheetSettings` (note that we\u2019re passing the `isVisible` prop to force the bottom sheet to be displayed) along with the block:\n\n```js\n<SlotFillProvider>\n\t<BlockEdit isSelected name={ name } clientId={ 0 } { ...props } \/>\n\t<BottomSheetSettings isVisible \/>\n<\/SlotFillProvider>\n```\n\nSee examples:\n\n-   [Cover block](https:\/\/github.com\/WordPress\/gutenberg\/blob\/b403b977b029911f46247012fa2dcbc42a5aa3cf\/packages\/block-library\/src\/cover\/test\/edit.native.js#L37-L42)\n\n### FlatList items\n\nThe `FlatList` component renders its items depending on the scroll position, the view and content size. This means that when rendering this component it might happen that some of the items can\u2019t be queried because they haven\u2019t been rendered yet. To address this issue we have to explicitly fire an event to make the `FlatList` render all the items.\n\nHere is an example of the FlatList used for rendering the block list in the inserter menu:\n\n```js\nconst blockList = getByTestId( 'InserterUI-Blocks' );\n\/\/ onScroll event used to force the FlatList to render all items\nfireEvent.scroll( blockList, {\n\tnativeEvent: {\n\t\tcontentOffset: { y: 0, x: 0 },\n\t\tcontentSize: { width: 100, height: 100 },\n\t\tlayoutMeasurement: { width: 100, height: 100 },\n\t},\n} );\n```\n\n### Sliders\n\nSliders found in bottom sheets should be queried using their `testID`:\n\n```js\nconst radiusSlider = await findByTestId( 'Slider Border Radius' );\nfireEvent( radiusSlider, 'valueChange', '30' );\n```\n\nNote that a slider\u2019s `testID` is \"Slider \" + label. So for a slider with a label of \"Border Radius\", `testID` is \"Slider Border Radius\".\n\n### Selecting an inner block\n\nOne caveat when adding blocks is that if they contain inner blocks, these inner blocks are not rendered. The following example shows how we can make a Buttons block render its inner Button blocks (assumes we\u2019ve already obtained a reference to the Buttons block as `buttonsBlock`):\n\n```js\nconst innerBlockListWrapper = await within( buttonsBlock ).findByTestId(\n\t'block-list-wrapper'\n);\nfireEvent( innerBlockListWrapper, 'layout', {\n\tnativeEvent: {\n\t\tlayout: {\n\t\t\twidth: 100,\n\t\t},\n\t},\n} );\n\nconst buttonInnerBlock = await within( buttonsBlock ).findByLabelText(\n\t\/Button Block\\. Row 1\/\n);\nfireEvent.press( buttonInnerBlock );\n```\n\n## Tools\n\n### Using the Accessibility Inspector\n\nIf you have trouble locating an element\u2019s identifier, you may wish to use Xcode\u2019s Accessibility Inspector. Most identifiers are cross-platform, so even though the tests are run on Android by default, the Accessibility Inspector can be used to find the right identifier.\n\n<img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/trunk\/docs\/assets\/xcode-accessibility-inspector-screenshot.png\" alt=\"Screenshot of the Xcode Accessibility Inspector app. The screenshot shows how to choose the correct target in the device dropdown, enable target mode, and locate accessibility labels after tapping on screen elements\"\/>\n\n## Common pitfalls and caveats\n\n### False positives when omitting `await` before `waitFor` function\n\nOmitting the `await` before a `waitFor` can lead to scenarios where tests pass but are not testing the intended behaviour. For example, if `toBeDefined` is used to assert the result of a call to `waitFor`, the assertion will pass because `waitFor` returns a value, even though it is not the `ReactTestInstance` we meant to check for. For this reason, it is recommended to use the custom matcher `toBeVisible` which guards against this type of false positive.\n\n### `waitFor` timeout\n\nThe default timeout for the `waitFor` function is set to 1000 ms, so far this value is enough for all the render logic we\u2019re testing, however, if while testing we notice that an element requires more time to be rendered we should increase it.\n\n### Replace current UI unit tests\n\nSome components already have unit tests that cover component rendering, although it\u2019s not mandatory, in these cases, it would be nice to analyze the potential migration to an integration test.\n\nIn case we want to keep both, we\u2019ll add the word \"integration\" to the integration test file to avoid naming conflicts, here is an example: [packages\/block-library\/src\/missing\/test\/edit-integration.native.js](https:\/\/github.com\/WordPress\/gutenberg\/blob\/9201906891a68ca305daf7f8b6cd006e2b26291e\/packages\/block-library\/src\/missing\/test\/edit-integration.native.js).\n\n### Platform selection\n\nBy default, all tests run in Jest use the Android platform, so in case we need to test a specific behaviour related to a different platform, we would need to support platform test files.\n\nIn case we only need to test logic controlled by the Platform object, we can mock the module with the following code (in this case it\u2019s changing the platform to iOS):\n\n```js\njest.mock( 'Platform', () => {\n\tconst Platform = jest.requireActual( 'Platform' );\n\tPlatform.OS = 'ios';\n\tPlatform.select = jest.fn().mockImplementation( ( select ) => {\n\t\tconst value = select[ Platform.OS ];\n\t\treturn ! value ? select.default : value;\n\t} );\n\treturn Platform;\n} );\n```\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/react-native\/osx-setup-guide.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Setup guide for React Native development (macOS)<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Are you interested in contributing to the native mobile editor? This guide is a detailed walk through designed to get you up and running!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note that these instructions are primarily focused on the macOS environment. For other environments, <a href=\"https:\/\/reactnative.dev\/docs\/environment-setup\">the React Native quickstart documentation<\/a> has helpful pointers and steps for getting set up.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Clone Gutenberg<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>git clone git@github.com:WordPress\/gutenberg.git\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Install node and npm<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you\u2019re working in multiple JS projects, a node version manager may make sense. A manager will let you switch between different node and npm versions of your choosing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We recommend <a href=\"https:\/\/github.com\/nvm-sh\/nvm\">nvm<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After installing nvm, run the following from the top-level directory of the cloned project:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>nvm install 'lts\/*'\nnvm alias default 'lts\/*' # sets this as the default when opening a new terminal\nnvm use # switches to the project settings\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then install dependencies:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm ci\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Do you have an older existing Gutenberg checkout?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you have an existing Gutenberg checkout be sure to fully clean <code>node_modules<\/code> and re-install dependencies.<br>This may help avoid errors in the future.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run distclean\nnpm ci\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">iOS<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">CocoaPods<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/guides.cocoapods.org\/using\/getting-started.html\">CocoaPods<\/a> is required to fetch React and third-party dependencies. The steps to install it vary depending on how Ruby is managed on your machine.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">System Ruby<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you're using the default Ruby available with MacOS, you'll need to use the <code>sudo<\/code> command to install gems like Cocoapods:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>sudo gem install cocoapods\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note, Mac M1 is not directly compatible with Cocoapods. If you encounter issues, try running these commands to install the ffi package, which will enable pods to be installed with the proper architecture:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>sudo arch -x86_64 gem install ffi\narch -x86_64 pod install\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Ruby Manager<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It may not be necessary to manually install Cocoapods or the <code>ffi<\/code> package if you're using a Ruby Version manager. Please refer to your chosen manager's documentation for guidance.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/github.com\/rbenv\/rbenv\"><code>rbenv<\/code><\/a> is the recommended manager if you're running Gutenberg from within <a href=\"https:\/\/github.com\/wordpress-mobile\/WordPress-iOS\">the WordPress iOS app<\/a> (vs. only the demo app).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Set up Xcode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Install <a href=\"https:\/\/developer.apple.com\/xcode\/\">Xcode<\/a> via the app store and then open it up:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Accept the license agreement.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Verify that <code>Xcode > Preferences > Locations > Command Line Tools<\/code> points to the current Xcode version.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/xcode-command-line-tools.png\" width=\"700px\" alt=\"Screenshot of Xcode command line tools settings.\">\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">react-native doctor<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/reactnative.dev\/blog\/2019\/11\/18\/react-native-doctor\">react-native doctor<\/a> can be used to identify anything that's missing from your development environment. From your Gutenberg checkout, or relative to <code>\/packages\/react-native-editor folder<\/code>, run:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npx @react-native-community\/cli doctor\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/react-native-doctor.png\" width=\"700px\" alt=\"Screenshot of react-native-community\/cli doctor tool running in the terminal.\">\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>See if <code>doctor<\/code> can fix both \"common\" and \"iOS\" issues. (Don't worry if \"Android\" still has \u274cs at this stage, we'll get to those later!)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Run the demo app<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once all common and iOS issues are resolved, try:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run native start:reset #starts metro\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In another terminal type:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run native ios\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>After waiting for everything to build, the demo app should be running from the iOS simulator:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/iOS-Simulator.png\" width=\"700px\" alt=\"Screenshot of the block editor in iOS simulator.\" \/>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Android<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Java Development Kit (JDK)<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The JDK recommended in <a href=\"https:\/\/reactnative.dev\/docs\/environment-setup\">the React Native documentation<\/a> is called Azul Zulu. It can be installed using <a href=\"https:\/\/brew.sh\/\">Homebrew<\/a>. To install it, run the following commands in a terminal after installing Homebrew:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>brew tap homebrew\/cask-versions\nbrew install --cask zulu11\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If you already have a JDK installed on your system, it should be JDK 11 or newer.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Set up Android Studio<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To compile the Android app, <a href=\"https:\/\/developer.android.com\/studio\">download Android Studio<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next, open an existing project and select the Gutenberg folder you cloned.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>From here, click on the cube icon that's highlighted in the following screenshot to access the SDK Manager. Another way to the SDK Manager is to navigate to <code>Tools > SDK Manager<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/react-native-package-manager.png\" width=\"700px\" alt=\"Screenshot highlighting where the package manager button is located in Android Studio.\">\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>We can download SDK platforms, packages and other tools on this screen. Specific versions are hidden behind the \"Show package details\" checkbox, check it, since our build requires specific versions for E2E and development:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/react-native-show-package-details.png\" width=\"700px\" alt=\"Screenshot of the package manager in Android Studio, highlighting the Show Package Details checkbox.\">\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Check all related packages from <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/react-native-editor\/android\/build.gradle\">build.gradle<\/a>. Then click on \"Apply\" to download items. There may be other related dependencies from build.gradle files in node_modules.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you don\u2019t want to dig through files, stack traces will complain of missing packages, but it does take quite a number of tries if you go through this route.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/react-native-editor-build-gradle.png\" width=\"700px\" alt=\"Screenshot of the build.gradle configuration file.\">\n<!-- \/wp:html -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/react-native-sdk.png\" width=\"700px\" alt=\"Screenshot of the package manager displaying SDK Platforms.\">\n<!-- \/wp:html -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/react-native-sdk-tools.png\" width=\"700px\" alt=\"Screenshot of the package manager displaying SDK Tools.\">\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Update Paths<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Export the following env variables and update $PATH. We can normally add this to our <code> ~\/.zshrc<\/code> file if we're using zsh<br>in our terminal, or <code>~\/.bash_profile<\/code> if the terminal is still using bash.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>### Java that comes with Android Studio:\nexport JAVA_HOME=\/Applications\/Android\\ Studio.app\/Contents\/jre\/Contents\/Home\n### Android Home is configurable in Android Studio. Go to Preferences > System Settings > Android SDK\nexport ANDROID_HOME=$HOME\/Library\/Android\/sdk\nexport PATH=$PATH:$ANDROID_HOME\/emulator\nexport PATH=$PATH:$ANDROID_HOME\/tools\nexport PATH=$PATH:$ANDROID_HOME\/tools\/bin\nexport PATH=$PATH:$ANDROID_HOME\/platform-tools\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Save then source, or open a new terminal to pick up changes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>source ~\/.zshrc\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>or<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>source ~\/.bash_profile\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If the SDK path can't be found, you can verify its location by visiting Android Studio > Preferences > System Settings > Android SDK<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/sdk-path.png\" width=\"700px\" alt=\"Screenshot of where the SDK Path may be found in Android Studio.\">\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Create a new device image<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Next, let\u2019s create a virtual device image. Click on the phone icon with an android to the bottom-right.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/react-native-android-device-manager-button.png\" width=\"700px\" alt=\"Screenshot of where to find the android device manager button.\">\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>This brings up the \u201cAndroid Virtual Device Manager\u201d or (AVD). Click on \u201cCreate Virtual Device\u201d. Pick a phone type of your choice:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/react-native-android-select-hardware.png\" width=\"700px\" alt=\"Screenshot of the Virtual Device Configuration setup.\">\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Pick the target SDK version. This is the targetSdkVersion set in the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/react-native-editor\/android\/build.gradle\">build.gradle<\/a> file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/react-native-adv-system-image.png\" width=\"700px\" alt=\"Screenshot of picking a system image in the Android Device Manager workflow.\">\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>There are some advanced settings we can toggle, but these are optional. Click finish.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Run the demo app<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Start metro:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run native start:reset\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In another terminal run the following to launch the demo app in the Android emulator (if the emulator isn't already running, it'll also be launched as part of this command):<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run native android\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>After a bit of a wait, we\u2019ll see something like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/android-simulator.png\" width=\"700px\" alt=\"Screenshot of a the block editor in Android Simulator.\">\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Unit Tests<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run test:native\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Integration Tests<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/appium.io\/\">Appium<\/a> has it own doctor tool. Run this with:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npx appium-doctor\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/CleanShot-2021-10-27-at-15.20.16.png\" width=\"700px\" alt=\"Screenshot of the appium-doctor tool running in the terminal.\">\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Resolve any required dependencies.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">iOS Integration Tests<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If we know we can run the iOS local environment without issue, E2Es for iOS are straightforward. Stop any running metro processes. This was launched previously with <code>npm run native start:reset<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then in terminal type:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run native test:e2e:ios:local\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Passing a filename should also work to run a subset of tests:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run native test:e2e:ios:local gutenberg-editor-paragraph.test.js\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If all things go well, it should look like:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&lt;video src=\"https:\/\/user-images.githubusercontent.com\/1270189\/137403353-2a8ded47-5c7c-4f99-b2cc-fa6def4b4990.mp4\" data-canonical-src=\"https:\/\/user-images.githubusercontent.com\/1270189\/137403353-2a8ded47-5c7c-4f99-b2cc-fa6def4b4990.mp4\" controls=\"controls\" muted=\"muted\" class=\"d-block rounded-bottom-2 width-fit\" style=\"max-height:640px;\" alt=\"A video of block editor integration tests in iOS Simulator\">&lt;\/video><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Android Integration Tests<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Create a new virtual device()<\/strong> that matches the device specified in <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/react-native-editor\/__device-tests__\/helpers\/caps.js#L30\">packages\/react-native-editor\/<strong>device-tests<\/strong>\/helpers\/caps.js<\/a> At the time of this writing, this would be a Pixel 3 XL image, using Android 9 (API 28).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start the virtual device first. Go back to the AVD by clicking on the phone icon, then click the green play button.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/adv-integration.png\" width=\"700px\" alt=\"A screenshot of how to start the Android Simulator.\">\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Make sure no metro processes are running. This was launched previously with <code>npm run native start:reset<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then in a terminal run:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run native test:e2e:android:local\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Passing a filename should also work to run a subset of tests:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run native test:e2e:android:local gutenberg-editor-paragraph.test.js\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>After a bit of a wait we should see:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/CleanShot-2021-10-27-at-15.28.22.png\" width=\"700px\" alt=\"A screenshot of block editor integration tests in Android Simulator.\">\n<!-- \/wp:html -->",
        "markdown": "# Setup guide for React Native development (macOS)\n\nAre you interested in contributing to the native mobile editor? This guide is a detailed walk through designed to get you up and running!\n\nNote that these instructions are primarily focused on the macOS environment. For other environments, [the React Native quickstart documentation](https:\/\/reactnative.dev\/docs\/environment-setup) has helpful pointers and steps for getting set up.\n\n## Clone Gutenberg\n\n```sh\ngit clone git@github.com:WordPress\/gutenberg.git\n```\n\n### Install node and npm\n\nIf you\u2019re working in multiple JS projects, a node version manager may make sense. A manager will let you switch between different node and npm versions of your choosing.\n\nWe recommend [nvm](https:\/\/github.com\/nvm-sh\/nvm).\n\nAfter installing nvm, run the following from the top-level directory of the cloned project:\n\n```sh\nnvm install 'lts\/*'\nnvm alias default 'lts\/*' # sets this as the default when opening a new terminal\nnvm use # switches to the project settings\n```\n\nThen install dependencies:\n\n```\nnpm ci\n```\n\n### Do you have an older existing Gutenberg checkout?\n\nIf you have an existing Gutenberg checkout be sure to fully clean `node_modules` and re-install dependencies.\nThis may help avoid errors in the future.\n\n```sh\nnpm run distclean\nnpm ci\n```\n\n## iOS\n\n### CocoaPods\n\n[CocoaPods](https:\/\/guides.cocoapods.org\/using\/getting-started.html) is required to fetch React and third-party dependencies. The steps to install it vary depending on how Ruby is managed on your machine.\n\n#### System Ruby\n\nIf you're using the default Ruby available with MacOS, you'll need to use the `sudo` command to install gems like Cocoapods:\n\n```\nsudo gem install cocoapods\n```\n\nNote, Mac M1 is not directly compatible with Cocoapods. If you encounter issues, try running these commands to install the ffi package, which will enable pods to be installed with the proper architecture:\n\n```\nsudo arch -x86_64 gem install ffi\narch -x86_64 pod install\n```\n\n#### Ruby Manager\n\nIt may not be necessary to manually install Cocoapods or the `ffi` package if you're using a Ruby Version manager. Please refer to your chosen manager's documentation for guidance.\n\n[`rbenv`](https:\/\/github.com\/rbenv\/rbenv) is the recommended manager if you're running Gutenberg from within [the WordPress iOS app](https:\/\/github.com\/wordpress-mobile\/WordPress-iOS) (vs. only the demo app).\n\n### Set up Xcode\n\nInstall [Xcode](https:\/\/developer.apple.com\/xcode\/) via the app store and then open it up:\n\n-   Accept the license agreement.\n-   Verify that `Xcode > Preferences > Locations > Command Line Tools` points to the current Xcode version.\n\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/xcode-command-line-tools.png\" width=\"700px\" alt=\"Screenshot of Xcode command line tools settings.\">\n\n### react-native doctor\n\n[react-native doctor](https:\/\/reactnative.dev\/blog\/2019\/11\/18\/react-native-doctor) can be used to identify anything that's missing from your development environment. From your Gutenberg checkout, or relative to `\/packages\/react-native-editor folder`, run:\n\n```sh\nnpx @react-native-community\/cli doctor\n```\n\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/react-native-doctor.png\" width=\"700px\" alt=\"Screenshot of react-native-community\/cli doctor tool running in the terminal.\">\n\nSee if `doctor` can fix both \"common\" and \"iOS\" issues. (Don't worry if \"Android\" still has \u274cs at this stage, we'll get to those later!)\n\n### Run the demo app\n\nOnce all common and iOS issues are resolved, try:\n\n```\nnpm run native start:reset #starts metro\n```\n\nIn another terminal type:\n\n```\nnpm run native ios\n```\n\nAfter waiting for everything to build, the demo app should be running from the iOS simulator:\n\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/iOS-Simulator.png\" width=\"700px\" alt=\"Screenshot of the block editor in iOS simulator.\" \/>\n\n## Android\n\n### Java Development Kit (JDK)\n\nThe JDK recommended in [the React Native documentation](https:\/\/reactnative.dev\/docs\/environment-setup) is called Azul Zulu. It can be installed using [Homebrew](https:\/\/brew.sh\/). To install it, run the following commands in a terminal after installing Homebrew:\n\n```\nbrew tap homebrew\/cask-versions\nbrew install --cask zulu11\n```\n\nIf you already have a JDK installed on your system, it should be JDK 11 or newer.\n\n### Set up Android Studio\n\nTo compile the Android app, [download Android Studio](https:\/\/developer.android.com\/studio).\n\nNext, open an existing project and select the Gutenberg folder you cloned.\n\nFrom here, click on the cube icon that's highlighted in the following screenshot to access the SDK Manager. Another way to the SDK Manager is to navigate to `Tools > SDK Manager`:\n\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/react-native-package-manager.png\" width=\"700px\" alt=\"Screenshot highlighting where the package manager button is located in Android Studio.\">\n\nWe can download SDK platforms, packages and other tools on this screen. Specific versions are hidden behind the \"Show package details\" checkbox, check it, since our build requires specific versions for E2E and development:\n\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/react-native-show-package-details.png\" width=\"700px\" alt=\"Screenshot of the package manager in Android Studio, highlighting the Show Package Details checkbox.\">\n\nCheck all related packages from [build.gradle](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/react-native-editor\/android\/build.gradle). Then click on \"Apply\" to download items. There may be other related dependencies from build.gradle files in node_modules.\n\nIf you don\u2019t want to dig through files, stack traces will complain of missing packages, but it does take quite a number of tries if you go through this route.\n\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/react-native-editor-build-gradle.png\" width=\"700px\" alt=\"Screenshot of the build.gradle configuration file.\">\n\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/react-native-sdk.png\" width=\"700px\" alt=\"Screenshot of the package manager displaying SDK Platforms.\">\n\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/react-native-sdk-tools.png\" width=\"700px\" alt=\"Screenshot of the package manager displaying SDK Tools.\">\n\n### Update Paths\n\nExport the following env variables and update $PATH. We can normally add this to our ` ~\/.zshrc` file if we're using zsh\nin our terminal, or `~\/.bash_profile` if the terminal is still using bash.\n\n```sh\n### Java that comes with Android Studio:\nexport JAVA_HOME=\/Applications\/Android\\ Studio.app\/Contents\/jre\/Contents\/Home\n### Android Home is configurable in Android Studio. Go to Preferences > System Settings > Android SDK\nexport ANDROID_HOME=$HOME\/Library\/Android\/sdk\nexport PATH=$PATH:$ANDROID_HOME\/emulator\nexport PATH=$PATH:$ANDROID_HOME\/tools\nexport PATH=$PATH:$ANDROID_HOME\/tools\/bin\nexport PATH=$PATH:$ANDROID_HOME\/platform-tools\n```\n\nSave then source, or open a new terminal to pick up changes.\n\n```sh\nsource ~\/.zshrc\n```\n\nor\n\n```sh\nsource ~\/.bash_profile\n```\n\nIf the SDK path can't be found, you can verify its location by visiting Android Studio > Preferences > System Settings > Android SDK\n\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/sdk-path.png\" width=\"700px\" alt=\"Screenshot of where the SDK Path may be found in Android Studio.\">\n\n### Create a new device image\n\nNext, let\u2019s create a virtual device image. Click on the phone icon with an android to the bottom-right.\n\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/react-native-android-device-manager-button.png\" width=\"700px\" alt=\"Screenshot of where to find the android device manager button.\">\n\nThis brings up the \u201cAndroid Virtual Device Manager\u201d or (AVD). Click on \u201cCreate Virtual Device\u201d. Pick a phone type of your choice:\n\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/react-native-android-select-hardware.png\" width=\"700px\" alt=\"Screenshot of the Virtual Device Configuration setup.\">\n\nPick the target SDK version. This is the targetSdkVersion set in the [build.gradle](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/react-native-editor\/android\/build.gradle) file.\n\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/react-native-adv-system-image.png\" width=\"700px\" alt=\"Screenshot of picking a system image in the Android Device Manager workflow.\">\n\nThere are some advanced settings we can toggle, but these are optional. Click finish.\n\n### Run the demo app\n\nStart metro:\n\n```\nnpm run native start:reset\n```\n\nIn another terminal run the following to launch the demo app in the Android emulator (if the emulator isn't already running, it'll also be launched as part of this command):\n\n```\nnpm run native android\n```\n\nAfter a bit of a wait, we\u2019ll see something like this:\n\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/android-simulator.png\" width=\"700px\" alt=\"Screenshot of a the block editor in Android Simulator.\">\n\n## Unit Tests\n\n```sh\nnpm run test:native\n```\n\n## Integration Tests\n\n[Appium](https:\/\/appium.io\/) has it own doctor tool. Run this with:\n\n```sh\nnpx appium-doctor\n```\n\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/CleanShot-2021-10-27-at-15.20.16.png\" width=\"700px\" alt=\"Screenshot of the appium-doctor tool running in the terminal.\">\n\nResolve any required dependencies.\n\n### iOS Integration Tests\n\nIf we know we can run the iOS local environment without issue, E2Es for iOS are straightforward. Stop any running metro processes. This was launched previously with `npm run native start:reset`.\n\nThen in terminal type:\n\n```sh\nnpm run native test:e2e:ios:local\n```\n\nPassing a filename should also work to run a subset of tests:\n\n```sh\nnpm run native test:e2e:ios:local gutenberg-editor-paragraph.test.js\n```\n\nIf all things go well, it should look like:\n\n<video src=\"https:\/\/user-images.githubusercontent.com\/1270189\/137403353-2a8ded47-5c7c-4f99-b2cc-fa6def4b4990.mp4\" data-canonical-src=\"https:\/\/user-images.githubusercontent.com\/1270189\/137403353-2a8ded47-5c7c-4f99-b2cc-fa6def4b4990.mp4\" controls=\"controls\" muted=\"muted\" class=\"d-block rounded-bottom-2 width-fit\" style=\"max-height:640px;\" alt=\"A video of block editor integration tests in iOS Simulator\"><\/video>\n\n### Android Integration Tests\n\n**Create a new virtual device()** that matches the device specified in [packages\/react-native-editor\/**device-tests**\/helpers\/caps.js](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/react-native-editor\/__device-tests__\/helpers\/caps.js#L30) At the time of this writing, this would be a Pixel 3 XL image, using Android 9 (API 28).\n\nStart the virtual device first. Go back to the AVD by clicking on the phone icon, then click the green play button.\n\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/adv-integration.png\" width=\"700px\" alt=\"A screenshot of how to start the Android Simulator.\">\n\nMake sure no metro processes are running. This was launched previously with `npm run native start:reset`.\n\nThen in a terminal run:\n\n```sh\nnpm run native test:e2e:android:local\n```\n\nPassing a filename should also work to run a subset of tests:\n\n```\nnpm run native test:e2e:android:local gutenberg-editor-paragraph.test.js\n```\n\nAfter a bit of a wait we should see:\n\n<img src=\"https:\/\/developer.wordpress.org\/files\/2021\/10\/CleanShot-2021-10-27-at-15.28.22.png\" width=\"700px\" alt=\"A screenshot of block editor integration tests in Android Simulator.\">\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/auto-cherry-picking.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Cherry-picking automation<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>npm run other:cherry-pick<\/code> automates cherry-picking Pull Requests with a specific label into the <strong>current branch<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's especially useful for major WordPress releases as by default the script looks for merged Pull Requests with the <code>Backport to WP Beta\/RC<\/code> label.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can also use it in different scenarios by passing a custom label as the first argument. See the Gutenberg plugin release example at the end of this document.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Running <code>npm run other:cherry-pick<\/code> yields the following prompt:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>You are on branch \"wp\/6.2\".\nThis script will:\n\u2022 Cherry-pick the merged PRs labeled as \"Backport to WP Beta\/RC\" to this branch\n\u2022 Ask whether you want to push this branch\n\u2022 Comment on each PR\n\u2022 Remove the label from each PR\n\nThe last two actions will be performed USING YOUR GITHUB ACCOUNT that you've\nlinked to your GitHub CLI (gh command)\n\nDo you want to proceed? (Y\/n)\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Here's what happens once you agree:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Trying to cherry-pick one by one..\n\n$ git pull origin wp\/6.2 --rebase...\n$ git fetch origin trunk...\n\nFound the following PRs to cherry-pick:\n   #41198 \u2013 Site Editor: Set min-width for styles preview\n\nFetching commit IDs... Done!\n   #41198 \u2013 860a39665c318d33027d \u2013 Site Editor: Set min-width for...\n\nTrying to cherry-pick one by one...\n\nCherry-picking round 1:\n    cherry-pick commit: afe9b757b4  for PR: #41198 \u2013 Site Editor: Set min-width for...\nCherry-picking finished!\n\nSummary:\n    1 PRs got cherry-picked cleanly\n    0 PRs failed\n\nAbout to push to origin\/wp\/6.2\nDo you want to proceed? (Y\/n)\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This run was successful, yay! You can use this moment to confirm the correct PRs were cherry-picked.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What if the cherry-picks didn't apply cleanly? The script would apply the rest and retry.<br>If some cherry-picks still failed, the script would skip them and let you know which conflicts require a manual resolution.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Either way, here's what happens once you proceed past the cherry-picking stage:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Pushing to origin\/wp\/6.2\nCommenting and removing labels...\n  41198: I just cherry-picked this PR to the wp\/6.2 branch to get it included in the next release: afe9b757b4\nDone!\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The commenting part is optional and only possible if you have the <a href=\"https:\/\/cli.github.com\/\"><code>gh<\/code> console utility<\/a> installed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Can I use a different label than <code>Backport to WP Beta\/RC<\/code>?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Yes! Pass it as the first argument:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run other:cherry-pick \"Another Label\"\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">How can I use it for a Gutenberg plugin release?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Switch to the release branch\ngit checkout release\/X.Y\n\n# Cherry-pick all the merged PRs with a relevant backport label\nnpm run other:cherry-pick \"Backport to Gutenberg RC\"\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Future improvements<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In the future, it would be great if the script automatically selected the<br>relevant label based on the currently selected branch:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>release\/X.Y - plugin release \u2013 \"Backport to Gutenberg RC\"<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>wp\/X.Y - WP release \u2013 \"Backport to WP Beta\/RC\"<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Cherry-picking automation\n\n`npm run other:cherry-pick` automates cherry-picking Pull Requests with a specific label into the **current branch**.\n\nIt's especially useful for major WordPress releases as by default the script looks for merged Pull Requests with the `Backport to WP Beta\/RC` label.\n\nYou can also use it in different scenarios by passing a custom label as the first argument. See the Gutenberg plugin release example at the end of this document.\n\nRunning `npm run other:cherry-pick` yields the following prompt:\n\n```\nYou are on branch \"wp\/6.2\".\nThis script will:\n\u2022 Cherry-pick the merged PRs labeled as \"Backport to WP Beta\/RC\" to this branch\n\u2022 Ask whether you want to push this branch\n\u2022 Comment on each PR\n\u2022 Remove the label from each PR\n\nThe last two actions will be performed USING YOUR GITHUB ACCOUNT that you've\nlinked to your GitHub CLI (gh command)\n\nDo you want to proceed? (Y\/n)\n```\n\nHere's what happens once you agree:\n\n```\nTrying to cherry-pick one by one..\n\n$ git pull origin wp\/6.2 --rebase...\n$ git fetch origin trunk...\n\nFound the following PRs to cherry-pick:\n   #41198 \u2013 Site Editor: Set min-width for styles preview\n\nFetching commit IDs... Done!\n   #41198 \u2013 860a39665c318d33027d \u2013 Site Editor: Set min-width for...\n\nTrying to cherry-pick one by one...\n\nCherry-picking round 1:\n    cherry-pick commit: afe9b757b4  for PR: #41198 \u2013 Site Editor: Set min-width for...\nCherry-picking finished!\n\nSummary:\n    1 PRs got cherry-picked cleanly\n    0 PRs failed\n\nAbout to push to origin\/wp\/6.2\nDo you want to proceed? (Y\/n)\n```\n\nThis run was successful, yay! You can use this moment to confirm the correct PRs were cherry-picked.\n\nWhat if the cherry-picks didn't apply cleanly? The script would apply the rest and retry.\nIf some cherry-picks still failed, the script would skip them and let you know which conflicts require a manual resolution.\n\nEither way, here's what happens once you proceed past the cherry-picking stage:\n\n```\nPushing to origin\/wp\/6.2\nCommenting and removing labels...\n  41198: I just cherry-picked this PR to the wp\/6.2 branch to get it included in the next release: afe9b757b4\nDone!\n```\n\nThe commenting part is optional and only possible if you have the [`gh` console utility](https:\/\/cli.github.com\/) installed.\n\n### Can I use a different label than `Backport to WP Beta\/RC`?\n\nYes! Pass it as the first argument:\n\n```\nnpm run other:cherry-pick \"Another Label\"\n```\n\n### How can I use it for a Gutenberg plugin release?\n\n```\n# Switch to the release branch\ngit checkout release\/X.Y\n\n# Cherry-pick all the merged PRs with a relevant backport label\nnpm run other:cherry-pick \"Backport to Gutenberg RC\"\n```\n\n### Future improvements\n\nIn the future, it would be great if the script automatically selected the\nrelevant label based on the currently selected branch:\n\n* release\/X.Y - plugin release \u2013 \"Backport to Gutenberg RC\"\n* wp\/X.Y - WP release \u2013 \"Backport to WP Beta\/RC\"\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/testing-overview.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Testing Overview<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Gutenberg contains both PHP and JavaScript code, and encourages testing and code style linting for both.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Why test?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Aside from the joy testing will bring to your life, tests are important not only because they help to ensure that our application behaves as it should, but also because they provide concise examples of how to use a piece of code.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Tests are also part of our code base, which means we apply to them the same standards we apply to all our application code.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As with all code, tests have to be maintained. Writing tests for the sake of having a test isn't the goal \u2013 rather we should try to strike the right balance between covering expected and unexpected behaviours, speedy execution and code maintenance.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When writing tests consider the following:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>What behaviour(s) are we testing?<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>What errors are likely to occur when we run this code?<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Does the test test what we think it is testing? Or are we introducing false positives\/negatives?<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Is it readable? Will other contributors be able to understand how our code behaves by looking at its corresponding test?<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">JavaScript testing<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Tests for JavaScript use <a href=\"https:\/\/jestjs.io\/\">Jest<\/a> as the test runner and its API for <a href=\"https:\/\/jestjs.io\/docs\/en\/api.html\">globals<\/a> (<code>describe<\/code>, <code>test<\/code>, <code>beforeEach<\/code> and so on) <a href=\"https:\/\/jestjs.io\/docs\/en\/expect.html\">assertions<\/a>, <a href=\"https:\/\/jestjs.io\/docs\/en\/mock-functions.html\">mocks<\/a>, <a href=\"https:\/\/jestjs.io\/docs\/en\/jest-object.html#jestspyonobject-methodname\">spies<\/a> and <a href=\"https:\/\/jestjs.io\/docs\/en\/mock-function-api.html\">mock functions<\/a>. If needed, you can also use <a href=\"https:\/\/testing-library.com\/docs\/react-testing-library\/intro\">React Testing Library<\/a> for React component testing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>It should be noted that in the past, React components were unit tested with <a href=\"https:\/\/github.com\/airbnb\/enzyme\">Enzyme<\/a>. However, React Testing Library (RTL) is now used for all existing and new tests instead.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Assuming you've followed the <a href=\"\/docs\/contributors\/code\/getting-started-with-code-contribution.md\">instructions<\/a> to install Node and project dependencies, tests can be run from the command-line with NPM:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm test\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Linting is static code analysis used to enforce coding standards and to avoid potential errors. This project uses <a href=\"http:\/\/eslint.org\/\">ESLint<\/a> and <a href=\"https:\/\/www.typescriptlang.org\/docs\/handbook\/type-checking-javascript-files.html\">TypeScript's JavaScript type-checking<\/a> to capture these issues. While the above <code>npm test<\/code> will execute both unit tests and code linting, code linting can be verified independently by running <code>npm run lint<\/code>. Some JavaScript issues can be fixed automatically by running <code>npm run lint:js:fix<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To improve your developer workflow, you should setup an editor linting integration. See the <a href=\"\/docs\/contributors\/code\/getting-started-with-code-contribution.md\">getting started documentation<\/a> for additional information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To run unit tests only, without the linter, use <code>npm run test:unit<\/code> instead.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Folder structure<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Keep your tests in a <code>test<\/code> folder in your working directory. The test file should have the same name as the test subject file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>+-- test\n|   +-- bar.js\n+-- bar.js\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Only test files (with at least one test case) should live directly under <code>\/test<\/code>. If you need to add external mocks or fixtures, place them in a sub folder, for example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>test\/mocks\/[file-name].js<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>test\/fixtures\/[file-name].js<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Importing tests<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Given the previous folder structure, try to use relative paths when importing of the <strong>code you're testing<\/strong>, as opposed to using project paths.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Good<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>import { bar } from '..\/bar';<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Not so good<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>import { bar } from 'components\/foo\/bar';<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It will make your life easier should you decide to relocate your code to another position in the application directory.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Describing tests<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Use a <code>describe<\/code> block to group test cases. Each test case should ideally describe one behaviour only.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In test cases, try to describe in plain words the expected behaviour. For UI components, this might entail describing expected behaviour from a user perspective rather than explaining code internals.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Good<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>describe( 'CheckboxWithLabel', () => {\n    test( 'checking checkbox should disable the form submit button', () => {\n        ...\n    } );\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Not so good<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>describe( 'CheckboxWithLabel', () => {\n    test( 'checking checkbox should set this.state.disableButton to `true`', () => {\n        ...\n    } );\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Setup and teardown methods<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Jest API includes some nifty <a href=\"https:\/\/jestjs.io\/docs\/en\/setup-teardown.html\">setup and teardown methods<\/a> that allow you to perform tasks <em>before<\/em> and <em>after<\/em> each or all of your tests, or tests within a specific <code>describe<\/code> block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>These methods can handle asynchronous code to allow setup that you normally cannot do inline. As with <a href=\"https:\/\/jestjs.io\/docs\/en\/asynchronous.html#promises\">individual test cases<\/a>, you can return a Promise and Jest will wait for it to resolve:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ one-time setup for *all* tests\nbeforeAll( () =>\n\tsomeAsyncAction().then( ( resp ) => {\n\t\twindow.someGlobal = resp;\n\t} )\n);\n\n\/\/ one-time teardown for *all* tests\nafterAll( () => {\n\twindow.someGlobal = null;\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>afterEach<\/code> and <code>afterAll<\/code> provide a perfect (and preferred) way to 'clean up' after our tests, for example, by resetting state data.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Avoid placing clean up code after assertions since, if any of those tests fail, the clean up won't take place and may cause failures in unrelated tests.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Mocking dependencies<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Dependency injection<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Passing dependencies to a function as arguments can often make your code simpler to test. Where possible, avoid referencing dependencies in a higher scope.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Not so good<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import VALID_VALUES_LIST from '.\/constants';\n\nfunction isValueValid( value ) {\n\treturn VALID_VALUES_LIST.includes( value );\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Here we'd have to import and use a value from <code>VALID_VALUES_LIST<\/code> in order to pass:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>expect( isValueValid( VALID_VALUES_LIST[ 0 ] ) ).toBe( true );<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The above assertion is testing two behaviours: 1) that the function can detect an item in a list, and 2) that it can detect an item in <code>VALID_VALUES_LIST<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But what if we don't care what's stored in <code>VALID_VALUES_LIST<\/code>, or if the list is fetched via an HTTP request, and we only want to test whether <code>isValueValid<\/code> can detect an item in a list?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Good<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function isValueValid( value, validValuesList = &#91;] ) {\n\treturn validValuesList.includes( value );\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Because we're passing the list as an argument, we can pass mock <code>validValuesList<\/code> values in our tests and, as a bonus, test a few more scenarios:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>expect( isValueValid( 'hulk', [ 'batman', 'superman' ] ) ).toBe( false );<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>expect( isValueValid( 'hulk', null ) ).toBe( false );<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>expect( isValueValid( 'hulk', [] ) ).toBe( false );<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>expect( isValueValid( 'hulk', [ 'iron man', 'hulk' ] ) ).toBe( true );<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Imported dependencies<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Often our code will use methods and properties from imported external and internal libraries in multiple places, which makes passing around arguments messy and impracticable. For these cases <code>jest.mock<\/code> offers a neat way to stub these dependencies.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For instance, lets assume we have <code>config<\/code> module to control a great deal of functionality via feature flags.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ bilbo.js\nimport config from 'config';\nexport const isBilboVisible = () =>\n\tconfig.isEnabled( 'the-ring' ) ? false : true;\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>To test the behaviour under each condition, we stub the config object and use a jest mocking function to control the return value of <code>isEnabled<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ test\/bilbo.js\nimport { isEnabled } from 'config';\nimport { isBilboVisible } from '..\/bilbo';\n\njest.mock( 'config', () => ( {\n\t\/\/ bilbo is visible by default\n\tisEnabled: jest.fn( () => false ),\n} ) );\n\ndescribe( 'The bilbo module', () => {\n\ttest( 'bilbo should be visible by default', () => {\n\t\texpect( isBilboVisible() ).toBe( true );\n\t} );\n\n\ttest( 'bilbo should be invisible when the `the-ring` config feature flag is enabled', () => {\n\t\tisEnabled.mockImplementationOnce( ( name ) => name === 'the-ring' );\n\t\texpect( isBilboVisible() ).toBe( false );\n\t} );\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Testing globals<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We can use <a href=\"https:\/\/jestjs.io\/docs\/en\/jest-object.html#jestspyonobject-methodname\">Jest spies<\/a> to test code that calls global methods.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { myModuleFunctionThatOpensANewWindow } from '..\/my-module';\n\ndescribe( 'my module', () => {\n\tbeforeAll( () => {\n\t\tjest.spyOn( global, 'open' ).mockImplementation( () => true );\n\t} );\n\n\ttest( 'something', () => {\n\t\tmyModuleFunctionThatOpensANewWindow();\n\t\texpect( global.open ).toHaveBeenCalled();\n\t} );\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">User interactions<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Simulating user interactions is a great way to <strong>write tests from the user's perspective<\/strong>, and therefore avoid testing implementation details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When writing tests with Testing Library, there are two main alternatives for simulating user interactions:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The <a href=\"https:\/\/testing-library.com\/docs\/dom-testing-library\/api-events\/#fireevent\"><code>fireEvent<\/code><\/a> API, a utility for firing DOM events part of the Testing Library core API.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The <a href=\"https:\/\/testing-library.com\/docs\/user-event\/intro\/\"><code>user-event<\/code><\/a> library, a companion library to Testing Library that simulates user interactions by dispatching the events that would happen if the interaction took place in a browser.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The built-in <code>fireEvent<\/code> is a utility for dispatching DOM events. It dispatches exactly the events that are described in the test spec - even if those exact events never had been dispatched in a real interaction in a browser.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>On the other hand, the <code>user-event<\/code> library exposes higher-level methods (e.g. <code>type<\/code>, <code>selectOptions<\/code>, <code>clear<\/code>, <code>doubleClick<\/code>...), that dispatch events like they would happen if a user interacted with the document, and take care of any react-specific quirks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For the above reasons, <strong>the <code>user-event<\/code> library is recommended when writing tests for user interactions<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Not so good<\/strong>: using <code>fireEvent<\/code> to dispatch DOM events.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { render, screen } from '@testing-library\/react';\n\ntest( 'fires onChange when a new value is typed', () => {\n\tconst spyOnChange = jest.fn();\n\n\t\/\/ A component with one `input` and one `select`.\n\trender( <mycomponent onchange=\"{\" spyonchange=\"\" }=\"\"> );\n\n\tconst input = screen.getByRole( 'textbox' );\n\tinput.focus();\n\t\/\/ No clicks, no key events.\n\tfireEvent.change( input, { target: { value: 62 } } );\n\n\t\/\/ The `onChange` callback gets called once with '62' as the argument.\n\texpect( spyOnChange ).toHaveBeenCalledTimes( 1 );\n\n\tconst select = screen.getByRole( 'listbox' );\n\tselect.focus();\n\t\/\/ No pointer events dispatched.\n\tfireEvent.change( select, { target: { value: 'optionValue' } } );\n\n\t\/\/ ...\n<\/mycomponent><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Good<\/strong>: using <code>user-event<\/code> to simulate user events.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { render, screen } from '@testing-library\/react';\nimport userEvent from '@testing-library\/user-event';\n\ntest( 'fires onChange when a new value is typed', async () => {\n\tconst user = userEvent.setup();\n\n\tconst spyOnChange = jest.fn();\n\n\t\/\/ A component with one `input` and one `select`.\n\trender( <mycomponent onchange=\"{\" spyonchange=\"\" }=\"\"> );\n\n\tconst input = screen.getByRole( 'textbox' );\n\t\/\/ Focus the element, select and delete all its contents.\n\tawait user.clear( input );\n\t\/\/ Click the element, type each character separately (generating keydown,\n\t\/\/ keypress and keyup events).\n\tawait user.type( input, '62' );\n\n\t\/\/ The `onChange` callback gets called 3 times with the following arguments:\n\t\/\/ - 1: clear ('')\n\t\/\/ - 2: '6'\n\t\/\/ - 3: '62'\n\texpect( spyOnChange ).toHaveBeenCalledTimes( 3 );\n\n\tconst select = screen.getByRole( 'listbox' );\n\t\/\/ Dispatches events for focus, pointer, mouse, click and change.\n\tawait user.selectOptions( select, &#91; 'optionValue' ] );\n\n\t\/\/ ...\n} );\n<\/mycomponent><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Integration testing for block UI<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Integration testing is defined as a type of testing where different parts are tested as a group. In this case, the parts that we want to test are the different components that are required to be rendered for a specific block or editor logic. In the end, they are very similar to unit tests as they are run with the same command using the Jest library. The main difference is that for the integration tests the blocks are run within a <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/test\/integration\/helpers\/integration-test-editor.js#L60\"><code>special instance of the block editor<\/code><\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The advantage of this approach is that the bulk of a block editor's functionality (block toolbar and inspector panel interactions, etc.) can be tested without having to fire up the full e2e test framework. This means the tests can run much faster and more reliably. It is suggested that as much of a block's UI functionality as possible is covered with integration tests, with e2e tests used for interactions that require a full browser environment, eg. file uploads, drag and drop, etc.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/cover\/test\/edit.js\"><code>The Cover block<\/code><\/a> is an example of a block that uses this level of testing to provide coverage for a large percentage of the editor interactions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To set up a jest file for integration tests:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { initializeEditor } from 'test\/integration\/helpers\/integration-test-editor';\n\nasync function setup( attributes ) {\n\tconst testBlock = { name: 'core\/cover', attributes };\n\treturn initializeEditor( testBlock );\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The <code>initializeEditor<\/code> function returns the output of the <code>@testing-library\/react<\/code> <code>render<\/code> method. It will also accept an array of block metadata objects, allowing you to set up the editor with multiple blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The integration test editor module also exports a <code>selectBlock<\/code> which can be used to select the block to be tested by the aria-label on the block wrapper, eg. \"Block: Cover\".<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Snapshot testing<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is an overview of <a href=\"https:\/\/jestjs.io\/docs\/en\/snapshot-testing.html\">snapshot testing<\/a> and how to best leverage snapshot tests.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">TL;DR Broken snapshots<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When a snapshot test fails, it just means that a component's rendering has changed. If that was unintended, then the snapshot test just prevented a bug \ud83d\ude0a<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>However, if the change was intentional, follow these steps to update the snapshot. Run the following to update the snapshots:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># --testPathPattern is optional but will be much faster by only running matching tests\nnpm run test:unit -- --updateSnapshot --testPathPattern path\/to\/tests\n\n# Update snapshot for e2e tests\nnpm run test:e2e -- --updateSnapshot --testPathPattern path\/to\/e2e-tests\n\n# Update snapshot for Playwright\nnpm run test:e2e:playwright -- --update-snapshots path\/to\/spec\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Review the diff and ensure the changes are expected and intentional.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Commit.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">What are snapshots?<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Snapshots are just a representation of some data structure generated by tests. Snapshots are stored in files and committed alongside the tests. When the tests are run, the data structure generated is compared with the snapshot on file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's very easy to make a snapshot:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>test( 'foobar test', () => {\n\tconst foobar = { foo: 'bar' };\n\n\texpect( foobar ).toMatchSnapshot();\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This is the produced snapshot:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>exports&#91; `test foobar test 1` ] = `\n  Object {\n    \"foo\": \"bar\",\n  }\n`;\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You should never create or modify a snapshot directly, they are generated and updated by tests.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Advantages<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Trivial and concise to add tests.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Protect against unintentional changes.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Simple to work with.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Reveal internal structures without running the application.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Disadvantages<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Not expressive.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Only catch issues when changes are introduced.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Are problematic for anything non-deterministic.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Use cases<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Snapshot are mostly targeted at component testing. They make us conscious of changes to a component's structure which makes them <em>ideal<\/em> for refactoring. If a snapshot is kept up to date over the course of a series of commits, the snapshot diffs record the evolution of a component's structure. Pretty cool \ud83d\ude0e<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { render, screen } from '@testing-library\/react';\nimport SolarSystem from 'solar-system';\n\ndescribe( 'SolarSystem', () => {\n\ttest( 'should render', () => {\n\t\tconst { container } = render( <solarsystem> );\n\n\t\texpect( container ).toMatchSnapshot();\n\t} );\n\n\ttest( 'should contain mars if planets is true', () => {\n\t\tconst { container } = render( <solarsystem planets=\"\"> );\n\n\t\texpect( container ).toMatchSnapshot();\n\t\texpect( screen.getByText( \/mars\/i ) ).toBeInTheDocument();\n\t} );\n} );\n<\/solarsystem><\/solarsystem><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Reducer tests are also a great fit for snapshots. They are often large, complex data structures that shouldn't change unexpectedly, exactly what snapshots excel at!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Working with snapshots<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You might be blindsided by CI tests failing when snapshots don't match. You'll need to <a href=\"https:\/\/jestjs.io\/docs\/en\/snapshot-testing.html#updating-snapshots\">update snapshots<\/a> if the changes are expected. The quick and dirty solution is to invoke Jest with <code>--updateSnapshot<\/code>. That can be done as follows:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run test:unit -- --updateSnapshot --testPathPattern path\/to\/tests\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>--testPathPattern<\/code> is not required, but specifying a path will speed things up by running a subset of tests.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's a great idea to keep <code>npm run test:unit:watch<\/code> running in the background as you work. Jest will run only the relevant tests for changed files, and when snapshot tests fail, just hit <code>u<\/code> to update a snapshot!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Pain points<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Non-deterministic tests may not make consistent snapshots, so beware. When working with anything random, time-based, or otherwise non-deterministic, snapshots will be problematic.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Connected components are tricky to work with. To snapshot a connected component you'll probably want to export the unconnected component:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ my-component.js\nexport { MyComponent };\nexport default connect( mapStateToProps )( MyComponent );\n\n\/\/ test\/my-component.js\nimport { MyComponent } from '..';\n\/\/ run those MyComponent tests\u2026\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The connected props will need to be manually provided. This is a good opportunity to audit the connected state.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Best practices<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you're starting a refactor, snapshots are quite nice, you can add them as the first commit on a branch and watch as they evolve.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Snapshots themselves don't express anything about what we expect. Snapshots are best used in conjunction with other tests that describe our expectations, like in the example above:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>test( 'should contain mars if planets is true', () => {\n\tconst { container } = render( <solarsystem planets=\"\"> );\n\n\t\/\/ Snapshot will catch unintended changes\n\texpect( container ).toMatchSnapshot();\n\n\t\/\/ This is what we actually expect to find in our test\n\texpect( screen.getByText( \/mars\/i ) ).toBeInTheDocument();\n} );\n<\/solarsystem><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Another good technique is to use the <code>toMatchDiffSnapshot<\/code> function (provided by the <a href=\"https:\/\/github.com\/jest-community\/snapshot-diff\"><code>snapshot-diff<\/code> package<\/a>), which allows to snapshot only the difference between two different states of the DOM. This approach is useful to test the effects of a prop change on the resulting DOM while generating a much smaller snapshot, like in this example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>test( 'should render a darker background when isShady is true', () => {\n\tconst { container } = render( <cardbody>Body<\/cardbody> );\n\tconst { container: containerShady } = render(\n\t\t<cardbody isshady=\"\">Body<\/cardbody>\n\t);\n\texpect( container ).toMatchDiffSnapshot( containerShady );\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Similarly, the <code>toMatchStyleDiffSnapshot<\/code> function allows to snapshot only the difference between the <em>styles<\/em> associated to two different states of a component, like in this example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>test( 'should render margin', () => {\n\tconst { container: spacer } = render( <spacer> );\n\tconst { container: spacerWithMargin } = render( <spacer 5=\"\" margin=\"{\" }=\"\"> );\n\texpect( spacerWithMargin ).toMatchStyleDiffSnapshot( spacer );\n} );\n<\/spacer><\/spacer><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Troubleshooting<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Sometimes we need to mock refs for some stories which use them. Check the following documents to learn more:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Why we need to use <a href=\"https:\/\/reactjs.org\/blog\/2016\/11\/16\/react-v15.4.0.html#mocking-refs-for-snapshot-testing\">Mocking Refs for Snapshot Testing<\/a> with React.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>In that case, you might see test failures and <code>TypeError<\/code> reported by Jest in the lines which try to access a property from <code>ref.current<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Debugging Jest unit tests<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Running <code>npm run test:unit:debug<\/code> will start the tests in debug mode so a <a href=\"https:\/\/nodejs.org\/en\/docs\/guides\/debugging-getting-started\/#inspector-clients\">node inspector client<\/a> can connect to the process and inspect the execution. Instructions for using Google Chrome or Visual Studio Code as an inspector client can be found in the <a href=\"\/packages\/scripts\/README.md#debugging-jest-unit-tests\">wp-scripts documentation<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Native mobile testing<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Part of the unit-tests suite is a set of Jest tests run exercise native-mobile codepaths, developed in React Native. Since those tests run on Node, they can be launched locally on your development machine without the need for specific native Android or iOS dev tools or SDKs. It also means that they can be debugged using typical dev tools. Read on for instructions how to debug.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Debugging the native mobile unit tests<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To locally run the tests in debug mode, follow these steps:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Make sure you have ran <code>npm ci<\/code> to install all the packages<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Run <code>npm run test:native:debug<\/code> inside the Gutenberg root folder, on the CLI. Node is now waiting for the debugger to connect.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Open <code>chrome:\/\/inspect<\/code> in Chrome<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Under the \"Remote Target\" section, look for a <code>..\/..\/node_modules\/.bin\/jest<\/code> target and click on the \"inspect\" link. That will open a new window with the Chrome DevTools debugger attached to the process and stopped at the beginning of the <code>jest.js<\/code> file. Alternatively, if the targets are not visible, click on the <code>Open dedicated DevTools for Node<\/code> link in the same page.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>You can place breakpoints or <code>debugger;<\/code> statements throughout the code, including the tests code, to stop and inspect<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Click on the \"Play\" button to resume execution<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Enjoy debugging the native mobile unit tests!<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Native mobile end-to-end tests<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Contributors to Gutenberg will note that PRs include continuous integration E2E tests running the native mobile E2E tests on Android and iOS. For troubleshooting failed tests, check our guide on <a href=\"\/docs\/contributors\/code\/react-native\/integration-test-guide.md\">native mobile tests in continuous integration<\/a>. More information on running these tests locally can be found in <a href=\"\/packages\/react-native-editor\/__device-tests__\/README.md\">here<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Native mobile integration tests<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There is an ongoing effort to add integration tests to the native mobile project using the <a href=\"https:\/\/testing-library.com\/docs\/react-native-testing-library\/intro\/\"><code>react-native-testing-library<\/code><\/a> library. A guide to writing integration tests can be found <a href=\"\/docs\/contributors\/code\/react-native\/integration-test-guide.md\">here<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">End-to-end testing<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Most existing End-to-end tests currently use <a href=\"https:\/\/github.com\/puppeteer\/puppeteer\">Puppeteer<\/a> as a headless Chromium driver to run the tests in <code>packages\/e2e-tests<\/code>, and are otherwise still run by a <a href=\"https:\/\/jestjs.io\/\">Jest<\/a> test runner.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There's an ongoing <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\/38851\">project<\/a> to migrate them from Puppeteer to Playwright. <strong>It's recommended to write new e2e tests in Playwright whenever possible<\/strong>. The sections below mostly apply to the old Jest + Puppeteer framework. See the dedicated <a href=\"\/docs\/contributors\/code\/e2e\/README.md\">guide<\/a> if you're writing tests with Playwright.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Using wp-env<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you're using the built-in <a href=\"\/docs\/contributors\/code\/getting-started-with-code-contribution.md#local-environment\">local environment<\/a>, you can run the e2e tests locally using this command:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run test:e2e\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>or interactively<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run test:e2e:watch\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Sometimes it's useful to observe the browser while running tests. Then, use this command:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run test:e2e:watch -- --puppeteer-interactive\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can control the speed of execution with <code>--puppeteer-slowmo<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run test:e2e:watch -- --puppeteer-interactive --puppeteer-slowmo=200\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can additionally have the devtools automatically open for interactive debugging in the browser:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run test:e2e:watch -- --puppeteer-devtools\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Using alternate environment<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If using a different setup than <code>wp-env<\/code>, you first need to symlink the e2e test plugins to your test site, from your site's plugins directory run:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>ln -s gutenberg\/packages\/e2e-tests\/plugins\/* .\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then to run the tests, specify the base URL, username, and passwords for your site. For example, if your test site is at <code>http:\/\/wp.test<\/code>, use:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>WP_BASE_URL=http:\/\/wp.test npm run test:e2e -- --wordpress-username=admin --wordpress-password=password\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Scenario testing<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you find that end-to-end tests pass when run locally, but fail in GitHub Actions, you may be able to isolate a CPU- or network-bound race condition by simulating a slow CPU or network:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>THROTTLE_CPU=4 npm run test:e2e\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>THROTTLE_CPU<\/code> is a slowdown factor (in this example, a 4x slowdown multiplier)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See <a href=\"https:\/\/chromedevtools.github.io\/devtools-protocol\/tot\/Emulation#method-setCPUThrottlingRate\">Chrome docs: setCPUThrottlingRate<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>SLOW_NETWORK=true npm run test:e2e\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>SLOW_NETWORK<\/code> emulates a network speed equivalent to \"Fast 3G\" in the Chrome devtools.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See <a href=\"https:\/\/chromedevtools.github.io\/devtools-protocol\/tot\/Network#method-emulateNetworkConditions\">Chrome docs: emulateNetworkConditions<\/a> and <a href=\"https:\/\/github.com\/ChromeDevTools\/devtools-frontend\/blob\/80c102878fd97a7a696572054007d40560dcdd21\/front_end\/sdk\/NetworkManager.js#L252-L274\">NetworkManager.js<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>OFFLINE=true npm run test:e2e\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>OFFLINE<\/code> emulates network disconnection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See <a href=\"https:\/\/chromedevtools.github.io\/devtools-protocol\/tot\/Network#method-emulateNetworkConditions\">Chrome docs: emulateNetworkConditions<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Core block testing<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Every core block is required to have at least one set of fixture files for its main save function and one for each deprecation. These fixtures test the parsing and serialization of the block. See <a href=\"https:\/\/github.com\/wordpress\/gutenberg\/blob\/HEAD\/test\/integration\/fixtures\/blocks\/README.md\">the integration tests fixtures readme<\/a> for more information and instructions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Flaky tests<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A test is considered to be <strong>flaky<\/strong> when it can pass and fail across multiple retry attempts without any code changes. We auto retry failed tests at most <strong>twice<\/strong> on CI to detect and report them to GitHub issues automatically under the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22%5BType%5D+Flaky+Test%22\"><code>[Type] Flaky Test<\/code><\/a> label via <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/report-flaky-tests\"><code>report-flaky-tests<\/code><\/a> GitHub action. Note that a test that failed three times in a row is not counted as a flaky test and will not be reported to an issue.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">PHP testing<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Tests for PHP use <a href=\"https:\/\/phpunit.de\/\">PHPUnit<\/a> as the testing framework. If you're using the built-in <a href=\"\/docs\/contributors\/code\/getting-started-with-code-contribution.md#local-environment\">local environment<\/a>, you can run the PHP tests locally using this command:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run test:php\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>To re-run tests automatically when files change (similar to Jest), run:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run test:php:watch\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Note: The phpunit commands require <code>wp-env<\/code> to be running and composer dependencies to be installed. The package script will start wp-env for you if it is not already running.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In other environments, run <code>composer run test<\/code> and <code>composer run test:watch<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Code style in PHP is enforced using <a href=\"https:\/\/github.com\/squizlabs\/PHP_CodeSniffer\">PHP_CodeSniffer<\/a>. It is recommended that you install PHP_CodeSniffer and the <a href=\"https:\/\/github.com\/WordPress-Coding-Standards\/WordPress-Coding-Standards#installation\">WordPress Coding Standards for PHP_CodeSniffer<\/a> ruleset using <a href=\"https:\/\/getcomposer.org\/\">Composer<\/a>. With Composer installed, run <code>composer install<\/code> from the project directory to install dependencies. The above <code>npm run test:php<\/code> will execute both unit tests and code linting. Code linting can be verified independently by running <code>npm run lint:php<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To run unit tests only, without the linter, use <code>npm run test:unit:php<\/code> instead.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Performance testing<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To ensure that the editor stays performant as we add features, we monitor the impact pull requests and releases can have on some key metrics including:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The time it takes to load the editor.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The time it takes for the browser to respond when typing.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The time it takes to select a block.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Performance tests are end-to-end tests running the editor and capturing these measures. Make sure you have an e2e testing environment ready.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To set up the e2e testing environment, checkout the Gutenberg repository and switch to the branch that you would like to test. Run the following command to prepare the environment.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>nvm use &amp;&amp; npm install\nnpm run build:packages\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>To run the tests run the following command:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run test:performance\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This gives you the result for the current branch\/code on the running environment.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In addition to that, you can also compare the metrics across branches (or tags or commits) by running the following command <code>.\/bin\/plugin\/cli.js perf [branches]<\/code>, example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>.\/bin\/plugin\/cli.js perf trunk v8.1.0 v8.0.0\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Finally, you can pass an additional <code>--tests-branch<\/code> argument to specify which branch's performance test files you'd like to run. This is particularly useful when modifying\/extending the perf tests:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>.\/bin\/plugin\/cli.js perf trunk v8.1.0 v8.0.0 --tests-branch add\/perf-tests-coverage\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Note<\/strong> This command needs may take some time to perform the benchmark. While running make sure to avoid using your computer or have a lot of background process to minimize external factors that can impact the results across branches.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Testing Overview\n\nGutenberg contains both PHP and JavaScript code, and encourages testing and code style linting for both.\n\n## Why test?\n\nAside from the joy testing will bring to your life, tests are important not only because they help to ensure that our application behaves as it should, but also because they provide concise examples of how to use a piece of code.\n\nTests are also part of our code base, which means we apply to them the same standards we apply to all our application code.\n\nAs with all code, tests have to be maintained. Writing tests for the sake of having a test isn't the goal \u2013 rather we should try to strike the right balance between covering expected and unexpected behaviours, speedy execution and code maintenance.\n\nWhen writing tests consider the following:\n\n-   What behaviour(s) are we testing?\n-   What errors are likely to occur when we run this code?\n-   Does the test test what we think it is testing? Or are we introducing false positives\/negatives?\n-   Is it readable? Will other contributors be able to understand how our code behaves by looking at its corresponding test?\n\n## JavaScript testing\n\nTests for JavaScript use [Jest](https:\/\/jestjs.io\/) as the test runner and its API for [globals](https:\/\/jestjs.io\/docs\/en\/api.html) (`describe`, `test`, `beforeEach` and so on) [assertions](https:\/\/jestjs.io\/docs\/en\/expect.html), [mocks](https:\/\/jestjs.io\/docs\/en\/mock-functions.html), [spies](https:\/\/jestjs.io\/docs\/en\/jest-object.html#jestspyonobject-methodname) and [mock functions](https:\/\/jestjs.io\/docs\/en\/mock-function-api.html). If needed, you can also use [React Testing Library](https:\/\/testing-library.com\/docs\/react-testing-library\/intro) for React component testing.\n\n_It should be noted that in the past, React components were unit tested with [Enzyme](https:\/\/github.com\/airbnb\/enzyme). However, React Testing Library (RTL) is now used for all existing and new tests instead._\n\nAssuming you've followed the [instructions](\/docs\/contributors\/code\/getting-started-with-code-contribution.md) to install Node and project dependencies, tests can be run from the command-line with NPM:\n\n```\nnpm test\n```\n\nLinting is static code analysis used to enforce coding standards and to avoid potential errors. This project uses [ESLint](http:\/\/eslint.org\/) and [TypeScript's JavaScript type-checking](https:\/\/www.typescriptlang.org\/docs\/handbook\/type-checking-javascript-files.html) to capture these issues. While the above `npm test` will execute both unit tests and code linting, code linting can be verified independently by running `npm run lint`. Some JavaScript issues can be fixed automatically by running `npm run lint:js:fix`.\n\nTo improve your developer workflow, you should setup an editor linting integration. See the [getting started documentation](\/docs\/contributors\/code\/getting-started-with-code-contribution.md) for additional information.\n\nTo run unit tests only, without the linter, use `npm run test:unit` instead.\n\n### Folder structure\n\nKeep your tests in a `test` folder in your working directory. The test file should have the same name as the test subject file.\n\n```\n+-- test\n|   +-- bar.js\n+-- bar.js\n```\n\nOnly test files (with at least one test case) should live directly under `\/test`. If you need to add external mocks or fixtures, place them in a sub folder, for example:\n\n-   `test\/mocks\/[file-name].js`\n-   `test\/fixtures\/[file-name].js`\n\n### Importing tests\n\nGiven the previous folder structure, try to use relative paths when importing of the **code you're testing**, as opposed to using project paths.\n\n**Good**\n\n`import { bar } from '..\/bar';`\n\n**Not so good**\n\n`import { bar } from 'components\/foo\/bar';`\n\nIt will make your life easier should you decide to relocate your code to another position in the application directory.\n\n### Describing tests\n\nUse a `describe` block to group test cases. Each test case should ideally describe one behaviour only.\n\nIn test cases, try to describe in plain words the expected behaviour. For UI components, this might entail describing expected behaviour from a user perspective rather than explaining code internals.\n\n**Good**\n\n```javascript\ndescribe( 'CheckboxWithLabel', () => {\n    test( 'checking checkbox should disable the form submit button', () => {\n        ...\n    } );\n} );\n```\n\n**Not so good**\n\n```javascript\ndescribe( 'CheckboxWithLabel', () => {\n    test( 'checking checkbox should set this.state.disableButton to `true`', () => {\n        ...\n    } );\n} );\n```\n\n### Setup and teardown methods\n\nThe Jest API includes some nifty [setup and teardown methods](https:\/\/jestjs.io\/docs\/en\/setup-teardown.html) that allow you to perform tasks _before_ and _after_ each or all of your tests, or tests within a specific `describe` block.\n\nThese methods can handle asynchronous code to allow setup that you normally cannot do inline. As with [individual test cases](https:\/\/jestjs.io\/docs\/en\/asynchronous.html#promises), you can return a Promise and Jest will wait for it to resolve:\n\n```javascript\n\/\/ one-time setup for *all* tests\nbeforeAll( () =>\n\tsomeAsyncAction().then( ( resp ) => {\n\t\twindow.someGlobal = resp;\n\t} )\n);\n\n\/\/ one-time teardown for *all* tests\nafterAll( () => {\n\twindow.someGlobal = null;\n} );\n```\n\n`afterEach` and `afterAll` provide a perfect (and preferred) way to 'clean up' after our tests, for example, by resetting state data.\n\nAvoid placing clean up code after assertions since, if any of those tests fail, the clean up won't take place and may cause failures in unrelated tests.\n\n### Mocking dependencies\n\n#### Dependency injection\n\nPassing dependencies to a function as arguments can often make your code simpler to test. Where possible, avoid referencing dependencies in a higher scope.\n\n**Not so good**\n\n```javascript\nimport VALID_VALUES_LIST from '.\/constants';\n\nfunction isValueValid( value ) {\n\treturn VALID_VALUES_LIST.includes( value );\n}\n```\n\nHere we'd have to import and use a value from `VALID_VALUES_LIST` in order to pass:\n\n`expect( isValueValid( VALID_VALUES_LIST[ 0 ] ) ).toBe( true );`\n\nThe above assertion is testing two behaviours: 1) that the function can detect an item in a list, and 2) that it can detect an item in `VALID_VALUES_LIST`.\n\nBut what if we don't care what's stored in `VALID_VALUES_LIST`, or if the list is fetched via an HTTP request, and we only want to test whether `isValueValid` can detect an item in a list?\n\n**Good**\n\n```javascript\nfunction isValueValid( value, validValuesList = [] ) {\n\treturn validValuesList.includes( value );\n}\n```\n\nBecause we're passing the list as an argument, we can pass mock `validValuesList` values in our tests and, as a bonus, test a few more scenarios:\n\n`expect( isValueValid( 'hulk', [ 'batman', 'superman' ] ) ).toBe( false );`\n\n`expect( isValueValid( 'hulk', null ) ).toBe( false );`\n\n`expect( isValueValid( 'hulk', [] ) ).toBe( false );`\n\n`expect( isValueValid( 'hulk', [ 'iron man', 'hulk' ] ) ).toBe( true );`\n\n#### Imported dependencies\n\nOften our code will use methods and properties from imported external and internal libraries in multiple places, which makes passing around arguments messy and impracticable. For these cases `jest.mock` offers a neat way to stub these dependencies.\n\nFor instance, lets assume we have `config` module to control a great deal of functionality via feature flags.\n\n```javascript\n\/\/ bilbo.js\nimport config from 'config';\nexport const isBilboVisible = () =>\n\tconfig.isEnabled( 'the-ring' ) ? false : true;\n```\n\nTo test the behaviour under each condition, we stub the config object and use a jest mocking function to control the return value of `isEnabled`.\n\n```javascript\n\/\/ test\/bilbo.js\nimport { isEnabled } from 'config';\nimport { isBilboVisible } from '..\/bilbo';\n\njest.mock( 'config', () => ( {\n\t\/\/ bilbo is visible by default\n\tisEnabled: jest.fn( () => false ),\n} ) );\n\ndescribe( 'The bilbo module', () => {\n\ttest( 'bilbo should be visible by default', () => {\n\t\texpect( isBilboVisible() ).toBe( true );\n\t} );\n\n\ttest( 'bilbo should be invisible when the `the-ring` config feature flag is enabled', () => {\n\t\tisEnabled.mockImplementationOnce( ( name ) => name === 'the-ring' );\n\t\texpect( isBilboVisible() ).toBe( false );\n\t} );\n} );\n```\n\n### Testing globals\n\nWe can use [Jest spies](https:\/\/jestjs.io\/docs\/en\/jest-object.html#jestspyonobject-methodname) to test code that calls global methods.\n\n```javascript\nimport { myModuleFunctionThatOpensANewWindow } from '..\/my-module';\n\ndescribe( 'my module', () => {\n\tbeforeAll( () => {\n\t\tjest.spyOn( global, 'open' ).mockImplementation( () => true );\n\t} );\n\n\ttest( 'something', () => {\n\t\tmyModuleFunctionThatOpensANewWindow();\n\t\texpect( global.open ).toHaveBeenCalled();\n\t} );\n} );\n```\n\n### User interactions\n\nSimulating user interactions is a great way to **write tests from the user's perspective**, and therefore avoid testing implementation details.\n\nWhen writing tests with Testing Library, there are two main alternatives for simulating user interactions:\n\n1. The [`fireEvent`](https:\/\/testing-library.com\/docs\/dom-testing-library\/api-events\/#fireevent) API, a utility for firing DOM events part of the Testing Library core API.\n2. The [`user-event`](https:\/\/testing-library.com\/docs\/user-event\/intro\/) library, a companion library to Testing Library that simulates user interactions by dispatching the events that would happen if the interaction took place in a browser.\n\nThe built-in `fireEvent` is a utility for dispatching DOM events. It dispatches exactly the events that are described in the test spec - even if those exact events never had been dispatched in a real interaction in a browser.\n\nOn the other hand, the `user-event` library exposes higher-level methods (e.g. `type`, `selectOptions`, `clear`, `doubleClick`...), that dispatch events like they would happen if a user interacted with the document, and take care of any react-specific quirks.\n\nFor the above reasons, **the `user-event` library is recommended when writing tests for user interactions**.\n\n**Not so good**: using `fireEvent` to dispatch DOM events.\n\n```javascript\nimport { render, screen } from '@testing-library\/react';\n\ntest( 'fires onChange when a new value is typed', () => {\n\tconst spyOnChange = jest.fn();\n\n\t\/\/ A component with one `input` and one `select`.\n\trender( <MyComponent onChange={ spyOnChange } \/> );\n\n\tconst input = screen.getByRole( 'textbox' );\n\tinput.focus();\n\t\/\/ No clicks, no key events.\n\tfireEvent.change( input, { target: { value: 62 } } );\n\n\t\/\/ The `onChange` callback gets called once with '62' as the argument.\n\texpect( spyOnChange ).toHaveBeenCalledTimes( 1 );\n\n\tconst select = screen.getByRole( 'listbox' );\n\tselect.focus();\n\t\/\/ No pointer events dispatched.\n\tfireEvent.change( select, { target: { value: 'optionValue' } } );\n\n\t\/\/ ...\n```\n\n**Good**: using `user-event` to simulate user events.\n\n```javascript\nimport { render, screen } from '@testing-library\/react';\nimport userEvent from '@testing-library\/user-event';\n\ntest( 'fires onChange when a new value is typed', async () => {\n\tconst user = userEvent.setup();\n\n\tconst spyOnChange = jest.fn();\n\n\t\/\/ A component with one `input` and one `select`.\n\trender( <MyComponent onChange={ spyOnChange } \/> );\n\n\tconst input = screen.getByRole( 'textbox' );\n\t\/\/ Focus the element, select and delete all its contents.\n\tawait user.clear( input );\n\t\/\/ Click the element, type each character separately (generating keydown,\n\t\/\/ keypress and keyup events).\n\tawait user.type( input, '62' );\n\n\t\/\/ The `onChange` callback gets called 3 times with the following arguments:\n\t\/\/ - 1: clear ('')\n\t\/\/ - 2: '6'\n\t\/\/ - 3: '62'\n\texpect( spyOnChange ).toHaveBeenCalledTimes( 3 );\n\n\tconst select = screen.getByRole( 'listbox' );\n\t\/\/ Dispatches events for focus, pointer, mouse, click and change.\n\tawait user.selectOptions( select, [ 'optionValue' ] );\n\n\t\/\/ ...\n} );\n```\n\n### Integration testing for block UI\n\nIntegration testing is defined as a type of testing where different parts are tested as a group. In this case, the parts that we want to test are the different components that are required to be rendered for a specific block or editor logic. In the end, they are very similar to unit tests as they are run with the same command using the Jest library. The main difference is that for the integration tests the blocks are run within a [`special instance of the block editor`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/test\/integration\/helpers\/integration-test-editor.js#L60).\n\nThe advantage of this approach is that the bulk of a block editor's functionality (block toolbar and inspector panel interactions, etc.) can be tested without having to fire up the full e2e test framework. This means the tests can run much faster and more reliably. It is suggested that as much of a block's UI functionality as possible is covered with integration tests, with e2e tests used for interactions that require a full browser environment, eg. file uploads, drag and drop, etc.\n\n[`The Cover block`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/cover\/test\/edit.js) is an example of a block that uses this level of testing to provide coverage for a large percentage of the editor interactions.\n\nTo set up a jest file for integration tests:\n\n```js\nimport { initializeEditor } from 'test\/integration\/helpers\/integration-test-editor';\n\nasync function setup( attributes ) {\n\tconst testBlock = { name: 'core\/cover', attributes };\n\treturn initializeEditor( testBlock );\n}\n```\n\nThe `initializeEditor` function returns the output of the `@testing-library\/react` `render` method. It will also accept an array of block metadata objects, allowing you to set up the editor with multiple blocks.\n\nThe integration test editor module also exports a `selectBlock` which can be used to select the block to be tested by the aria-label on the block wrapper, eg. \"Block: Cover\".\n\n### Snapshot testing\n\nThis is an overview of [snapshot testing] and how to best leverage snapshot tests.\n\n#### TL;DR Broken snapshots\n\nWhen a snapshot test fails, it just means that a component's rendering has changed. If that was unintended, then the snapshot test just prevented a bug \ud83d\ude0a\n\nHowever, if the change was intentional, follow these steps to update the snapshot. Run the following to update the snapshots:\n\n```sh\n# --testPathPattern is optional but will be much faster by only running matching tests\nnpm run test:unit -- --updateSnapshot --testPathPattern path\/to\/tests\n\n# Update snapshot for e2e tests\nnpm run test:e2e -- --updateSnapshot --testPathPattern path\/to\/e2e-tests\n\n# Update snapshot for Playwright\nnpm run test:e2e:playwright -- --update-snapshots path\/to\/spec\n```\n\n1. Review the diff and ensure the changes are expected and intentional.\n2. Commit.\n\n#### What are snapshots?\n\nSnapshots are just a representation of some data structure generated by tests. Snapshots are stored in files and committed alongside the tests. When the tests are run, the data structure generated is compared with the snapshot on file.\n\nIt's very easy to make a snapshot:\n\n```js\ntest( 'foobar test', () => {\n\tconst foobar = { foo: 'bar' };\n\n\texpect( foobar ).toMatchSnapshot();\n} );\n```\n\nThis is the produced snapshot:\n\n```js\nexports[ `test foobar test 1` ] = `\n  Object {\n    \"foo\": \"bar\",\n  }\n`;\n```\n\nYou should never create or modify a snapshot directly, they are generated and updated by tests.\n\n#### Advantages\n\n-   Trivial and concise to add tests.\n-   Protect against unintentional changes.\n-   Simple to work with.\n-   Reveal internal structures without running the application.\n\n#### Disadvantages\n\n-   Not expressive.\n-   Only catch issues when changes are introduced.\n-   Are problematic for anything non-deterministic.\n\n#### Use cases\n\nSnapshot are mostly targeted at component testing. They make us conscious of changes to a component's structure which makes them _ideal_ for refactoring. If a snapshot is kept up to date over the course of a series of commits, the snapshot diffs record the evolution of a component's structure. Pretty cool \ud83d\ude0e\n\n```jsx\nimport { render, screen } from '@testing-library\/react';\nimport SolarSystem from 'solar-system';\n\ndescribe( 'SolarSystem', () => {\n\ttest( 'should render', () => {\n\t\tconst { container } = render( <SolarSystem \/> );\n\n\t\texpect( container ).toMatchSnapshot();\n\t} );\n\n\ttest( 'should contain mars if planets is true', () => {\n\t\tconst { container } = render( <SolarSystem planets \/> );\n\n\t\texpect( container ).toMatchSnapshot();\n\t\texpect( screen.getByText( \/mars\/i ) ).toBeInTheDocument();\n\t} );\n} );\n```\n\nReducer tests are also a great fit for snapshots. They are often large, complex data structures that shouldn't change unexpectedly, exactly what snapshots excel at!\n\n#### Working with snapshots\n\nYou might be blindsided by CI tests failing when snapshots don't match. You'll need to [update snapshots] if the changes are expected. The quick and dirty solution is to invoke Jest with `--updateSnapshot`. That can be done as follows:\n\n```sh\nnpm run test:unit -- --updateSnapshot --testPathPattern path\/to\/tests\n```\n\n`--testPathPattern` is not required, but specifying a path will speed things up by running a subset of tests.\n\nIt's a great idea to keep `npm run test:unit:watch` running in the background as you work. Jest will run only the relevant tests for changed files, and when snapshot tests fail, just hit `u` to update a snapshot!\n\n#### Pain points\n\nNon-deterministic tests may not make consistent snapshots, so beware. When working with anything random, time-based, or otherwise non-deterministic, snapshots will be problematic.\n\nConnected components are tricky to work with. To snapshot a connected component you'll probably want to export the unconnected component:\n\n```js\n\/\/ my-component.js\nexport { MyComponent };\nexport default connect( mapStateToProps )( MyComponent );\n\n\/\/ test\/my-component.js\nimport { MyComponent } from '..';\n\/\/ run those MyComponent tests\u2026\n```\n\nThe connected props will need to be manually provided. This is a good opportunity to audit the connected state.\n\n#### Best practices\n\nIf you're starting a refactor, snapshots are quite nice, you can add them as the first commit on a branch and watch as they evolve.\n\nSnapshots themselves don't express anything about what we expect. Snapshots are best used in conjunction with other tests that describe our expectations, like in the example above:\n\n```jsx\ntest( 'should contain mars if planets is true', () => {\n\tconst { container } = render( <SolarSystem planets \/> );\n\n\t\/\/ Snapshot will catch unintended changes\n\texpect( container ).toMatchSnapshot();\n\n\t\/\/ This is what we actually expect to find in our test\n\texpect( screen.getByText( \/mars\/i ) ).toBeInTheDocument();\n} );\n```\n\nAnother good technique is to use the `toMatchDiffSnapshot` function (provided by the [`snapshot-diff` package](https:\/\/github.com\/jest-community\/snapshot-diff)), which allows to snapshot only the difference between two different states of the DOM. This approach is useful to test the effects of a prop change on the resulting DOM while generating a much smaller snapshot, like in this example:\n\n```jsx\ntest( 'should render a darker background when isShady is true', () => {\n\tconst { container } = render( <CardBody>Body<\/CardBody> );\n\tconst { container: containerShady } = render(\n\t\t<CardBody isShady>Body<\/CardBody>\n\t);\n\texpect( container ).toMatchDiffSnapshot( containerShady );\n} );\n```\n\nSimilarly, the `toMatchStyleDiffSnapshot` function allows to snapshot only the difference between the _styles_ associated to two different states of a component, like in this example:\n\n```jsx\ntest( 'should render margin', () => {\n\tconst { container: spacer } = render( <Spacer \/> );\n\tconst { container: spacerWithMargin } = render( <Spacer margin={ 5 } \/> );\n\texpect( spacerWithMargin ).toMatchStyleDiffSnapshot( spacer );\n} );\n```\n\n#### Troubleshooting\n\nSometimes we need to mock refs for some stories which use them. Check the following documents to learn more:\n\n-   Why we need to use [Mocking Refs for Snapshot Testing](https:\/\/reactjs.org\/blog\/2016\/11\/16\/react-v15.4.0.html#mocking-refs-for-snapshot-testing) with React.\n\nIn that case, you might see test failures and `TypeError` reported by Jest in the lines which try to access a property from `ref.current`.\n\n### Debugging Jest unit tests\n\nRunning `npm run test:unit:debug` will start the tests in debug mode so a [node inspector client](https:\/\/nodejs.org\/en\/docs\/guides\/debugging-getting-started\/#inspector-clients) can connect to the process and inspect the execution. Instructions for using Google Chrome or Visual Studio Code as an inspector client can be found in the [wp-scripts documentation](\/packages\/scripts\/README.md#debugging-jest-unit-tests).\n\n## Native mobile testing\n\nPart of the unit-tests suite is a set of Jest tests run exercise native-mobile codepaths, developed in React Native. Since those tests run on Node, they can be launched locally on your development machine without the need for specific native Android or iOS dev tools or SDKs. It also means that they can be debugged using typical dev tools. Read on for instructions how to debug.\n\n### Debugging the native mobile unit tests\n\nTo locally run the tests in debug mode, follow these steps:\n\n0. Make sure you have ran `npm ci` to install all the packages\n1. Run `npm run test:native:debug` inside the Gutenberg root folder, on the CLI. Node is now waiting for the debugger to connect.\n2. Open `chrome:\/\/inspect` in Chrome\n3. Under the \"Remote Target\" section, look for a `..\/..\/node_modules\/.bin\/jest` target and click on the \"inspect\" link. That will open a new window with the Chrome DevTools debugger attached to the process and stopped at the beginning of the `jest.js` file. Alternatively, if the targets are not visible, click on the `Open dedicated DevTools for Node` link in the same page.\n4. You can place breakpoints or `debugger;` statements throughout the code, including the tests code, to stop and inspect\n5. Click on the \"Play\" button to resume execution\n6. Enjoy debugging the native mobile unit tests!\n\n### Native mobile end-to-end tests\n\nContributors to Gutenberg will note that PRs include continuous integration E2E tests running the native mobile E2E tests on Android and iOS. For troubleshooting failed tests, check our guide on [native mobile tests in continuous integration](\/docs\/contributors\/code\/react-native\/integration-test-guide.md). More information on running these tests locally can be found in [here](\/packages\/react-native-editor\/__device-tests__\/README.md).\n\n### Native mobile integration tests\n\nThere is an ongoing effort to add integration tests to the native mobile project using the [`react-native-testing-library`](https:\/\/testing-library.com\/docs\/react-native-testing-library\/intro\/) library. A guide to writing integration tests can be found [here](\/docs\/contributors\/code\/react-native\/integration-test-guide.md).\n\n## End-to-end testing\n\nMost existing End-to-end tests currently use [Puppeteer](https:\/\/github.com\/puppeteer\/puppeteer) as a headless Chromium driver to run the tests in `packages\/e2e-tests`, and are otherwise still run by a [Jest](https:\/\/jestjs.io\/) test runner.\n\nThere's an ongoing [project](https:\/\/github.com\/WordPress\/gutenberg\/issues\/38851) to migrate them from Puppeteer to Playwright. **It's recommended to write new e2e tests in Playwright whenever possible**. The sections below mostly apply to the old Jest + Puppeteer framework. See the dedicated [guide](\/docs\/contributors\/code\/e2e\/README.md) if you're writing tests with Playwright.\n\n### Using wp-env\n\nIf you're using the built-in [local environment](\/docs\/contributors\/code\/getting-started-with-code-contribution.md#local-environment), you can run the e2e tests locally using this command:\n\n```bash\nnpm run test:e2e\n```\n\nor interactively\n\n```bash\nnpm run test:e2e:watch\n```\n\nSometimes it's useful to observe the browser while running tests. Then, use this command:\n\n```bash\nnpm run test:e2e:watch -- --puppeteer-interactive\n```\n\nYou can control the speed of execution with `--puppeteer-slowmo`:\n\n```bash\nnpm run test:e2e:watch -- --puppeteer-interactive --puppeteer-slowmo=200\n```\n\nYou can additionally have the devtools automatically open for interactive debugging in the browser:\n\n```bash\nnpm run test:e2e:watch -- --puppeteer-devtools\n```\n\n### Using alternate environment\n\nIf using a different setup than `wp-env`, you first need to symlink the e2e test plugins to your test site, from your site's plugins directory run:\n\n```bash\nln -s gutenberg\/packages\/e2e-tests\/plugins\/* .\n```\n\nThen to run the tests, specify the base URL, username, and passwords for your site. For example, if your test site is at `http:\/\/wp.test`, use:\n\n```bash\nWP_BASE_URL=http:\/\/wp.test npm run test:e2e -- --wordpress-username=admin --wordpress-password=password\n```\n\n### Scenario testing\n\nIf you find that end-to-end tests pass when run locally, but fail in GitHub Actions, you may be able to isolate a CPU- or network-bound race condition by simulating a slow CPU or network:\n\n```\nTHROTTLE_CPU=4 npm run test:e2e\n```\n\n`THROTTLE_CPU` is a slowdown factor (in this example, a 4x slowdown multiplier)\n\nSee [Chrome docs: setCPUThrottlingRate](https:\/\/chromedevtools.github.io\/devtools-protocol\/tot\/Emulation#method-setCPUThrottlingRate)\n\n```\nSLOW_NETWORK=true npm run test:e2e\n```\n\n`SLOW_NETWORK` emulates a network speed equivalent to \"Fast 3G\" in the Chrome devtools.\n\nSee [Chrome docs: emulateNetworkConditions](https:\/\/chromedevtools.github.io\/devtools-protocol\/tot\/Network#method-emulateNetworkConditions) and [NetworkManager.js](https:\/\/github.com\/ChromeDevTools\/devtools-frontend\/blob\/80c102878fd97a7a696572054007d40560dcdd21\/front_end\/sdk\/NetworkManager.js#L252-L274)\n\n```\nOFFLINE=true npm run test:e2e\n```\n\n`OFFLINE` emulates network disconnection.\n\nSee [Chrome docs: emulateNetworkConditions](https:\/\/chromedevtools.github.io\/devtools-protocol\/tot\/Network#method-emulateNetworkConditions)\n\n### Core block testing\n\nEvery core block is required to have at least one set of fixture files for its main save function and one for each deprecation. These fixtures test the parsing and serialization of the block. See [the integration tests fixtures readme](https:\/\/github.com\/wordpress\/gutenberg\/blob\/HEAD\/test\/integration\/fixtures\/blocks\/README.md) for more information and instructions.\n\n### Flaky tests\n\nA test is considered to be **flaky** when it can pass and fail across multiple retry attempts without any code changes. We auto retry failed tests at most **twice** on CI to detect and report them to GitHub issues automatically under the [`[Type] Flaky Test`](https:\/\/github.com\/WordPress\/gutenberg\/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22%5BType%5D+Flaky+Test%22) label via [`report-flaky-tests`](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/report-flaky-tests) GitHub action. Note that a test that failed three times in a row is not counted as a flaky test and will not be reported to an issue.\n\n## PHP testing\n\nTests for PHP use [PHPUnit](https:\/\/phpunit.de\/) as the testing framework. If you're using the built-in [local environment](\/docs\/contributors\/code\/getting-started-with-code-contribution.md#local-environment), you can run the PHP tests locally using this command:\n\n```bash\nnpm run test:php\n```\n\nTo re-run tests automatically when files change (similar to Jest), run:\n\n```\nnpm run test:php:watch\n```\n\n_Note: The phpunit commands require `wp-env` to be running and composer dependencies to be installed. The package script will start wp-env for you if it is not already running._\n\nIn other environments, run `composer run test` and `composer run test:watch`.\n\nCode style in PHP is enforced using [PHP_CodeSniffer](https:\/\/github.com\/squizlabs\/PHP_CodeSniffer). It is recommended that you install PHP_CodeSniffer and the [WordPress Coding Standards for PHP_CodeSniffer](https:\/\/github.com\/WordPress-Coding-Standards\/WordPress-Coding-Standards#installation) ruleset using [Composer](https:\/\/getcomposer.org\/). With Composer installed, run `composer install` from the project directory to install dependencies. The above `npm run test:php` will execute both unit tests and code linting. Code linting can be verified independently by running `npm run lint:php`.\n\nTo run unit tests only, without the linter, use `npm run test:unit:php` instead.\n\n[snapshot testing]: https:\/\/jestjs.io\/docs\/en\/snapshot-testing.html\n[update snapshots]: https:\/\/jestjs.io\/docs\/en\/snapshot-testing.html#updating-snapshots\n\n## Performance testing\n\nTo ensure that the editor stays performant as we add features, we monitor the impact pull requests and releases can have on some key metrics including:\n\n-   The time it takes to load the editor.\n-   The time it takes for the browser to respond when typing.\n-   The time it takes to select a block.\n\nPerformance tests are end-to-end tests running the editor and capturing these measures. Make sure you have an e2e testing environment ready.\n\nTo set up the e2e testing environment, checkout the Gutenberg repository and switch to the branch that you would like to test. Run the following command to prepare the environment.\n\n```\nnvm use && npm install\nnpm run build:packages\n```\n\nTo run the tests run the following command:\n\n```\nnpm run test:performance\n```\n\nThis gives you the result for the current branch\/code on the running environment.\n\nIn addition to that, you can also compare the metrics across branches (or tags or commits) by running the following command `.\/bin\/plugin\/cli.js perf [branches]`, example:\n\n```\n.\/bin\/plugin\/cli.js perf trunk v8.1.0 v8.0.0\n```\n\nFinally, you can pass an additional `--tests-branch` argument to specify which branch's performance test files you'd like to run. This is particularly useful when modifying\/extending the perf tests:\n\n```\n.\/bin\/plugin\/cli.js perf trunk v8.1.0 v8.0.0 --tests-branch add\/perf-tests-coverage\n```\n\n**Note** This command needs may take some time to perform the benchmark. While running make sure to avoid using your computer or have a lot of background process to minimize external factors that can impact the results across branches.\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/release.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Gutenberg Release Process<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/github.com\/WordPress\/gutenberg\">Gutenberg repository<\/a> on GitHub is used to perform several types of releases. This document serves as a checklist for each of these releases, and it can help you understand the different workflows involved.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before you begin, there are some requirements that must be met in order to successfully release a stable version of the Gutenberg plugin. You will need to:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Be a member of the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/block-editor\/contributors\/repository-management\/#teams\">Gutenberg development team<\/a>. This gives you the ability to launch the GitHub actions that are related to the release process and to backport pull requests (PRs) to the release branch.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Have write permissions on the <a href=\"http:\/\/make.wordpress.org\/core\">Make WordPress Core<\/a> blog. This allows you to draft the release post.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Obtain approval from a member of the Gutenberg Core team in order to upload the new version Gutenberg to the WordPress.org plugin directory.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Similar requirements apply to releasing WordPress's <a href=\"https:\/\/developer.wordpress.org\/block-editor\/contributors\/code\/release\/#packages-releases-to-npm-and-wordpress-core-updates\">npm packages<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Gutenberg plugin releases<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The first step in releasing a stable version of the Gutenberg plugin is to <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\/new?assignees=&amp;labels=&amp;projects=&amp;template=New_release.md\">create an issue<\/a> in the Gutenberg repository. The issue template is called \"Gutenberg Release,\" and it contains a checklist for the complete release process, from release candidate to changelog curation to cherry-picking, stable release, and release post. The issue for <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\/50092\">Gutenberg 15.7<\/a> is a good example.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The checklist helps you coordinate with developers and other teams involved in the release process. It ensures that all of the necessary steps are completed and that everyone is aware of the schedule and important milestones.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Release schedule<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A new major version of Gutenberg is released approximately every two weeks. The current and next versions are tracked in <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/milestones\">GitHub milestones<\/a>, along with the date when each version will be tagged.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>On the date of the current milestone<\/strong>, also called the tagging date, the first release candidate (RC) of Gutenberg is published. This is a pre-release version of the plugin that is made available for testing by plugin authors and users. If any regressions are found, a new RC can be published.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Release candidates are versioned incrementally, starting with <code>-rc.1<\/code>, then <code>-rc.2<\/code>, and so on. As soon as the first RC (RC1) is published, preparation for the release post begins.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>One week after the RC1<\/strong>, the stable version is created based on the last RC and any necessary regression fixes. Once the stable version is released, the release post is published.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If critical bugs are discovered in stable versions of the plugin, patch versions can be released at any time.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Release management<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Each major Gutenberg release is run by a release manager, also known as a release lead. This individual, or small team of individuals, is responsible for the release of Gutenberg with support from the broader <a href=\"https:\/\/developer.wordpress.org\/block-editor\/block-editor\/contributors\/repository-management\/#teams\">Gutenberg development team<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The release manager is responsible for initiating all release activities, and their approval is required for any changes to the release plan. In the event of an emergency or if the release manager is unavailable, other team members may take appropriate action, but they should keep the release manager informed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\nIf you are a member of the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/block-editor\/contributors\/repository-management\/#teams\">Gutenberg development team<\/a> and are interested in leading a Gutenberg release, reach out in the <a href=\"https:\/\/wordpress.slack.com\/messages\/C02QB2JS7\">#core-editor<\/a> Slack channel.<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Preparing a release<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The plugin release process is mostly automated and happens on GitHub. You do not need to run any steps locally on your machine. However, it\u2019s a good idea to have a local copy of Gutenberg for changelog preparation, general testing, and in case multiple release candidates are required. But more on that later.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here is an <a href=\"https:\/\/youtu.be\/TnSgJd3zpJY\">11-minute video<\/a> that demonstrates the plugin release process. If you are unfamiliar with the process, we recommend watching the video first. The process is also documented in the following paragraphs, which provide more detailed instructions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Organizing and labeling milestone PRs<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n    <strong>Quick reference<\/strong>\n    <ul>\n        <li>Ensure all PRs are properly labeled.<\/li>\n        <li>Each PR must have one label prefixed by <code>[Type]<\/code>.<\/li>\n    <\/ul>\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>The first step in preparing a Gutenberg release is to organize all PRs assigned to the current <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/milestones\">milestone<\/a> and ensure that each is properly labeled. <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\">Labels<\/a> are used to automatically generate the changelog, and changing the labels on PRs is much faster than reorganizing an existing changelog in the release section afterward.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To test the changelog automation that will be run as part of the release workflow, you can use the following command in your local copy of Gutenberg using the milestone of the stable release version you are working on:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run other:changelog -- --milestone=\"Gutenberg 16.2\"\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The output of this command is the changelog for the provided milestone, which in the above example is Gutenberg 16.2. You can copy and paste the output into a Markdown document, which will make it easier to view and allow you to follow the links to each PR.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>All PRs should have a label prefixed by <code>[Type]<\/code> as well as labels for sub-categories. The two most common labels are <code>[Type] Bug<\/code> and <code>[Type] Enhancement<\/code>. When reviewing the generated changelog, pay close attention to the following:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Enhancements:<\/strong> Look for PRs that don't have any subcategories attached.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Bug fixes:<\/strong> Also look for PRs that don't have any subcategories attached.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Various:<\/strong> PRs in this section don't have any labels at all.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Update the labels on each PR as needed. You can continue generating the changelog until you are comfortable proceeding. Now you are ready to start the release candidate workflow.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\nYou can see how the changelog is generated from the PR labels in the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/bin\/plugin\/commands\/changelog.js\">changelog.js<\/a> file.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Running the release workflow<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n    <strong>Quick reference<\/strong>\n    <ul>\n        <li>\n            Announce in <a href=\"https:\/\/wordpress.slack.com\/messages\/C02QB2JS7\">#core-editor<\/a> that you are about to start the release workflow.\n        <\/li>\n        <li>\n            Run the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/build-plugin-zip.yml\">Build Gutenberg Plugin Zip<\/a> workflow.\n        <\/li>\n    <\/ul>\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Before you begin, announce in <a href=\"https:\/\/wordpress.slack.com\/messages\/C02QB2JS7\">#core-editor<\/a> Slack channel that you are about to start the workflow and indicate whether you are releasing a stable version of Gutenberg or an RC.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then go to the Gutenberg repository, click on the Actions tab, and then locate the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/build-plugin-zip.yml\">Build Gutenberg Plugin Zip<\/a> action. Note the blue banner that says, \u201cThis workflow has a <code>workflow_dispatch<\/code> event trigger.\u201d Expand the \u201cRun workflow\u201d dropdown on its right-hand side.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/07\/image-3-1.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Run workflow dropdown for the plugin release<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>To release an RC version of the plugin, enter <code>rc <\/code>in the text field. To release a stable version, enter <code>stable<\/code>. In each case, press the button \u201cRun workflow\u201d.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This will trigger a GitHub Actions (GHA) workflow that will bump the plugin version, build the Gutenberg plugin <code>.zip<\/code> file, create a release draft, and attach the plugin <code>.zip<\/code> file. This part of the process typically takes about six minutes. The workflow will appear at the top of the list, right under the blue banner. Once it is finished, the workflow's status icon will change from a yellow dot to a green checkmark. You can follow along for a more detailed view by clicking on the workflow.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Publishing the @wordpress packages to NPM<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As part of the release workflow, all of the @wordpress packages are published to NPM. After the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/build-plugin-zip.yml\">Build Gutenberg Plugin Zip<\/a> action has created the draft release, you may see a message that the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/publish-npm-packages.yml\">Publish npm packages<\/a> action requires someone with appropriate permissions to trigger it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This message is misleading. You do not need to take any action to publish the @wordpress packages to NPM. The process is automated and will automatically run after the release notes are published.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Viewing the release draft<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As soon as the workflow has finished, you\u2019ll find the release draft under <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/releases\">Gutenberg Releases<\/a>. The draft is pre-populated with changelog entries based on previous RCs for this version and any changes that have since been cherry-picked to the release branch. Thus, when releasing the first stable version of a series, delete any RC version headers (that are only there for your information) and move the more recent changes to the correct section (see below).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Curating the release changelog<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The best time to work on the changelog is when it is first created during the release candidate workflow. This is when the changelog automation is called, and the first version of the changelog becomes available. The changelog process is mostly automated, but it depends heavily on the proper labeling of the PRs in the milestone, as mentioned above.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The stable release process takes the changelogs of the RCs and adds them to the stable release. However, there is one important thing to note: the stable release only \"remembers\" the first version of the changelog, which is the version that was available when RC1 was published. Any subsequent changes to the changelog of RC1 will not be included in the stable release.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That means if you curate the whole changelog before you publish RC1, you won\u2019t have to work on it for the stable release, except for the few items of subsequent RC2 or RC3 releases that will also be added to the stable release.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once the release changelog is available in the draft, take some time to read the notes and edit them to make sure they are easy to read and accurate. Don't rush this part. It's important to make sure the release notes are as organized as possible, but you don't have to finish them all at once. You can save the draft and come back to it later.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you're worried that people won't be able to access the release candidate version until you publish the release, you can share the release artifact with the <a href=\"https:\/\/wordpress.slack.com\/messages\/C02QB2JS7\">#core-editor<\/a> Slack channel. This will give people access to the release candidate version while you finish curating the changelog.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here are some additional tips for preparing clear and concise changelogs:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Move all entries under the <code>Various<\/code> section to a more appropriate section.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Fix spelling errors or clarify wording. Phrasing should be easy to understand where the intended audience is those who use the plugin or are keeping up with ongoing development.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create new groupings as applicable, and move pull requests between.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>When multiple PRs relate to the same task (such as a follow-up pull request), try to combine them into a single entry. Good examples for this are PRs around removing Lodash for performance purposes, replacement of Puppeteer E2D tests with Playwright or efforts to convert public components to TypeScript.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If subtasks of a related set of PRs are substantial, consider organizing as entries in a nested list.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Remove PRs that revert other PRs in the same release if the net change in code is zero.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Remove all PRs that only update the mobile app. The only exception to this rule is if the mobile app pull request also updates functionality for the web.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If a subheader only has one PR listed, remove the subheader and move the PR to the next matching subheader with more than one item listed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Creating release candidate patches (cherry-picking)<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n    <strong>Quick reference<\/strong>\n    <ul>\n        <li>Ensure all PRs that need cherry-picking have the <code>Backport to Gutenberg RC<\/code> label.<\/li>\n        <li>In your local clone of the Gutenberg repository, switch to the release branch: <code>git checkout release\/X.Y<\/code><\/li>\n        <li>Cherry-pick all merged PRs using the automated script: <\/code>npm run other:cherry-pick \"Backport to Gutenberg RC\"<\/code><\/li>\n    <\/ul>\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>After an RC is published but before the final stable release, some bugs related to the release might be fixed and committed to <code>trunk<\/code>. The stable release will not automatically include these fixes. Including them is a manual process, which is called cherry-picking.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are a couple of ways you might be made aware of these bugs as a release manager:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Contributors may add the <code>Backport to Gutenberg RC<\/code> label to a closed PR. <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/pulls?q=is%3Apr+label%3A%22Backport+to+Gutenberg+RC%22+is%3Aclosed\">Do a search for any of these PRs<\/a> before publishing the final release.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>You may receive a direct message or a ping in the <a href=\"https:\/\/wordpress.slack.com\/messages\/C02QB2JS7\">#core-editor<\/a> Slack channel notifying you of PRs that need to be included in the RC. Even when this is the case, the <code>Backport to Gutenberg RC<\/code> should always be added to the PR.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Automated cherry-picking<\/h5>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The cherry-picking process can be automated with the <code>npm run other:cherry-pick \"[Insert Label]\"<\/code> script, which is included in Gutenberg. You will need to use the label <code>Backport to Gutenberg RC<\/code> when running the command and ensure all PRs that need cherry-picking have the label assigned.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-warning\">\nTo cherry-pick PRs, you must clone (not fork) the Gutenberg repository and have write access. Only members of the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/block-editor\/contributors\/repository-management\/#teams\">Gutenberg development team<\/a> have the necessary permissions to perform this action.<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Once you have cloned the Gutenberg repository to your local development environment, begin by switching to the release branch:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>git checkout release\/X.Y\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Next, cherry-pick all the merged PRs with the appropriate backport label:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run other:cherry-pick \"Backport to Gutenberg RC\"\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Behind the scenes, the script will:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Cherry-pick all PRs with the label <code>Backport to Gutenberg RC<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Add them to the release milestone<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>git push<\/code> all changes to the release branch<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Add a comment to the PR indicating it\u2019s been cherry-picked<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Remove the label <code>Backport to Gutenberg RC<\/code> from the PR<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Here is a screenshot of the process:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/07\/image-7.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Automated cherry-picking<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Manual cherry-picking<\/h5>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you need to handle cherry-picking one at a time and one step at a time, you can follow this sequence manually. After checking out the corresponding release branch:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Cherry-pick each PR (in chronological order) using <code>git cherry-pick [SHA]<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>When done, push the changes to GitHub using <code>git push<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Remove the <code>Backport to Gutenberg RC<\/code> label and update the milestone to the current release for all cherry-picked PRs.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>To find the <code>[SHA]<\/code> for a pull request, open the PR, and you\u2019ll see a message \u201c<code>[Username]<\/code> merged commit <code>[SHA]<\/code> into <code>trunk<\/code>\u201d near the end.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/07\/image-5.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Manual cherry-picking<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>If the cherry-picked fixes deserve another release candidate before the stable version is published, create one by following the instructions above. Let other contributors know that a new release candidate has been released in the <a href=\"https:\/\/wordpress.slack.com\/messages\/C02QB2JS7\">#core-editor<\/a> Slack channel.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Publishing the release<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n    <strong>Quick reference<\/strong>\n    <ul>\n        <li>In the release draft, press the \u201cPublish release\u201d button.<\/li>\n        <li>If publishing a stable release, get approval from a member of the <a href=\"https:\/\/github.com\/orgs\/WordPress\/teams\/gutenberg-release\">Gutenberg Release<\/a>, <a href=\"https:\/\/github.com\/orgs\/WordPress\/teams\/gutenberg-core\">Gutenberg Core<\/a>, or the <a href=\"https:\/\/github.com\/orgs\/WordPress\/teams\/wordpress-core\">WordPress Core<\/a> teams to upload the new plugin version to the WordPress.org plugin repository (SVN).<\/li>\n        <li>Once uploaded, confirm that the latest version can be downloaded and updated from the WordPress plugin dashboard.<\/li>\n    <\/ul>\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Only once you\u2019re happy with the shape of the changelog in the release draft, press the \u201cPublish release\u201d button.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note that you do not need to change the checkboxes above the button. If you are publishing an RC, the \u201cSet as a pre-release\u201d will automatically be selected, and \u201cSet as the latest release\u201d will be selected if you are publishing the stable version.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/07\/image.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Publishing the release checkboxes for an RC<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Publishing the release will create a <code>git<\/code> tag for the version, publish the release, and trigger <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/upload-release-to-plugin-repo.yml\">another GHA workflow<\/a> with a twofold purpose:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Use the release notes that you just edited to update <code>changelog.txt<\/code>, and<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Upload the new plugin version to the WordPress.org plugin repository (SVN) (only if you\u2019re releasing a stable version).<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The last step needs approval by a member of either the <a href=\"https:\/\/github.com\/orgs\/WordPress\/teams\/gutenberg-release\">Gutenberg Release<\/a>, <a href=\"https:\/\/github.com\/orgs\/WordPress\/teams\/gutenberg-core\">Gutenberg Core<\/a>, or the <a href=\"https:\/\/github.com\/orgs\/WordPress\/teams\/wordpress-core\">WordPress Core<\/a> teams. These teams get a notification email when the release is ready to be approved, but if time is of the essence, you can ask in the #core-editor Slack channel or ping the <a href=\"https:\/\/github.com\/orgs\/WordPress\/teams\/gutenberg-release\">Gutenberg Release team<\/a>) to accelerate the process. Reaching out before launching the release process so that somebody is ready to approve is recommended. Locate the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/upload-release-to-plugin-repo.yml\">\u201cUpload Gutenberg plugin to WordPress.org plugin repo\u201d workflow<\/a> for the new version, and have it <a href=\"https:\/\/docs.github.com\/en\/actions\/managing-workflow-runs\/reviewing-deployments#approving-or-rejecting-a-job\">approved<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once approved, the new Gutenberg version will be available to WordPress users all over the globe. Once uploaded, confirm that the latest version can be downloaded and updated from the WordPress plugin dashboard.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The final step is to write a release post on <a href=\"https:\/\/make.wordpress.org\/core\/\">make.wordpress.org\/core<\/a>. You can find some tips on that below.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Troubleshooting the release<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>The plugin was published to the WordPress.org plugin directory but the workflow failed.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>This has happened ocassionally, see <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions\/runs\/6955409957\/job\/18924124118\">this one<\/a> for example.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's important to check that:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>the plugin from the directory works as expected<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>the ZIP contents (see <a href=\"https:\/\/plugins.trac.wordpress.org\/browser\/gutenberg\/\">Downloads<\/a>) looks correct (doesn't have anything obvious missing)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>the <a href=\"https:\/\/plugins.trac.wordpress.org\/browser\/gutenberg\/\">Gutenberg SVN repo<\/a> has two new commits (see <a href=\"https:\/\/plugins.trac.wordpress.org\/browser\/gutenberg\/\">the log<\/a>):<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>the <code>trunk<\/code> folder should have \"Commiting version X.Y.Z\"<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>there is a new <code>tags\/X.Y.Z<\/code> folder with the same contents as <code>trunk<\/code> whose latest commit is \"Tagging version X.Y.Z\"<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Most likely, the tag folder couldn't be created. This is a <a href=\"https:\/\/plugins.trac.wordpress.org\/browser\/gutenberg\/\">known issue<\/a> that <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\/55295#issuecomment-1759292978\">can be fixed manually<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Either substitute SVN_USERNAME, SVN_PASSWORD, and VERSION for the proper values or set them as global environment variables first:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># CHECKOUT THE REPOSITORY\nsvn checkout https:\/\/plugins.svn.wordpress.org\/gutenberg\/trunk --username \"$SVN_USERNAME\" --password \"$SVN_PASSWORD\" gutenberg-svn\n\n# MOVE TO THE LOCAL FOLDER\ncd gutenberg-svn\n\n# IF YOU HAPPEN TO HAVE ALREADY THE REPO LOCALLY\n# AND DIDN'T CHECKOUT, MAKE SURE IT IS UPDATED\n# svn up .\n\n# COPY CURRENT TRUNK INTO THE NEW TAGS FOLDER\nsvn copy https:\/\/plugins.svn.wordpress.org\/gutenberg\/trunk https:\/\/plugins.svn.wordpress.org\/gutenberg\/tags\/$VERSION -m 'Tagging version $VERSION' --no-auth-cache --non-interactive  --username \"$SVN_USERNAME\" --password \"$SVN_PASSWORD\"\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Ask around if you need help with any of this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Documenting the release<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Documenting the release is led by the release manager with the help of <a href=\"https:\/\/developer.wordpress.org\/block-editor\/block-editor\/contributors\/repository-management\/#teams\">Gutenberg development team<\/a> members. This process is comprised of a series of sequential steps that, because of the number of people involved, and the coordination required, need to adhere to a timeline between the RC and stable releases. Stable Gutenberg releases happen on Wednesdays, one week after the initial RC.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n    <strong>Timeline<\/strong>\n    <ol>\n        <li>Make a copy of the <a href=\"https:\/\/docs.google.com\/document\/d\/1D-MTOCmL9eMlP9TDTXqlzuKVOg_ghCPm9_whHFViqMk\/edit\">Google Doc Template for release posts<\/a> \u2013 Wednesday to Friday<\/li>\n        <li>Select the release highlights \u2013 Friday to Monday<\/li>\n        <li>Request release assets (images, videos) from the Design team once highlights are finalized \u2013\u00a0Friday to Monday<\/li>\n        <li>Draft the release post and request peer review \u2013 Monday to Wednesday<\/li>\n        <li>Publishing the post after the stable version is released \u2013 Wednesday<\/li>\n    <\/ol>\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Selecting the release highlights<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once the changelog is cleaned up, the next step is to choose a few changes to highlight in the release post. These highlights usually focus on new features and enhancements, including performance and accessibility ones, but can also include important API changes or critical bug fixes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Given the big scope of Gutenberg and the high number of PRs merged in each milestone, it is not uncommon to overlook impactful changes worth highlighting; because of this, this step is a collaborative effort between the release manager and other Gutenberg development team members. If you don\u2019t know what to pick, reach out to others on the team for assistance.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Requesting release assets<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>After identifying the highlights of a new WordPress release, the release manager requests visual assets from the Design team. The request is made in the <a href=\"https:\/\/wordpress.slack.com\/archives\/C02S78ZAL\">#design<\/a> Slack channel, and an example post for 15.8 can be found <a href=\"https:\/\/wordpress.slack.com\/archives\/C02S78ZAL\/p1684161811926279\">here<\/a>. The assets will be provided in a <a href=\"https:\/\/drive.google.com\/drive\/folders\/1U8bVbjOc0MekWjpMjNaVFVhHFEzQkYLB\">Google Drive folder<\/a> assigned to the specific release.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When creating visual assets for a WordPress release, use animations (video or GIF) or static images to showcase the highlights. Use <a href=\"https:\/\/make.wordpress.org\/core\/tag\/gutenberg-new\/\">previous release posts<\/a> as a guide, and keep in mind that animations are better for demonstrating workflows, while more direct highlights can be shown with an image. When creating assets, avoid using copyrighted material and disable browser plugins that can be seen in the browser canvas.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Drafting the release post<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The release manager is responsible for drafting the release post based on the <a href=\"https:\/\/docs.google.com\/document\/d\/1D-MTOCmL9eMlP9TDTXqlzuKVOg_ghCPm9_whHFViqMk\/edit\">Google Doc Template<\/a>. That said, because of the nature of the release post content, responsibilities can be divided up and delegated to other team members if agreed upon in advance. Once the draft is complete, ask for peer review.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Publishing the release post<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once the post content is ready, an author with permission to post on <a href=\"https:\/\/make.wordpress.org\/core\/\">make.wordpress.org\/core<\/a> will create a new draft and import the content. The post should include the following tags:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/make.wordpress.org\/core\/tag\/block-editor\/\">#block-editor<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/make.wordpress.org\/core\/tag\/core-editor\/\">#core-editor<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/make.wordpress.org\/core\/tag\/gutenberg\/\">#gutenberg<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/make.wordpress.org\/core\/tag\/gutenberg-new\/\">#gutenberg-new<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The author should then enable public preview on the post and ask for a final peer review. This is encouraged by the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/post-comment-guidelines\/#peer-review\">make\/core posting guidelines<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally, the post should be published after the stable version is released and is available on WordPress.org. This will help external media to echo and amplify the release.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Creating minor releases<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Occasionally it's necessary to create a minor release (i.e. X.Y.<strong>Z<\/strong>) of the Plugin. This is usually done to expedite fixes for bad regressions or bugs. The <code>Backport to Gutenberg Minor Release<\/code> is usually used to identify PRs that need to be included in a minor release, but as release coordinator you may also be notified more informally through slack. Even so, it's good to ensure all relevant PRs have the correct label.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As you proceed with the following process, it's worth bearing in mind that such minor releases are not created as branches in their own right (e.g. <code>release\/12.5.0<\/code>) but are simply <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/releases\/tag\/v12.5.1\">tags<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The method for minor releases is nearly identical to the main Plugin release process (see above) but has some notable exceptions. Please make sure to read <em>the entire<\/em> guide before proceeding.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Updating the release branch<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The minor release should only contain the <em>specific commits<\/em> required. To do this you should checkout the previous <em>major<\/em> stable (i.e. non-RC) release branch (e.g. <code>release\/12.5<\/code>) locally and then cherry pick any commits that you require into that branch.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-alert\">\nIf an RC already exists for a new version, you _need_ to cherry-pick the same commits in the respective release branch, as they will not be included automatically. E.g.: If you're about to release a new minor release for 12.5 and just cherry-picked into `release\/12.5`, but 12.6.0-rc.1 is already out, then you need to cherry-pick the same commits into the `release\/12.6` branch, or they won't be included in subsequent releases for 12.6! Usually it's best to coordinate this process with the release coordinator for the next release.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>The cherry-picking process can be automated with the <a href=\"\/docs\/contributors\/code\/auto-cherry-picking.md\"><code>npm run cherry-pick<\/code><\/a> script, but be sure to use the <code>Backport to Gutenberg Minor Release<\/code> label when running the script.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You must also ensure that all PRs being included are assigned to the Github Milestone on which the minor release is based. Bear in mind, that when PRs are <em>merged<\/em> they are automatically assigned a milestone for the next <em>stable<\/em> release. Therefore you will need to go back through each PR in Github and re-assign the Milestone.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, if you are releasing version <code>12.5.4<\/code>, then all PRs picked for that release must be unassigned from the <code>12.6<\/code> Milestone and instead assigned to the <code>12.5<\/code> Milestone.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once cherry picking is complete, you can also remove the <code>Backport to Gutenberg Minor Release<\/code> label from the PRs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once you have the stable release branch in order and the correct Milestone assigned to your PRs you can <em>push the branch to Github<\/em> and continue with the release process using the Github website GUI.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Running the minor release<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/07\/image-1.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Run workflow dropdown for the plugin release<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Go to Gutenberg's GitHub repository's Actions tab, and locate the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/build-plugin-zip.yml\">\"Build Gutenberg Plugin Zip\" action<\/a>. You should now <em>carefully<\/em> choose the next action based on information about the current Plugin release version:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>If<\/em> the previous release version was <strong>stable<\/strong> (<code>X.Y.Z<\/code> - e.g. <code>12.5.0<\/code>, <code>12.5.1<\/code> .etc) leave the <code>Use workflow from<\/code> field as <code>trunk<\/code> and then specify <code>stable<\/code> in the text input field. The workflow will automatically create a minor release, with z incremented (<code>x.y.(z+1)<\/code>) as required.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>If<\/em> however, the previous release was an <strong>RC<\/strong> (e.g. <code>X.Y.0-rc.1<\/code>) you will need to <em>manually<\/em> select the <em>stable version's release branch<\/em> (e.g. <code>12.5.0<\/code>) when creating the release. Failure to do this will cause the workflow to release the next major <em>stable<\/em> version (e.g. <code>12.6.0<\/code>) which is not what you want.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To do this, when running the Workflow, select the appropriate <code>release\/<\/code> branch from the <code>Use workflow from<\/code> dropdown (e.g. <code>release\/12.5<\/code>) and specify <code>stable<\/code> in the text input field.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Creating a minor release for previous stable releases<\/h5>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It is possible to create a minor release for any release branch even after a more recent stable release has been published. This can be done for <em>any<\/em> previous release branches, allowing more flexibility in delivering updates to users. In the past, users had to wait for the next stable release, potentially taking days. Now, fixes can be swiftly shipped to any previous release branches as required.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The process is identical to the one documented above when an RC is already out: choose a previous release branch, type <code>stable<\/code>, and click \"Run workflow\". The release will be published on the GitHub releases page for Gutenberg and to the WordPress core repository SVN as a <code>tag<\/code> under http:\/\/plugins.svn.wordpress.org\/gutenberg\/tags\/. The SVN <code>trunk<\/code> directory will not be touched.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>IMPORTANT:<\/strong> When publishing the draft created by the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/build-plugin-zip.yml\">\"Build Plugin Zip\" workflow<\/a>, make sure to leave the \"Set as last release\" checkbox unchecked. If it is left checked by accident, the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/upload-release-to-plugin-repo.yml\">\"Upload Gutenberg plugin to WordPress.org plugin\" workflow<\/a> will still correctly upload it <strong>as a tag (and will <em>not<\/em> replace the <code>trunk<\/code> version)<\/strong> to the WordPress plugin repository SVN - the workflow will perform some version arithmetic to determine how the plugin should be shipped - but you'll still need to fix the state on GitHub by setting the right release as <code>latest<\/code> on the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/releases\/\">releases<\/a> page!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Troubleshooting<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>The release draft was created but it was empty\/contained an error message<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>If you forget to assign the correct Milestone to your cherry picked PR(s) then the changelog may not be generated as you would expect.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It is important to always manually verify that the PRs shown in the changelog match up with those cherry picked to the release branch.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Moreover, if the release includes only a single PR, then failing to assign the PR to the correct Milestone will cause an error to be displayed when generating the changelog. In this case you can edit the release notes to include details of the missing PR (manually copying the format from a previous release).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If for any reason the Milestone has been closed, you may reopen it for the purposes of the release.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>The draft release only contains 1 asset file. Other releases have x3.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>This is expected. The draft release will contain only the plugin zip. Only once the release is published will the remaining assets be generated and added to the release.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Do I need to publish point releases to WordPress.org?<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Yes. The method for this is identical to the main Plugin release process. You will need a member of the Gutenberg Core team the Gutenberg Release team to approve the release workflow.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>The release process failed to cherry-pick version bump commit to the trunk branch.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>First, confirm that the step failed by checking the latest commits on <code>trunk<\/code> do not include the version bump commit. Then revert the version bump commit on the release branch - <code>git revert --no-edit {commitHash}<\/code>. Finally, push the changes and start the release process again.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Packages releases to NPM and WordPress Core updates<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Gutenberg repository follows the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/about\/release-cycle\/\">WordPress SVN repository's<\/a> branching strategy for every major WordPress release. In addition to that, it also contains two other special branches that control npm publishing workflows:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The <code>wp\/latest<\/code> branch contains the same version of packages as those published to npm with the <code>latest<\/code> distribution tag. The goal here is to have this branch synchronized with the last Gutenberg plugin release, and the only exception would be an unplanned <a href=\"#standalone-bugfix-package-releases\">bugfix release<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The <code>wp\/next<\/code> branch contains the same version of packages as those published to npm with the <code>next<\/code> distribution tag. It always gets synchronized with the <code>trunk<\/code> branch. Projects should use those packages for development or testing purposes only.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>A Gutenberg branch <code>wp\/X.Y<\/code> (example <code>wp\/6.2<\/code>) targeting a specific WordPress major release (including its further minor increments) gets created based on the current Gutenberg plugin release branch <code>release\/X.Y<\/code> (example <code>release\/15.1<\/code>) shortly after the last release planned for inclusion in the next major WordPress release.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Release types and their schedule:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"#synchronizing-gutenberg-plugin\">Synchronizing Gutenberg Plugin<\/a> (<code>latest<\/code> dist tag) \u2013 publishing happens automatically every two weeks based on the newly created <code>release\/X.Y<\/code> (example <code>release\/12.8<\/code>) branch with the RC1 version of the Gutenberg plugin.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#wordpress-releases\">WordPress Releases<\/a> (<code>wp-X.Y<\/code> dist tag, example <code>wp-6.2<\/code>) \u2013 publishing gets triggered on demand from the <code>wp\/X.Y<\/code> (example <code>wp\/6.2<\/code>) branch. Once we reach the point in the WordPress major release cycle (shortly before Beta 1) where we only cherry-pick commits from the Gutenberg repository to the WordPress core, we use <code>wp\/X.Y<\/code> branch (created from <code>release\/X.Y<\/code> branch, example <code>release\/15.1<\/code>) for npm publishing with the <code>wp-X.Y<\/code> dist-tag. It's also possible to use older branches to backport bug or security fixes to the corresponding older versions of WordPress Core.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#development-releases\">Development Releases<\/a> (<code>next<\/code> dist tag) \u2013 it is also possible to perform development releases at any time when there is a need to test the upcoming changes.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>There is also an option to perform <a href=\"#standalone-bugfix-package-releases\">Standalone Bugfix Package Releases<\/a> at will. It should be reserved only for critical bug fixes or security releases that must be published to <em>npm<\/em> outside of regular cycles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Synchronizing the Gutenberg plugin<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For each Gutenberg plugin release, we also publish to npm an updated version of WordPress packages. This is automated with the <a href=\"#release-tool\">Release Tool<\/a> that handles releases for the Gutenberg plugin. A successful RC1 release triggers the npm publishing job, and this needs to be approved by a Gutenberg Core team member. Locate the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/build-plugin-zip.yml\">\"Build Gutenberg Plugin Zip\" workflow<\/a> for the new version, and have it <a href=\"https:\/\/docs.github.com\/en\/actions\/managing-workflow-runs\/reviewing-deployments#approving-or-rejecting-a-job\">approved<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We deliberately update the <code>wp\/latest<\/code> branch within the Gutenberg repo with the content from the Gutenberg release <code>release\/X.Y<\/code> (example <code>release\/12.7<\/code>) branch at the time of the Gutenberg RC1 release. This is done to ensure that the <code>wp\/latest<\/code> branch is as close as possible to the latest version of the Gutenberg plugin. It also practically removes the chances of conflicts while backporting to <code>trunk<\/code> commits with updates applied during publishing to <code>package.json<\/code> and <code>CHANGELOG.md<\/code> files. In the past, we had many issues in that aspect when doing npm publishing after the regular Gutenberg release a week later. When publishing the new package versions to npm, we pick at least the <code>minor<\/code> version bump to account for future bugfix or security releases.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Behind the scenes, all steps are automated via <code>.\/bin\/plugin\/cli.js npm-latest<\/code> command. For the record, the manual process would look very close to the following steps:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Ensure the WordPress <code>trunk<\/code> branch is open for enhancements.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Get the last published Gutenberg release branch with <code>git fetch<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Check out the <code>wp\/latest<\/code> branch.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Remove all files from the current branch: <code>git rm -r .<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Check out all the files from the release branch: <code>git checkout release\/x.x -- .<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Commit all changes to the <code>wp\/latest<\/code> branch with <code>git commit -m \"Merge changes published in the Gutenberg plugin vX.X release\"<\/code> and push to the repository.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Update the <code>CHANGELOG.md<\/code> files of the packages with the new publish version calculated and commit to the <code>wp\/latest<\/code> branch. Assuming the package versions are written using this format <code>major.minor.patch<\/code>, make sure to bump at least the <code>minor<\/code> version bumps gets applied. For example, if the CHANGELOG of the package to be released indicates that the next unreleased version is <code>5.6.1<\/code>, choose <code>5.7.0<\/code> as a version in case of <code>minor<\/code> version. This is important as the patch version numbers should be reserved in case bug fixes are needed for a minor WordPress release (see below).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Log-in to npm via the console: <code>npm login<\/code>. Note that you should have 2FA enabled.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>From the <code>wp\/latest<\/code> branch, install npm dependencies with <code>npm ci<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Run the script <code>npx lerna publish --no-private<\/code>.<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>When asked for the version numbers to choose for each package pick the values of the updated CHANGELOG files.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>You'll be asked for your One-Time Password (OTP) a couple of times. This is the code from the 2FA authenticator app you use. Depending on how many packages are to be released you may be asked for more than one OTP, as they tend to expire before all packages are released.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If the publishing process ends up incomplete (perhaps because it timed-out or an bad OTP was introduce) you can resume it via <a href=\"https:\/\/lerna.js.org\/docs\/features\/version-and-publish#from-package\"><code>npx lerna publish from-package<\/code><\/a>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Finally, now that the npm packages are published, cherry-pick the commits created by lerna (\"Publish\" and the CHANGELOG update) into the <code>trunk<\/code> branch of Gutenberg.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">WordPress releases<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The following workflow is needed when bug or security fixes need to be backported into WordPress Core. This can happen in a few use-cases:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>During the <code>beta<\/code> and <code>RC<\/code> periods of the WordPress release cycle when <code>wp\/X.Y<\/code> (example <code>wp\/5.7<\/code>) branch for the release is already present.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>For WordPress minor releases and WordPress security releases (example <code>5.1.1<\/code>).<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Check out the relevant WordPress major branch (If the minor release is 5.2.1, check out <code>wp\/5.2<\/code>).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create a feature branch from that branch, and cherry-pick the merge commits for the needed bug fixes onto it. The cherry-picking process can be automated with the <a href=\"\/docs\/contributors\/code\/auto-cherry-picking.md\"><code>npm run other:cherry-pick<\/code> script<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create a Pull Request from this branch targeting the WordPress major branch used above.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Merge the Pull Request using the \"Rebase and Merge\" button to keep the history of the commits.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Now, the <code>wp\/X.Y<\/code> branch is ready for publishing npm packages. In order to start the process, go to Gutenberg's GitHub repository's Actions tab, and locate the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/publish-npm-packages.yml\">\"Publish npm packages\" action<\/a>. Note the blue banner that says \"This workflow has a <code>workflow_dispatch<\/code> event trigger.\", and expand the \"Run workflow\" dropdown on its right hand side.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/07\/image-2.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Run workflow dropdown for npm publishing<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>To publish packages to npm for the WordPress major release, select <code>trunk<\/code> as the branch to run the workflow from (this means that the script used to run the workflow comes from the trunk branch, though the packages themselves will published from the release branch as long as the correct \"Release type\" is selected below), then select <code>wp<\/code> from the \"Release type\" dropdown and enter <code>X.Y<\/code> (example <code>5.2<\/code>) in the \"WordPress major release\" input field. Finally, press the green \"Run workflow\" button. It triggers the npm publishing job, and this needs to be approved by a Gutenberg Core team member. Locate the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/publish-npm-packages.yml\">\"Publish npm packages\" action<\/a> for the current publishing, and have it <a href=\"https:\/\/docs.github.com\/en\/actions\/managing-workflow-runs\/reviewing-deployments#approving-or-rejecting-a-job\">approved<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For the record, the manual process would look like the following:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Check out the WordPress branch used before (example <code>wp\/5.2<\/code>).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>git pull<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Run the <code>npx lerna publish patch --no-private --dist-tag wp-5.2<\/code> command (see more in <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/README.md#releasing-packages\">package release process<\/a>) but when asked for the version numbers to choose for each package, (assuming the package versions are written using this format <code>major.minor.patch<\/code>) make sure to bump only the <code>patch<\/code> version number. For example, if the last published package version for this WordPress branch was <code>5.6.0<\/code>, choose <code>5.6.1<\/code> as a version.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:<\/strong> For WordPress <code>5.0<\/code> and WordPress <code>5.1<\/code>, a different release process was used. This means that when choosing npm package versions targeting these two releases, you won't be able to use the next <code>patch<\/code> version number as it may have been already used. You should use the \"metadata\" modifier for these. For example, if the last published package version for this WordPress branch was <code>5.6.1<\/code>, choose <code>5.6.1+patch.1<\/code> as a version.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true,\"start\":3} -->\n<ol start=\"3\" class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Optionally update the <code>CHANGELOG.md<\/code> files of the published packages with the new released versions and commit to the corresponding branch (Example <code>wp\/5.2<\/code>).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Cherry-pick the CHANGELOG update commits, if any, into the <code>trunk<\/code> branch of Gutenberg.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Now, the npm packages should be ready and a patch can be created and committed into the corresponding WordPress SVN branch.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Standalone bugfix package releases<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The following workflow is needed when packages require bug fixes or security releases to be published to <em>npm<\/em> outside of a regular release cycle.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note: Both the <code>trunk<\/code> and <code>wp\/latest<\/code> branches are restricted and can only be <em>pushed<\/em> to by the Gutenberg Core team.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Identify the commit hashes from the pull requests that need to be ported from the repo <code>trunk<\/code> branch to <code>wp\/latest<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>wp\/latest<\/code> branch now needs to be prepared to release and publish the packages to <em>npm<\/em>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Open a terminal and perform the following steps:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>git checkout trunk<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>git pull<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>git checkout wp\/latest<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>git pull<\/code><\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Before porting commits check that the <code>wp\/latest<\/code> branch does not have any outstanding packages waiting to be published:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>git checkout wp\/latest<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>npx lerna updated<\/code><\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Now <em>cherry-pick<\/em> the commits from <code>trunk<\/code> to <code>wp\/latest<\/code>, use <code>-m 1 commithash<\/code> if the commit was a pull request merge commit:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>git cherry-pick -m 1 cb150a2<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>git push<\/code><\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Whilst waiting for the GitHub actions build for <code>wp\/latest<\/code><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions?query=branch%3Awp%2Ftrunk\">branch to pass<\/a>, identify and begin updating the <code>CHANGELOG.md<\/code> files:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>git checkout wp\/latest<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>npx lerna updated<\/code><\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Check the versions listed in the current <code>CHANGELOG.md<\/code> file, looking through the commit history of a package e.g <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/commits\/HEAD\/packages\/scripts\">@wordpress\/scripts<\/a> and look out for <em>\"chore(release): publish\"<\/em> and <em>\"Update changelogs\"<\/em> commits to determine recent version bumps, then looking at the commits since the most recent release should aid with discovering what changes have occurred since the last release.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note: You may discover the current version of each package is not up to date, if so updating the previously released versions would be appreciated.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, the <code>wp\/latest<\/code> branch is ready for publishing npm packages. In order to start the process, go to Gutenberg's GitHub repository's Actions tab, and locate the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/publish-npm-packages.yml\">\"Publish npm packages\" action<\/a>. Note the blue banner that says \"This workflow has a <code>workflow_dispatch<\/code> event trigger.\", and expand the \"Run workflow\" dropdown on its right hand side.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/07\/image-6.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Run workflow dropdown for npm publishing<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>To publish packages to npm with bugfixes, select <code>bugfix<\/code> from the \"Release type\" dropdown and leave empty \"WordPress major release\" input field. Finally, press the green \"Run workflow\" button. It triggers the npm publishing job, and this needs to be approved by a Gutenberg Core team member. Locate the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/publish-npm-packages.yml\">\"Publish npm packages\" action<\/a> for the current publishing, and have it <a href=\"https:\/\/docs.github.com\/en\/actions\/managing-workflow-runs\/reviewing-deployments#approving-or-rejecting-a-job\">approved<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Behind the scenes, the rest of the process is automated with <code>.\/bin\/plugin\/cli.js npm-bugfix<\/code> command. For the record, the manual process would look very close to the following steps:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Check out the <code>wp\/latest<\/code> branch.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Update the <code>CHANGELOG.md<\/code> files of the packages with the new publish version calculated and commit to the <code>wp\/latest<\/code> branch.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Log-in to npm via the console: <code>npm login<\/code>. Note that you should have 2FA enabled.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>From the <code>wp\/latest<\/code> branch, install npm dependencies with <code>npm ci<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Run the script <code>npx lerna publish --no-private<\/code>.<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>When asked for the version numbers to choose for each package pick the values of the updated CHANGELOG files.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>You'll be asked for your One-Time Password (OTP) a couple of times. This is the code from the 2FA authenticator app you use. Depending on how many packages are to be released you may be asked for more than one OTP, as they tend to expire before all packages are released.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If the publishing process ends up incomplete (perhaps because it timed-out or an bad OTP was introduce) you can resume it via <a href=\"https:\/\/lerna.js.org\/docs\/features\/version-and-publish#from-package\"><code>npx lerna publish from-package<\/code><\/a>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Finally, now that the npm packages are published, cherry-pick the commits created by lerna (\"Publish\" and the CHANGELOG update) into the <code>trunk<\/code> branch of Gutenberg.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Development releases<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As noted in the <a href=\"#synchronizing-gutenberg-plugin\">Synchronizing Gutenberg Plugin<\/a> section, packages publishing happens every two weeks from the <code>wp\/latest<\/code> branch. It's also possible to use the development release to test the upcoming changes present in the <code>trunk<\/code> branch at any time. We are taking advantage of <a href=\"https:\/\/docs.npmjs.com\/cli\/v7\/commands\/npm-dist-tag\">package distribution tags<\/a> that make it possible to consume the future version of the codebase according to npm guidelines:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>By default, the <code>latest<\/code> tag is used by npm to identify the current version of a package, and <code>npm install &lt;pkg><\/code> (without any <code>@&lt;version><\/code> or <code>@&lt;tag><\/code> specifier) installs the <code>latest<\/code> tag. Typically, projects only use the <code>latest<\/code> tag for stable release versions, and use other tags for unstable versions such as prereleases.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>In our case, we use the <code>next<\/code> distribution tag for code. Developers that want to install such a version of the package need to type:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm install @wordpress\/components@next\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In order to start the publishing process for development version of npm packages, go to Gutenberg's GitHub repository's Actions tab, and locate the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/publish-npm-packages.yml\">\"Publish npm packages\" action<\/a>. Note the blue banner that says \"This workflow has a <code>workflow_dispatch<\/code> event trigger.\", and expand the \"Run workflow\" dropdown on its right hand side.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/07\/image-4.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Run workflow dropdown for npm publishing<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>To publish development packages to npm, select <code>development<\/code> from the \"Release type\" dropdown and leave empty \"WordPress major release\" input field. Finally, press the green \"Run workflow\" button. It triggers the npm publishing job, and this needs to be approved by a Gutenberg Core team member. Locate the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/publish-npm-packages.yml\">\"Publish npm packages\" action<\/a> for the current publishing, and have it <a href=\"https:\/\/docs.github.com\/en\/actions\/managing-workflow-runs\/reviewing-deployments#approving-or-rejecting-a-job\">approved<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Behind the scenes, the release process is fully automated via <code>.\/bin\/plugin\/cli.js npm-next<\/code> command. It ensures<br>the <code>wp\/next<\/code> branch is synchronized with the latest release branch (<code>release\/X.Y<\/code>) created for the Gutenberg plugin. To avoid collisions in the versioning of packages, we always include the newest commit's <code>sha<\/code>, for example, <code>@wordpress\/block-editor@5.2.10-next.645224df70.0<\/code>.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Gutenberg Release Process\n\nThe [Gutenberg repository](https:\/\/github.com\/WordPress\/gutenberg) on GitHub is used to perform several types of releases. This document serves as a checklist for each of these releases, and it can help you understand the different workflows involved.\n\nBefore you begin, there are some requirements that must be met in order to successfully release a stable version of the Gutenberg plugin. You will need to:\n\n-   Be a member of the [Gutenberg development team](https:\/\/developer.wordpress.org\/block-editor\/block-editor\/contributors\/repository-management\/#teams). This gives you the ability to launch the GitHub actions that are related to the release process and to backport pull requests (PRs) to the release branch.\n-   Have write permissions on the [Make WordPress Core](http:\/\/make.wordpress.org\/core) blog. This allows you to draft the release post.\n-   Obtain approval from a member of the Gutenberg Core team in order to upload the new version Gutenberg to the WordPress.org plugin directory.\n\nSimilar requirements apply to releasing WordPress's [npm packages](https:\/\/developer.wordpress.org\/block-editor\/contributors\/code\/release\/#packages-releases-to-npm-and-wordpress-core-updates).\n\n## Gutenberg plugin releases\n\nThe first step in releasing a stable version of the Gutenberg plugin is to [create an issue](https:\/\/github.com\/WordPress\/gutenberg\/issues\/new?assignees=&labels=&projects=&template=New_release.md) in the Gutenberg repository. The issue template is called \"Gutenberg Release,\" and it contains a checklist for the complete release process, from release candidate to changelog curation to cherry-picking, stable release, and release post. The issue for [Gutenberg 15.7](https:\/\/github.com\/WordPress\/gutenberg\/issues\/50092) is a good example.\n\nThe checklist helps you coordinate with developers and other teams involved in the release process. It ensures that all of the necessary steps are completed and that everyone is aware of the schedule and important milestones.\n\n### Release schedule\n\nA new major version of Gutenberg is released approximately every two weeks. The current and next versions are tracked in [GitHub milestones](https:\/\/github.com\/WordPress\/gutenberg\/milestones), along with the date when each version will be tagged.\n\n**On the date of the current milestone**, also called the tagging date, the first release candidate (RC) of Gutenberg is published. This is a pre-release version of the plugin that is made available for testing by plugin authors and users. If any regressions are found, a new RC can be published.\n\nRelease candidates are versioned incrementally, starting with `-rc.1`, then `-rc.2`, and so on. As soon as the first RC (RC1) is published, preparation for the release post begins.\n\n**One week after the RC1**, the stable version is created based on the last RC and any necessary regression fixes. Once the stable version is released, the release post is published.\n\nIf critical bugs are discovered in stable versions of the plugin, patch versions can be released at any time.\n\n### Release management\n\nEach major Gutenberg release is run by a release manager, also known as a release lead. This individual, or small team of individuals, is responsible for the release of Gutenberg with support from the broader [Gutenberg development team](https:\/\/developer.wordpress.org\/block-editor\/block-editor\/contributors\/repository-management\/#teams).\n\nThe release manager is responsible for initiating all release activities, and their approval is required for any changes to the release plan. In the event of an emergency or if the release manager is unavailable, other team members may take appropriate action, but they should keep the release manager informed.\n\n<div class=\"callout callout-tip\">\nIf you are a member of the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/block-editor\/contributors\/repository-management\/#teams\">Gutenberg development team<\/a> and are interested in leading a Gutenberg release, reach out in the <a href=\"https:\/\/wordpress.slack.com\/messages\/C02QB2JS7\">#core-editor<\/a> Slack channel.<\/div>\n\n### Preparing a release\n\nThe plugin release process is mostly automated and happens on GitHub. You do not need to run any steps locally on your machine. However, it\u2019s a good idea to have a local copy of Gutenberg for changelog preparation, general testing, and in case multiple release candidates are required. But more on that later.\n\nHere is an [11-minute video](https:\/\/youtu.be\/TnSgJd3zpJY) that demonstrates the plugin release process. If you are unfamiliar with the process, we recommend watching the video first. The process is also documented in the following paragraphs, which provide more detailed instructions.\n\n#### Organizing and labeling milestone PRs\n\n<div class=\"callout callout-info\">\n    <strong>Quick reference<\/strong>\n    <ul>\n        <li>Ensure all PRs are properly labeled.<\/li>\n        <li>Each PR must have one label prefixed by <code>[Type]<\/code>.<\/li>\n    <\/ul>\n<\/div>\n\nThe first step in preparing a Gutenberg release is to organize all PRs assigned to the current [milestone](https:\/\/github.com\/WordPress\/gutenberg\/milestones) and ensure that each is properly labeled. [Labels](https:\/\/github.com\/WordPress\/gutenberg\/labels) are used to automatically generate the changelog, and changing the labels on PRs is much faster than reorganizing an existing changelog in the release section afterward.\n\nTo test the changelog automation that will be run as part of the release workflow, you can use the following command in your local copy of Gutenberg using the milestone of the stable release version you are working on:\n\n```\nnpm run other:changelog -- --milestone=\"Gutenberg 16.2\"\n```\n\nThe output of this command is the changelog for the provided milestone, which in the above example is Gutenberg 16.2. You can copy and paste the output into a Markdown document, which will make it easier to view and allow you to follow the links to each PR.\n\nAll PRs should have a label prefixed by `[Type]` as well as labels for sub-categories. The two most common labels are `[Type] Bug` and `[Type] Enhancement`. When reviewing the generated changelog, pay close attention to the following:\n\n-   **Enhancements:** Look for PRs that don't have any subcategories attached.\n-   **Bug fixes:** Also look for PRs that don't have any subcategories attached.\n-   **Various:** PRs in this section don't have any labels at all.\n\nUpdate the labels on each PR as needed. You can continue generating the changelog until you are comfortable proceeding. Now you are ready to start the release candidate workflow.\n\n<div class=\"callout callout-tip\">\nYou can see how the changelog is generated from the PR labels in the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/bin\/plugin\/commands\/changelog.js\">changelog.js<\/a> file.\n<\/div>\n\n#### Running the release workflow\n\n<div class=\"callout callout-info\">\n    <strong>Quick reference<\/strong>\n    <ul>\n        <li>\n            Announce in <a href=\"https:\/\/wordpress.slack.com\/messages\/C02QB2JS7\">#core-editor<\/a> that you are about to start the release workflow.\n        <\/li>\n        <li>\n            Run the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/build-plugin-zip.yml\">Build Gutenberg Plugin Zip<\/a> workflow.\n        <\/li>\n    <\/ul>\n<\/div>\n\nBefore you begin, announce in [#core-editor](https:\/\/wordpress.slack.com\/messages\/C02QB2JS7) Slack channel that you are about to start the workflow and indicate whether you are releasing a stable version of Gutenberg or an RC.\n\nThen go to the Gutenberg repository, click on the Actions tab, and then locate the [Build Gutenberg Plugin Zip](https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/build-plugin-zip.yml) action. Note the blue banner that says, \u201cThis workflow has a `workflow_dispatch` event trigger.\u201d Expand the \u201cRun workflow\u201d dropdown on its right-hand side.\n\n![Run workflow dropdown for the plugin release](https:\/\/developer.wordpress.org\/files\/2023\/07\/image-3-1.png)\n\nTo release an RC version of the plugin, enter `rc `in the text field. To release a stable version, enter `stable`. In each case, press the button \u201cRun workflow\u201d.\n\nThis will trigger a GitHub Actions (GHA) workflow that will bump the plugin version, build the Gutenberg plugin `.zip` file, create a release draft, and attach the plugin `.zip` file. This part of the process typically takes about six minutes. The workflow will appear at the top of the list, right under the blue banner. Once it is finished, the workflow's status icon will change from a yellow dot to a green checkmark. You can follow along for a more detailed view by clicking on the workflow.\n\n#### Publishing the @wordpress packages to NPM\n\nAs part of the release workflow, all of the @wordpress packages are published to NPM. After the [Build Gutenberg Plugin Zip](https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/build-plugin-zip.yml) action has created the draft release, you may see a message that the [Publish npm packages](https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/publish-npm-packages.yml) action requires someone with appropriate permissions to trigger it.\n\nThis message is misleading. You do not need to take any action to publish the @wordpress packages to NPM. The process is automated and will automatically run after the release notes are published.\n\n#### Viewing the release draft\n\nAs soon as the workflow has finished, you\u2019ll find the release draft under [Gutenberg Releases](https:\/\/github.com\/WordPress\/gutenberg\/releases). The draft is pre-populated with changelog entries based on previous RCs for this version and any changes that have since been cherry-picked to the release branch. Thus, when releasing the first stable version of a series, delete any RC version headers (that are only there for your information) and move the more recent changes to the correct section (see below).\n\n#### Curating the release changelog\n\nThe best time to work on the changelog is when it is first created during the release candidate workflow. This is when the changelog automation is called, and the first version of the changelog becomes available. The changelog process is mostly automated, but it depends heavily on the proper labeling of the PRs in the milestone, as mentioned above.\n\nThe stable release process takes the changelogs of the RCs and adds them to the stable release. However, there is one important thing to note: the stable release only \"remembers\" the first version of the changelog, which is the version that was available when RC1 was published. Any subsequent changes to the changelog of RC1 will not be included in the stable release.\n\nThat means if you curate the whole changelog before you publish RC1, you won\u2019t have to work on it for the stable release, except for the few items of subsequent RC2 or RC3 releases that will also be added to the stable release.\n\nOnce the release changelog is available in the draft, take some time to read the notes and edit them to make sure they are easy to read and accurate. Don't rush this part. It's important to make sure the release notes are as organized as possible, but you don't have to finish them all at once. You can save the draft and come back to it later.\n\nIf you're worried that people won't be able to access the release candidate version until you publish the release, you can share the release artifact with the [#core-editor](https:\/\/wordpress.slack.com\/messages\/C02QB2JS7) Slack channel. This will give people access to the release candidate version while you finish curating the changelog.\n\nHere are some additional tips for preparing clear and concise changelogs:\n\n-   Move all entries under the `Various` section to a more appropriate section.\n-   Fix spelling errors or clarify wording. Phrasing should be easy to understand where the intended audience is those who use the plugin or are keeping up with ongoing development.\n-   Create new groupings as applicable, and move pull requests between.\n-   When multiple PRs relate to the same task (such as a follow-up pull request), try to combine them into a single entry. Good examples for this are PRs around removing Lodash for performance purposes, replacement of Puppeteer E2D tests with Playwright or efforts to convert public components to TypeScript.\n-   If subtasks of a related set of PRs are substantial, consider organizing as entries in a nested list.\n-   Remove PRs that revert other PRs in the same release if the net change in code is zero.\n-   Remove all PRs that only update the mobile app. The only exception to this rule is if the mobile app pull request also updates functionality for the web.\n-   If a subheader only has one PR listed, remove the subheader and move the PR to the next matching subheader with more than one item listed.\n\n#### Creating release candidate patches (cherry-picking)\n\n<div class=\"callout callout-info\">\n    <strong>Quick reference<\/strong>\n    <ul>\n        <li>Ensure all PRs that need cherry-picking have the <code>Backport to Gutenberg RC<\/code> label.<\/li>\n        <li>In your local clone of the Gutenberg repository, switch to the release branch: <code>git checkout release\/X.Y<\/code><\/li>\n        <li>Cherry-pick all merged PRs using the automated script: <\/code>npm run other:cherry-pick \"Backport to Gutenberg RC\"<\/code><\/li>\n    <\/ul>\n<\/div>\n\nAfter an RC is published but before the final stable release, some bugs related to the release might be fixed and committed to `trunk`. The stable release will not automatically include these fixes. Including them is a manual process, which is called cherry-picking.\n\nThere are a couple of ways you might be made aware of these bugs as a release manager:\n\n-   Contributors may add the `Backport to Gutenberg RC` label to a closed PR. [Do a search for any of these PRs](https:\/\/github.com\/WordPress\/gutenberg\/pulls?q=is%3Apr+label%3A%22Backport+to+Gutenberg+RC%22+is%3Aclosed) before publishing the final release.\n-   You may receive a direct message or a ping in the [#core-editor](https:\/\/wordpress.slack.com\/messages\/C02QB2JS7) Slack channel notifying you of PRs that need to be included in the RC. Even when this is the case, the `Backport to Gutenberg RC` should always be added to the PR.\n\n##### Automated cherry-picking\n\nThe cherry-picking process can be automated with the `npm run other:cherry-pick \"[Insert Label]\"` script, which is included in Gutenberg. You will need to use the label `Backport to Gutenberg RC` when running the command and ensure all PRs that need cherry-picking have the label assigned.\n\n<div class=\"callout callout-warning\">\nTo cherry-pick PRs, you must clone (not fork) the Gutenberg repository and have write access. Only members of the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/block-editor\/contributors\/repository-management\/#teams\">Gutenberg development team<\/a> have the necessary permissions to perform this action.<\/div>\n\nOnce you have cloned the Gutenberg repository to your local development environment, begin by switching to the release branch:\n\n```\ngit checkout release\/X.Y\n```\n\nNext, cherry-pick all the merged PRs with the appropriate backport label:\n\n```\nnpm run other:cherry-pick \"Backport to Gutenberg RC\"\n```\n\nBehind the scenes, the script will:\n\n-   Cherry-pick all PRs with the label `Backport to Gutenberg RC`\n-   Add them to the release milestone\n-   `git push` all changes to the release branch\n-   Add a comment to the PR indicating it\u2019s been cherry-picked\n-   Remove the label `Backport to Gutenberg RC` from the PR\n\nHere is a screenshot of the process:\n\n![Automated cherry-picking](https:\/\/developer.wordpress.org\/files\/2023\/07\/image-7.png)\n\n##### Manual cherry-picking\n\nIf you need to handle cherry-picking one at a time and one step at a time, you can follow this sequence manually. After checking out the corresponding release branch:\n\n1. Cherry-pick each PR (in chronological order) using `git cherry-pick [SHA]`.\n2. When done, push the changes to GitHub using `git push`.\n3. Remove the `Backport to Gutenberg RC` label and update the milestone to the current release for all cherry-picked PRs.\n\nTo find the `[SHA]` for a pull request, open the PR, and you\u2019ll see a message \u201c`[Username]` merged commit `[SHA]` into `trunk`\u201d near the end.\n\n![Manual cherry-picking](https:\/\/developer.wordpress.org\/files\/2023\/07\/image-5.png)\n\nIf the cherry-picked fixes deserve another release candidate before the stable version is published, create one by following the instructions above. Let other contributors know that a new release candidate has been released in the [#core-editor](https:\/\/wordpress.slack.com\/messages\/C02QB2JS7) Slack channel.\n\n#### Publishing the release\n\n<div class=\"callout callout-info\">\n    <strong>Quick reference<\/strong>\n    <ul>\n        <li>In the release draft, press the \u201cPublish release\u201d button.<\/li>\n        <li>If publishing a stable release, get approval from a member of the <a href=\"https:\/\/github.com\/orgs\/WordPress\/teams\/gutenberg-release\">Gutenberg Release<\/a>, <a href=\"https:\/\/github.com\/orgs\/WordPress\/teams\/gutenberg-core\">Gutenberg Core<\/a>, or the <a href=\"https:\/\/github.com\/orgs\/WordPress\/teams\/wordpress-core\">WordPress Core<\/a> teams to upload the new plugin version to the WordPress.org plugin repository (SVN).<\/li>\n        <li>Once uploaded, confirm that the latest version can be downloaded and updated from the WordPress plugin dashboard.<\/li>\n    <\/ul>\n<\/div>\n\nOnly once you\u2019re happy with the shape of the changelog in the release draft, press the \u201cPublish release\u201d button.\n\nNote that you do not need to change the checkboxes above the button. If you are publishing an RC, the \u201cSet as a pre-release\u201d will automatically be selected, and \u201cSet as the latest release\u201d will be selected if you are publishing the stable version.\n\n![Publishing the release checkboxes for an RC](https:\/\/developer.wordpress.org\/files\/2023\/07\/image.png)\n\nPublishing the release will create a `git` tag for the version, publish the release, and trigger [another GHA workflow](https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/upload-release-to-plugin-repo.yml) with a twofold purpose:\n\n1. Use the release notes that you just edited to update `changelog.txt`, and\n2. Upload the new plugin version to the WordPress.org plugin repository (SVN) (only if you\u2019re releasing a stable version).\n\nThe last step needs approval by a member of either the [Gutenberg Release](https:\/\/github.com\/orgs\/WordPress\/teams\/gutenberg-release), [Gutenberg Core](https:\/\/github.com\/orgs\/WordPress\/teams\/gutenberg-core), or the [WordPress Core](https:\/\/github.com\/orgs\/WordPress\/teams\/wordpress-core) teams. These teams get a notification email when the release is ready to be approved, but if time is of the essence, you can ask in the #core-editor Slack channel or ping the [Gutenberg Release team](https:\/\/github.com\/orgs\/WordPress\/teams\/gutenberg-release)) to accelerate the process. Reaching out before launching the release process so that somebody is ready to approve is recommended. Locate the [\u201cUpload Gutenberg plugin to WordPress.org plugin repo\u201d workflow](https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/upload-release-to-plugin-repo.yml) for the new version, and have it [approved](https:\/\/docs.github.com\/en\/actions\/managing-workflow-runs\/reviewing-deployments#approving-or-rejecting-a-job).\n\nOnce approved, the new Gutenberg version will be available to WordPress users all over the globe. Once uploaded, confirm that the latest version can be downloaded and updated from the WordPress plugin dashboard.\n\nThe final step is to write a release post on [make.wordpress.org\/core](https:\/\/make.wordpress.org\/core\/). You can find some tips on that below.\n\n#### Troubleshooting the release\n\n> The plugin was published to the WordPress.org plugin directory but the workflow failed.\n\nThis has happened ocassionally, see [this one](https:\/\/github.com\/WordPress\/gutenberg\/actions\/runs\/6955409957\/job\/18924124118) for example.\n\nIt's important to check that:\n\n- the plugin from the directory works as expected\n- the ZIP contents (see [Downloads](https:\/\/plugins.trac.wordpress.org\/browser\/gutenberg\/)) looks correct (doesn't have anything obvious missing)\n- the [Gutenberg SVN repo](https:\/\/plugins.trac.wordpress.org\/browser\/gutenberg\/) has two new commits (see [the log](https:\/\/plugins.trac.wordpress.org\/browser\/gutenberg\/)):\n  - the `trunk` folder should have \"Commiting version X.Y.Z\"\n  - there is a new `tags\/X.Y.Z` folder with the same contents as `trunk` whose latest commit is \"Tagging version X.Y.Z\"\n\nMost likely, the tag folder couldn't be created. This is a [known issue](https:\/\/plugins.trac.wordpress.org\/browser\/gutenberg\/) that [can be fixed manually](https:\/\/github.com\/WordPress\/gutenberg\/issues\/55295#issuecomment-1759292978).\n\nEither substitute SVN_USERNAME, SVN_PASSWORD, and VERSION for the proper values or set them as global environment variables first:\n\n```sh\n# CHECKOUT THE REPOSITORY\nsvn checkout https:\/\/plugins.svn.wordpress.org\/gutenberg\/trunk --username \"$SVN_USERNAME\" --password \"$SVN_PASSWORD\" gutenberg-svn\n\n# MOVE TO THE LOCAL FOLDER\ncd gutenberg-svn\n\n# IF YOU HAPPEN TO HAVE ALREADY THE REPO LOCALLY\n# AND DIDN'T CHECKOUT, MAKE SURE IT IS UPDATED\n# svn up .\n\n# COPY CURRENT TRUNK INTO THE NEW TAGS FOLDER\nsvn copy https:\/\/plugins.svn.wordpress.org\/gutenberg\/trunk https:\/\/plugins.svn.wordpress.org\/gutenberg\/tags\/$VERSION -m 'Tagging version $VERSION' --no-auth-cache --non-interactive  --username \"$SVN_USERNAME\" --password \"$SVN_PASSWORD\"\n```\n\nAsk around if you need help with any of this.\n\n### Documenting the release\n\nDocumenting the release is led by the release manager with the help of [Gutenberg development team](https:\/\/developer.wordpress.org\/block-editor\/block-editor\/contributors\/repository-management\/#teams) members. This process is comprised of a series of sequential steps that, because of the number of people involved, and the coordination required, need to adhere to a timeline between the RC and stable releases. Stable Gutenberg releases happen on Wednesdays, one week after the initial RC.\n\n<div class=\"callout callout-info\">\n    <strong>Timeline<\/strong>\n    <ol>\n        <li>Make a copy of the <a href=\"https:\/\/docs.google.com\/document\/d\/1D-MTOCmL9eMlP9TDTXqlzuKVOg_ghCPm9_whHFViqMk\/edit\">Google Doc Template for release posts<\/a> \u2013 Wednesday to Friday<\/li>\n        <li>Select the release highlights \u2013 Friday to Monday<\/li>\n        <li>Request release assets (images, videos) from the Design team once highlights are finalized \u2013\u00a0Friday to Monday<\/li>\n        <li>Draft the release post and request peer review \u2013 Monday to Wednesday<\/li>\n        <li>Publishing the post after the stable version is released \u2013 Wednesday<\/li>\n    <\/ol>\n<\/div>\n\n#### Selecting the release highlights\n\nOnce the changelog is cleaned up, the next step is to choose a few changes to highlight in the release post. These highlights usually focus on new features and enhancements, including performance and accessibility ones, but can also include important API changes or critical bug fixes.\n\nGiven the big scope of Gutenberg and the high number of PRs merged in each milestone, it is not uncommon to overlook impactful changes worth highlighting; because of this, this step is a collaborative effort between the release manager and other Gutenberg development team members. If you don\u2019t know what to pick, reach out to others on the team for assistance.\n\n#### Requesting release assets\n\nAfter identifying the highlights of a new WordPress release, the release manager requests visual assets from the Design team. The request is made in the [#design](https:\/\/wordpress.slack.com\/archives\/C02S78ZAL) Slack channel, and an example post for 15.8 can be found [here](https:\/\/wordpress.slack.com\/archives\/C02S78ZAL\/p1684161811926279). The assets will be provided in a [Google Drive folder](https:\/\/drive.google.com\/drive\/folders\/1U8bVbjOc0MekWjpMjNaVFVhHFEzQkYLB) assigned to the specific release.\n\nWhen creating visual assets for a WordPress release, use animations (video or GIF) or static images to showcase the highlights. Use [previous release posts](https:\/\/make.wordpress.org\/core\/tag\/gutenberg-new\/) as a guide, and keep in mind that animations are better for demonstrating workflows, while more direct highlights can be shown with an image. When creating assets, avoid using copyrighted material and disable browser plugins that can be seen in the browser canvas.\n\n#### Drafting the release post\n\nThe release manager is responsible for drafting the release post based on the [Google Doc Template](https:\/\/docs.google.com\/document\/d\/1D-MTOCmL9eMlP9TDTXqlzuKVOg_ghCPm9_whHFViqMk\/edit). That said, because of the nature of the release post content, responsibilities can be divided up and delegated to other team members if agreed upon in advance. Once the draft is complete, ask for peer review.\n\n#### Publishing the release post\n\nOnce the post content is ready, an author with permission to post on [make.wordpress.org\/core](https:\/\/make.wordpress.org\/core\/) will create a new draft and import the content. The post should include the following tags:\n\n-   [#block-editor](https:\/\/make.wordpress.org\/core\/tag\/block-editor\/)\n-   [#core-editor](https:\/\/make.wordpress.org\/core\/tag\/core-editor\/)\n-   [#gutenberg](https:\/\/make.wordpress.org\/core\/tag\/gutenberg\/)\n-   [#gutenberg-new](https:\/\/make.wordpress.org\/core\/tag\/gutenberg-new\/)\n\nThe author should then enable public preview on the post and ask for a final peer review. This is encouraged by the [make\/core posting guidelines](https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/post-comment-guidelines\/#peer-review).\n\nFinally, the post should be published after the stable version is released and is available on WordPress.org. This will help external media to echo and amplify the release.\n\n### Creating minor releases\n\nOccasionally it's necessary to create a minor release (i.e. X.Y.**Z**) of the Plugin. This is usually done to expedite fixes for bad regressions or bugs. The `Backport to Gutenberg Minor Release` is usually used to identify PRs that need to be included in a minor release, but as release coordinator you may also be notified more informally through slack. Even so, it's good to ensure all relevant PRs have the correct label.\n\nAs you proceed with the following process, it's worth bearing in mind that such minor releases are not created as branches in their own right (e.g. `release\/12.5.0`) but are simply [tags](https:\/\/github.com\/WordPress\/gutenberg\/releases\/tag\/v12.5.1).\n\nThe method for minor releases is nearly identical to the main Plugin release process (see above) but has some notable exceptions. Please make sure to read _the entire_ guide before proceeding.\n\n#### Updating the release branch\n\nThe minor release should only contain the _specific commits_ required. To do this you should checkout the previous _major_ stable (i.e. non-RC) release branch (e.g. `release\/12.5`) locally and then cherry pick any commits that you require into that branch.\n\n<div class=\"callout callout-alert\">\nIf an RC already exists for a new version, you _need_ to cherry-pick the same commits in the respective release branch, as they will not be included automatically. E.g.: If you're about to release a new minor release for 12.5 and just cherry-picked into `release\/12.5`, but 12.6.0-rc.1 is already out, then you need to cherry-pick the same commits into the `release\/12.6` branch, or they won't be included in subsequent releases for 12.6! Usually it's best to coordinate this process with the release coordinator for the next release.\n<\/div>\n\nThe cherry-picking process can be automated with the [`npm run cherry-pick`](\/docs\/contributors\/code\/auto-cherry-picking.md) script, but be sure to use the `Backport to Gutenberg Minor Release` label when running the script.\n\nYou must also ensure that all PRs being included are assigned to the Github Milestone on which the minor release is based. Bear in mind, that when PRs are _merged_ they are automatically assigned a milestone for the next _stable_ release. Therefore you will need to go back through each PR in Github and re-assign the Milestone.\n\nFor example, if you are releasing version `12.5.4`, then all PRs picked for that release must be unassigned from the `12.6` Milestone and instead assigned to the `12.5` Milestone.\n\nOnce cherry picking is complete, you can also remove the `Backport to Gutenberg Minor Release` label from the PRs.\n\nOnce you have the stable release branch in order and the correct Milestone assigned to your PRs you can _push the branch to Github_ and continue with the release process using the Github website GUI.\n\n#### Running the minor release\n\n![Run workflow dropdown for the plugin release](https:\/\/developer.wordpress.org\/files\/2023\/07\/image-1.png)\n\nGo to Gutenberg's GitHub repository's Actions tab, and locate the [\"Build Gutenberg Plugin Zip\" action](https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/build-plugin-zip.yml). You should now _carefully_ choose the next action based on information about the current Plugin release version:\n\n_If_ the previous release version was **stable** (`X.Y.Z` - e.g. `12.5.0`, `12.5.1` .etc) leave the `Use workflow from` field as `trunk` and then specify `stable` in the text input field. The workflow will automatically create a minor release, with z incremented (`x.y.(z+1)`) as required.\n\n_If_ however, the previous release was an **RC** (e.g. `X.Y.0-rc.1`) you will need to _manually_ select the _stable version's release branch_ (e.g. `12.5.0`) when creating the release. Failure to do this will cause the workflow to release the next major _stable_ version (e.g. `12.6.0`) which is not what you want.\n\nTo do this, when running the Workflow, select the appropriate `release\/` branch from the `Use workflow from` dropdown (e.g. `release\/12.5`) and specify `stable` in the text input field.\n\n##### Creating a minor release for previous stable releases\n\nIt is possible to create a minor release for any release branch even after a more recent stable release has been published. This can be done for _any_ previous release branches, allowing more flexibility in delivering updates to users. In the past, users had to wait for the next stable release, potentially taking days. Now, fixes can be swiftly shipped to any previous release branches as required.\n\nThe process is identical to the one documented above when an RC is already out: choose a previous release branch, type `stable`, and click \"Run workflow\". The release will be published on the GitHub releases page for Gutenberg and to the WordPress core repository SVN as a `tag` under http:\/\/plugins.svn.wordpress.org\/gutenberg\/tags\/. The SVN `trunk` directory will not be touched.\n\n**IMPORTANT:** When publishing the draft created by the [\"Build Plugin Zip\" workflow](https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/build-plugin-zip.yml), make sure to leave the \"Set as last release\" checkbox unchecked. If it is left checked by accident, the [\"Upload Gutenberg plugin to WordPress.org plugin\" workflow](https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/upload-release-to-plugin-repo.yml) will still correctly upload it **as a tag (and will _not_ replace the `trunk` version)** to the WordPress plugin repository SVN - the workflow will perform some version arithmetic to determine how the plugin should be shipped - but you'll still need to fix the state on GitHub by setting the right release as `latest` on the [releases](https:\/\/github.com\/WordPress\/gutenberg\/releases\/) page!\n\n#### Troubleshooting\n\n> The release draft was created but it was empty\/contained an error message\n\nIf you forget to assign the correct Milestone to your cherry picked PR(s) then the changelog may not be generated as you would expect.\n\nIt is important to always manually verify that the PRs shown in the changelog match up with those cherry picked to the release branch.\n\nMoreover, if the release includes only a single PR, then failing to assign the PR to the correct Milestone will cause an error to be displayed when generating the changelog. In this case you can edit the release notes to include details of the missing PR (manually copying the format from a previous release).\n\nIf for any reason the Milestone has been closed, you may reopen it for the purposes of the release.\n\n> The draft release only contains 1 asset file. Other releases have x3.\n\nThis is expected. The draft release will contain only the plugin zip. Only once the release is published will the remaining assets be generated and added to the release.\n\n> Do I need to publish point releases to WordPress.org?\n\nYes. The method for this is identical to the main Plugin release process. You will need a member of the Gutenberg Core team the Gutenberg Release team to approve the release workflow.\n\n> The release process failed to cherry-pick version bump commit to the trunk branch.\n\nFirst, confirm that the step failed by checking the latest commits on `trunk` do not include the version bump commit. Then revert the version bump commit on the release branch - `git revert --no-edit {commitHash}`. Finally, push the changes and start the release process again.\n\n## Packages releases to NPM and WordPress Core updates\n\nThe Gutenberg repository follows the [WordPress SVN repository's](https:\/\/make.wordpress.org\/core\/handbook\/about\/release-cycle\/) branching strategy for every major WordPress release. In addition to that, it also contains two other special branches that control npm publishing workflows:\n\n-   The `wp\/latest` branch contains the same version of packages as those published to npm with the `latest` distribution tag. The goal here is to have this branch synchronized with the last Gutenberg plugin release, and the only exception would be an unplanned [bugfix release](#standalone-bugfix-package-releases).\n-   The `wp\/next` branch contains the same version of packages as those published to npm with the `next` distribution tag. It always gets synchronized with the `trunk` branch. Projects should use those packages for development or testing purposes only.\n-   A Gutenberg branch `wp\/X.Y` (example `wp\/6.2`) targeting a specific WordPress major release (including its further minor increments) gets created based on the current Gutenberg plugin release branch `release\/X.Y` (example `release\/15.1`) shortly after the last release planned for inclusion in the next major WordPress release.\n\nRelease types and their schedule:\n\n-   [Synchronizing Gutenberg Plugin](#synchronizing-gutenberg-plugin) (`latest` dist tag) \u2013 publishing happens automatically every two weeks based on the newly created `release\/X.Y` (example `release\/12.8`) branch with the RC1 version of the Gutenberg plugin.\n-   [WordPress Releases](#wordpress-releases) (`wp-X.Y` dist tag, example `wp-6.2`) \u2013 publishing gets triggered on demand from the `wp\/X.Y` (example `wp\/6.2`) branch. Once we reach the point in the WordPress major release cycle (shortly before Beta 1) where we only cherry-pick commits from the Gutenberg repository to the WordPress core, we use `wp\/X.Y` branch (created from `release\/X.Y` branch, example `release\/15.1`) for npm publishing with the `wp-X.Y` dist-tag. It's also possible to use older branches to backport bug or security fixes to the corresponding older versions of WordPress Core.\n-   [Development Releases](#development-releases) (`next` dist tag) \u2013 it is also possible to perform development releases at any time when there is a need to test the upcoming changes.\n\nThere is also an option to perform [Standalone Bugfix Package Releases](#standalone-bugfix-package-releases) at will. It should be reserved only for critical bug fixes or security releases that must be published to _npm_ outside of regular cycles.\n\n### Synchronizing the Gutenberg plugin\n\nFor each Gutenberg plugin release, we also publish to npm an updated version of WordPress packages. This is automated with the [Release Tool](#release-tool) that handles releases for the Gutenberg plugin. A successful RC1 release triggers the npm publishing job, and this needs to be approved by a Gutenberg Core team member. Locate the [\"Build Gutenberg Plugin Zip\" workflow](https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/build-plugin-zip.yml) for the new version, and have it [approved](https:\/\/docs.github.com\/en\/actions\/managing-workflow-runs\/reviewing-deployments#approving-or-rejecting-a-job).\n\nWe deliberately update the `wp\/latest` branch within the Gutenberg repo with the content from the Gutenberg release `release\/X.Y` (example `release\/12.7`) branch at the time of the Gutenberg RC1 release. This is done to ensure that the `wp\/latest` branch is as close as possible to the latest version of the Gutenberg plugin. It also practically removes the chances of conflicts while backporting to `trunk` commits with updates applied during publishing to `package.json` and `CHANGELOG.md` files. In the past, we had many issues in that aspect when doing npm publishing after the regular Gutenberg release a week later. When publishing the new package versions to npm, we pick at least the `minor` version bump to account for future bugfix or security releases.\n\nBehind the scenes, all steps are automated via `.\/bin\/plugin\/cli.js npm-latest` command. For the record, the manual process would look very close to the following steps:\n\n1. Ensure the WordPress `trunk` branch is open for enhancements.\n2. Get the last published Gutenberg release branch with `git fetch`.\n3. Check out the `wp\/latest` branch.\n4. Remove all files from the current branch: `git rm -r .`.\n5. Check out all the files from the release branch: `git checkout release\/x.x -- .`.\n6. Commit all changes to the `wp\/latest` branch with `git commit -m \"Merge changes published in the Gutenberg plugin vX.X release\"` and push to the repository.\n7. Update the `CHANGELOG.md` files of the packages with the new publish version calculated and commit to the `wp\/latest` branch. Assuming the package versions are written using this format `major.minor.patch`, make sure to bump at least the `minor` version bumps gets applied. For example, if the CHANGELOG of the package to be released indicates that the next unreleased version is `5.6.1`, choose `5.7.0` as a version in case of `minor` version. This is important as the patch version numbers should be reserved in case bug fixes are needed for a minor WordPress release (see below).\n8. Log-in to npm via the console: `npm login`. Note that you should have 2FA enabled.\n9. From the `wp\/latest` branch, install npm dependencies with `npm ci`.\n10. Run the script `npx lerna publish --no-private`.\n    - When asked for the version numbers to choose for each package pick the values of the updated CHANGELOG files.\n    - You'll be asked for your One-Time Password (OTP) a couple of times. This is the code from the 2FA authenticator app you use. Depending on how many packages are to be released you may be asked for more than one OTP, as they tend to expire before all packages are released.\n    - If the publishing process ends up incomplete (perhaps because it timed-out or an bad OTP was introduce) you can resume it via [`npx lerna publish from-package`](https:\/\/lerna.js.org\/docs\/features\/version-and-publish#from-package).\n11. Finally, now that the npm packages are published, cherry-pick the commits created by lerna (\"Publish\" and the CHANGELOG update) into the `trunk` branch of Gutenberg.\n\n### WordPress releases\n\nThe following workflow is needed when bug or security fixes need to be backported into WordPress Core. This can happen in a few use-cases:\n\n-   During the `beta` and `RC` periods of the WordPress release cycle when `wp\/X.Y` (example `wp\/5.7`) branch for the release is already present.\n-   For WordPress minor releases and WordPress security releases (example `5.1.1`).\n\n1. Check out the relevant WordPress major branch (If the minor release is 5.2.1, check out `wp\/5.2`).\n2. Create a feature branch from that branch, and cherry-pick the merge commits for the needed bug fixes onto it. The cherry-picking process can be automated with the [`npm run other:cherry-pick` script](\/docs\/contributors\/code\/auto-cherry-picking.md).\n3. Create a Pull Request from this branch targeting the WordPress major branch used above.\n4. Merge the Pull Request using the \"Rebase and Merge\" button to keep the history of the commits.\n\nNow, the `wp\/X.Y` branch is ready for publishing npm packages. In order to start the process, go to Gutenberg's GitHub repository's Actions tab, and locate the [\"Publish npm packages\" action](https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/publish-npm-packages.yml). Note the blue banner that says \"This workflow has a `workflow_dispatch` event trigger.\", and expand the \"Run workflow\" dropdown on its right hand side.\n\n![Run workflow dropdown for npm publishing](https:\/\/developer.wordpress.org\/files\/2023\/07\/image-2.png)\n\nTo publish packages to npm for the WordPress major release, select `trunk` as the branch to run the workflow from (this means that the script used to run the workflow comes from the trunk branch, though the packages themselves will published from the release branch as long as the correct \"Release type\" is selected below), then select `wp` from the \"Release type\" dropdown and enter `X.Y` (example `5.2`) in the \"WordPress major release\" input field. Finally, press the green \"Run workflow\" button. It triggers the npm publishing job, and this needs to be approved by a Gutenberg Core team member. Locate the [\"Publish npm packages\" action](https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/publish-npm-packages.yml) for the current publishing, and have it [approved](https:\/\/docs.github.com\/en\/actions\/managing-workflow-runs\/reviewing-deployments#approving-or-rejecting-a-job).\n\nFor the record, the manual process would look like the following:\n\n1. Check out the WordPress branch used before (example `wp\/5.2`).\n2. `git pull`.\n3. Run the `npx lerna publish patch --no-private --dist-tag wp-5.2` command (see more in [package release process]) but when asked for the version numbers to choose for each package, (assuming the package versions are written using this format `major.minor.patch`) make sure to bump only the `patch` version number. For example, if the last published package version for this WordPress branch was `5.6.0`, choose `5.6.1` as a version.\n\n**Note:** For WordPress `5.0` and WordPress `5.1`, a different release process was used. This means that when choosing npm package versions targeting these two releases, you won't be able to use the next `patch` version number as it may have been already used. You should use the \"metadata\" modifier for these. For example, if the last published package version for this WordPress branch was `5.6.1`, choose `5.6.1+patch.1` as a version.\n\n3. Optionally update the `CHANGELOG.md` files of the published packages with the new released versions and commit to the corresponding branch (Example `wp\/5.2`).\n4. Cherry-pick the CHANGELOG update commits, if any, into the `trunk` branch of Gutenberg.\n\nNow, the npm packages should be ready and a patch can be created and committed into the corresponding WordPress SVN branch.\n\n### Standalone bugfix package releases\n\nThe following workflow is needed when packages require bug fixes or security releases to be published to _npm_ outside of a regular release cycle.\n\nNote: Both the `trunk` and `wp\/latest` branches are restricted and can only be _pushed_ to by the Gutenberg Core team.\n\nIdentify the commit hashes from the pull requests that need to be ported from the repo `trunk` branch to `wp\/latest`\n\nThe `wp\/latest` branch now needs to be prepared to release and publish the packages to _npm_.\n\nOpen a terminal and perform the following steps:\n\n1. `git checkout trunk`\n2. `git pull`\n3. `git checkout wp\/latest`\n4. `git pull`\n\nBefore porting commits check that the `wp\/latest` branch does not have any outstanding packages waiting to be published:\n\n1. `git checkout wp\/latest`\n2. `npx lerna updated`\n\nNow _cherry-pick_ the commits from `trunk` to `wp\/latest`, use `-m 1 commithash` if the commit was a pull request merge commit:\n\n1. `git cherry-pick -m 1 cb150a2`\n2. `git push`\n\nWhilst waiting for the GitHub actions build for `wp\/latest`[branch to pass](https:\/\/github.com\/WordPress\/gutenberg\/actions?query=branch%3Awp%2Ftrunk), identify and begin updating the `CHANGELOG.md` files:\n\n1. `git checkout wp\/latest`\n2. `npx lerna updated`\n    > Example\n    >\n    > ```shell\n    > npx lerna updated\n    > @wordpress\/e2e-tests\n    > @wordpress\/jest-preset-default\n    > @wordpress\/scripts\n    > lerna success found 3 packages ready to publish\n    > ```\n\nCheck the versions listed in the current `CHANGELOG.md` file, looking through the commit history of a package e.g [@wordpress\/scripts](https:\/\/github.com\/WordPress\/gutenberg\/commits\/HEAD\/packages\/scripts) and look out for _\"chore(release): publish\"_ and _\"Update changelogs\"_ commits to determine recent version bumps, then looking at the commits since the most recent release should aid with discovering what changes have occurred since the last release.\n\nNote: You may discover the current version of each package is not up to date, if so updating the previously released versions would be appreciated.\n\nNow, the `wp\/latest` branch is ready for publishing npm packages. In order to start the process, go to Gutenberg's GitHub repository's Actions tab, and locate the [\"Publish npm packages\" action](https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/publish-npm-packages.yml). Note the blue banner that says \"This workflow has a `workflow_dispatch` event trigger.\", and expand the \"Run workflow\" dropdown on its right hand side.\n\n![Run workflow dropdown for npm publishing](https:\/\/developer.wordpress.org\/files\/2023\/07\/image-6.png)\n\nTo publish packages to npm with bugfixes, select `bugfix` from the \"Release type\" dropdown and leave empty \"WordPress major release\" input field. Finally, press the green \"Run workflow\" button. It triggers the npm publishing job, and this needs to be approved by a Gutenberg Core team member. Locate the [\"Publish npm packages\" action](https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/publish-npm-packages.yml) for the current publishing, and have it [approved](https:\/\/docs.github.com\/en\/actions\/managing-workflow-runs\/reviewing-deployments#approving-or-rejecting-a-job).\n\nBehind the scenes, the rest of the process is automated with `.\/bin\/plugin\/cli.js npm-bugfix` command. For the record, the manual process would look very close to the following steps:\n\n1. Check out the `wp\/latest` branch.\n2. Update the `CHANGELOG.md` files of the packages with the new publish version calculated and commit to the `wp\/latest` branch.\n3. Log-in to npm via the console: `npm login`. Note that you should have 2FA enabled.\n4. From the `wp\/latest` branch, install npm dependencies with `npm ci`.\n5. Run the script `npx lerna publish --no-private`.\n    - When asked for the version numbers to choose for each package pick the values of the updated CHANGELOG files.\n    - You'll be asked for your One-Time Password (OTP) a couple of times. This is the code from the 2FA authenticator app you use. Depending on how many packages are to be released you may be asked for more than one OTP, as they tend to expire before all packages are released.\n    - If the publishing process ends up incomplete (perhaps because it timed-out or an bad OTP was introduce) you can resume it via [`npx lerna publish from-package`](https:\/\/lerna.js.org\/docs\/features\/version-and-publish#from-package).\n6. Finally, now that the npm packages are published, cherry-pick the commits created by lerna (\"Publish\" and the CHANGELOG update) into the `trunk` branch of Gutenberg.\n\n### Development releases\n\nAs noted in the [Synchronizing Gutenberg Plugin](#synchronizing-gutenberg-plugin) section, packages publishing happens every two weeks from the `wp\/latest` branch. It's also possible to use the development release to test the upcoming changes present in the `trunk` branch at any time. We are taking advantage of [package distribution tags](https:\/\/docs.npmjs.com\/cli\/v7\/commands\/npm-dist-tag) that make it possible to consume the future version of the codebase according to npm guidelines:\n\n> By default, the `latest` tag is used by npm to identify the current version of a package, and `npm install <pkg>` (without any `@<version>` or `@<tag>` specifier) installs the `latest` tag. Typically, projects only use the `latest` tag for stable release versions, and use other tags for unstable versions such as prereleases.\n\nIn our case, we use the `next` distribution tag for code. Developers that want to install such a version of the package need to type:\n\n```bash\nnpm install @wordpress\/components@next\n```\n\nIn order to start the publishing process for development version of npm packages, go to Gutenberg's GitHub repository's Actions tab, and locate the [\"Publish npm packages\" action](https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/publish-npm-packages.yml). Note the blue banner that says \"This workflow has a `workflow_dispatch` event trigger.\", and expand the \"Run workflow\" dropdown on its right hand side.\n\n![Run workflow dropdown for npm publishing](https:\/\/developer.wordpress.org\/files\/2023\/07\/image-4.png)\n\nTo publish development packages to npm, select `development` from the \"Release type\" dropdown and leave empty \"WordPress major release\" input field. Finally, press the green \"Run workflow\" button. It triggers the npm publishing job, and this needs to be approved by a Gutenberg Core team member. Locate the [\"Publish npm packages\" action](https:\/\/github.com\/WordPress\/gutenberg\/actions\/workflows\/publish-npm-packages.yml) for the current publishing, and have it [approved](https:\/\/docs.github.com\/en\/actions\/managing-workflow-runs\/reviewing-deployments#approving-or-rejecting-a-job).\n\nBehind the scenes, the release process is fully automated via `.\/bin\/plugin\/cli.js npm-next` command. It ensures\nthe `wp\/next` branch is synchronized with the latest release branch (`release\/X.Y`) created for the Gutenberg plugin. To avoid collisions in the versioning of packages, we always include the newest commit's `sha`, for example, `@wordpress\/block-editor@5.2.10-next.645224df70.0`.\n\n[plugin repository]: https:\/\/plugins.trac.wordpress.org\/browser\/gutenberg\/\n[package release process]: https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/README.md#releasing-packages\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/getting-started-with-code-contribution.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Getting Started With Code Contribution<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The following guide is for setting up your local environment to contribute to the Gutenberg project. There is significant overlap between an environment to contribute and an environment used to extend the WordPress block editor. You can review the <a href=\"\/docs\/getting-started\/devenv\/README.md\">Development Environment tutorial<\/a> for additional setup information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Prerequisites<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Node.js<br>Gutenberg is a JavaScript project that requires <a href=\"https:\/\/nodejs.org\/\">Node.js<\/a>. The project is currently built using Node.js v20 and npm v10. Though best efforts are made to always use the Active LTS version of Node.js, this will not always be the case. For more details, please refer to the <a href=\"https:\/\/github.com\/nodejs\/Release#release-schedule\">Node.js release schedule<\/a>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>We recommend using the <a href=\"https:\/\/github.com\/nvm-sh\/nvm\">Node Version Manager<\/a> (nvm) since it is the easiest way to install and manage node for macOS, Linux, and Windows 10 using WSL2. See <a href=\"\/docs\/getting-started\/devenv\/README.md#development-tools\">our Development Tools guide<\/a> or the Nodejs site for additional installation instructions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Git<br>Gutenberg is using git for source control. Make sure you have an updated version of git installed on your computer, as well as a GitHub account. You can read the <a href=\"\/docs\/contributors\/code\/git-workflow.md\">Git Workflow<\/a> to learn more about using git and GitHub with Gutenberg<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>[Recommended] Docker Desktop<br>We recommend using the <a href=\"\/packages\/env\/README.md\">wp-env package<\/a> for setting WordPress environment locally. You'll need to install Docker to use <code>wp-env<\/code>. See the <a href=\"\/docs\/getting-started\/devenv\/README.md\">Development Environment tutorial for additional details<\/a>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>As an alternative to Docker setup, you can use <a href=\"https:\/\/localwp.com\/\">Local<\/a>, <a href=\"http:\/\/www.wampserver.com\/en\/\">WampServer<\/a>, or <a href=\"https:\/\/www.mamp.info\/\">MAMP<\/a>, or even use a remote server.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>GitHub CLI<br>Although not a requirement, the <a href=\"https:\/\/cli.github.com\/\">GitHub CLI<\/a> can be very useful in helping you checkout pull requests locally. Both from the Gutenberg repo and forked repos. This can be a major time saver while code reviewing and testing pull requests.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Getting the Gutenberg code<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Fork the Gutenberg repository, clone it to your computer and add the WordPress repository as upstream.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$ git clone https:\/\/github.com\/YOUR_GITHUB_USERNAME\/gutenberg.git\n$ cd gutenberg\n$ git remote add upstream https:\/\/github.com\/WordPress\/gutenberg.git\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Building Gutenberg as a plugin<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Install the Gutenberg dependencies and build your code in development mode:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm install\nnpm run dev\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Note: The install scripts require <a href=\"https:\/\/www.python.org\/\">Python<\/a> to be installed and in the path of the local system. This might be installed by default for your operating system, or require downloading and installing.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>There are two ways to build your code. While developing, you probably will want to use <code>npm run dev<\/code> to run continuous builds automatically as source files change. The dev build also includes additional warnings and errors to help troubleshoot while developing. Once you are happy with your changes, you can run <code>npm run build<\/code> to create optimized production build.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once built, Gutenberg is ready to be used as a WordPress plugin!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Local WordPress Environment<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To test a WordPress plugin, you need to have WordPress itself installed. If you already have a WordPress environment setup, use the above Gutenberg build as a standard WordPress plugin by putting the gutenberg directory in your wp-content\/plugins\/ directory.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you do not have a local WordPress environment setup, follow the steps in the rest of this section to create one.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Using Docker and wp-env<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"\/packages\/env\/README.md\">wp-env package<\/a> was developed with the Gutenberg project as a quick way to create a standard WordPress environment using Docker. It is also published as the <code>@wordpress\/env<\/code> npm package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>By default, <code>wp-env<\/code> can run in a plugin directory to create and run a WordPress environment, mounting and activating the plugin automatically. You can also configure <code>wp-env<\/code> to use existing installs, multiple plugins, or themes. See the <a href=\"\/packages\/env\/README.md#wp-envjson\">wp-env package<\/a> for complete documentation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Make sure Docker is running, and start <code>wp-env<\/code> from within the gutenberg directory:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run wp-env start\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This script will create a Docker instance behind the scenes with the latest WordPress Docker image, and then will map the Gutenberg plugin code from your local copy to the environment as a Docker volume. This way, any changes you make to the code locally are reflected immediately in the WordPress instance.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Note: <code>npm run<\/code> will use the <code>wp-env<\/code> \/ <code>WordPress<\/code>?? version specified within the Gutenberg project, making sure you are running the latest wp-env version.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>To stop the running environment:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run wp-env stop\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If everything went well, you should see the following message in your terminal:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>WordPress development site started at http:\/\/localhost:8888\/\nWordPress test site started at http:\/\/localhost:8889\/\nMySQL is listening on port 51220\n\n \u2714 Done! (in 261s 898ms)\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>And if you open Docker dashboard by rightclicking the icon in the menu bar(on Mac) or system tray (on Linux and Windows) and selecting 'Dashboard', you will see that the script has downloaded some Docker Images, and is running a Docker Container with fully functional WordPress installation:<br><img src=\"https:\/\/cldup.com\/mt9cKES-YZ.png\">Screenshot of the WordPress Docker Container Running<br><img src=\"https:\/\/cldup.com\/bNpgaRSkcG.png\">Screenshot of the Downloaded Docker Images for WordPress Development Environment<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To destroy the install completely:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run wp-env destroy\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Explore the <a href=\"\/packages\/env\/README.md\">package documentation<\/a> for additional commands.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Accessing the Local WordPress Install<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The WordPress installation should now be available at <code>http:\/\/localhost:8888<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can access the Dashboard at: <code>http:\/\/localhost:8888\/wp-admin\/<\/code> using <strong>Username<\/strong>: <code>admin<\/code>, <strong>Password<\/strong>: <code>password<\/code>. You'll notice the Gutenberg plugin installed and activated, this is your local build.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Accessing the MySQL Database<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To access the MySQL database on the <code>wp-env<\/code> instance you will first need the connection details. To do this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>In a terminal, navigate to your local Gutenberg repo.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Run <code>npm run wp-env start<\/code> - various information about the <code>wp-env<\/code> environment should be logged into the terminal.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>In the output from step 2, look for information about the <em>MySQL<\/em> port:<br>For example:<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>MySQL is listening on port {MYSQL_PORT_NUMBER}<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:list {\"ordered\":true,\"start\":4} -->\n<ol start=\"4\" class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Copy \/ make a note of this port number (note this will change each time <code>wp-env<\/code> restarts).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>You can now connect to the MySQL instance using the following details (being sure to replace <code>{MYSQL_PORT_NUMBER}<\/code> with the port number from step three):<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Host: 127.0.0.1\nUsername: root\nPassword: password\nDatabase: wordpress\nPort: {MYSQL_PORT_NUMBER}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Please note<\/strong>: the MySQL port number will change each time <code>wp-env<\/code> restarts. If you find you can no longer access your database, simply repeat the steps above to find the new port number and restore your connection.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Tip<\/strong>: <a href=\"https:\/\/sequel-ace.com\/\">Sequel Ace<\/a> is a useful GUI tool for accessing a MySQL database. Other tools are available and documented in this <a href=\"https:\/\/wordpress.org\/documentation\/article\/creating-database-for-wordpress\/\">article on accessing the WordPress database<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Troubleshooting<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you run into an issue, check the <a href=\"\/packages\/env\/README.md#troubleshooting-common-problems\">troubleshooting section in <code>wp-env<\/code> documentation<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Using Local or MAMP<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As an alternative to Docker and <code>wp-env<\/code>, you can also use <a href=\"https:\/\/localwp.com\/\">Local<\/a>, <a href=\"http:\/\/www.wampserver.com\/en\/\">WampServer<\/a>, or <a href=\"https:\/\/www.mamp.info\/\">MAMP<\/a> to run a local WordPress environment. To do so clone and install Gutenberg as a regular plugin in your installation by creating a symlink or copying the directory to the proper <code>wp-content\/plugins<\/code> directory.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You will also need some extra configuration to be able to run the e2e tests.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Change the current directory to the plugins folder and symlink all e2e test plugins:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>ln -s gutenberg\/packages\/e2e-tests\/plugins\/* .\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You'll need to run this again if new plugins are added. To run e2e tests:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>WP_BASE_URL=http:\/\/localhost:8888\/gutenberg\/ npm run test:e2e\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Caching of PHP files<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You'll need to disable OPCache in order to correctly work on PHP files. To fix:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Go to <strong>MAMP > Preferences > PHP<\/strong><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Under <strong>Cache<\/strong>, select <strong>off<\/strong><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Confirm with <strong>OK<\/strong><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Incoming connections<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>By default, the web server (Apache) launched by MAMP will listen to all incoming connections, not just local ones. This means that anyone on the same local network (and, in certain cases, anyone on the Internet) can access your web server. This may be intentional and useful for testing sites on other devices, but most often this can be a privacy or security issue. Keep this in mind and don't store sensitive information in this server.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>While it is possible to fix this, you should fix it at your own risk, since it breaks MAMP's ability to parse web server configurations and, as a result, makes MAMP think that Apache is listening to the wrong port. Consider switching away from MAMP. Otherwise, you can use the following:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Edit <code>\/Applications\/MAMP\/conf\/apache\/httpd.conf<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Change <code>Listen 8888<\/code> to <code>Listen 127.0.0.1:8888<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Linking to other directories<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You may like to create links in your <code>plugins<\/code> and <code>themes<\/code> directories to other folders, e.g.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>wp-content\/plugins\/gutenberg -> ~\/projects\/gutenberg<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>wp-content\/themes\/twentytwenty -> ~\/projects\/twentytwenty<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>If so, you need to instruct Apache to allow following such links:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Open or start a new file at <code>\/Applications\/MAMP\/htdocs\/.htaccess<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Add the following line: <code>Options +SymLinksIfOwnerMatch<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Using WP-CLI<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Tools like MAMP tend to configure MySQL to use ports other than the default 3306, often preferring 8889. This may throw off WP-CLI, which will fail after trying to connect to the database. To remedy this, edit <code>wp-config.php<\/code> and change the <code>DB_HOST<\/code> constant from <code>define( 'DB_HOST', 'localhost' )<\/code> to <code>define( 'DB_HOST', '127.0.0.1:8889' )<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">On a remote server<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You can use a remote server in development by building locally and then uploading the built files as a plugin to the remote server.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To build: open a terminal (or if on Windows, a command prompt) and navigate to the repository you cloned. Now type <code>npm ci<\/code> to get the dependencies all set up. Once that finishes, you can type <code>npm run build<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After building the cloned gutenberg directory contains the complete plugin, you can upload the entire repository to your <code>wp-content\/plugins<\/code> directory and activate the plugin from the WordPress admin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Another way to upload after building is to run <code>npm run build:plugin-zip<\/code> to create a plugin zip file \u2014 this requires <code>bash<\/code> and <code>php<\/code> to run. The script creates <code>gutenberg.zip<\/code> that you can use to install Gutenberg through the WordPress admin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Storybook<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Storybook is an open source tool for developing UI components in isolation for React, React Native and more. It makes building stunning UIs organized and efficient.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>The Gutenberg repository also includes <a href=\"https:\/\/storybook.js.org\/\">Storybook<\/a> integration that allows testing and developing in a WordPress-agnostic context. This is very helpful for developing reusable components and trying generic JavaScript modules without any backend dependency.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can launch Storybook by running <code>npm run storybook:dev<\/code> locally. It will open in your browser automatically.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can also test Storybook for the current <code>trunk<\/code> branch on GitHub Pages: <a href=\"https:\/\/wordpress.github.io\/gutenberg\/\">https:\/\/wordpress.github.io\/gutenberg\/<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Developer tools<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We recommend configuring your editor to automatically check for syntax and lint errors. This will help you save time as you develop by automatically fixing minor formatting issues. Here are some directions for setting up Visual Studio Code, a popular editor used by many of the core developers, these tools are also available for other editors.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">EditorConfig<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/editorconfig.org\/\">EditorConfig<\/a> defines a standard configuration for setting up your editor, for example using tabs instead of spaces. You should install the <a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=editorconfig.editorconfig\">EditorConfig for VS Code<\/a> extension and it will automatically configure your editor to match the rules defined in <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/.editorconfig\">.editorconfig<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ESLint<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/eslint.org\/\">ESLint<\/a> statically analyzes the code to find problems. The lint rules are integrated in the continuous integration process and must pass to be able to commit. You should install the <a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=dbaeumer.vscode-eslint\">ESLint Extension<\/a> for Visual Studio Code, see eslint docs for <a href=\"https:\/\/eslint.org\/docs\/user-guide\/integrations\">more editor integrations<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With the extension installed, ESLint will use the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/.eslintrc.js\">.eslintrc.js<\/a> file in the root of the Gutenberg repository for formatting rules. It will highlight issues as you develop, you can also set the following preference to fix lint rules on save.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>    \"editor.codeActionsOnSave\": {\n        \"source.fixAll.eslint\": true\n    },\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Prettier<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/prettier.io\/\">Prettier<\/a> is a tool that allows you to define an opinionated format, and automate fixing the code to match that format. Prettier and ESlint are similar, Prettier is more about formatting and style, while ESlint is for detecting coding errors.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To use Prettier with Visual Studio Code, you should install the <a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=esbenp.prettier-vscode\">Prettier - Code formatter extension<\/a>. You can then configure it to be the default formatter and to automatically fix issues on save, by adding the following to your settings. <strong><em>Note<\/em>: depending on where you are viewing this document, the brackets may show as double, the proper format is just a single bracket.<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\"&#91;&#91;javascript]]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n},\n\"&#91;&#91;markdown]]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This will use the <code>.prettierrc.js<\/code> file included in the root of the Gutenberg repository. The config is included from the <a href=\"\/packages\/prettier-config\/README.md\">@wordpress\/prettier-config<\/a> package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you only want to use this configuration with the Gutenberg project, create a directory called .vscode at the top-level of Gutenberg, and place your settings in a settings.json there. Visual Studio Code refers to this as Workplace Settings, and only apply to the project.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For other editors, see <a href=\"https:\/\/prettier.io\/docs\/en\/editors.html\">Prettier's Editor Integration docs<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">TypeScript<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>TypeScript<\/strong> is a typed superset of JavaScript language. The Gutenberg project uses TypeScript via JSDoc to <a href=\"https:\/\/www.typescriptlang.org\/docs\/handbook\/type-checking-javascript-files.html\">type check JavaScript files<\/a>. If you use Visual Studio Code, TypeScript support is built-in, otherwise see <a href=\"https:\/\/github.com\/Microsoft\/TypeScript\/wiki\/TypeScript-Editor-Support\">TypeScript Editor Support<\/a> for editor integrations.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Getting Started With Code Contribution\n\nThe following guide is for setting up your local environment to contribute to the Gutenberg project. There is significant overlap between an environment to contribute and an environment used to extend the WordPress block editor. You can review the [Development Environment tutorial](\/docs\/getting-started\/devenv\/README.md) for additional setup information.\n\n## Prerequisites\n\n-   Node.js\n    Gutenberg is a JavaScript project that requires [Node.js](https:\/\/nodejs.org\/). The project is currently built using Node.js v20 and npm v10. Though best efforts are made to always use the Active LTS version of Node.js, this will not always be the case. For more details, please refer to the [Node.js release schedule](https:\/\/github.com\/nodejs\/Release#release-schedule).\n\nWe recommend using the [Node Version Manager](https:\/\/github.com\/nvm-sh\/nvm) (nvm) since it is the easiest way to install and manage node for macOS, Linux, and Windows 10 using WSL2. See [our Development Tools guide](\/docs\/getting-started\/devenv\/README.md#development-tools) or the Nodejs site for additional installation instructions.\n\n-   Git\n    Gutenberg is using git for source control. Make sure you have an updated version of git installed on your computer, as well as a GitHub account. You can read the [Git Workflow](\/docs\/contributors\/code\/git-workflow.md) to learn more about using git and GitHub with Gutenberg\n\n-   [Recommended] Docker Desktop\n    We recommend using the [wp-env package](\/packages\/env\/README.md) for setting WordPress environment locally. You'll need to install Docker to use `wp-env`. See the [Development Environment tutorial for additional details](\/docs\/getting-started\/devenv\/README.md).\n    > Note: To install Docker on Windows 10 Home Edition, follow the [install instructions from Docker for Windows with WSL2](https:\/\/docs.docker.com\/docker-for-windows\/wsl\/).\n\nAs an alternative to Docker setup, you can use [Local](https:\/\/localwp.com\/), [WampServer](http:\/\/www.wampserver.com\/en\/), or [MAMP](https:\/\/www.mamp.info\/), or even use a remote server.\n\n-   GitHub CLI\n    Although not a requirement, the [GitHub CLI](https:\/\/cli.github.com\/) can be very useful in helping you checkout pull requests locally. Both from the Gutenberg repo and forked repos. This can be a major time saver while code reviewing and testing pull requests.\n\n## Getting the Gutenberg code\n\nFork the Gutenberg repository, clone it to your computer and add the WordPress repository as upstream.\n\n```bash\n$ git clone https:\/\/github.com\/YOUR_GITHUB_USERNAME\/gutenberg.git\n$ cd gutenberg\n$ git remote add upstream https:\/\/github.com\/WordPress\/gutenberg.git\n```\n\n## Building Gutenberg as a plugin\n\nInstall the Gutenberg dependencies and build your code in development mode:\n\n```bash\nnpm install\nnpm run dev\n```\n\n> Note: The install scripts require [Python](https:\/\/www.python.org\/) to be installed and in the path of the local system. This might be installed by default for your operating system, or require downloading and installing.\n\nThere are two ways to build your code. While developing, you probably will want to use `npm run dev` to run continuous builds automatically as source files change. The dev build also includes additional warnings and errors to help troubleshoot while developing. Once you are happy with your changes, you can run `npm run build` to create optimized production build.\n\nOnce built, Gutenberg is ready to be used as a WordPress plugin!\n\n## Local WordPress Environment\n\nTo test a WordPress plugin, you need to have WordPress itself installed. If you already have a WordPress environment setup, use the above Gutenberg build as a standard WordPress plugin by putting the gutenberg directory in your wp-content\/plugins\/ directory.\n\nIf you do not have a local WordPress environment setup, follow the steps in the rest of this section to create one.\n\n### Using Docker and wp-env\n\nThe [wp-env package](\/packages\/env\/README.md) was developed with the Gutenberg project as a quick way to create a standard WordPress environment using Docker. It is also published as the `@wordpress\/env` npm package.\n\nBy default, `wp-env` can run in a plugin directory to create and run a WordPress environment, mounting and activating the plugin automatically. You can also configure `wp-env` to use existing installs, multiple plugins, or themes. See the [wp-env package](\/packages\/env\/README.md#wp-envjson) for complete documentation.\n\nMake sure Docker is running, and start `wp-env` from within the gutenberg directory:\n\n```bash\nnpm run wp-env start\n```\n\nThis script will create a Docker instance behind the scenes with the latest WordPress Docker image, and then will map the Gutenberg plugin code from your local copy to the environment as a Docker volume. This way, any changes you make to the code locally are reflected immediately in the WordPress instance.\n\n> Note: `npm run` will use the `wp-env` \/ `WordPress`?? version specified within the Gutenberg project, making sure you are running the latest wp-env version.\n\nTo stop the running environment:\n\n```bash\nnpm run wp-env stop\n```\n\nIf everything went well, you should see the following message in your terminal:\n\n```bash\nWordPress development site started at http:\/\/localhost:8888\/\nWordPress test site started at http:\/\/localhost:8889\/\nMySQL is listening on port 51220\n\n \u2714 Done! (in 261s 898ms)\n```\n\nAnd if you open Docker dashboard by rightclicking the icon in the menu bar(on Mac) or system tray (on Linux and Windows) and selecting 'Dashboard', you will see that the script has downloaded some Docker Images, and is running a Docker Container with fully functional WordPress installation:\n![Screenshot of the WordPress Docker Container Running](https:\/\/cldup.com\/mt9cKES-YZ.png)\n![Screenshot of the Downloaded Docker Images for WordPress Development Environment](https:\/\/cldup.com\/bNpgaRSkcG.png)\n\nTo destroy the install completely:\n\n```bash\nnpm run wp-env destroy\n```\n\nExplore the [package documentation](\/packages\/env\/README.md) for additional commands.\n\n#### Accessing the Local WordPress Install\n\nThe WordPress installation should now be available at `http:\/\/localhost:8888`\n\nYou can access the Dashboard at: `http:\/\/localhost:8888\/wp-admin\/` using **Username**: `admin`, **Password**: `password`. You'll notice the Gutenberg plugin installed and activated, this is your local build.\n\n#### Accessing the MySQL Database\n\nTo access the MySQL database on the `wp-env` instance you will first need the connection details. To do this:\n\n1. In a terminal, navigate to your local Gutenberg repo.\n2. Run `npm run wp-env start` - various information about the `wp-env` environment should be logged into the terminal.\n3. In the output from step 2, look for information about the _MySQL_ port:\n   For example:\n\n> MySQL is listening on port {MYSQL_PORT_NUMBER}\n\n4. Copy \/ make a note of this port number (note this will change each time `wp-env` restarts).\n5. You can now connect to the MySQL instance using the following details (being sure to replace `{MYSQL_PORT_NUMBER}` with the port number from step three):\n\n```\nHost: 127.0.0.1\nUsername: root\nPassword: password\nDatabase: wordpress\nPort: {MYSQL_PORT_NUMBER}\n```\n\n**Please note**: the MySQL port number will change each time `wp-env` restarts. If you find you can no longer access your database, simply repeat the steps above to find the new port number and restore your connection.\n\n**Tip**: [Sequel Ace](https:\/\/sequel-ace.com\/) is a useful GUI tool for accessing a MySQL database. Other tools are available and documented in this [article on accessing the WordPress database](https:\/\/wordpress.org\/documentation\/article\/creating-database-for-wordpress\/).\n\n#### Troubleshooting\n\nIf you run into an issue, check the [troubleshooting section in `wp-env` documentation](\/packages\/env\/README.md#troubleshooting-common-problems).\n\n### Using Local or MAMP\n\nAs an alternative to Docker and `wp-env`, you can also use [Local](https:\/\/localwp.com\/), [WampServer](http:\/\/www.wampserver.com\/en\/), or [MAMP](https:\/\/www.mamp.info\/) to run a local WordPress environment. To do so clone and install Gutenberg as a regular plugin in your installation by creating a symlink or copying the directory to the proper `wp-content\/plugins` directory.\n\nYou will also need some extra configuration to be able to run the e2e tests.\n\nChange the current directory to the plugins folder and symlink all e2e test plugins:\n\n```bash\nln -s gutenberg\/packages\/e2e-tests\/plugins\/* .\n```\n\nYou'll need to run this again if new plugins are added. To run e2e tests:\n\n```bash\nWP_BASE_URL=http:\/\/localhost:8888\/gutenberg\/ npm run test:e2e\n```\n\n#### Caching of PHP files\n\nYou'll need to disable OPCache in order to correctly work on PHP files. To fix:\n\n-   Go to **MAMP > Preferences > PHP**\n-   Under **Cache**, select **off**\n-   Confirm with **OK**\n\n#### Incoming connections\n\nBy default, the web server (Apache) launched by MAMP will listen to all incoming connections, not just local ones. This means that anyone on the same local network (and, in certain cases, anyone on the Internet) can access your web server. This may be intentional and useful for testing sites on other devices, but most often this can be a privacy or security issue. Keep this in mind and don't store sensitive information in this server.\n\nWhile it is possible to fix this, you should fix it at your own risk, since it breaks MAMP's ability to parse web server configurations and, as a result, makes MAMP think that Apache is listening to the wrong port. Consider switching away from MAMP. Otherwise, you can use the following:\n\n-   Edit `\/Applications\/MAMP\/conf\/apache\/httpd.conf`\n-   Change `Listen 8888` to `Listen 127.0.0.1:8888`\n\n#### Linking to other directories\n\nYou may like to create links in your `plugins` and `themes` directories to other folders, e.g.\n\n-   wp-content\/plugins\/gutenberg -> ~\/projects\/gutenberg\n-   wp-content\/themes\/twentytwenty -> ~\/projects\/twentytwenty\n\nIf so, you need to instruct Apache to allow following such links:\n\n-   Open or start a new file at `\/Applications\/MAMP\/htdocs\/.htaccess`\n-   Add the following line: `Options +SymLinksIfOwnerMatch`\n\n#### Using WP-CLI\n\nTools like MAMP tend to configure MySQL to use ports other than the default 3306, often preferring 8889. This may throw off WP-CLI, which will fail after trying to connect to the database. To remedy this, edit `wp-config.php` and change the `DB_HOST` constant from `define( 'DB_HOST', 'localhost' )` to `define( 'DB_HOST', '127.0.0.1:8889' )`.\n\n### On a remote server\n\nYou can use a remote server in development by building locally and then uploading the built files as a plugin to the remote server.\n\nTo build: open a terminal (or if on Windows, a command prompt) and navigate to the repository you cloned. Now type `npm ci` to get the dependencies all set up. Once that finishes, you can type `npm run build`.\n\nAfter building the cloned gutenberg directory contains the complete plugin, you can upload the entire repository to your `wp-content\/plugins` directory and activate the plugin from the WordPress admin.\n\nAnother way to upload after building is to run `npm run build:plugin-zip` to create a plugin zip file \u2014 this requires `bash` and `php` to run. The script creates `gutenberg.zip` that you can use to install Gutenberg through the WordPress admin.\n\n## Storybook\n\n> Storybook is an open source tool for developing UI components in isolation for React, React Native and more. It makes building stunning UIs organized and efficient.\n\nThe Gutenberg repository also includes [Storybook](https:\/\/storybook.js.org\/) integration that allows testing and developing in a WordPress-agnostic context. This is very helpful for developing reusable components and trying generic JavaScript modules without any backend dependency.\n\nYou can launch Storybook by running `npm run storybook:dev` locally. It will open in your browser automatically.\n\nYou can also test Storybook for the current `trunk` branch on GitHub Pages: [https:\/\/wordpress.github.io\/gutenberg\/](https:\/\/wordpress.github.io\/gutenberg\/)\n\n## Developer tools\n\nWe recommend configuring your editor to automatically check for syntax and lint errors. This will help you save time as you develop by automatically fixing minor formatting issues. Here are some directions for setting up Visual Studio Code, a popular editor used by many of the core developers, these tools are also available for other editors.\n\n### EditorConfig\n\n[EditorConfig](https:\/\/editorconfig.org\/) defines a standard configuration for setting up your editor, for example using tabs instead of spaces. You should install the [EditorConfig for VS Code](https:\/\/marketplace.visualstudio.com\/items?itemName=editorconfig.editorconfig) extension and it will automatically configure your editor to match the rules defined in [.editorconfig](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/.editorconfig).\n\n### ESLint\n\n[ESLint](https:\/\/eslint.org\/) statically analyzes the code to find problems. The lint rules are integrated in the continuous integration process and must pass to be able to commit. You should install the [ESLint Extension](https:\/\/marketplace.visualstudio.com\/items?itemName=dbaeumer.vscode-eslint) for Visual Studio Code, see eslint docs for [more editor integrations](https:\/\/eslint.org\/docs\/user-guide\/integrations).\n\nWith the extension installed, ESLint will use the [.eslintrc.js](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/.eslintrc.js) file in the root of the Gutenberg repository for formatting rules. It will highlight issues as you develop, you can also set the following preference to fix lint rules on save.\n\n```json\n    \"editor.codeActionsOnSave\": {\n        \"source.fixAll.eslint\": true\n    },\n```\n\n### Prettier\n\n[Prettier](https:\/\/prettier.io\/) is a tool that allows you to define an opinionated format, and automate fixing the code to match that format. Prettier and ESlint are similar, Prettier is more about formatting and style, while ESlint is for detecting coding errors.\n\nTo use Prettier with Visual Studio Code, you should install the [Prettier - Code formatter extension](https:\/\/marketplace.visualstudio.com\/items?itemName=esbenp.prettier-vscode). You can then configure it to be the default formatter and to automatically fix issues on save, by adding the following to your settings. **_Note_: depending on where you are viewing this document, the brackets may show as double, the proper format is just a single bracket.**\n\n```json\n\"[[javascript]]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n},\n\"[[markdown]]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n},\n```\n\nThis will use the `.prettierrc.js` file included in the root of the Gutenberg repository. The config is included from the [@wordpress\/prettier-config](\/packages\/prettier-config\/README.md) package.\n\nIf you only want to use this configuration with the Gutenberg project, create a directory called .vscode at the top-level of Gutenberg, and place your settings in a settings.json there. Visual Studio Code refers to this as Workplace Settings, and only apply to the project.\n\nFor other editors, see [Prettier's Editor Integration docs](https:\/\/prettier.io\/docs\/en\/editors.html)\n\n### TypeScript\n\n**TypeScript** is a typed superset of JavaScript language. The Gutenberg project uses TypeScript via JSDoc to [type check JavaScript files](https:\/\/www.typescriptlang.org\/docs\/handbook\/type-checking-javascript-files.html). If you use Visual Studio Code, TypeScript support is built-in, otherwise see [TypeScript Editor Support](https:\/\/github.com\/Microsoft\/TypeScript\/wiki\/TypeScript-Editor-Support) for editor integrations.\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/scripts.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Scripts<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The editor provides several vendor and internal scripts to plugin developers. Script names, handles, and descriptions are documented in the table below.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">WordPress scripts<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The editor includes a number of packages to enable various pieces of functionality. Plugin developers can utilize them to create blocks, editor plugins, or generic plugins.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Script Name                                                                                  | Handle                                | Description                                                                                                                                                   |<br>| -------------------------------------------------------------------------------------------- | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |<br>| <a href=\"\/packages\/blob\/README.md\">Blob<\/a>                                                             | wp-blob                               | Blob utilities                                                                                                                                                |<br>| <a href=\"\/packages\/block-library\/README.md\">Block Library<\/a>                                           | wp-block-library                      | Block library for the editor                                                                                                                                  |<br>| <a href=\"\/packages\/blocks\/README.md\">Blocks<\/a>                                                         | wp-blocks                             | Block creations                                                                                                                                               |<br>| <a href=\"\/packages\/block-serialization-default-parser\/README.md\">Block Serialization Default Parser<\/a> | wp-block-serialization-default-parser | Default block serialization parser implementations for WordPress documents                                                                                    |<br>| <a href=\"\/packages\/block-serialization-spec-parser\/README.md\">Block Serialization Spec Parser<\/a>       | wp-block-serialization-spec-parser    | Grammar file (grammar.pegjs) for WordPress posts                                                                                                              |<br>| <a href=\"\/packages\/components\/README.md\">Components<\/a>                                                 | wp-components                         | Generic components to be used for creating common UI elements                                                                                                 |<br>| <a href=\"\/packages\/compose\/README.md\">Compose<\/a>                                                       | wp-compose                            | Collection of handy Higher Order Components (HOCs)                                                                                                            |<br>| <a href=\"\/packages\/core-data\/README.md\">Core Data<\/a>                                                   | wp-core-data                          | Simplify access to and manipulation of core WordPress entities                                                                                                |<br>| <a href=\"\/packages\/data\/README.md\">Data<\/a>                                                             | wp-data                               | Data module serves as a hub to manage application state for both plugins and WordPress itself                                                                 |<br>| <a href=\"\/packages\/date\/README.md\">Date<\/a>                                                             | wp-date                               | Date module for WordPress                                                                                                                                     |<br>| <a href=\"\/packages\/deprecated\/README.md\">Deprecated<\/a>                                                 | wp-deprecated                         | Utility to log a message to notify developers about a deprecated feature                                                                                      |<br>| <a href=\"\/packages\/dom\/README.md\">Dom<\/a>                                                               | wp-dom                                | DOM utilities module for WordPress                                                                                                                            |<br>| <a href=\"\/packages\/dom-ready\/README.md\">Dom Ready<\/a>                                                   | wp-dom-ready                          | Execute callback after the DOM is loaded                                                                                                                      |<br>| <a href=\"\/packages\/editor\/README.md\">Editor<\/a>                                                         | wp-editor                             | Building blocks for WordPress editors                                                                                                                         |<br>| <a href=\"\/packages\/edit-post\/README.md\">Edit Post<\/a>                                                   | wp-edit-post                          | Edit Post Module for WordPress                                                                                                                                |<br>| <a href=\"\/packages\/element\/README.md\">Element<\/a>                                                       | wp-element                            | Element is, quite simply, an abstraction layer atop <a href=\"https:\/\/reactjs.org\/\">React<\/a>                                                                             |<br>| <a href=\"\/packages\/escape-html\/README.md\">Escape Html<\/a>                                               | wp-escape-html                        | Escape HTML utils                                                                                                                                             |<br>| <a href=\"\/packages\/hooks\/README.md\">Hooks<\/a>                                                           | wp-hooks                              | A lightweight and efficient EventManager for JavaScript                                                                                                       |<br>| <a href=\"\/packages\/html-entities\/README.md\">Html Entities<\/a>                                           | wp-html-entities                      | HTML entity utilities for WordPress                                                                                                                           |<br>| <a href=\"\/packages\/i18n\/README.md\">I18N<\/a>                                                             | wp-i18n                               | Internationalization utilities for client-side localization                                                                                                   |<br>| <a href=\"\/packages\/is-shallow-equal\/README.md\">Is Shallow Equal<\/a>                                     | wp-is-shallow-equal                   | A function for performing a shallow comparison between two objects or arrays                                                                                  |<br>| <a href=\"\/packages\/keycodes\/README.md\">Keycodes<\/a>                                                     | wp-keycodes                           | Keycodes utilities for WordPress, used to check the key pressed in events like <code>onKeyDown<\/code>                                                                    |<br>| <a href=\"\/packages\/list-reusable-blocks\/README.md\">List Reusable blocks<\/a>                             | wp-list-reusable-blocks               | Package used to add import\/export links to the listing page of the reusable blocks                                                                            |<br>| <a href=\"\/packages\/nux\/README.md\">NUX<\/a>                                                               | wp-nux                                | Components, and wp.data methods useful for onboarding a new user to the WordPress admin interface                                                             |<br>| <a href=\"\/packages\/plugins\/README.md\">Plugins<\/a>                                                       | wp-plugins                            | Plugins module for WordPress                                                                                                                                  |<br>| <a href=\"\/packages\/redux-routine\/README.md\">Redux Routine<\/a>                                           | wp-redux-routine                      | Redux middleware for generator coroutines                                                                                                                     |<br>| <a href=\"\/packages\/rich-text\/README.md\">Rich Text<\/a>                                                   | wp-rich-text                          | Helper functions to convert HTML or a DOM tree into a rich text value and back                                                                                |<br>| <a href=\"\/packages\/shortcode\/README.md\">Shortcode<\/a>                                                   | wp-shortcode                          | Shortcode module for WordPress                                                                                                                                |<br>| <a href=\"\/packages\/token-list\/README.md\">Token List<\/a>                                                 | wp-token-list                         | Constructable, plain JavaScript <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/DOMTokenList\">DOMTokenList<\/a> implementation, supporting non-browser runtimes |<br>| <a href=\"\/packages\/url\/README.md\">URL<\/a>                                                               | wp-url                                | A collection of utilities to manipulate URLs                                                                                                                  |<br>| <a href=\"\/packages\/viewport\/README.md\">Viewport<\/a>                                                     | wp-viewport                           | Module for responding to changes in the browser viewport size                                                                                                 |<br>| <a href=\"\/packages\/wordcount\/README.md\">Wordcount<\/a>                                                   | wp-wordcount                          | WordPress word count utility                                                                                                                                  |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Vendor scripts<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The editor also uses some popular third-party packages and scripts. Plugin developers can use these scripts as well without bundling them in their code (and increasing file sizes).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Script Name                                          | Handle    | Description                                                                                           |<br>| ---------------------------------------------------- | --------- | ----------------------------------------------------------------------------------------------------- |<br>| <a href=\"https:\/\/reactjs.org\">React<\/a>                         | react     | React is a JavaScript library for building user interfaces                                            |<br>| <a href=\"https:\/\/reactjs.org\/docs\/react-dom.html\">React Dom<\/a> | react-dom | Serves as the entry point to the DOM and server renderers for React, intended to be paired with React |<br>| <a href=\"https:\/\/momentjs.com\/\">Moment<\/a>                      | moment    | Parse, validate, manipulate, and display dates and times in JavaScript                                |<br>| <a href=\"https:\/\/lodash.com\">Lodash<\/a>                         | lodash    | Lodash is a JavaScript library which provides utility functions for common programming tasks          |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Polyfill scripts<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The editor also provides polyfills for certain features that may not be available in all modern browsers.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It is recommended to use the main <code>wp-polyfill<\/code> script handle which takes care of loading all the below mentioned polyfills.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Script Name                                                               | Handle                      | Description                                                                                          |<br>| ------------------------------------------------------------------------- | --------------------------- | ---------------------------------------------------------------------------------------------------- |<br>| <a href=\"https:\/\/babeljs.io\/docs\/en\/babel-polyfill\">Babel Polyfill<\/a>               | wp-polyfill                 | Emulate a full ES2015+ environment. Main script to load all the below mentioned additional polyfills |<br>| <a href=\"https:\/\/www.npmjs.com\/package\/whatwg-fetch\">Fetch Polyfill<\/a>              | wp-polyfill-fetch           | Polyfill that implements a subset of the standard Fetch specification                                |<br>| <a href=\"https:\/\/www.npmjs.com\/package\/promise-polyfill\">Promise Polyfill<\/a>        | wp-polyfill-promise         | Lightweight ES6 Promise polyfill for the browser and node                                            |<br>| <a href=\"https:\/\/www.npmjs.com\/package\/formdata-polyfill\">Formdata Polyfill<\/a>      | wp-polyfill-formdata        | Polyfill conditionally replaces the native implementation                                            |<br>| <a href=\"https:\/\/polyfill.io\">Node Contains Polyfill<\/a>                             | wp-polyfill-node-contains   | Polyfill for Node.contains                                                                           |<br>| <a href=\"https:\/\/www.npmjs.com\/package\/element-closest\">Element Closest Polyfill<\/a> | wp-polyfill-element-closest | Return the closest element matching a selector up the DOM tree                                       |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Bundling and code sharing<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When using a JavaScript bundler like <a href=\"https:\/\/webpack.js.org\/\">webpack<\/a>, the scripts mentioned here can be excluded from the bundle and provided by WordPress in the form of script dependencies see <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_enqueue_script\/#default-scripts-included-and-registered-by-wordpress\"><code>wp_enqueue_script<\/code><\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/dependency-extraction-webpack-plugin\"><code>@wordpress\/dependency-extraction-webpack-plugin<\/code><\/a> provides a webpack plugin to help extract WordPress dependencies from bundles. The <code>@wordpress\/scripts<\/code> <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/scripts#build\"><code>build<\/code><\/a> script includes the plugin by default.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Scripts\n\nThe editor provides several vendor and internal scripts to plugin developers. Script names, handles, and descriptions are documented in the table below.\n\n## WordPress scripts\n\nThe editor includes a number of packages to enable various pieces of functionality. Plugin developers can utilize them to create blocks, editor plugins, or generic plugins.\n\n| Script Name                                                                                  | Handle                                | Description                                                                                                                                                   |\n| -------------------------------------------------------------------------------------------- | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [Blob](\/packages\/blob\/README.md)                                                             | wp-blob                               | Blob utilities                                                                                                                                                |\n| [Block Library](\/packages\/block-library\/README.md)                                           | wp-block-library                      | Block library for the editor                                                                                                                                  |\n| [Blocks](\/packages\/blocks\/README.md)                                                         | wp-blocks                             | Block creations                                                                                                                                               |\n| [Block Serialization Default Parser](\/packages\/block-serialization-default-parser\/README.md) | wp-block-serialization-default-parser | Default block serialization parser implementations for WordPress documents                                                                                    |\n| [Block Serialization Spec Parser](\/packages\/block-serialization-spec-parser\/README.md)       | wp-block-serialization-spec-parser    | Grammar file (grammar.pegjs) for WordPress posts                                                                                                              |\n| [Components](\/packages\/components\/README.md)                                                 | wp-components                         | Generic components to be used for creating common UI elements                                                                                                 |\n| [Compose](\/packages\/compose\/README.md)                                                       | wp-compose                            | Collection of handy Higher Order Components (HOCs)                                                                                                            |\n| [Core Data](\/packages\/core-data\/README.md)                                                   | wp-core-data                          | Simplify access to and manipulation of core WordPress entities                                                                                                |\n| [Data](\/packages\/data\/README.md)                                                             | wp-data                               | Data module serves as a hub to manage application state for both plugins and WordPress itself                                                                 |\n| [Date](\/packages\/date\/README.md)                                                             | wp-date                               | Date module for WordPress                                                                                                                                     |\n| [Deprecated](\/packages\/deprecated\/README.md)                                                 | wp-deprecated                         | Utility to log a message to notify developers about a deprecated feature                                                                                      |\n| [Dom](\/packages\/dom\/README.md)                                                               | wp-dom                                | DOM utilities module for WordPress                                                                                                                            |\n| [Dom Ready](\/packages\/dom-ready\/README.md)                                                   | wp-dom-ready                          | Execute callback after the DOM is loaded                                                                                                                      |\n| [Editor](\/packages\/editor\/README.md)                                                         | wp-editor                             | Building blocks for WordPress editors                                                                                                                         |\n| [Edit Post](\/packages\/edit-post\/README.md)                                                   | wp-edit-post                          | Edit Post Module for WordPress                                                                                                                                |\n| [Element](\/packages\/element\/README.md)                                                       | wp-element                            | Element is, quite simply, an abstraction layer atop [React](https:\/\/reactjs.org\/)                                                                             |\n| [Escape Html](\/packages\/escape-html\/README.md)                                               | wp-escape-html                        | Escape HTML utils                                                                                                                                             |\n| [Hooks](\/packages\/hooks\/README.md)                                                           | wp-hooks                              | A lightweight and efficient EventManager for JavaScript                                                                                                       |\n| [Html Entities](\/packages\/html-entities\/README.md)                                           | wp-html-entities                      | HTML entity utilities for WordPress                                                                                                                           |\n| [I18N](\/packages\/i18n\/README.md)                                                             | wp-i18n                               | Internationalization utilities for client-side localization                                                                                                   |\n| [Is Shallow Equal](\/packages\/is-shallow-equal\/README.md)                                     | wp-is-shallow-equal                   | A function for performing a shallow comparison between two objects or arrays                                                                                  |\n| [Keycodes](\/packages\/keycodes\/README.md)                                                     | wp-keycodes                           | Keycodes utilities for WordPress, used to check the key pressed in events like `onKeyDown`                                                                    |\n| [List Reusable blocks](\/packages\/list-reusable-blocks\/README.md)                             | wp-list-reusable-blocks               | Package used to add import\/export links to the listing page of the reusable blocks                                                                            |\n| [NUX](\/packages\/nux\/README.md)                                                               | wp-nux                                | Components, and wp.data methods useful for onboarding a new user to the WordPress admin interface                                                             |\n| [Plugins](\/packages\/plugins\/README.md)                                                       | wp-plugins                            | Plugins module for WordPress                                                                                                                                  |\n| [Redux Routine](\/packages\/redux-routine\/README.md)                                           | wp-redux-routine                      | Redux middleware for generator coroutines                                                                                                                     |\n| [Rich Text](\/packages\/rich-text\/README.md)                                                   | wp-rich-text                          | Helper functions to convert HTML or a DOM tree into a rich text value and back                                                                                |\n| [Shortcode](\/packages\/shortcode\/README.md)                                                   | wp-shortcode                          | Shortcode module for WordPress                                                                                                                                |\n| [Token List](\/packages\/token-list\/README.md)                                                 | wp-token-list                         | Constructable, plain JavaScript [DOMTokenList](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/DOMTokenList) implementation, supporting non-browser runtimes |\n| [URL](\/packages\/url\/README.md)                                                               | wp-url                                | A collection of utilities to manipulate URLs                                                                                                                  |\n| [Viewport](\/packages\/viewport\/README.md)                                                     | wp-viewport                           | Module for responding to changes in the browser viewport size                                                                                                 |\n| [Wordcount](\/packages\/wordcount\/README.md)                                                   | wp-wordcount                          | WordPress word count utility                                                                                                                                  |\n\n## Vendor scripts\n\nThe editor also uses some popular third-party packages and scripts. Plugin developers can use these scripts as well without bundling them in their code (and increasing file sizes).\n\n| Script Name                                          | Handle    | Description                                                                                           |\n| ---------------------------------------------------- | --------- | ----------------------------------------------------------------------------------------------------- |\n| [React](https:\/\/reactjs.org)                         | react     | React is a JavaScript library for building user interfaces                                            |\n| [React Dom](https:\/\/reactjs.org\/docs\/react-dom.html) | react-dom | Serves as the entry point to the DOM and server renderers for React, intended to be paired with React |\n| [Moment](https:\/\/momentjs.com\/)                      | moment    | Parse, validate, manipulate, and display dates and times in JavaScript                                |\n| [Lodash](https:\/\/lodash.com)                         | lodash    | Lodash is a JavaScript library which provides utility functions for common programming tasks          |\n\n## Polyfill scripts\n\nThe editor also provides polyfills for certain features that may not be available in all modern browsers.\n\nIt is recommended to use the main `wp-polyfill` script handle which takes care of loading all the below mentioned polyfills.\n\n| Script Name                                                               | Handle                      | Description                                                                                          |\n| ------------------------------------------------------------------------- | --------------------------- | ---------------------------------------------------------------------------------------------------- |\n| [Babel Polyfill](https:\/\/babeljs.io\/docs\/en\/babel-polyfill)               | wp-polyfill                 | Emulate a full ES2015+ environment. Main script to load all the below mentioned additional polyfills |\n| [Fetch Polyfill](https:\/\/www.npmjs.com\/package\/whatwg-fetch)              | wp-polyfill-fetch           | Polyfill that implements a subset of the standard Fetch specification                                |\n| [Promise Polyfill](https:\/\/www.npmjs.com\/package\/promise-polyfill)        | wp-polyfill-promise         | Lightweight ES6 Promise polyfill for the browser and node                                            |\n| [Formdata Polyfill](https:\/\/www.npmjs.com\/package\/formdata-polyfill)      | wp-polyfill-formdata        | Polyfill conditionally replaces the native implementation                                            |\n| [Node Contains Polyfill](https:\/\/polyfill.io)                             | wp-polyfill-node-contains   | Polyfill for Node.contains                                                                           |\n| [Element Closest Polyfill](https:\/\/www.npmjs.com\/package\/element-closest) | wp-polyfill-element-closest | Return the closest element matching a selector up the DOM tree                                       |\n\n## Bundling and code sharing\n\nWhen using a JavaScript bundler like [webpack](https:\/\/webpack.js.org\/), the scripts mentioned here can be excluded from the bundle and provided by WordPress in the form of script dependencies see [`wp_enqueue_script`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_enqueue_script\/#default-scripts-included-and-registered-by-wordpress).\n\nThe [`@wordpress\/dependency-extraction-webpack-plugin`](https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/dependency-extraction-webpack-plugin) provides a webpack plugin to help extract WordPress dependencies from bundles. The `@wordpress\/scripts` [`build`](https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/scripts#build) script includes the plugin by default.\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/backward-compatibility.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Backward Compatibility<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Historically, WordPress has been known for preserving backward compatibility across versions. Gutenberg follows this example wherever possible in its production public APIs. There are rare occasions where breaking backward compatibility is unavoidable and in those cases the breakage:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Should be constrained as much as possible to a small surface area of the API.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Should be documented as clearly as possible to third-party developers using Dev Notes.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">What qualifies as a production public API<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Gutenberg code base is composed of two different types of packages:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>production packages<\/strong>: these are packages that are shipped as WordPress scripts (example: wp-components, wp-editor...).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>development packages<\/strong>: these are made up of developer tools that can be used by third-party developers to lint, test, format and build their themes and plugins (example: @wordpress\/scrips, @wordpress\/env...). Typically, these are consumed as npm dependencies in third-party projects.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Backward compatibility guarantees only apply to the production packages, as updates happen through WordPress upgrades.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Production packages use the <code>wp<\/code> global variable to provide APIs to third-party developers. These APIs can be JavaScript functions, variables and React components.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">How to preserve backward compatibility for a JavaScript function<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The name of the function should not change.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The order of the arguments of the function should not change.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The function's returned value type should not change.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Changes to arguments (new arguments, modification of semantics) is possible if we guarantee that all previous calls are still possible.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">How to preserve backward compatibility for a React Component<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The name of the component should not change.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The props of the component should not be removed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Existing prop values should continue to be supported. If a component accepts a function as a prop, we can update the component to accept a new type for the same prop, but it shouldn't break existing usage.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Adding new props is allowed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>React Context dependencies can only be added or removed if we ensure the previous context contract is not breaking.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">How to preserve backward compatibility for a Block<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Existing usage of the block should not break or be marked as invalid when the editor is loaded.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The styling of the existing blocks should be guaranteed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Markup changes should be limited to the minimum possible, but if a block needs to change its saved markup, making previous versions invalid, a <a href=\"\/docs\/reference-guides\/block-api\/block-deprecation.md\"><strong>deprecated version<\/strong><\/a> of the block should be added.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Class names and DOM updates<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Class names and DOM nodes used inside the tree of React components are not considered part of the public API and can be modified.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Changes to these should be done with caution as it can affect the styling and behavior of third-party code (Even if they should not rely on these in the first place). Keep the old ones if possible. If not, document the changes and write a dev note.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Deprecations<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As the project evolves, flaws of existing APIs are discovered, or updates are required to support new features. When this happens, we try to guarantee that existing APIs don't break and build new alternative APIs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To encourage third-party developers to adopt the new APIs instead, we can use the <a href=\"\/packages\/deprecated\/README.md\"><strong>deprecated<\/strong><\/a> helper to show a message explaining the deprecation and propose the alternative whenever the old API is used.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Make it more clear when the feature was deprecated. Use the <code>since<\/code> and <code>plugin<\/code> options of the helper method.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>deprecated( 'wp.components.ClipboardButton', {\n\tsince: '10.3',\n\tplugin: 'Gutenberg',\n\talternative: 'wp.compose.useCopyToClipboard',\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Dev notes<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Dev notes are <a href=\"https:\/\/make.wordpress.org\/core\/tag\/dev-notes\/\">posts published on the make\/core site<\/a> prior to WordPress releases to inform third-party developers about important changes to the developer APIs, these changes can include:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>New APIs.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Changes to existing APIs that might affect existing plugins and themes. (Example: classname changes...)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Unavoidable backward compatibility breakage, with reasoning and migration flows.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Important deprecations (even without breakage), with reasoning and migration flows.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Dev note workflow<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>When working on a pull request and the need for a dev note is discovered, add the <strong>Needs Dev Note<\/strong> label to the PR.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If possible, add a comment to the PR explaining why the dev note is needed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>When the first beta of the upcoming WordPress release is shipped, go through the list of merged PRs included in the release that are tagged with the <strong>Needs Dev Note<\/strong> label.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>For each one of these PRs, write a dev note and coordinate with the WordPress release leads to publish the dev note.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Once the dev note for a PR is published, remove the <strong>Needs Dev Note<\/strong> label from the PR.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Backward Compatibility\n\nHistorically, WordPress has been known for preserving backward compatibility across versions. Gutenberg follows this example wherever possible in its production public APIs. There are rare occasions where breaking backward compatibility is unavoidable and in those cases the breakage:\n\n-   Should be constrained as much as possible to a small surface area of the API.\n-   Should be documented as clearly as possible to third-party developers using Dev Notes.\n\n## What qualifies as a production public API\n\nThe Gutenberg code base is composed of two different types of packages:\n\n-   **production packages**: these are packages that are shipped as WordPress scripts (example: wp-components, wp-editor...).\n-   **development packages**: these are made up of developer tools that can be used by third-party developers to lint, test, format and build their themes and plugins (example: @wordpress\/scrips, @wordpress\/env...). Typically, these are consumed as npm dependencies in third-party projects.\n\nBackward compatibility guarantees only apply to the production packages, as updates happen through WordPress upgrades.\n\nProduction packages use the `wp` global variable to provide APIs to third-party developers. These APIs can be JavaScript functions, variables and React components.\n\n### How to preserve backward compatibility for a JavaScript function\n\n-   The name of the function should not change.\n-   The order of the arguments of the function should not change.\n-   The function's returned value type should not change.\n-   Changes to arguments (new arguments, modification of semantics) is possible if we guarantee that all previous calls are still possible.\n\n### How to preserve backward compatibility for a React Component\n\n-   The name of the component should not change.\n-   The props of the component should not be removed.\n-   Existing prop values should continue to be supported. If a component accepts a function as a prop, we can update the component to accept a new type for the same prop, but it shouldn't break existing usage.\n-   Adding new props is allowed.\n-   React Context dependencies can only be added or removed if we ensure the previous context contract is not breaking.\n\n### How to preserve backward compatibility for a Block\n\n-   Existing usage of the block should not break or be marked as invalid when the editor is loaded.\n-   The styling of the existing blocks should be guaranteed.\n-   Markup changes should be limited to the minimum possible, but if a block needs to change its saved markup, making previous versions invalid, a [**deprecated version**](\/docs\/reference-guides\/block-api\/block-deprecation.md) of the block should be added.\n\n## Class names and DOM updates\n\nClass names and DOM nodes used inside the tree of React components are not considered part of the public API and can be modified.\n\nChanges to these should be done with caution as it can affect the styling and behavior of third-party code (Even if they should not rely on these in the first place). Keep the old ones if possible. If not, document the changes and write a dev note.\n\n## Deprecations\n\nAs the project evolves, flaws of existing APIs are discovered, or updates are required to support new features. When this happens, we try to guarantee that existing APIs don't break and build new alternative APIs.\n\nTo encourage third-party developers to adopt the new APIs instead, we can use the [**deprecated**](\/packages\/deprecated\/README.md) helper to show a message explaining the deprecation and propose the alternative whenever the old API is used.\n\nMake it more clear when the feature was deprecated. Use the `since` and `plugin` options of the helper method.\n\nExample:\n\n```js\ndeprecated( 'wp.components.ClipboardButton', {\n\tsince: '10.3',\n\tplugin: 'Gutenberg',\n\talternative: 'wp.compose.useCopyToClipboard',\n} );\n```\n\n## Dev notes\n\nDev notes are [posts published on the make\/core site](https:\/\/make.wordpress.org\/core\/tag\/dev-notes\/) prior to WordPress releases to inform third-party developers about important changes to the developer APIs, these changes can include:\n\n-   New APIs.\n-   Changes to existing APIs that might affect existing plugins and themes. (Example: classname changes...)\n-   Unavoidable backward compatibility breakage, with reasoning and migration flows.\n-   Important deprecations (even without breakage), with reasoning and migration flows.\n\n### Dev note workflow\n\n-   When working on a pull request and the need for a dev note is discovered, add the **Needs Dev Note** label to the PR.\n-   If possible, add a comment to the PR explaining why the dev note is needed.\n-   When the first beta of the upcoming WordPress release is shipped, go through the list of merged PRs included in the release that are tagged with the **Needs Dev Note** label.\n-   For each one of these PRs, write a dev note and coordinate with the WordPress release leads to publish the dev note.\n-   Once the dev note for a PR is published, remove the **Needs Dev Note** label from the PR.\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/back-merging-to-wp-core.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Back-merging code to WordPress Core<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For major releases of the WordPress software, Gutenberg features need to be merged into WordPress Core. Typically this involves taking changes made in <code>.php<\/code> files within the Gutenberg repository and making the equivalent updates in the WP Core codebase.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Criteria<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Files\/Directories<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Changes to files within the following files\/directories will typically require back-merging to WP Core:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>lib\/<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>phpunit\/<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Ignored directories\/files<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The following directories\/files do <em>not<\/em> require back-merging to WP Core:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>lib\/load.php<\/code> - Plugin specific code.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>lib\/experiments-page.php<\/code> - experiments are Plugin specific.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>packages\/block-library<\/code> - this is handled automatically during the packages sync process.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>packages\/e2e-tests\/plugins<\/code> - PHP files related to e2e tests only. Mostly fixture data generators.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>phpunit\/blocks<\/code> - the code is maintained in Gutenberg so the test should be as well.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Please note this list is not exhaustive.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Pull Request Criteria<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In general, all PHP code committed to the Gutenberg repository since the date of the final Gutenberg release that was included in <a href=\"https:\/\/developer.wordpress.org\/block-editor\/contributors\/versions-in-wordpress\/\">the <em>last<\/em> stable WP Core release<\/a> should be considered for back merging to WP Core.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are however certain exceptions to that rule. PRs with the following criteria do <em>not<\/em> require back-merging to WP Core:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Does not contain changes to PHP code.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Has label <code>Backport from WordPress Core<\/code> - this code is already in WP Core and is being synchronized back to Gutenberg.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Has label <code>Backport to WordPress Core<\/code> - this code has already been syncrhonized to WP Core.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Further Reading<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Please see also additional documentation regarding <a href=\"\/lib\/README.md\">Gutenberg PHP code<\/a>.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Back-merging code to WordPress Core\n\nFor major releases of the WordPress software, Gutenberg features need to be merged into WordPress Core. Typically this involves taking changes made in `.php` files within the Gutenberg repository and making the equivalent updates in the WP Core codebase.\n\n## Criteria\n\n### Files\/Directories\n\nChanges to files within the following files\/directories will typically require back-merging to WP Core:\n\n-   `lib\/`\n-   `phpunit\/`\n\n### Ignored directories\/files\n\nThe following directories\/files do _not_ require back-merging to WP Core:\n\n-   `lib\/load.php` - Plugin specific code.\n-   `lib\/experiments-page.php` - experiments are Plugin specific.\n-   `packages\/block-library` - this is handled automatically during the packages sync process.\n-   `packages\/e2e-tests\/plugins` - PHP files related to e2e tests only. Mostly fixture data generators.\n-   `phpunit\/blocks` - the code is maintained in Gutenberg so the test should be as well.\n\nPlease note this list is not exhaustive.\n\n### Pull Request Criteria\n\nIn general, all PHP code committed to the Gutenberg repository since the date of the final Gutenberg release that was included in [the _last_ stable WP Core release](https:\/\/developer.wordpress.org\/block-editor\/contributors\/versions-in-wordpress\/) should be considered for back merging to WP Core.\n\nThere are however certain exceptions to that rule. PRs with the following criteria do _not_ require back-merging to WP Core:\n\n-   Does not contain changes to PHP code.\n-   Has label `Backport from WordPress Core` - this code is already in WP Core and is being synchronized back to Gutenberg.\n-   Has label `Backport to WordPress Core` - this code has already been syncrhonized to WP Core.\n\n## Further Reading\n\nPlease see also additional documentation regarding [Gutenberg PHP code](\/lib\/README.md).\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/how-to-get-your-pull-request-reviewed.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">How To Get Your Pull Request Reviewed?<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Sometimes we publish a Pull Request and no one <a href=\"\/docs\/contributors\/repository-management.md#code-review\">reviews<\/a> our work. What to do?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Attracting a review largely isn't about the code \u2013 it is about making the reviewing easy.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you published a Pull Request that isn't getting any comments or reviews, try one of the strategies used by core contributors:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Create the smallest reasonable PRs<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Approving a 2000-line-long PR takes months and feels overwhelming.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Approving a 50-line long PR takes days or hours and feels easy.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Large batches slow you down. Ship your work in small chunks to merge more and learn faster.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Share relevant context:<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Clarify:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>What problem are you solving?<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>How does your PR solve it?<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>What feedback do you need?<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>What\u2019s out of scope?<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>What\u2019s unintuitive?<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>How to test?<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Summarize any related issues and PRs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's easier than asking others to go and figure it out.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Make your PR exciting<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>All contributions are competing for attention. Make your stand out.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The easiest way? Say why it matters:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u274c A new react hook to get data<br>\u2705 <code>useEntityRecord<\/code>: get data with 10x less boilerplate<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then prove it with code examples, visuals, and screencasts.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Show your work<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Post a link to your PR in related issues &amp; PRs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Ping commenters of related issues, previous committers, and tech leads.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Bring it up on the #core-editor channel of the WordPress.org slack. The easiest way to get feedback is to speak out during the <a href=\"https:\/\/make.wordpress.org\/core\/tag\/core-editor-agenda\/\">open floor section<\/a> of the weekly <a href=\"\/docs\/getting-started\/README.md\">Core Editor meeting<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Assign relevant labels, milestones, and projects (or ask someone).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Review the work of others<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It\u2019s the easiest way to get on others\u2019 radar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Look up the PRs of commenters of related issues, previous committers, and tech leads. Then review them.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Is their work unfamiliar? Do:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Take some time to understand it<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Propose a pair programming session<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Skip, go for the next PR<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Reduce risk with clarity<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Risk adds friction \u2013 an approval can backfire later.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Clarity is like grease. Clearly document:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>What risks are involved? Why take them?<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Why is this PR the best solution?<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>How can the risk be minimized?<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>What else has been tried?<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Follow the attention<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Some PRs naturally get more traction than others.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Double down on these.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some Issues are more topical than others (e.g. those listed in the goals for an upcoming release) and thus will garner more attention. By focusing on these it will be easier to attract reviewers.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>How to get there quickly? Help with an active project from the WordPress roadmap<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# How To Get Your Pull Request Reviewed?\n\nSometimes we publish a Pull Request and no one [reviews](\/docs\/contributors\/repository-management.md#code-review) our work. What to do?\n\nAttracting a review largely isn't about the code \u2013 it is about making the reviewing easy.\n\nIf you published a Pull Request that isn't getting any comments or reviews, try one of the strategies used by core contributors:\n\n## Create the smallest reasonable PRs\n\nApproving a 2000-line-long PR takes months and feels overwhelming.\n\nApproving a 50-line long PR takes days or hours and feels easy.\n\nLarge batches slow you down. Ship your work in small chunks to merge more and learn faster.\n\n## Share relevant context:\n\nClarify:\n* What problem are you solving?\n* How does your PR solve it?\n* What feedback do you need?\n* What\u2019s out of scope?\n* What\u2019s unintuitive?\n* How to test?\n\nSummarize any related issues and PRs.\n\nIt's easier than asking others to go and figure it out.\n\n## Make your PR exciting\n\nAll contributions are competing for attention. Make your stand out.\n\nThe easiest way? Say why it matters:\n\n\u274c A new react hook to get data\n\u2705 `useEntityRecord`: get data with 10x less boilerplate\n\nThen prove it with code examples, visuals, and screencasts.\n\n## Show your work\n\nPost a link to your PR in related issues & PRs.\n\nPing commenters of related issues, previous committers, and tech leads.\n\nBring it up on the #core-editor channel of the WordPress.org slack. The easiest way to get feedback is to speak out during the [open floor section](https:\/\/make.wordpress.org\/core\/tag\/core-editor-agenda\/) of the weekly [Core Editor meeting](\/docs\/getting-started\/README.md).\n\nAssign relevant labels, milestones, and projects (or ask someone).\n\n## Review the work of others\n\nIt\u2019s the easiest way to get on others\u2019 radar.\n\nLook up the PRs of commenters of related issues, previous committers, and tech leads. Then review them.\n\nIs their work unfamiliar? Do:\n\n* Take some time to understand it\n* Propose a pair programming session\n* Skip, go for the next PR\n\n## Reduce risk with clarity\n\nRisk adds friction \u2013 an approval can backfire later.\n\nClarity is like grease. Clearly document:\n\n* What risks are involved? Why take them?\n* Why is this PR the best solution?\n* How can the risk be minimized?\n* What else has been tried?\n\n## Follow the attention\n\nSome PRs naturally get more traction than others.\n\nDouble down on these.\n\nSome Issues are more topical than others (e.g. those listed in the goals for an upcoming release) and thus will garner more attention. By focusing on these it will be easier to attract reviewers.\n\nHow to get there quickly? Help with an active project from the WordPress roadmap\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/e2e\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">End-to-End Testing<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This living document serves to prescribe instructions and best practices for writing end-to-end (E2E) tests with Playwright in the Gutenberg project.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>See the dedicated guide if you're working with the previous Jest + Puppeteer framework. See the &lt;a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/docs\/contributors\/code\/e2e\/migration.md\">migration guide&lt;\/a> if you're migrating tests from Jest + Puppeteer.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Running tests<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Run all available tests.\nnpm run test:e2e:playwright\n\n# Run in headed mode.\nnpm run test:e2e:playwright -- --headed\n\n# Run tests with specific browsers (`chromium`, `firefox`, or `webkit`).\nnpm run test:e2e:playwright -- --project=webkit --project=firefox\n\n# Run a single test file.\nnpm run test:e2e:playwright -- <path_to_test_file> # E.g., npm run test:e2e:playwright -- site-editor\/title.spec.js\n\n# Debugging.\nnpm run test:e2e:playwright -- --debug\n<\/path_to_test_file><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If you're developing in Linux, it currently requires testing Webkit browsers in headed mode. If you don't want to or can't run it with the GUI (e.g. if you don't have a graphic interface), prepend the command with <a href=\"https:\/\/manpages.ubuntu.com\/manpages\/xenial\/man1\/xvfb-run.1.html\"><code>xvfb-run<\/code><\/a> to run it in a virtual environment.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Run all available tests.\nxvfb-run npm run test:e2e:playwright\n\n# Only run webkit tests.\nxvfb-run -- npm run test:e2e:playwright -- --project=webkit\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Best practices<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Read the <a href=\"https:\/\/playwright.dev\/docs\/best-practices\">best practices<\/a> guide for Playwright.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Forbid <code>$<\/code>, use <code>locator<\/code> instead<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In fact, any API that returns <code>ElementHandle<\/code> is <a href=\"https:\/\/playwright.dev\/docs\/api\/class-page#page-query-selector\">discouraged<\/a>. This includes <code>$<\/code>, <code>$$<\/code>, <code>$eval<\/code>, <code>$$eval<\/code>, etc. <a href=\"https:\/\/playwright.dev\/docs\/api\/class-locator\"><code>Locator<\/code><\/a> is a much better API and can be used with playwright's <a href=\"https:\/\/playwright.dev\/docs\/api\/class-locatorassertions\">assertions<\/a>. This also works great with Page Object Model since that locator is lazy and doesn't return a promise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Use accessible selectors<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Use <a href=\"https:\/\/playwright.dev\/docs\/locators#locate-by-role\"><code>getByRole<\/code><\/a> to construct the query wherever possible. It enables us to write accessible queries without having to rely on internal implementations.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Select a button which includes the accessible name \"Hello World\" (case-insensitive).\npage.getByRole( 'button', { name: 'Hello World' } );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>It can also be chained to perform complex queries:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Select an option with a name \"Buttons\" under the \"Block Library\" region.\npage.getByRole( 'region', { name: 'Block Library' } )\n\t.getByRole( 'option', { name: 'Buttons' } )\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>See the <a href=\"https:\/\/playwright.dev\/docs\/locators\">official documentation<\/a> for more info on how to use them.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Selectors are strict by default<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To encourage better practices for querying elements, selectors are <a href=\"https:\/\/playwright.dev\/docs\/api\/class-browser#browser-new-page-option-strict-selectors\">strict<\/a> by default, meaning that it will throw an error if the query returns more than one element.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Don't overload test-utils, inline simple utils<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>e2e-test-utils<\/code> are too bloated with too many utils. Most of them are simple enough to be inlined directly in tests. With the help of accessible selectors, simple utils are easier to write now. For utils that only take place on a certain page, use Page Object Model instead (with an exception of clearing states with <code>requestUtils<\/code> which are better placed in <code>e2e-test-utils<\/code>). Otherwise, only create an util if the action is complex and repetitive enough.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Favor Page Object Model over utils<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As mentioned above, <a href=\"https:\/\/playwright.dev\/docs\/test-pom\">Page Object Model<\/a> is the preferred way to create reusable utility functions on a certain page.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The rationale behind using a POM is to group utils under namespaces to be easier to discover and use. In fact, <code>PageUtils<\/code> in the <code>e2e-test-utils-playwright<\/code> package is also a POM, which avoids the need for global variables, and utils can reference each other with <code>this<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Restify actions to clear or set states<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It's slow to set states manually before or after tests, especially when they're repeated multiple times between tests. It's recommended to set them via API calls. Use <code>requestUtils.rest<\/code> and <code>requestUtils.batchRest<\/code> instead to call the <a href=\"https:\/\/developer.wordpress.org\/rest-api\/reference\/\">REST API<\/a> (and add them to <code>requestUtils<\/code> if needed). We should still add a test for manually setting them, but that should only be tested once.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Avoid global variables<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Previously in our Jest + Puppeteer E2E tests, <code>page<\/code> and <code>browser<\/code> are exposed as global variables. This makes it harder to work with when we have multiple pages\/tabs in the same test, or if we want to run multiple tests in parallel. <code>@playwright\/test<\/code> has the concept of <a href=\"https:\/\/playwright.dev\/docs\/test-fixtures\">fixtures<\/a> which allows us to inject <code>page<\/code>, <code>browser<\/code>, and other parameters into the tests.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Make explicit assertions<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We can insert as many assertions in one test as needed. It's better to make explicit assertions whenever possible. For instance, if we want to assert that a button exists before clicking on it, we can do <code>expect( locator ).toBeVisible()<\/code> before performing <code>locator.click()<\/code>. This makes the tests flow better and easier to read<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Common pitfalls<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/docs\/contributors\/code\/e2e\/overusing-snapshots.md\">Overusing snapshots<\/a><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Cross-browser testing<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>By default, tests are only run in chromium. You can <em>tag<\/em> tests to run them in different browsers. Use <code>@browser<\/code> anywhere in the test title to run it in that browser. Tests will always run in chromium by default, append <code>-chromium<\/code> to disable testing in chromium. Available browsers are <code>chromium<\/code>, <code>firefox<\/code>, and <code>webkit<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>test( 'I will run in @firefox and @webkit (and chromium by default)', async ( { page } ) => {\n\t\/\/ ...\n} );\n\ntest( 'I will only run in @firefox but not -chromium', async ( { page } ) => {\n\t\/\/ ...\n} );\n\ntest.describe( 'Grouping tests (@webkit, -chromium)', () => {\n\ttest( 'I will only run in webkit', async ( { page } ) => {\n\t\t\/\/ ...\n\t} );\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# End-to-End Testing\n\nThis living document serves to prescribe instructions and best practices for writing end-to-end (E2E) tests with Playwright in the Gutenberg project.\n\n<div class=\"callout callout-info\">\n\nSee the dedicated guide if you're working with the previous Jest + Puppeteer framework. See the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/docs\/contributors\/code\/e2e\/migration.md\">migration guide<\/a> if you're migrating tests from Jest + Puppeteer.\n<\/div>\n\n\n## Running tests\n\n```bash\n# Run all available tests.\nnpm run test:e2e:playwright\n\n# Run in headed mode.\nnpm run test:e2e:playwright -- --headed\n\n# Run tests with specific browsers (`chromium`, `firefox`, or `webkit`).\nnpm run test:e2e:playwright -- --project=webkit --project=firefox\n\n# Run a single test file.\nnpm run test:e2e:playwright -- <path_to_test_file> # E.g., npm run test:e2e:playwright -- site-editor\/title.spec.js\n\n# Debugging.\nnpm run test:e2e:playwright -- --debug\n```\n\nIf you're developing in Linux, it currently requires testing Webkit browsers in headed mode. If you don't want to or can't run it with the GUI (e.g. if you don't have a graphic interface), prepend the command with [`xvfb-run`](https:\/\/manpages.ubuntu.com\/manpages\/xenial\/man1\/xvfb-run.1.html) to run it in a virtual environment.\n\n```bash\n# Run all available tests.\nxvfb-run npm run test:e2e:playwright\n\n# Only run webkit tests.\nxvfb-run -- npm run test:e2e:playwright -- --project=webkit\n```\n\n## Best practices\n\nRead the [best practices](https:\/\/playwright.dev\/docs\/best-practices) guide for Playwright.\n\n### Forbid `$`, use `locator` instead\n\nIn fact, any API that returns `ElementHandle` is [discouraged](https:\/\/playwright.dev\/docs\/api\/class-page#page-query-selector). This includes `$`, `$$`, `$eval`, `$$eval`, etc. [`Locator`](https:\/\/playwright.dev\/docs\/api\/class-locator) is a much better API and can be used with playwright's [assertions](https:\/\/playwright.dev\/docs\/api\/class-locatorassertions). This also works great with Page Object Model since that locator is lazy and doesn't return a promise.\n\n### Use accessible selectors\n\nUse [`getByRole`](https:\/\/playwright.dev\/docs\/locators#locate-by-role) to construct the query wherever possible. It enables us to write accessible queries without having to rely on internal implementations.\n\n```js\n\/\/ Select a button which includes the accessible name \"Hello World\" (case-insensitive).\npage.getByRole( 'button', { name: 'Hello World' } );\n```\n\nIt can also be chained to perform complex queries:\n\n```js\n\/\/ Select an option with a name \"Buttons\" under the \"Block Library\" region.\npage.getByRole( 'region', { name: 'Block Library' } )\n\t.getByRole( 'option', { name: 'Buttons' } )\n```\n\nSee the [official documentation](https:\/\/playwright.dev\/docs\/locators) for more info on how to use them.\n\n### Selectors are strict by default\n\nTo encourage better practices for querying elements, selectors are [strict](https:\/\/playwright.dev\/docs\/api\/class-browser#browser-new-page-option-strict-selectors) by default, meaning that it will throw an error if the query returns more than one element.\n\n### Don't overload test-utils, inline simple utils\n\n`e2e-test-utils` are too bloated with too many utils. Most of them are simple enough to be inlined directly in tests. With the help of accessible selectors, simple utils are easier to write now. For utils that only take place on a certain page, use Page Object Model instead (with an exception of clearing states with `requestUtils` which are better placed in `e2e-test-utils`). Otherwise, only create an util if the action is complex and repetitive enough.\n\n### Favor Page Object Model over utils\n\nAs mentioned above, [Page Object Model](https:\/\/playwright.dev\/docs\/test-pom) is the preferred way to create reusable utility functions on a certain page.\n\nThe rationale behind using a POM is to group utils under namespaces to be easier to discover and use. In fact, `PageUtils` in the `e2e-test-utils-playwright` package is also a POM, which avoids the need for global variables, and utils can reference each other with `this`.\n\n### Restify actions to clear or set states\n\nIt's slow to set states manually before or after tests, especially when they're repeated multiple times between tests. It's recommended to set them via API calls. Use `requestUtils.rest` and `requestUtils.batchRest` instead to call the [REST API](https:\/\/developer.wordpress.org\/rest-api\/reference\/) (and add them to `requestUtils` if needed). We should still add a test for manually setting them, but that should only be tested once.\n\n### Avoid global variables\n\nPreviously in our Jest + Puppeteer E2E tests, `page` and `browser` are exposed as global variables. This makes it harder to work with when we have multiple pages\/tabs in the same test, or if we want to run multiple tests in parallel. `@playwright\/test` has the concept of [fixtures](https:\/\/playwright.dev\/docs\/test-fixtures) which allows us to inject `page`, `browser`, and other parameters into the tests.\n\n### Make explicit assertions\n\nWe can insert as many assertions in one test as needed. It's better to make explicit assertions whenever possible. For instance, if we want to assert that a button exists before clicking on it, we can do `expect( locator ).toBeVisible()` before performing `locator.click()`. This makes the tests flow better and easier to read\n\n## Common pitfalls\n\n### [Overusing snapshots](https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/docs\/contributors\/code\/e2e\/overusing-snapshots.md)\n\n\n## Cross-browser testing\n\nBy default, tests are only run in chromium. You can _tag_ tests to run them in different browsers. Use `@browser` anywhere in the test title to run it in that browser. Tests will always run in chromium by default, append `-chromium` to disable testing in chromium. Available browsers are `chromium`, `firefox`, and `webkit`.\n\n```js\ntest( 'I will run in @firefox and @webkit (and chromium by default)', async ( { page } ) => {\n\t\/\/ ...\n} );\n\ntest( 'I will only run in @firefox but not -chromium', async ( { page } ) => {\n\t\/\/ ...\n} );\n\ntest.describe( 'Grouping tests (@webkit, -chromium)', () => {\n\ttest( 'I will only run in webkit', async ( { page } ) => {\n\t\t\/\/ ...\n\t} );\n} );\n```\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/e2e\/migration.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Migration guide<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This document outlines a typical flow of migrating a Jest + Puppeteer test to Playwright. Note that the migration process is also a good opportunity to refactor or rewrite parts of the tests. Please read the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/docs\/contributors\/code\/e2e\/README.md#best-practices\">best practices<\/a> guide before starting the migration.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Migration steps for tests<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Choose a test suite to migrate in <code>packages\/e2e-tests\/specs<\/code>, rename <code>.test.js<\/code> into <code>.spec.js<\/code> and put it in the same folder structure inside <code>test\/e2e\/specs<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Require the test helpers from <code>@wordpress\/e2e-test-utils-playwright<\/code>:<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Change all occurrences of <code>describe<\/code>, <code>beforeAll<\/code>, <code>beforeEach<\/code>, <code>afterEach<\/code> and <code>afterAll<\/code> with the <code>test.<\/code> prefix. For instance, <code>describe<\/code> turns into <code>test.describe<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Use the <a href=\"https:\/\/playwright.dev\/docs\/test-fixtures\">fixtures API<\/a> to require previously global variables like <code>page<\/code> and <code>browser<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Delete all the imports of <code>e2e-test-utils<\/code>. Instead, use the fixtures API to directly get the <code>admin<\/code>, <code>editor<\/code>, <code>pageUtils<\/code> and <code>requestUtils<\/code>. (However, <code>admin<\/code>, <code>editor<\/code> and <code>pageUtils<\/code> are not allowed in <code>beforeAll<\/code> and <code>afterAll<\/code>, rewrite them using <code>requestUtils<\/code> instead.)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If there's a missing util, try to inline the operations directly in the test if there are only a few steps. If you think it deserves to be implemented as a test util, then follow the <a href=\"#migration-steps-for-test-utils\">guide<\/a> below.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Manually migrate other details in the tests following the proposed <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/docs\/contributors\/code\/e2e\/README.md#best-practices\">best practices<\/a>. Note that even though the differences in the API of Playwright and Puppeteer are similar, some manual changes are still required.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Migration steps for test utils<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Before migrating a test utility function, think twice about whether it's necessary. Playwright offers a lot of readable and powerful APIs which make a lot of the utils obsolete. Try implementing the same thing inline directly in the test first. Only follow the below guide if that doesn't work for you. Some examples of utils that deserve to be implemented in the <code>e2e-test-utils-playwright<\/code> package include complex browser APIs (like <code>pageUtils.dragFiles<\/code> and <code>pageUtils.pressKeys<\/code>) and APIs that set states (<code>requestUtils.*<\/code>).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\nThe <code>e2e-test-utils-playwright<\/code> package is not meant to be a drop-in replacement of the Jest + Puppeteer's <code>e2e-test-utils<\/code> package. Some utils are only created to ease the migration process, but they are not necessarily required.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Playwright utilities are organized a little differently from those in the <code>e2e-test-utils<\/code> package. The <code>e2e-test-utils-playwright<\/code> package has the following folders that utils are divided up into:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>admin<\/code> - Utilities related to WordPress admin or WordPress admin's user interface (e.g. <code>visitAdminPage<\/code>).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>editor<\/code> - Utilities for the block editor (e.g. <code>clickBlockToolbarButton<\/code>).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>pageUtils<\/code> - General utilities for interacting with the browser (e.g. <code>pressKeys<\/code>).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>requestUtils<\/code> - Utilities for making REST API requests (e.g. <code>activatePlugin<\/code>). These utilities are used for setup and teardown of tests.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Copy the existing file in <code>e2e-test-utils<\/code> and paste it in the <code>admin<\/code>, <code>editor<\/code>, <code>page<\/code> or <code>request<\/code> folder in <code>e2e-test-utils-playwright<\/code> depending on the type of util.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Update any parts of the util that need to be rewritten:<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The <code>page<\/code> and <code>browser<\/code> variables are available in <code>admin<\/code>, <code>editor<\/code> and <code>pageUtils<\/code> as <code>this.page<\/code> and <code>this.browser<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>All the other utils in the same class are available in <code>this<\/code> and bound to the same instance. You can remove any <code>import<\/code> statements and use <code>this<\/code> to access them.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Consider updating the util to use TypeScript if you're comfortable doing so.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Import the newly migrated util in <code>index.ts<\/code> and put it inside the <code>Admin<\/code>\/<code>Editor<\/code>\/<code>PageUtils<\/code>\/<code>RequestUtils<\/code> class as an instance field.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->",
        "markdown": "# Migration guide\n\nThis document outlines a typical flow of migrating a Jest + Puppeteer test to Playwright. Note that the migration process is also a good opportunity to refactor or rewrite parts of the tests. Please read the [best practices](https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/docs\/contributors\/code\/e2e\/README.md#best-practices) guide before starting the migration.\n\n## Migration steps for tests\n\n1. Choose a test suite to migrate in `packages\/e2e-tests\/specs`, rename `.test.js` into `.spec.js` and put it in the same folder structure inside `test\/e2e\/specs`.\n2. Require the test helpers from `@wordpress\/e2e-test-utils-playwright`:\n    ```js\n    const { test, expect } = require( '@wordpress\/e2e-test-utils-playwright' );\n    ```\n3. Change all occurrences of `describe`, `beforeAll`, `beforeEach`, `afterEach` and `afterAll` with the `test.` prefix. For instance, `describe` turns into `test.describe`.\n4. Use the [fixtures API](https:\/\/playwright.dev\/docs\/test-fixtures) to require previously global variables like `page` and `browser`.\n5. Delete all the imports of `e2e-test-utils`. Instead, use the fixtures API to directly get the `admin`, `editor`, `pageUtils` and `requestUtils`. (However, `admin`, `editor` and `pageUtils` are not allowed in `beforeAll` and `afterAll`, rewrite them using `requestUtils` instead.)\n6. If there's a missing util, try to inline the operations directly in the test if there are only a few steps. If you think it deserves to be implemented as a test util, then follow the [guide](#migration-steps-for-test-utils) below.\n7. Manually migrate other details in the tests following the proposed [best practices](https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/docs\/contributors\/code\/e2e\/README.md#best-practices). Note that even though the differences in the API of Playwright and Puppeteer are similar, some manual changes are still required.\n\n## Migration steps for test utils\n\nBefore migrating a test utility function, think twice about whether it's necessary. Playwright offers a lot of readable and powerful APIs which make a lot of the utils obsolete. Try implementing the same thing inline directly in the test first. Only follow the below guide if that doesn't work for you. Some examples of utils that deserve to be implemented in the `e2e-test-utils-playwright` package include complex browser APIs (like `pageUtils.dragFiles` and `pageUtils.pressKeys`) and APIs that set states (`requestUtils.*`).\n\n<div class=\"callout callout-info\">\nThe <code>e2e-test-utils-playwright<\/code> package is not meant to be a drop-in replacement of the Jest + Puppeteer's <code>e2e-test-utils<\/code> package. Some utils are only created to ease the migration process, but they are not necessarily required.\n<\/div>\n\nPlaywright utilities are organized a little differently from those in the `e2e-test-utils` package. The `e2e-test-utils-playwright` package has the following folders that utils are divided up into:\n- `admin` - Utilities related to WordPress admin or WordPress admin's user interface (e.g. `visitAdminPage`).\n- `editor` - Utilities for the block editor (e.g. `clickBlockToolbarButton`).\n- `pageUtils` - General utilities for interacting with the browser (e.g. `pressKeys`).\n- `requestUtils` - Utilities for making REST API requests (e.g. `activatePlugin`). These utilities are used for setup and teardown of tests.\n\n1. Copy the existing file in `e2e-test-utils` and paste it in the `admin`, `editor`, `page` or `request` folder in `e2e-test-utils-playwright` depending on the type of util.\n2. Update any parts of the util that need to be rewritten:\n    - The `page` and `browser` variables are available in `admin`, `editor` and `pageUtils` as `this.page` and `this.browser`.\n    - All the other utils in the same class are available in `this` and bound to the same instance. You can remove any `import` statements and use `this` to access them.\n    - Consider updating the util to use TypeScript if you're comfortable doing so.\n3. Import the newly migrated util in `index.ts` and put it inside the `Admin`\/`Editor`\/`PageUtils`\/`RequestUtils` class as an instance field.\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/e2e\/overusing-snapshots.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Overusing snapshots<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Take a look at the below code. Could you understand what the test is trying to do at first glance?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>await editor.insertBlock( { name: 'core\/quote' } );\nawait page.keyboard.type( '1' );\nawait page.keyboard.press( 'Enter' );\nawait page.keyboard.press( 'Enter' );\n\nexpect( await editor.getEditedPostContent() ).toMatchSnapshot();\n\nawait page.keyboard.press( 'Backspace' );\nawait page.keyboard.type( '2' );\n\nexpect( await editor.getEditedPostContent() ).toMatchSnapshot();\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This is borrowed from the real code in gutenberg, with the test title and the comments removed and refactored into Playwright. Ideally, E2E tests should be self-documented and readable to end users; in the end, they are trying to resemble how end users interact with the app. However, there are a couple of red flags in the code.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Problems with snapshot testing<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Popularized by Jest, <a href=\"https:\/\/jestjs.io\/docs\/snapshot-testing\">snapshot testing<\/a> is a great tool to help test our app <em>when it makes sense<\/em>. However, probably because it's so powerful, it's often overused by developers. There are already multiple <a href=\"https:\/\/kentcdodds.com\/blog\/effective-snapshot-testing\">articles<\/a> about this. In this particular case, snapshot testing fails to reflect the developer's intention. It's not clear what the assertions are about without looking into other information. This makes the code harder to understand and creates a mental overhead for all the other readers other than the one who wrote it. As readers, we have to jump around the code to fully understand them. The added complexity of the code discourages contributors from changing the test to fit their needs. It could sometimes even confuse the authors and make them accidentally <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/pull\/42780#discussion_r949865612\">commit the wrong snapshots<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here's the same test with the test title and comments. Now you know what these assertions are actually about.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>it( 'can be split at the end', async () => {\n\t\/\/ ...\n\n\t\/\/ Expect empty paragraph outside quote block.\n\texpect( await getEditedPostContent() ).toMatchSnapshot();\n\n\t\/\/ ...\n\n\t\/\/ Expect the paragraph to be merged into the quote block.\n\texpect( await getEditedPostContent() ).toMatchSnapshot();\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The developer's intention is a bit more readable, but it still feels disconnected from the test. You might be tempted to try <a href=\"https:\/\/jestjs.io\/docs\/snapshot-testing#inline-snapshots\">inline snapshots<\/a>, which do solve the issue of having to jump around files, but they're still not self-documented nor explicit. We can do better.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The solution<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Instead of writing the assertions in comments, we can try directly writing them out explicitly. With the help of <code>editor.getBlocks<\/code>, we can rewrite them into simpler and atomic assertions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ ...\n\n\/\/ Expect empty paragraph outside quote block.\nawait expect.poll( editor.getBlocks ).toMatchObject( &#91;\n\t{\n\t\tname: 'core\/quote',\n\t\tinnerBlocks: &#91;\n\t\t\t{\n\t\t\t\tname: 'core\/paragraph',\n\t\t\t\tattributes: { content: '1' },\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tname: 'core\/paragraph',\n\t\tattributes: { content: '' },\n\t}\n] );\n\n\/\/ ...\n\n\/\/ Expect the paragraph to be merged into the quote block.\nawait expect.poll( editor.getBlocks ).toMatchObject( &#91; {\n\tname: 'core\/quote',\n\tinnerBlocks: &#91;\n\t\t{\n\t\t\tname: 'core\/paragraph',\n\t\t\tattributes: { content: '1' },\n\t\t},\n\t\t{\n\t\t\tname: 'core\/paragraph',\n\t\t\tattributes: { content: '2' },\n\t\t},\n\t],\n} ] );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>These assertions are more readable and explicit. You can add additional assertions or split existing ones into multiple ones to highlight their importance. Whether to keep the comments is up to you, but it's usually fine to omit them when the code is already readable without them.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Snapshot variants<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Due to the lack of inline snapshots in Playwright, some migrated tests are using string assertions (<code>toBe<\/code>) to simulate similar effects without having to create dozens of snapshot files.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>expect( await editor.getEditedPostContent() ).toBe( `\n<p>Paragraph<\/p>\n` );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>We can consider this pattern as a variant of snapshot testing, and we should follow the same rule when writing them. It's often better to rewrite them using <code>editor.getBlocks<\/code> or other methods to make explicit assertions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>await expect.poll( editor.getBlocks ).toMatchObject( &#91; {\n\tname: 'core\/paragraph',\n\tattributes: { content: 'Paragraph' },\n} ] );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">What about test coverage?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Comparing the explicit assertions to snapshot testing, we're definitely losing some test coverage in this test. Snapshot testing is still useful when we want to assert the full serialized content of the block. Fortunately, though, some tests in the integration test already assert the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/test\/integration\/fixtures\/blocks\/README.md\">full content<\/a> of each core block. They run in Node.js, making them way faster than repeating the same test in Playwright. Running 273 test cases in my machine only costs about 5.7 seconds. These sorts of tests work great at the unit or integration level, and we can run them much faster without losing test coverage.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Best practices<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Snapshot testing should rarely be required in E2E tests, often there are better alternatives that leverage explicit assertions. For times when there isn't any other suitable alternative, we should follow the best practices when using them.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Avoid huge snapshots<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Huge snapshots are hard to read and difficult to review. Moreover, when everything is important then nothing is important. Huge snapshots prevent us from focusing on the important parts of the snapshots.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Avoid repetitive snapshots<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you find yourself creating multiple snapshots of similar contents in the same test, then it's probably a sign that you want to make more atomic assertions instead. Rethink what you want to test, if the first snapshot is only just a reference for the second one, then what you want is likely the <strong>difference<\/strong> between the snapshots. Store the first result in a variable and assert the difference between the results instead.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Further readings<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/kentcdodds.com\/blog\/effective-snapshot-testing\">Effective Snapshot Testing - Kent C. Dodds<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/kentcdodds.com\/blog\/common-testing-mistakes\">Common Testing Mistakes - Kent C. Dodds<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Overusing snapshots\n\nTake a look at the below code. Could you understand what the test is trying to do at first glance?\n\n```js\nawait editor.insertBlock( { name: 'core\/quote' } );\nawait page.keyboard.type( '1' );\nawait page.keyboard.press( 'Enter' );\nawait page.keyboard.press( 'Enter' );\n\nexpect( await editor.getEditedPostContent() ).toMatchSnapshot();\n\nawait page.keyboard.press( 'Backspace' );\nawait page.keyboard.type( '2' );\n\nexpect( await editor.getEditedPostContent() ).toMatchSnapshot();\n```\n\nThis is borrowed from the real code in gutenberg, with the test title and the comments removed and refactored into Playwright. Ideally, E2E tests should be self-documented and readable to end users; in the end, they are trying to resemble how end users interact with the app. However, there are a couple of red flags in the code.\n\n## Problems with snapshot testing\n\nPopularized by Jest, [snapshot testing](https:\/\/jestjs.io\/docs\/snapshot-testing) is a great tool to help test our app _when it makes sense_. However, probably because it's so powerful, it's often overused by developers. There are already multiple [articles](https:\/\/kentcdodds.com\/blog\/effective-snapshot-testing) about this. In this particular case, snapshot testing fails to reflect the developer's intention. It's not clear what the assertions are about without looking into other information. This makes the code harder to understand and creates a mental overhead for all the other readers other than the one who wrote it. As readers, we have to jump around the code to fully understand them. The added complexity of the code discourages contributors from changing the test to fit their needs. It could sometimes even confuse the authors and make them accidentally [commit the wrong snapshots](https:\/\/github.com\/WordPress\/gutenberg\/pull\/42780#discussion_r949865612).\n\nHere's the same test with the test title and comments. Now you know what these assertions are actually about.\n\n```js\nit( 'can be split at the end', async () => {\n\t\/\/ ...\n\n\t\/\/ Expect empty paragraph outside quote block.\n\texpect( await getEditedPostContent() ).toMatchSnapshot();\n\n\t\/\/ ...\n\n\t\/\/ Expect the paragraph to be merged into the quote block.\n\texpect( await getEditedPostContent() ).toMatchSnapshot();\n} );\n```\n\nThe developer's intention is a bit more readable, but it still feels disconnected from the test. You might be tempted to try [inline snapshots](https:\/\/jestjs.io\/docs\/snapshot-testing#inline-snapshots), which do solve the issue of having to jump around files, but they're still not self-documented nor explicit. We can do better.\n\n## The solution\n\nInstead of writing the assertions in comments, we can try directly writing them out explicitly. With the help of `editor.getBlocks`, we can rewrite them into simpler and atomic assertions.\n\n```js\n\/\/ ...\n\n\/\/ Expect empty paragraph outside quote block.\nawait expect.poll( editor.getBlocks ).toMatchObject( [\n\t{\n\t\tname: 'core\/quote',\n\t\tinnerBlocks: [\n\t\t\t{\n\t\t\t\tname: 'core\/paragraph',\n\t\t\t\tattributes: { content: '1' },\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tname: 'core\/paragraph',\n\t\tattributes: { content: '' },\n\t}\n] );\n\n\/\/ ...\n\n\/\/ Expect the paragraph to be merged into the quote block.\nawait expect.poll( editor.getBlocks ).toMatchObject( [ {\n\tname: 'core\/quote',\n\tinnerBlocks: [\n\t\t{\n\t\t\tname: 'core\/paragraph',\n\t\t\tattributes: { content: '1' },\n\t\t},\n\t\t{\n\t\t\tname: 'core\/paragraph',\n\t\t\tattributes: { content: '2' },\n\t\t},\n\t],\n} ] );\n```\n\nThese assertions are more readable and explicit. You can add additional assertions or split existing ones into multiple ones to highlight their importance. Whether to keep the comments is up to you, but it's usually fine to omit them when the code is already readable without them.\n\n## Snapshot variants\n\nDue to the lack of inline snapshots in Playwright, some migrated tests are using string assertions (`toBe`) to simulate similar effects without having to create dozens of snapshot files.\n\n```js\nexpect( await editor.getEditedPostContent() ).toBe( `<!-- wp:paragraph -->\n<p>Paragraph<\/p>\n<!-- \/wp:paragraph -->` );\n```\n\nWe can consider this pattern as a variant of snapshot testing, and we should follow the same rule when writing them. It's often better to rewrite them using `editor.getBlocks` or other methods to make explicit assertions.\n\n```js\nawait expect.poll( editor.getBlocks ).toMatchObject( [ {\n\tname: 'core\/paragraph',\n\tattributes: { content: 'Paragraph' },\n} ] );\n```\n\n## What about test coverage?\n\nComparing the explicit assertions to snapshot testing, we're definitely losing some test coverage in this test. Snapshot testing is still useful when we want to assert the full serialized content of the block. Fortunately, though, some tests in the integration test already assert the [full content](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/test\/integration\/fixtures\/blocks\/README.md) of each core block. They run in Node.js, making them way faster than repeating the same test in Playwright. Running 273 test cases in my machine only costs about 5.7 seconds. These sorts of tests work great at the unit or integration level, and we can run them much faster without losing test coverage.\n\n## Best practices\n\nSnapshot testing should rarely be required in E2E tests, often there are better alternatives that leverage explicit assertions. For times when there isn't any other suitable alternative, we should follow the best practices when using them.\n\n### Avoid huge snapshots\n\nHuge snapshots are hard to read and difficult to review. Moreover, when everything is important then nothing is important. Huge snapshots prevent us from focusing on the important parts of the snapshots.\n\n### Avoid repetitive snapshots\n\nIf you find yourself creating multiple snapshots of similar contents in the same test, then it's probably a sign that you want to make more atomic assertions instead. Rethink what you want to test, if the first snapshot is only just a reference for the second one, then what you want is likely the **difference** between the snapshots. Store the first result in a variable and assert the difference between the results instead.\n\n## Further readings\n\n- [Effective Snapshot Testing - Kent C. Dodds](https:\/\/kentcdodds.com\/blog\/effective-snapshot-testing)\n- [Common Testing Mistakes - Kent C. Dodds](https:\/\/kentcdodds.com\/blog\/common-testing-mistakes)\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/coding-guidelines.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Coding Guidelines<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This living document serves to prescribe coding guidelines specific to the Gutenberg project. Base coding guidelines follow the <a href=\"https:\/\/developer.wordpress.org\/coding-standards\/wordpress-coding-standards\/\">WordPress Coding Standards<\/a>. The following sections outline additional patterns and conventions used in the Gutenberg project.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">CSS<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Naming<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To avoid class name collisions, class names <strong>must<\/strong> adhere to the following guidelines, which are loosely inspired by the <a href=\"https:\/\/en.bem.info\/methodology\/\">BEM (Block, Element, Modifier) methodology<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>All class names assigned to an element must be prefixed with the name of the package, followed by a dash and the name of the directory in which the component resides. Any descendent of the component's root element must append a dash-delimited descriptor, separated from the base by two consecutive underscores <code>__<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Root element: <code>package-directory<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Child elements: <code>package-directory__descriptor-foo-bar<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The root element is considered to be the highest ancestor element returned by the default export in the <code>index.js<\/code>. Notably, if your folder contains multiple files, each with their own default exported component, only the element rendered by that of <code>index.js<\/code> can be considered the root. All others should be treated as descendents.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example:<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Consider the following component located at <code>packages\/components\/src\/notice\/index.js<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export default function Notice( { children, onRemove } ) {\n\treturn (\n\t\t<div classname=\"components-notice\">\n\t\t\t<div classname=\"components-notice__content\">{ children }<\/div>\n\t\t\t<button<br>\t\t\t\tclassName=\"components-notice__dismiss\"\n\t\t\t\ticon={ check }\n\t\t\t\tlabel={ __( 'Dismiss this notice' ) }\n\t\t\t\tonClick={ onRemove }\n\t\t\t\/>\n\t\t<\/button<br><\/div>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Components may be assigned with class names that indicate states (for example, an \"active\" tab or an \"opened\" panel). These modifiers should be applied as a separate class name, prefixed as an adjective expression by <code>is-<\/code> (<code>is-active<\/code> or <code>is-opened<\/code>). In rare cases, you may encounter variations of the modifier prefix, usually to improve readability (<code>has-warning<\/code>). Because a modifier class name is not contextualized to a specific component, it should always be written in stylesheets as accompanying the component being modified (<code>.components-panel.is-opened<\/code>).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example:<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Consider again the Notices example. We may want to apply specific styling for dismissible notices. The <a href=\"https:\/\/www.npmjs.com\/package\/classnames\"><code>classnames<\/code> package<\/a> can be a helpful utility for conditionally applying modifier class names.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import classnames from 'classnames';\n\nexport default function Notice( { children, onRemove, isDismissible } ) {\n\tconst classes = classnames( 'components-notice', {\n\t\t'is-dismissible': isDismissible,\n\t} );\n\n\treturn <div classname=\"{\" classes=\"\" }=\"\">{ \/* ... *\/ }<\/div>;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>A component's class name should <strong>never<\/strong> be used outside its own folder (with rare exceptions such as <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/base-styles\/_z-index.scss\"><code>_z-index.scss<\/code><\/a>). If you need to inherit styles of another component in your own components, you should render an instance of that other component. At worst, you should duplicate the styles within your own component's stylesheet. This is intended to improve maintainability by isolating shared components as a reusable interface, reducing the surface area of similar UI elements by adapting a limited set of common components to support a varied set of use-cases.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">SCSS file naming conventions for blocks<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The build process will split SCSS from within the blocks library directory into two separate CSS files when Webpack runs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Styles placed in a <code>style.scss<\/code> file will be built into <code>blocks\/build\/style.css<\/code>, to load on the front end theme as well as in the editor. If you need additional styles specific to the block's display in the editor, add them to an <code>editor.scss<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Examples of styles that appear in both the theme and the editor include gallery columns and drop caps.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">JavaScript<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>JavaScript in Gutenberg uses modern language features of the <a href=\"https:\/\/www.ecma-international.org\/ecma-262\/\">ECMAScript language specification<\/a> as well as the <a href=\"https:\/\/reactjs.org\/docs\/introducing-jsx.html\">JSX language syntax extension<\/a>. These are enabled through a combination of preset configurations, notably <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/babel-preset-default\"><code>@wordpress\/babel-preset-default<\/code><\/a> which is used as a preset in the project's <a href=\"https:\/\/babeljs.io\/\">Babel<\/a> configuration.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>While the <a href=\"https:\/\/tc39.es\/process-document\/\">staged process<\/a> for introducing a new JavaScript language feature offers an opportunity to use new features before they are considered complete, <strong>the Gutenberg project and the <code>@wordpress\/babel-preset-default<\/code> configuration will only target support for proposals which have reached Stage 4 (\"Finished\")<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Imports<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In the Gutenberg project, we use <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Statements\/import\">the ES2015 import syntax<\/a> to enable us to create modular code with clear separations between code of a specific feature, code shared across distinct WordPress features, and third-party dependencies.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>These separations are identified by multi-line comments at the top of a file which imports code from another file or source.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">External dependencies<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>An external dependency is third-party code that is not maintained by WordPress contributors, but instead <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_enqueue_script\/#default-scripts-included-and-registered-by-wordpress\">included in WordPress as a default script<\/a> or referenced from an outside package manager like <a href=\"https:\/\/www.npmjs.com\/\">npm<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * External dependencies\n *\/\nimport moment from 'moment';\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">WordPress dependencies<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To encourage reusability between features, our JavaScript is split into domain-specific modules which <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Statements\/export\"><code>export<\/code><\/a> one or more functions or objects. In the Gutenberg project, we've distinguished these modules under top-level directories. Each module serve an independent purpose, and often code is shared between them. For example, in order to localize its text, editor code will need to include functions from the <code>i18n<\/code> module.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * WordPress dependencies\n *\/\nimport { __ } from '@wordpress\/i18n';\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Internal dependencies<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Within a specific feature, code is organized into separate files and folders. As is the case with external and WordPress dependencies, you can bring this code into scope by using the <code>import<\/code> keyword. The main distinction here is that when importing internal files, you should use relative paths specific to top-level directory you're working in.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * Internal dependencies\n *\/\nimport VisualEditor from '..\/visual-editor';\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Legacy experimental APIs, plugin-only APIs, and private APIs<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Legacy experimental APIs<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Historically, Gutenberg has used the <code>__experimental<\/code> and <code>__unstable<\/code> prefixes to indicate that a given API is not yet stable and may be subject to change. This is a legacy convention which should be avoided in favor of the plugin-only API pattern or a private API pattern described below.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The problem with using the prefixes was that these APIs rarely got stabilized or removed. As of June 2022, WordPress Core contained 280 publicly exported experimental APIs merged from the Gutenberg plugin during the major WordPress releases. Many plugins and themes started relying on these experimental APIs for essential features that couldn't be accessed in any other way.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The legacy <code>__experimental<\/code> APIs can't be removed on a whim anymore. They became a part of the WordPress public API and fall under the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/contributors\/code\/backward-compatibility\/\">WordPress Backwards Compatibility policy<\/a>. Removing them involves a deprecation process. It may be relatively easy for some APIs, but it may require effort and span multiple WordPress releases for others.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>All in all, don't use the <code>__experimental<\/code> prefix for new APIs. Use plugin-only APIs and private APIs instead.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Plugin-only APIs<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Plugin-only APIs are temporary values exported from a module whose existence is either pending future revision or provides an immediate means to an end.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>To External Consumers:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>There is no support commitment for plugin-only APIs.<\/strong> They can and will be removed or changed without advance warning, including as part of a minor or patch release. As an external consumer, you should avoid these APIs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>To Project Contributors:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>An <strong>plugin-only API<\/strong> is one which is planned for eventual public availability, but is subject to further experimentation, testing, and discussion. It should be made stable or removed at the earliest opportunity.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Plugin-only APIs are excluded from WordPress Core and only available in the Gutenberg Plugin:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Using process.env.IS_GUTENBERG_PLUGIN allows Webpack to exclude this\n\/\/ export from WordPress core:\nif ( process.env.IS_GUTENBERG_PLUGIN ) {\n\texport { doSomethingExciting } from '.\/api';\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The public interface of such APIs is not yet finalized. Aside from references within the code, they APIs should neither be documented nor mentioned in any CHANGELOG. They should effectively be considered to not exist from an external perspective. In most cases, they should only be exposed to satisfy requirements between packages maintained in this repository.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>While a plugin-only API may often stabilize into a publicly-available API, there is no guarantee that it will.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Private APIs<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Each <code>@wordpress<\/code> package wanting to privately access or expose a private APIs can<br>do so by opting-in to <code>@wordpress\/private-apis<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ In packages\/block-editor\/private-apis.js:\nimport { __dangerousOptInToUnstableAPIsOnlyForCoreModules } from '@wordpress\/private-apis';\nexport const { lock, unlock } =\n\t__dangerousOptInToUnstableAPIsOnlyForCoreModules(\n\t\t'I know using unstable features means my theme or plugin will inevitably break in the next version of WordPress.',\n\t\t'@wordpress\/block-editor' \/\/ Name of the package calling __dangerousOptInToUnstableAPIsOnlyForCoreModules,\n\t\t\/\/ (not the name of the package whose APIs you want to access)\n\t);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Each <code>@wordpress<\/code> package may only opt-in once. The process clearly communicates the extenders are not supposed<br>to use it. This document will focus on the usage examples, but you can <a href=\"\/packages\/private-apis\/README.md\">find out more about the <code>@wordpress\/private-apis<\/code> package in the its README.md<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once the package opted-in, you can use the <code>lock()<\/code> and <code>unlock()<\/code> utilities:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Say this object is exported from a package:\nexport const publicObject = {};\n\n\/\/ However, this string is internal and should not be publicly available:\nconst privateString = 'private information';\n\n\/\/ Solution: lock the string \"inside\" of the object:\nlock( publicObject, privateString );\n\n\/\/ The string is not nested in the object and cannot be extracted from it:\nconsole.log( publicObject );\n\/\/ {}\n\n\/\/ The only way to access the string is by \"unlocking\" the object:\nconsole.log( unlock( publicObject ) );\n\/\/ \"private information\"\n\n\/\/ lock() accepts all data types, not just strings:\nexport const anotherObject = {};\nlock( anotherObject, function privateFn() {} );\nconsole.log( unlock( anotherObject ) );\n\/\/ function privateFn() {}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Keep reading to learn how to use <code>lock()<\/code> and <code>unlock()<\/code> to avoid publicly exporting<br>different kinds of <code>private<\/code> APIs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Private selectors and actions<\/h5>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You can attach private selectors and actions to a public store:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ In packages\/package1\/store.js:\nimport { privateHasContentRoleAttribute } from '.\/private-selectors';\nimport { privateToggleFeature } from '.\/private-actions';\n\/\/ The `lock` function is exported from the internal private-apis.js file where\n\/\/ the opt-in function was called.\nimport { lock, unlock } from '.\/lock-unlock';\n\nexport const store = registerStore( \/* ... *\/ );\n\/\/ Attach a private action to the exported store:\nunlock( store ).registerPrivateActions( {\n\tprivateToggleFeature,\n} );\n\n\/\/ Attach a private action to the exported store:\nunlock( store ).registerPrivateSelectors( {\n\tprivateHasContentRoleAttribute,\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ In packages\/package2\/MyComponent.js:\nimport { store } from '@wordpress\/package1';\nimport { useSelect } from '@wordpress\/data';\n\/\/ The `unlock` function is exported from the internal private-apis.js file where\n\/\/ the opt-in function was called.\nimport { unlock } from '.\/lock-unlock';\n\nfunction MyComponent() {\n\tconst hasRole = useSelect(\n\t\t( select ) =>\n\t\t\t\/\/ Use the private selector:\n\t\t\tunlock( select( store ) ).privateHasContentRoleAttribute()\n\t\t\/\/ Note the unlock() is required. This line wouldn't work:\n\t\t\/\/ select( store ).privateHasContentRoleAttribute()\n\t);\n\n\t\/\/ Use the private action:\n\tunlock( useDispatch( store ) ).privateToggleFeature();\n\n\t\/\/ ...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Private functions, classes, and variables<\/h5>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ In packages\/package1\/index.js:\nimport { lock } from '.\/lock-unlock';\n\nexport const privateApis = {};\n\/* Attach private data to the exported object *\/\nlock( privateApis, {\n\tprivateCallback: function () {},\n\tprivateReactComponent: function PrivateComponent() {\n\t\treturn <div>;\n\t},\n\tprivateClass: class PrivateClass {},\n\tprivateVariable: 5,\n} );\n<\/div><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ In packages\/package2\/index.js:\nimport { privateApis } from '@wordpress\/package1';\nimport { unlock } from '.\/lock-unlock';\n\nconst {\n\tprivateCallback,\n\tprivateReactComponent,\n\tprivateClass,\n\tprivateVariable,\n} = unlock( privateApis );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Remember to always register the private actions and selectors on the <strong>registered<\/strong> store.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Sometimes that's easy:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export const store = createReduxStore( STORE_NAME, storeConfig() );\n\/\/ `register` uses the same `store` object created from `createReduxStore`.\nregister( store );\nunlock( store ).registerPrivateActions( {\n\t\/\/ ...\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>However some package might call both <code>createReduxStore<\/code> <strong>and<\/strong> <code>registerStore<\/code>. In this case, always choose the store that gets registered:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export const store = createReduxStore( STORE_NAME, {\n\t...storeConfig,\n\tpersist: &#91; 'preferences' ],\n} );\nconst registeredStore = registerStore( STORE_NAME, {\n\t...storeConfig,\n\tpersist: &#91; 'preferences' ],\n} );\nunlock( registeredStore ).registerPrivateActions( {\n\t\/\/ ...\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Private function arguments<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To add a private argument to a stable function you'll need<br>to prepare a stable and a private version of that function.<br>Then, export the stable function and <code>lock()<\/code> the unstable function<br>inside it:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ In @wordpress\/package1\/index.js:\nimport { lock } from '.\/lock-unlock';\n\n\/\/ A private function contains all the logic\nfunction privateValidateBlocks( formula, privateIsStrict ) {\n\tlet isValid = false;\n\t\/\/ ...complex logic we don't want to duplicate...\n\tif ( privateIsStrict ) {\n\t\t\/\/ ...\n\t}\n\t\/\/ ...complex logic we don't want to duplicate...\n\n\treturn isValid;\n}\n\n\/\/ The stable public function is a thin wrapper that calls the\n\/\/ private function with the private features disabled\nexport function validateBlocks( blocks ) {\n\tprivateValidateBlocks( blocks, false );\n}\n\nexport const privateApis = {};\nlock( privateApis, { privateValidateBlocks } );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ In @wordpress\/package2\/index.js:\nimport { privateApis as package1PrivateApis } from '@wordpress\/package1';\nimport { unlock } from '.\/lock-unlock';\n\n\/\/ The private function may be \"unlocked\" given the stable function:\nconst { privateValidateBlocks } = unlock( package1PrivateApis );\nprivateValidateBlocks( blocks, true );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Private React component properties<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To add an private argument to a stable component you'll need<br>to prepare a stable and an private version of that component.<br>Then, export the stable function and <code>lock()<\/code> the unstable function<br>inside it:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ In @wordpress\/package1\/index.js:\nimport { lock } from '.\/lock-unlock';\n\n\/\/ The private component contains all the logic\nconst PrivateMyButton = ( { title, privateShowIcon = true } ) => {\n\t\/\/ ...complex logic we don't want to duplicate...\n\n\treturn (\n\t\t<button>\n\t\t\t{ privateShowIcon &amp;&amp; <icon src=\"{\" someicon=\"\" }=\"\"> } { title }\n\t\t<\/icon><\/button>\n\t);\n};\n\n\/\/ The stable public component is a thin wrapper that calls the\n\/\/ private component with the private features disabled\nexport const MyButton = ( { title } ) => (\n\t<privatemybutton title=\"{\" }=\"\" privateshowicon=\"{\" false=\"\">\n);\n\nexport const privateApis = {};\nlock( privateApis, { PrivateMyButton } );\n<\/privatemybutton><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ In @wordpress\/package2\/index.js:\nimport { privateApis } from '@wordpress\/package1';\nimport { unlock } from '.\/lock-unlock';\n\n\/\/ The private component may be \"unlocked\" given the stable component:\nconst { PrivateMyButton } = unlock( privateApis );\nexport function MyComponent() {\n\treturn <privatemybutton data=\"{\" }=\"\" privateshowicon=\"{\" true=\"\">;\n}\n<\/privatemybutton><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Private editor settings<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>WordPress extenders cannot update the private block settings on their own. The <code>updateSettings()<\/code> actions of the <code>@wordpress\/block-editor<\/code> store will filter out all the settings that are <strong>not<\/strong> a part of the public API. The only way to actually store them is via the private action <code>__experimentalUpdateSettings()<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To privatize a block editor setting, add it to the <code>privateSettings<\/code> list in <a href=\"\/packages\/block-editor\/src\/store\/actions.js\">\/packages\/block-editor\/src\/store\/actions.js<\/a>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const privateSettings = &#91;\n\t'inserterMediaCategories',\n\t\/\/ List a block editor setting here to make it private\n];\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Private block.json and theme.json APIs<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As of today, there is no way to restrict the <code>block.json<\/code> and <code>theme.json<\/code> APIs<br>to the Gutenberg codebase. In the future, however, the new private APIs<br>will only apply to the core WordPress blocks and plugins and themes will not be<br>able to access them.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Inline small actions in thunks<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Finally, instead of introducing a new action creator, consider using a <a href=\"\/docs\/how-to-guides\/thunks.md\">thunk<\/a>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export function toggleFeature( scope, featureName ) {\n\treturn function ( { dispatch } ) {\n\t\tdispatch( { type: '__private_BEFORE_TOGGLE' } );\n\t\t\/\/ ...\n\t};\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exposing private APIs publicly<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Some private APIs could benefit from community feedback and it makes sense to expose them to WordPress extenders. At the same time, it doesn't make sense to turn them into a public API in WordPress core. What should you do?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can re-export that private API as a plugin-only API to expose it publicly only in the Gutenberg plugin:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ This function can't be used by extenders in any context:\nfunction privateEverywhere() {}\n\n\/\/ This function can be used by extenders with the Gutenberg plugin but not in vanilla WordPress Core:\nfunction privateInCorePublicInPlugin() {}\n\n\/\/ Gutenberg treats both functions as private APIs internally:\nconst privateApis = {};\nlock( privateApis, { privateEverywhere, privateInCorePublicInPlugin } );\n\n\/\/ The privateInCorePublicInPlugin function is explicitly exported,\n\/\/ but this export will not be merged into WordPress core thanks to\n\/\/ the process.env.IS_GUTENBERG_PLUGIN check.\nif ( process.env.IS_GUTENBERG_PLUGIN ) {\n\texport const privateInCorePublicInPlugin =\n\t\tunlock( privateApis ).privateInCorePublicInPlugin;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Objects<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When possible, use <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Operators\/Object_initializer#New_notations_in_ECMAScript_2015\">shorthand notation<\/a> when defining object property values:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<!-- prettier-ignore -->\n<!-- \/wp:html -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const a = 10;\n\n\/\/ Bad:\nconst object = {\n\ta: a,\n\tperformAction: function () {\n\t\t\/\/ ...\n\t},\n};\n\n\/\/ Good:\nconst object = {\n\ta,\n\tperformAction() {\n\t\t\/\/ ...\n\t},\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Strings<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>String literals should be declared with single-quotes <em>unless<\/em> the string itself contains a single-quote that would need to be escaped\u2013in that case: use a double-quote. If the string contains a single-quote <em>and<\/em> a double-quote, you can use ES6 template strings to avoid escaping the quotes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:<\/strong> The single-quote character (<code>'<\/code>) should never be used in place of an apostrophe (<code>\u2019<\/code>) for words like <code>it\u2019s<\/code> or <code>haven\u2019t<\/code> in user-facing strings. For test code it's still encouraged to use a real apostrophe.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In general, avoid backslash-escaping quotes:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<!-- prettier-ignore -->\n<!-- \/wp:html -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Bad:\nconst name = \"Matt\";\n\/\/ Good:\nconst name = 'Matt';\n\n\/\/ Bad:\nconst pet = \"Matt's dog\";\n\/\/ Also bad (not using an apostrophe):\nconst pet = \"Matt's dog\";\n\/\/ Good:\nconst pet = 'Matt\u2019s dog';\n\/\/ Also good:\nconst oddString = \"She said 'This is odd.'\";\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You should use ES6 Template Strings over string concatenation whenever possible:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<!-- prettier-ignore -->\n<!-- \/wp:html -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const name = 'Stacey';\n\n\/\/ Bad:\nalert( 'My name is ' + name + '.' );\n\/\/ Good:\nalert( `My name is ${ name }.` );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Optional chaining<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Operators\/Optional_chaining\">Optional chaining<\/a> is a new language feature introduced in version 2020 of the ECMAScript specification. While the feature can be very convenient for property access on objects which are potentially null-ish (<code>null<\/code> or <code>undefined<\/code>), there are a number of common pitfalls to be aware of when using optional chaining. These may be issues that linting and\/or type-checking can help protect against at some point in the future. In the meantime, you will want to be cautious of the following items:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>When negating (<code>!<\/code>) the result of a value which is evaluated with optional chaining, you should be observant that in the case that optional chaining reaches a point where it cannot proceed, it will produce a <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Glossary\/Falsy\">falsy value<\/a> that will be transformed to <code>true<\/code> when negated. In many cases, this is not an expected result.<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Example: <code>const hasFocus = ! nodeRef.current?.contains( document.activeElement );<\/code> will yield <code>true<\/code> if <code>nodeRef.current<\/code> is not assigned.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>See related issue: <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\/21984\">#21984<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>See similar ESLint rule: <a href=\"https:\/\/eslint.org\/docs\/rules\/no-unsafe-negation\"><code>no-unsafe-negation<\/code><\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>When assigning a boolean value, observe that optional chaining may produce values which are <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Glossary\/Falsy\">falsy<\/a> (<code>undefined<\/code>, <code>null<\/code>), but not strictly <code>false<\/code>. This can become an issue when the value is passed around in a way where it is expected to be a boolean (<code>true<\/code> or <code>false<\/code>). While it's a common occurrence for booleans\u2014since booleans are often used in ways where the logic considers truthiness and falsyness broadly\u2014these issues can also occur for other optional chaining when eagerly assuming a type resulting from the end of the property access chain. <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/README.md#typescript\">Type-checking<\/a> may help in preventing these sorts of errors.<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Example: <code>document.body.classList.toggle( 'has-focus', nodeRef.current?.contains( document.activeElement ) );<\/code> may wrongly <em>add<\/em> the class, since <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/DOMTokenList\/toggle\">the second argument is optional<\/a>. If <code>undefined<\/code> is passed, it would not unset the class as it would when <code>false<\/code> is passed.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Example: <code>&lt;input value={ state.selected?.value.trim() } \/><\/code> may inadvertently cause warnings in React by toggling between <a href=\"https:\/\/reactjs.org\/docs\/uncontrolled-components.html\">controlled and uncontrolled inputs<\/a>. This is an easy trap to fall into when eagerly assuming that a result of <code>trim()<\/code> will always return a string value, overlooking the fact the optional chaining may have caused evaluation to abort earlier with a value of <code>undefined<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">React components<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It is preferred to implement all components as <a href=\"https:\/\/reactjs.org\/docs\/components-and-props.html\">function components<\/a>, using <a href=\"https:\/\/reactjs.org\/docs\/hooks-reference.html\">hooks<\/a> to manage component state and lifecycle. With the exception of <a href=\"https:\/\/reactjs.org\/docs\/error-boundaries.html\">error boundaries<\/a>, you should never encounter a situation where you must use a class component. Note that the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/contribute\/code-refactoring\/\">WordPress guidance on Code Refactoring<\/a> applies here: There needn't be a concentrated effort to update class components in bulk. Instead, consider it as a good refactoring opportunity in combination with some other change.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">JavaScript documentation using JSDoc<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Gutenberg follows the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/inline-documentation-standards\/javascript\/\">WordPress JavaScript Documentation Standards<\/a>, with additional guidelines relevant for its distinct use of <a href=\"\/docs\/contributors\/code\/coding-guidelines.md#imports\">import semantics<\/a> in organizing files, the <a href=\"\/docs\/contributors\/code\/testing-overview.md#javascript-testing\">use of TypeScript tooling<\/a> for types validation, and automated documentation generation using <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/docgen\"><code>@wordpress\/docgen<\/code><\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For additional guidance, consult the following resources:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/jsdoc.app\/index.html\">JSDoc Official Documentation<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/www.typescriptlang.org\/docs\/handbook\/jsdoc-supported-types.html\">TypeScript Supported JSDoc<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Custom types<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Define custom types using the <a href=\"https:\/\/jsdoc.app\/tags-typedef.html\">JSDoc <code>@typedef<\/code> tag<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A custom type should include a description, and should always include its base type.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Custom types should be named as succinctly as possible, while still retaining clarity of meaning and avoiding conflict with other global or scoped types. A <code>WP<\/code> prefix should be applied to all custom types. Avoid superfluous or redundant prefixes and suffixes (for example, a <code>Type<\/code> suffix, or <code>Custom<\/code> prefix). Custom types are not global by default, so a custom type does not need to be excessively specific to a particular package. However, they should be named with enough specificity to avoid ambiguity or name collisions when brought into the same scope as another type.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * A block selection object.\n *\n * @typedef WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value.\n *\/\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note that there is no <code>{Object}<\/code> between <code>@typedef<\/code> and the type name. As <code>@property<\/code>s below tells us that it is a type for objects, it is recommend to not use <code>{Object}<\/code> when you want to define types for your objects.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Custom types can also be used to describe a set of predefined options. While the <a href=\"https:\/\/jsdoc.app\/tags-type.html\">type union<\/a> can be used with literal values as an inline type, it can be difficult to align tags while still respecting a maximum line length of 80 characters. Using a custom type to define a union type can afford the opportunity to describe the purpose of these options, and helps to avoid these line length issues.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * Named breakpoint sizes.\n *\n * @typedef {'huge'|'wide'|'large'|'medium'|'small'|'mobile'} WPBreakpoint\n *\/\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note the use of quotes when defining a set of string literals. As in the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/\">JavaScript Coding Standards<\/a>, single quotes should be used when assigning a string literal either as the type or as a <a href=\"#nullable-undefined-and-void-types\">default function parameter<\/a>, or when <a href=\"#importing-and-exporting-types\">specifying the path<\/a> of an imported type.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Importing and exporting types<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Use the <a href=\"https:\/\/www.typescriptlang.org\/docs\/handbook\/jsdoc-supported-types.html#import-types\">TypeScript <code>import<\/code> function<\/a> to import type declarations from other files or third-party dependencies.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Since an imported type declaration can occupy an excess of the available line length and become verbose when referenced multiple times, you are encouraged to create an alias of the external type using a <code>@typedef<\/code> declaration at the top of the file, immediately following <a href=\"\/docs\/contributors\/code\/coding-guidelines.md#imports\">the <code>import<\/code> groupings<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/** @typedef {import('@wordpress\/data').WPDataRegistry} WPDataRegistry *\/\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note that all custom types defined in another file can be imported.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When considering which types should be made available from a WordPress package, the <code>@typedef<\/code> statements in the package's entry point script should be treated as effectively the same as its public API. It is important to be aware of this, both to avoid unintentionally exposing internal types on the public interface, and as a way to expose the public types of a project.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ packages\/data\/src\/index.js\n\n\/** @typedef {import('.\/registry').WPDataRegistry} WPDataRegistry *\/\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In this snippet, the <code>@typedef<\/code> will support the usage of the previous example's <code>import('@wordpress\/data')<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">External dependencies<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Many third-party dependencies will distribute their own TypeScript typings. For these, the <code>import<\/code> semantics should \"just work\".<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/user-images.githubusercontent.com\/1779930\/70167742-62198800-1695-11ea-9c21-82a91d4a60e2.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Working Example: <code>import<\/code> type<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>If you use a <a href=\"https:\/\/github.com\/Microsoft\/TypeScript\/wiki\/TypeScript-Editor-Support\">TypeScript integration<\/a> for your editor, you can typically see that this works if the type resolves to anything other than the fallback <code>any<\/code> type.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For packages which do not distribute their own TypeScript types, you are welcomed to install and use the <a href=\"http:\/\/definitelytyped.org\/\">DefinitelyTyped<\/a> community-maintained types definitions, if one exists.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Generic types<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When documenting a generic type such as <code>Object<\/code>, <code>Function<\/code>, <code>Promise<\/code>, etc., always include details about the expected record types.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Bad:\n\n\/** @type {Object} *\/\n\/** @type {Function} *\/\n\/** @type {Promise} *\/\n\n\/\/ Good:\n\n\/** @type {Record<string,number>} *\/ \/* or *\/ \/** @type {{&#91;setting:string]:any}} *\/\n\/** @type {(key:string)=>boolean} *\/\n\/** @type {Promise<string>} *\/\n<\/string><\/string,number><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When an object is used as a dictionary, you can define its type in 2 ways: indexable interface (<code>{[setting:string]:any}<\/code>) or <code>Record<\/code>. When the name of the key for an object provides hints for developers what to do like <code>setting<\/code>, use indexable interface. If not, use <code>Record<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The function expression here uses TypeScript's syntax for function types, which can be useful in providing more detailed information about the names and types of the expected parameters. For more information, consult the <a href=\"https:\/\/www.typescriptlang.org\/docs\/handbook\/jsdoc-supported-types.html#type\">TypeScript <code>@type<\/code> tag function recommendations<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In more advanced cases, you may define your own custom types as a generic type using the <a href=\"https:\/\/www.typescriptlang.org\/docs\/handbook\/jsdoc-supported-types.html#template\">TypeScript <code>@template<\/code> tag<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Similar to the \"Custom Types\" advice concerning type unions and with literal values, you can consider to create a custom type <code>@typedef<\/code> to better describe expected key values for object records, or to extract a complex function signature.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * An apiFetch middleware handler. Passed the fetch options, the middleware is\n * expected to call the `next` middleware once it has completed its handling.\n *\n * @typedef {(options:WPAPIFetchOptions,next:WPAPIFetchMiddleware)=>void} WPAPIFetchMiddleware\n *\/\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * Named breakpoint sizes.\n *\n * @typedef {\"huge\"|\"wide\"|\"large\"|\"medium\"|\"small\"|\"mobile\"} WPBreakpoint\n *\/\n\n\/**\n * Hash of breakpoint names with pixel width at which it becomes effective.\n *\n * @type {Record<wpbreakpoint,number>}\n *\/\nconst BREAKPOINTS = { huge: 1440 \/* , ... *\/ };\n<\/wpbreakpoint,number><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Nullable, undefined, and void types<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You can express a nullable type using a leading <code>?<\/code>. Use the nullable form of a type only if you're describing either the type or an explicit <code>null<\/code> value. Do not use the nullable form as an indicator of an optional parameter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * Returns a configuration value for a given key, if exists. Returns null if\n * there is no configured value.\n *\n * @param {string} key Configuration key to retrieve.\n *\n * @return {?*} Configuration value, if exists.\n *\/\nfunction getConfigurationValue( key ) {\n\treturn config.hasOwnProperty( key ) ? config&#91; key ] : null;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Similarly, use the <code>undefined<\/code> type only if you're expecting an explicit value of <code>undefined<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * Returns true if the next HTML token closes the current token.\n *\n * @param {WPHTMLToken}           currentToken Current token to compare with.\n * @param {WPHTMLToken|undefined} nextToken    Next token to compare against.\n *\n * @return {boolean} True if `nextToken` closes `currentToken`, false otherwise.\n *\/\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If a parameter is optional, use the <a href=\"https:\/\/jsdoc.app\/tags-param.html#optional-parameters-and-default-values\">square-bracket notation<\/a>. If an optional parameter has a default value which can be expressed as a <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Functions\/Default_parameters\">default parameter<\/a> in the function expression, it is not necessary to include the value in JSDoc. If the function parameter has an effective default value which requires complex logic and cannot be expressed using the default parameters syntax, you can choose to include the default value in the JSDoc.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * Renders a toolbar.\n *\n * @param {Object} props             Component props.\n * @param {string} &#91;props.className] Class to set on the container `<div>`.\n *\/\n<\/div><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When a function does not include a <code>return<\/code> statement, it is said to have a <code>void<\/code> return value. It is not necessary to include a <code>@return<\/code> tag if the return type is <code>void<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If a function has multiple code paths where some (but not all) conditions result in a <code>return<\/code> statement, you can document this as a union type including the <code>void<\/code> type.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * Returns a configuration value for a given key, if exists.\n *\n * @param {string} key Configuration key to retrieve.\n *\n * @return {*|void} Configuration value, if exists.\n *\/\nfunction getConfigurationValue( key ) {\n\tif ( config.hasOwnProperty( key ) ) {\n\t\treturn config&#91; key ];\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When documenting a <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/add\/typescript-jsdoc-guidelines\/docs\/contributors\/coding-guidelines.md#record-types\">function type<\/a>, you must always include the <code>void<\/code> return value type, as otherwise the function is inferred to return a mixed (\"any\") value, not a void result.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * An apiFetch middleware handler. Passed the fetch options, the middleware is\n * expected to call the `next` middleware once it has completed its handling.\n *\n * @typedef {(options:WPAPIFetchOptions,next:WPAPIFetchMiddleware)=>void} WPAPIFetchMiddleware\n *\/\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Documenting examples<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Because the documentation generated using the <code>@wordpress\/docgen<\/code> tool will include <code>@example<\/code> tags if they are defined, it is considered a best practice to include usage examples for functions and components. This is especially important for documented members of a package's public API.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When documenting an example, use the markdown &lt;code>```&lt;\/code> code block to demarcate the beginning and end of the code sample. An example can span multiple lines.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * Given the name of a registered store, returns an object of the store's\n * selectors. The selector functions are been pre-bound to pass the current\n * state automatically. As a consumer, you need only pass arguments of the\n * selector, if applicable.\n *\n * @param {string} name Store name.\n *\n * @example\n * ```js\n * select( 'my-shop' ).getPrice( 'hammer' );\n * ```\n *\n * @return {Record<string,wpdataselector>} Object containing the store's\n *                                         selectors.\n *\/\n<\/string,wpdataselector><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Documenting React components<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When possible, all components should be implemented as <a href=\"https:\/\/reactjs.org\/docs\/components-and-props.html#function-and-class-components\">function components<\/a>, using <a href=\"https:\/\/reactjs.org\/docs\/hooks-intro.html\">hooks<\/a> for managing component lifecycle and state.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Documenting a function component should be treated the same as any other function. The primary caveat in documenting a component is being aware that the function typically accepts only a single argument (the \"props\"), which may include many property members. Use the <a href=\"https:\/\/jsdoc.app\/tags-param.html#parameters-with-properties\">dot syntax for parameter properties<\/a> to document individual prop types.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * Renders the block's configured title as a string, or empty if the title\n * cannot be determined.\n *\n * @example\n *\n * ```jsx\n * <blocktitle clientid=\"afd1cb17-2c08-4e7a-91be-007ba7ddc3a1\">\n * ```\n *\n * @param {Object} props\n * @param {string} props.clientId Client ID of block.\n *\n * @return {?string} Block title.\n *\/\n<\/blocktitle><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>For class components, there is no recommendation for documenting the props of the component. Gutenberg does not use or endorse the <a href=\"https:\/\/react.dev\/reference\/react\/Component#static-proptypes\"><code>propTypes<\/code> static class member<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">PHP<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We use<br><a href=\"https:\/\/github.com\/squizlabs\/PHP_CodeSniffer\"><code>phpcs<\/code> (PHP_CodeSniffer)<\/a> with the <a href=\"https:\/\/github.com\/WordPress-Coding-Standards\/WordPress-Coding-Standards\">WordPress Coding Standards ruleset<\/a> to run a lot of automated checks against all PHP code in this project. This ensures that we are consistent with WordPress PHP coding standards.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The easiest way to use PHPCS is <a href=\"\/docs\/contributors\/code\/getting-started-with-code-contribution.md#local-environment\">local environment<\/a>. Once that's installed, you can check your PHP by running <code>npm run lint:php<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you prefer to install PHPCS locally, you should use <code>composer<\/code>. <a href=\"https:\/\/getcomposer.org\/download\/\">Install <code>composer<\/code><\/a> on your computer, then run <code>composer install<\/code>. This will install <code>phpcs<\/code> and <code>WordPress-Coding-Standards<\/code> which you can then run via <code>composer lint<\/code>.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Coding Guidelines\n\nThis living document serves to prescribe coding guidelines specific to the Gutenberg project. Base coding guidelines follow the [WordPress Coding Standards](https:\/\/developer.wordpress.org\/coding-standards\/wordpress-coding-standards\/). The following sections outline additional patterns and conventions used in the Gutenberg project.\n\n## CSS\n\n### Naming\n\nTo avoid class name collisions, class names **must** adhere to the following guidelines, which are loosely inspired by the [BEM (Block, Element, Modifier) methodology](https:\/\/en.bem.info\/methodology\/).\n\nAll class names assigned to an element must be prefixed with the name of the package, followed by a dash and the name of the directory in which the component resides. Any descendent of the component's root element must append a dash-delimited descriptor, separated from the base by two consecutive underscores `__`.\n\n-   Root element: `package-directory`\n-   Child elements: `package-directory__descriptor-foo-bar`\n\nThe root element is considered to be the highest ancestor element returned by the default export in the `index.js`. Notably, if your folder contains multiple files, each with their own default exported component, only the element rendered by that of `index.js` can be considered the root. All others should be treated as descendents.\n\n**Example:**\n\nConsider the following component located at `packages\/components\/src\/notice\/index.js`:\n\n```jsx\nexport default function Notice( { children, onRemove } ) {\n\treturn (\n\t\t<div className=\"components-notice\">\n\t\t\t<div className=\"components-notice__content\">{ children }<\/div>\n\t\t\t<Button\n\t\t\t\tclassName=\"components-notice__dismiss\"\n\t\t\t\ticon={ check }\n\t\t\t\tlabel={ __( 'Dismiss this notice' ) }\n\t\t\t\tonClick={ onRemove }\n\t\t\t\/>\n\t\t<\/div>\n\t);\n}\n```\n\nComponents may be assigned with class names that indicate states (for example, an \"active\" tab or an \"opened\" panel). These modifiers should be applied as a separate class name, prefixed as an adjective expression by `is-` (`is-active` or `is-opened`). In rare cases, you may encounter variations of the modifier prefix, usually to improve readability (`has-warning`). Because a modifier class name is not contextualized to a specific component, it should always be written in stylesheets as accompanying the component being modified (`.components-panel.is-opened`).\n\n**Example:**\n\nConsider again the Notices example. We may want to apply specific styling for dismissible notices. The [`classnames` package](https:\/\/www.npmjs.com\/package\/classnames) can be a helpful utility for conditionally applying modifier class names.\n\n```jsx\nimport classnames from 'classnames';\n\nexport default function Notice( { children, onRemove, isDismissible } ) {\n\tconst classes = classnames( 'components-notice', {\n\t\t'is-dismissible': isDismissible,\n\t} );\n\n\treturn <div className={ classes }>{ \/* ... *\/ }<\/div>;\n}\n```\n\nA component's class name should **never** be used outside its own folder (with rare exceptions such as [`_z-index.scss`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/base-styles\/_z-index.scss)). If you need to inherit styles of another component in your own components, you should render an instance of that other component. At worst, you should duplicate the styles within your own component's stylesheet. This is intended to improve maintainability by isolating shared components as a reusable interface, reducing the surface area of similar UI elements by adapting a limited set of common components to support a varied set of use-cases.\n\n#### SCSS file naming conventions for blocks\n\nThe build process will split SCSS from within the blocks library directory into two separate CSS files when Webpack runs.\n\nStyles placed in a `style.scss` file will be built into `blocks\/build\/style.css`, to load on the front end theme as well as in the editor. If you need additional styles specific to the block's display in the editor, add them to an `editor.scss`.\n\nExamples of styles that appear in both the theme and the editor include gallery columns and drop caps.\n\n## JavaScript\n\nJavaScript in Gutenberg uses modern language features of the [ECMAScript language specification](https:\/\/www.ecma-international.org\/ecma-262\/) as well as the [JSX language syntax extension](https:\/\/reactjs.org\/docs\/introducing-jsx.html). These are enabled through a combination of preset configurations, notably [`@wordpress\/babel-preset-default`](https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/babel-preset-default) which is used as a preset in the project's [Babel](https:\/\/babeljs.io\/) configuration.\n\nWhile the [staged process](https:\/\/tc39.es\/process-document\/) for introducing a new JavaScript language feature offers an opportunity to use new features before they are considered complete, **the Gutenberg project and the `@wordpress\/babel-preset-default` configuration will only target support for proposals which have reached Stage 4 (\"Finished\")**.\n\n### Imports\n\nIn the Gutenberg project, we use [the ES2015 import syntax](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Statements\/import) to enable us to create modular code with clear separations between code of a specific feature, code shared across distinct WordPress features, and third-party dependencies.\n\nThese separations are identified by multi-line comments at the top of a file which imports code from another file or source.\n\n#### External dependencies\n\nAn external dependency is third-party code that is not maintained by WordPress contributors, but instead [included in WordPress as a default script](https:\/\/developer.wordpress.org\/reference\/functions\/wp_enqueue_script\/#default-scripts-included-and-registered-by-wordpress) or referenced from an outside package manager like [npm](https:\/\/www.npmjs.com\/).\n\nExample:\n\n```js\n\/**\n * External dependencies\n *\/\nimport moment from 'moment';\n```\n\n#### WordPress dependencies\n\nTo encourage reusability between features, our JavaScript is split into domain-specific modules which [`export`](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Statements\/export) one or more functions or objects. In the Gutenberg project, we've distinguished these modules under top-level directories. Each module serve an independent purpose, and often code is shared between them. For example, in order to localize its text, editor code will need to include functions from the `i18n` module.\n\nExample:\n\n```js\n\/**\n * WordPress dependencies\n *\/\nimport { __ } from '@wordpress\/i18n';\n```\n\n#### Internal dependencies\n\nWithin a specific feature, code is organized into separate files and folders. As is the case with external and WordPress dependencies, you can bring this code into scope by using the `import` keyword. The main distinction here is that when importing internal files, you should use relative paths specific to top-level directory you're working in.\n\nExample:\n\n```js\n\/**\n * Internal dependencies\n *\/\nimport VisualEditor from '..\/visual-editor';\n```\n\n### Legacy experimental APIs, plugin-only APIs, and private APIs\n\n#### Legacy experimental APIs\n\nHistorically, Gutenberg has used the `__experimental` and `__unstable` prefixes to indicate that a given API is not yet stable and may be subject to change. This is a legacy convention which should be avoided in favor of the plugin-only API pattern or a private API pattern described below.\n\nThe problem with using the prefixes was that these APIs rarely got stabilized or removed. As of June 2022, WordPress Core contained 280 publicly exported experimental APIs merged from the Gutenberg plugin during the major WordPress releases. Many plugins and themes started relying on these experimental APIs for essential features that couldn't be accessed in any other way.\n\nThe legacy `__experimental` APIs can't be removed on a whim anymore. They became a part of the WordPress public API and fall under the [WordPress Backwards Compatibility policy](https:\/\/developer.wordpress.org\/block-editor\/contributors\/code\/backward-compatibility\/). Removing them involves a deprecation process. It may be relatively easy for some APIs, but it may require effort and span multiple WordPress releases for others.\n\nAll in all, don't use the `__experimental` prefix for new APIs. Use plugin-only APIs and private APIs instead.\n\n#### Plugin-only APIs\n\nPlugin-only APIs are temporary values exported from a module whose existence is either pending future revision or provides an immediate means to an end.\n\n_To External Consumers:_\n\n**There is no support commitment for plugin-only APIs.** They can and will be removed or changed without advance warning, including as part of a minor or patch release. As an external consumer, you should avoid these APIs.\n\n_To Project Contributors:_\n\nAn **plugin-only API** is one which is planned for eventual public availability, but is subject to further experimentation, testing, and discussion. It should be made stable or removed at the earliest opportunity.\n\nPlugin-only APIs are excluded from WordPress Core and only available in the Gutenberg Plugin:\n\n```js\n\/\/ Using process.env.IS_GUTENBERG_PLUGIN allows Webpack to exclude this\n\/\/ export from WordPress core:\nif ( process.env.IS_GUTENBERG_PLUGIN ) {\n\texport { doSomethingExciting } from '.\/api';\n}\n```\n\nThe public interface of such APIs is not yet finalized. Aside from references within the code, they APIs should neither be documented nor mentioned in any CHANGELOG. They should effectively be considered to not exist from an external perspective. In most cases, they should only be exposed to satisfy requirements between packages maintained in this repository.\n\nWhile a plugin-only API may often stabilize into a publicly-available API, there is no guarantee that it will.\n\n#### Private APIs\n\nEach `@wordpress` package wanting to privately access or expose a private APIs can\ndo so by opting-in to `@wordpress\/private-apis`:\n\n```js\n\/\/ In packages\/block-editor\/private-apis.js:\nimport { __dangerousOptInToUnstableAPIsOnlyForCoreModules } from '@wordpress\/private-apis';\nexport const { lock, unlock } =\n\t__dangerousOptInToUnstableAPIsOnlyForCoreModules(\n\t\t'I know using unstable features means my theme or plugin will inevitably break in the next version of WordPress.',\n\t\t'@wordpress\/block-editor' \/\/ Name of the package calling __dangerousOptInToUnstableAPIsOnlyForCoreModules,\n\t\t\/\/ (not the name of the package whose APIs you want to access)\n\t);\n```\n\nEach `@wordpress` package may only opt-in once. The process clearly communicates the extenders are not supposed\nto use it. This document will focus on the usage examples, but you can [find out more about the `@wordpress\/private-apis` package in the its README.md](\/packages\/private-apis\/README.md).\n\nOnce the package opted-in, you can use the `lock()` and `unlock()` utilities:\n\n```js\n\/\/ Say this object is exported from a package:\nexport const publicObject = {};\n\n\/\/ However, this string is internal and should not be publicly available:\nconst privateString = 'private information';\n\n\/\/ Solution: lock the string \"inside\" of the object:\nlock( publicObject, privateString );\n\n\/\/ The string is not nested in the object and cannot be extracted from it:\nconsole.log( publicObject );\n\/\/ {}\n\n\/\/ The only way to access the string is by \"unlocking\" the object:\nconsole.log( unlock( publicObject ) );\n\/\/ \"private information\"\n\n\/\/ lock() accepts all data types, not just strings:\nexport const anotherObject = {};\nlock( anotherObject, function privateFn() {} );\nconsole.log( unlock( anotherObject ) );\n\/\/ function privateFn() {}\n```\n\nKeep reading to learn how to use `lock()` and `unlock()` to avoid publicly exporting\ndifferent kinds of `private` APIs.\n\n##### Private selectors and actions\n\nYou can attach private selectors and actions to a public store:\n\n```js\n\/\/ In packages\/package1\/store.js:\nimport { privateHasContentRoleAttribute } from '.\/private-selectors';\nimport { privateToggleFeature } from '.\/private-actions';\n\/\/ The `lock` function is exported from the internal private-apis.js file where\n\/\/ the opt-in function was called.\nimport { lock, unlock } from '.\/lock-unlock';\n\nexport const store = registerStore( \/* ... *\/ );\n\/\/ Attach a private action to the exported store:\nunlock( store ).registerPrivateActions( {\n\tprivateToggleFeature,\n} );\n\n\/\/ Attach a private action to the exported store:\nunlock( store ).registerPrivateSelectors( {\n\tprivateHasContentRoleAttribute,\n} );\n```\n\n```js\n\/\/ In packages\/package2\/MyComponent.js:\nimport { store } from '@wordpress\/package1';\nimport { useSelect } from '@wordpress\/data';\n\/\/ The `unlock` function is exported from the internal private-apis.js file where\n\/\/ the opt-in function was called.\nimport { unlock } from '.\/lock-unlock';\n\nfunction MyComponent() {\n\tconst hasRole = useSelect(\n\t\t( select ) =>\n\t\t\t\/\/ Use the private selector:\n\t\t\tunlock( select( store ) ).privateHasContentRoleAttribute()\n\t\t\/\/ Note the unlock() is required. This line wouldn't work:\n\t\t\/\/ select( store ).privateHasContentRoleAttribute()\n\t);\n\n\t\/\/ Use the private action:\n\tunlock( useDispatch( store ) ).privateToggleFeature();\n\n\t\/\/ ...\n}\n```\n\n##### Private functions, classes, and variables\n\n```js\n\/\/ In packages\/package1\/index.js:\nimport { lock } from '.\/lock-unlock';\n\nexport const privateApis = {};\n\/* Attach private data to the exported object *\/\nlock( privateApis, {\n\tprivateCallback: function () {},\n\tprivateReactComponent: function PrivateComponent() {\n\t\treturn <div \/>;\n\t},\n\tprivateClass: class PrivateClass {},\n\tprivateVariable: 5,\n} );\n```\n\n```js\n\/\/ In packages\/package2\/index.js:\nimport { privateApis } from '@wordpress\/package1';\nimport { unlock } from '.\/lock-unlock';\n\nconst {\n\tprivateCallback,\n\tprivateReactComponent,\n\tprivateClass,\n\tprivateVariable,\n} = unlock( privateApis );\n```\n\nRemember to always register the private actions and selectors on the **registered** store.\n\nSometimes that's easy:\n\n```js\nexport const store = createReduxStore( STORE_NAME, storeConfig() );\n\/\/ `register` uses the same `store` object created from `createReduxStore`.\nregister( store );\nunlock( store ).registerPrivateActions( {\n\t\/\/ ...\n} );\n```\n\nHowever some package might call both `createReduxStore` **and** `registerStore`. In this case, always choose the store that gets registered:\n\n```js\nexport const store = createReduxStore( STORE_NAME, {\n\t...storeConfig,\n\tpersist: [ 'preferences' ],\n} );\nconst registeredStore = registerStore( STORE_NAME, {\n\t...storeConfig,\n\tpersist: [ 'preferences' ],\n} );\nunlock( registeredStore ).registerPrivateActions( {\n\t\/\/ ...\n} );\n```\n\n#### Private function arguments\n\nTo add a private argument to a stable function you'll need\nto prepare a stable and a private version of that function.\nThen, export the stable function and `lock()` the unstable function\ninside it:\n\n```js\n\/\/ In @wordpress\/package1\/index.js:\nimport { lock } from '.\/lock-unlock';\n\n\/\/ A private function contains all the logic\nfunction privateValidateBlocks( formula, privateIsStrict ) {\n\tlet isValid = false;\n\t\/\/ ...complex logic we don't want to duplicate...\n\tif ( privateIsStrict ) {\n\t\t\/\/ ...\n\t}\n\t\/\/ ...complex logic we don't want to duplicate...\n\n\treturn isValid;\n}\n\n\/\/ The stable public function is a thin wrapper that calls the\n\/\/ private function with the private features disabled\nexport function validateBlocks( blocks ) {\n\tprivateValidateBlocks( blocks, false );\n}\n\nexport const privateApis = {};\nlock( privateApis, { privateValidateBlocks } );\n```\n\n```js\n\/\/ In @wordpress\/package2\/index.js:\nimport { privateApis as package1PrivateApis } from '@wordpress\/package1';\nimport { unlock } from '.\/lock-unlock';\n\n\/\/ The private function may be \"unlocked\" given the stable function:\nconst { privateValidateBlocks } = unlock( package1PrivateApis );\nprivateValidateBlocks( blocks, true );\n```\n\n#### Private React component properties\n\nTo add an private argument to a stable component you'll need\nto prepare a stable and an private version of that component.\nThen, export the stable function and `lock()` the unstable function\ninside it:\n\n```js\n\/\/ In @wordpress\/package1\/index.js:\nimport { lock } from '.\/lock-unlock';\n\n\/\/ The private component contains all the logic\nconst PrivateMyButton = ( { title, privateShowIcon = true } ) => {\n\t\/\/ ...complex logic we don't want to duplicate...\n\n\treturn (\n\t\t<button>\n\t\t\t{ privateShowIcon && <Icon src={ someIcon } \/> } { title }\n\t\t<\/button>\n\t);\n};\n\n\/\/ The stable public component is a thin wrapper that calls the\n\/\/ private component with the private features disabled\nexport const MyButton = ( { title } ) => (\n\t<PrivateMyButton title={ title } privateShowIcon={ false } \/>\n);\n\nexport const privateApis = {};\nlock( privateApis, { PrivateMyButton } );\n```\n\n```js\n\/\/ In @wordpress\/package2\/index.js:\nimport { privateApis } from '@wordpress\/package1';\nimport { unlock } from '.\/lock-unlock';\n\n\/\/ The private component may be \"unlocked\" given the stable component:\nconst { PrivateMyButton } = unlock( privateApis );\nexport function MyComponent() {\n\treturn <PrivateMyButton data={ data } privateShowIcon={ true } \/>;\n}\n```\n\n#### Private editor settings\n\nWordPress extenders cannot update the private block settings on their own. The `updateSettings()` actions of the `@wordpress\/block-editor` store will filter out all the settings that are **not** a part of the public API. The only way to actually store them is via the private action `__experimentalUpdateSettings()`.\n\nTo privatize a block editor setting, add it to the `privateSettings` list in [\/packages\/block-editor\/src\/store\/actions.js](\/packages\/block-editor\/src\/store\/actions.js):\n\n```js\nconst privateSettings = [\n\t'inserterMediaCategories',\n\t\/\/ List a block editor setting here to make it private\n];\n```\n\n#### Private block.json and theme.json APIs\n\nAs of today, there is no way to restrict the `block.json` and `theme.json` APIs\nto the Gutenberg codebase. In the future, however, the new private APIs\nwill only apply to the core WordPress blocks and plugins and themes will not be\nable to access them.\n\n#### Inline small actions in thunks\n\nFinally, instead of introducing a new action creator, consider using a [thunk](\/docs\/how-to-guides\/thunks.md):\n\n```js\nexport function toggleFeature( scope, featureName ) {\n\treturn function ( { dispatch } ) {\n\t\tdispatch( { type: '__private_BEFORE_TOGGLE' } );\n\t\t\/\/ ...\n\t};\n}\n```\n\n### Exposing private APIs publicly\n\nSome private APIs could benefit from community feedback and it makes sense to expose them to WordPress extenders. At the same time, it doesn't make sense to turn them into a public API in WordPress core. What should you do?\n\nYou can re-export that private API as a plugin-only API to expose it publicly only in the Gutenberg plugin:\n\n```js\n\/\/ This function can't be used by extenders in any context:\nfunction privateEverywhere() {}\n\n\/\/ This function can be used by extenders with the Gutenberg plugin but not in vanilla WordPress Core:\nfunction privateInCorePublicInPlugin() {}\n\n\/\/ Gutenberg treats both functions as private APIs internally:\nconst privateApis = {};\nlock( privateApis, { privateEverywhere, privateInCorePublicInPlugin } );\n\n\/\/ The privateInCorePublicInPlugin function is explicitly exported,\n\/\/ but this export will not be merged into WordPress core thanks to\n\/\/ the process.env.IS_GUTENBERG_PLUGIN check.\nif ( process.env.IS_GUTENBERG_PLUGIN ) {\n\texport const privateInCorePublicInPlugin =\n\t\tunlock( privateApis ).privateInCorePublicInPlugin;\n}\n```\n\n### Objects\n\nWhen possible, use [shorthand notation](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Operators\/Object_initializer#New_notations_in_ECMAScript_2015) when defining object property values:\n\n<!-- prettier-ignore -->\n```js\nconst a = 10;\n\n\/\/ Bad:\nconst object = {\n\ta: a,\n\tperformAction: function () {\n\t\t\/\/ ...\n\t},\n};\n\n\/\/ Good:\nconst object = {\n\ta,\n\tperformAction() {\n\t\t\/\/ ...\n\t},\n};\n```\n\n### Strings\n\nString literals should be declared with single-quotes _unless_ the string itself contains a single-quote that would need to be escaped\u2013in that case: use a double-quote. If the string contains a single-quote _and_ a double-quote, you can use ES6 template strings to avoid escaping the quotes.\n\n**Note:** The single-quote character (`'`) should never be used in place of an apostrophe (`\u2019`) for words like `it\u2019s` or `haven\u2019t` in user-facing strings. For test code it's still encouraged to use a real apostrophe.\n\nIn general, avoid backslash-escaping quotes:\n\n<!-- prettier-ignore -->\n```js\n\/\/ Bad:\nconst name = \"Matt\";\n\/\/ Good:\nconst name = 'Matt';\n\n\/\/ Bad:\nconst pet = \"Matt's dog\";\n\/\/ Also bad (not using an apostrophe):\nconst pet = \"Matt's dog\";\n\/\/ Good:\nconst pet = 'Matt\u2019s dog';\n\/\/ Also good:\nconst oddString = \"She said 'This is odd.'\";\n```\n\nYou should use ES6 Template Strings over string concatenation whenever possible:\n\n<!-- prettier-ignore -->\n```js\nconst name = 'Stacey';\n\n\/\/ Bad:\nalert( 'My name is ' + name + '.' );\n\/\/ Good:\nalert( `My name is ${ name }.` );\n```\n\n### Optional chaining\n\n[Optional chaining](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Operators\/Optional_chaining) is a new language feature introduced in version 2020 of the ECMAScript specification. While the feature can be very convenient for property access on objects which are potentially null-ish (`null` or `undefined`), there are a number of common pitfalls to be aware of when using optional chaining. These may be issues that linting and\/or type-checking can help protect against at some point in the future. In the meantime, you will want to be cautious of the following items:\n\n-   When negating (`!`) the result of a value which is evaluated with optional chaining, you should be observant that in the case that optional chaining reaches a point where it cannot proceed, it will produce a [falsy value](https:\/\/developer.mozilla.org\/en-US\/docs\/Glossary\/Falsy) that will be transformed to `true` when negated. In many cases, this is not an expected result.\n    -   Example: `const hasFocus = ! nodeRef.current?.contains( document.activeElement );` will yield `true` if `nodeRef.current` is not assigned.\n    -   See related issue: [#21984](https:\/\/github.com\/WordPress\/gutenberg\/issues\/21984)\n    -   See similar ESLint rule: [`no-unsafe-negation`](https:\/\/eslint.org\/docs\/rules\/no-unsafe-negation)\n-   When assigning a boolean value, observe that optional chaining may produce values which are [falsy](https:\/\/developer.mozilla.org\/en-US\/docs\/Glossary\/Falsy) (`undefined`, `null`), but not strictly `false`. This can become an issue when the value is passed around in a way where it is expected to be a boolean (`true` or `false`). While it's a common occurrence for booleans\u2014since booleans are often used in ways where the logic considers truthiness and falsyness broadly\u2014these issues can also occur for other optional chaining when eagerly assuming a type resulting from the end of the property access chain. [Type-checking](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/README.md#typescript) may help in preventing these sorts of errors.\n    -   Example: `document.body.classList.toggle( 'has-focus', nodeRef.current?.contains( document.activeElement ) );` may wrongly _add_ the class, since [the second argument is optional](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/DOMTokenList\/toggle). If `undefined` is passed, it would not unset the class as it would when `false` is passed.\n    -   Example: `<input value={ state.selected?.value.trim() } \/>` may inadvertently cause warnings in React by toggling between [controlled and uncontrolled inputs](https:\/\/reactjs.org\/docs\/uncontrolled-components.html). This is an easy trap to fall into when eagerly assuming that a result of `trim()` will always return a string value, overlooking the fact the optional chaining may have caused evaluation to abort earlier with a value of `undefined`.\n\n### React components\n\nIt is preferred to implement all components as [function components](https:\/\/reactjs.org\/docs\/components-and-props.html), using [hooks](https:\/\/reactjs.org\/docs\/hooks-reference.html) to manage component state and lifecycle. With the exception of [error boundaries](https:\/\/reactjs.org\/docs\/error-boundaries.html), you should never encounter a situation where you must use a class component. Note that the [WordPress guidance on Code Refactoring](https:\/\/make.wordpress.org\/core\/handbook\/contribute\/code-refactoring\/) applies here: There needn't be a concentrated effort to update class components in bulk. Instead, consider it as a good refactoring opportunity in combination with some other change.\n\n## JavaScript documentation using JSDoc\n\nGutenberg follows the [WordPress JavaScript Documentation Standards](https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/inline-documentation-standards\/javascript\/), with additional guidelines relevant for its distinct use of [import semantics](\/docs\/contributors\/code\/coding-guidelines.md#imports) in organizing files, the [use of TypeScript tooling](\/docs\/contributors\/code\/testing-overview.md#javascript-testing) for types validation, and automated documentation generation using [`@wordpress\/docgen`](https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/docgen).\n\nFor additional guidance, consult the following resources:\n\n-   [JSDoc Official Documentation](https:\/\/jsdoc.app\/index.html)\n-   [TypeScript Supported JSDoc](https:\/\/www.typescriptlang.org\/docs\/handbook\/jsdoc-supported-types.html)\n\n### Custom types\n\nDefine custom types using the [JSDoc `@typedef` tag](https:\/\/jsdoc.app\/tags-typedef.html).\n\nA custom type should include a description, and should always include its base type.\n\nCustom types should be named as succinctly as possible, while still retaining clarity of meaning and avoiding conflict with other global or scoped types. A `WP` prefix should be applied to all custom types. Avoid superfluous or redundant prefixes and suffixes (for example, a `Type` suffix, or `Custom` prefix). Custom types are not global by default, so a custom type does not need to be excessively specific to a particular package. However, they should be named with enough specificity to avoid ambiguity or name collisions when brought into the same scope as another type.\n\n```js\n\/**\n * A block selection object.\n *\n * @typedef WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value.\n *\/\n```\n\nNote that there is no `{Object}` between `@typedef` and the type name. As `@property`s below tells us that it is a type for objects, it is recommend to not use `{Object}` when you want to define types for your objects.\n\nCustom types can also be used to describe a set of predefined options. While the [type union](https:\/\/jsdoc.app\/tags-type.html) can be used with literal values as an inline type, it can be difficult to align tags while still respecting a maximum line length of 80 characters. Using a custom type to define a union type can afford the opportunity to describe the purpose of these options, and helps to avoid these line length issues.\n\n```js\n\/**\n * Named breakpoint sizes.\n *\n * @typedef {'huge'|'wide'|'large'|'medium'|'small'|'mobile'} WPBreakpoint\n *\/\n```\n\nNote the use of quotes when defining a set of string literals. As in the [JavaScript Coding Standards](https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/), single quotes should be used when assigning a string literal either as the type or as a [default function parameter](#nullable-undefined-and-void-types), or when [specifying the path](#importing-and-exporting-types) of an imported type.\n\n### Importing and exporting types\n\nUse the [TypeScript `import` function](https:\/\/www.typescriptlang.org\/docs\/handbook\/jsdoc-supported-types.html#import-types) to import type declarations from other files or third-party dependencies.\n\nSince an imported type declaration can occupy an excess of the available line length and become verbose when referenced multiple times, you are encouraged to create an alias of the external type using a `@typedef` declaration at the top of the file, immediately following [the `import` groupings](\/docs\/contributors\/code\/coding-guidelines.md#imports).\n\n```js\n\/** @typedef {import('@wordpress\/data').WPDataRegistry} WPDataRegistry *\/\n```\n\nNote that all custom types defined in another file can be imported.\n\nWhen considering which types should be made available from a WordPress package, the `@typedef` statements in the package's entry point script should be treated as effectively the same as its public API. It is important to be aware of this, both to avoid unintentionally exposing internal types on the public interface, and as a way to expose the public types of a project.\n\n```js\n\/\/ packages\/data\/src\/index.js\n\n\/** @typedef {import('.\/registry').WPDataRegistry} WPDataRegistry *\/\n```\n\nIn this snippet, the `@typedef` will support the usage of the previous example's `import('@wordpress\/data')`.\n\n#### External dependencies\n\nMany third-party dependencies will distribute their own TypeScript typings. For these, the `import` semantics should \"just work\".\n\n![Working Example: `import` type](https:\/\/user-images.githubusercontent.com\/1779930\/70167742-62198800-1695-11ea-9c21-82a91d4a60e2.png)\n\nIf you use a [TypeScript integration](https:\/\/github.com\/Microsoft\/TypeScript\/wiki\/TypeScript-Editor-Support) for your editor, you can typically see that this works if the type resolves to anything other than the fallback `any` type.\n\nFor packages which do not distribute their own TypeScript types, you are welcomed to install and use the [DefinitelyTyped](http:\/\/definitelytyped.org\/) community-maintained types definitions, if one exists.\n\n### Generic types\n\nWhen documenting a generic type such as `Object`, `Function`, `Promise`, etc., always include details about the expected record types.\n\n```js\n\/\/ Bad:\n\n\/** @type {Object} *\/\n\/** @type {Function} *\/\n\/** @type {Promise} *\/\n\n\/\/ Good:\n\n\/** @type {Record<string,number>} *\/ \/* or *\/ \/** @type {{[setting:string]:any}} *\/\n\/** @type {(key:string)=>boolean} *\/\n\/** @type {Promise<string>} *\/\n```\n\nWhen an object is used as a dictionary, you can define its type in 2 ways: indexable interface (`{[setting:string]:any}`) or `Record`. When the name of the key for an object provides hints for developers what to do like `setting`, use indexable interface. If not, use `Record`.\n\nThe function expression here uses TypeScript's syntax for function types, which can be useful in providing more detailed information about the names and types of the expected parameters. For more information, consult the [TypeScript `@type` tag function recommendations](https:\/\/www.typescriptlang.org\/docs\/handbook\/jsdoc-supported-types.html#type).\n\nIn more advanced cases, you may define your own custom types as a generic type using the [TypeScript `@template` tag](https:\/\/www.typescriptlang.org\/docs\/handbook\/jsdoc-supported-types.html#template).\n\nSimilar to the \"Custom Types\" advice concerning type unions and with literal values, you can consider to create a custom type `@typedef` to better describe expected key values for object records, or to extract a complex function signature.\n\n```js\n\/**\n * An apiFetch middleware handler. Passed the fetch options, the middleware is\n * expected to call the `next` middleware once it has completed its handling.\n *\n * @typedef {(options:WPAPIFetchOptions,next:WPAPIFetchMiddleware)=>void} WPAPIFetchMiddleware\n *\/\n```\n\n```js\n\/**\n * Named breakpoint sizes.\n *\n * @typedef {\"huge\"|\"wide\"|\"large\"|\"medium\"|\"small\"|\"mobile\"} WPBreakpoint\n *\/\n\n\/**\n * Hash of breakpoint names with pixel width at which it becomes effective.\n *\n * @type {Record<WPBreakpoint,number>}\n *\/\nconst BREAKPOINTS = { huge: 1440 \/* , ... *\/ };\n```\n\n### Nullable, undefined, and void types\n\nYou can express a nullable type using a leading `?`. Use the nullable form of a type only if you're describing either the type or an explicit `null` value. Do not use the nullable form as an indicator of an optional parameter.\n\n```js\n\/**\n * Returns a configuration value for a given key, if exists. Returns null if\n * there is no configured value.\n *\n * @param {string} key Configuration key to retrieve.\n *\n * @return {?*} Configuration value, if exists.\n *\/\nfunction getConfigurationValue( key ) {\n\treturn config.hasOwnProperty( key ) ? config[ key ] : null;\n}\n```\n\nSimilarly, use the `undefined` type only if you're expecting an explicit value of `undefined`.\n\n```js\n\/**\n * Returns true if the next HTML token closes the current token.\n *\n * @param {WPHTMLToken}           currentToken Current token to compare with.\n * @param {WPHTMLToken|undefined} nextToken    Next token to compare against.\n *\n * @return {boolean} True if `nextToken` closes `currentToken`, false otherwise.\n *\/\n```\n\nIf a parameter is optional, use the [square-bracket notation](https:\/\/jsdoc.app\/tags-param.html#optional-parameters-and-default-values). If an optional parameter has a default value which can be expressed as a [default parameter](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Functions\/Default_parameters) in the function expression, it is not necessary to include the value in JSDoc. If the function parameter has an effective default value which requires complex logic and cannot be expressed using the default parameters syntax, you can choose to include the default value in the JSDoc.\n\n```js\n\/**\n * Renders a toolbar.\n *\n * @param {Object} props             Component props.\n * @param {string} [props.className] Class to set on the container `<div \/>`.\n *\/\n```\n\nWhen a function does not include a `return` statement, it is said to have a `void` return value. It is not necessary to include a `@return` tag if the return type is `void`.\n\nIf a function has multiple code paths where some (but not all) conditions result in a `return` statement, you can document this as a union type including the `void` type.\n\n```js\n\/**\n * Returns a configuration value for a given key, if exists.\n *\n * @param {string} key Configuration key to retrieve.\n *\n * @return {*|void} Configuration value, if exists.\n *\/\nfunction getConfigurationValue( key ) {\n\tif ( config.hasOwnProperty( key ) ) {\n\t\treturn config[ key ];\n\t}\n}\n```\n\nWhen documenting a [function type](https:\/\/github.com\/WordPress\/gutenberg\/blob\/add\/typescript-jsdoc-guidelines\/docs\/contributors\/coding-guidelines.md#record-types), you must always include the `void` return value type, as otherwise the function is inferred to return a mixed (\"any\") value, not a void result.\n\n```js\n\/**\n * An apiFetch middleware handler. Passed the fetch options, the middleware is\n * expected to call the `next` middleware once it has completed its handling.\n *\n * @typedef {(options:WPAPIFetchOptions,next:WPAPIFetchMiddleware)=>void} WPAPIFetchMiddleware\n *\/\n```\n\n### Documenting examples\n\nBecause the documentation generated using the `@wordpress\/docgen` tool will include `@example` tags if they are defined, it is considered a best practice to include usage examples for functions and components. This is especially important for documented members of a package's public API.\n\nWhen documenting an example, use the markdown <code>\\`\\`\\`<\/code> code block to demarcate the beginning and end of the code sample. An example can span multiple lines.\n\n````js\n\/**\n * Given the name of a registered store, returns an object of the store's\n * selectors. The selector functions are been pre-bound to pass the current\n * state automatically. As a consumer, you need only pass arguments of the\n * selector, if applicable.\n *\n * @param {string} name Store name.\n *\n * @example\n * ```js\n * select( 'my-shop' ).getPrice( 'hammer' );\n * ```\n *\n * @return {Record<string,WPDataSelector>} Object containing the store's\n *                                         selectors.\n *\/\n````\n\n### Documenting React components\n\nWhen possible, all components should be implemented as [function components](https:\/\/reactjs.org\/docs\/components-and-props.html#function-and-class-components), using [hooks](https:\/\/reactjs.org\/docs\/hooks-intro.html) for managing component lifecycle and state.\n\nDocumenting a function component should be treated the same as any other function. The primary caveat in documenting a component is being aware that the function typically accepts only a single argument (the \"props\"), which may include many property members. Use the [dot syntax for parameter properties](https:\/\/jsdoc.app\/tags-param.html#parameters-with-properties) to document individual prop types.\n\n````js\n\/**\n * Renders the block's configured title as a string, or empty if the title\n * cannot be determined.\n *\n * @example\n *\n * ```jsx\n * <BlockTitle clientId=\"afd1cb17-2c08-4e7a-91be-007ba7ddc3a1\" \/>\n * ```\n *\n * @param {Object} props\n * @param {string} props.clientId Client ID of block.\n *\n * @return {?string} Block title.\n *\/\n````\n\nFor class components, there is no recommendation for documenting the props of the component. Gutenberg does not use or endorse the [`propTypes` static class member](https:\/\/react.dev\/reference\/react\/Component#static-proptypes).\n\n## PHP\n\nWe use\n[`phpcs` (PHP_CodeSniffer)](https:\/\/github.com\/squizlabs\/PHP_CodeSniffer) with the [WordPress Coding Standards ruleset](https:\/\/github.com\/WordPress-Coding-Standards\/WordPress-Coding-Standards) to run a lot of automated checks against all PHP code in this project. This ensures that we are consistent with WordPress PHP coding standards.\n\nThe easiest way to use PHPCS is [local environment](\/docs\/contributors\/code\/getting-started-with-code-contribution.md#local-environment). Once that's installed, you can check your PHP by running `npm run lint:php`.\n\nIf you prefer to install PHPCS locally, you should use `composer`. [Install `composer`](https:\/\/getcomposer.org\/download\/) on your computer, then run `composer install`. This will install `phpcs` and `WordPress-Coding-Standards` which you can then run via `composer lint`.\n"
    },
    {
        "path": "\/markdown\/contributors\/code\/managing-packages.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Managing Packages<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This repository uses <a href=\"https:\/\/monorepo.tools\">monorepo<\/a> to manage WordPress modules and publish them with <a href=\"https:\/\/lerna.js.org\/\">lerna<\/a> as packages to <a href=\"https:\/\/www.npmjs.com\/\">npm<\/a>. This enforces certain steps in the workflow which are described in details in <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/README.md\">packages<\/a> documentation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Maintaining dozens of npm packages is difficult\u2014it can be tough to keep track of changes. That's why we use <code>CHANGELOG.md<\/code> files for each package to simplify the release process. As a contributor, you should add an entry to the aforementioned file each time you contribute adding production code as described in <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/README.md#maintaining-changelogs\">Maintaining Changelogs<\/a> section.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Publishing WordPress packages to npm is automated by synchronizing it with the bi-weekly Gutenberg plugin RC1 release. You can learn more about this process and other ways to publish new versions of npm packages in the <a href=\"\/docs\/contributors\/code\/release.md#packages-releases-to-npm-and-wordpress-core-updates\">Gutenberg Release Process document<\/a>.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Managing Packages\n\nThis repository uses [monorepo] to manage WordPress modules and publish them with [lerna] as packages to [npm]. This enforces certain steps in the workflow which are described in details in [packages](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/README.md) documentation.\n\nMaintaining dozens of npm packages is difficult\u2014it can be tough to keep track of changes. That's why we use `CHANGELOG.md` files for each package to simplify the release process. As a contributor, you should add an entry to the aforementioned file each time you contribute adding production code as described in [Maintaining Changelogs](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/README.md#maintaining-changelogs) section.\n\nPublishing WordPress packages to npm is automated by synchronizing it with the bi-weekly Gutenberg plugin RC1 release. You can learn more about this process and other ways to publish new versions of npm packages in the [Gutenberg Release Process document](\/docs\/contributors\/code\/release.md#packages-releases-to-npm-and-wordpress-core-updates).\n\n[lerna]: https:\/\/lerna.js.org\/\n[monorepo]: https:\/\/monorepo.tools\n[npm]: https:\/\/www.npmjs.com\/\n"
    },
    {
        "path": "\/markdown\/contributors\/versions-in-wordpress.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Versions in WordPress<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>With each major release of WordPress a new version of Gutenberg is included. This has caused confusion over time as people have tried to figure out how to best debug problems and report bugs appropriately. To make this easier we have made this document to serve as a canonical list of the Gutenberg versions integrated into each major WordPress release. Of note, during the beta period of a WordPress release, additional bug fixes from later Gutenberg releases than those noted are added into the WordPress release where it is needed. If you want details about what's in each Gutenberg release outside of the high level items shared as part of major WordPress releases, please review the <a href=\"https:\/\/make.wordpress.org\/core\/tag\/gutenberg-new\/\">release notes shared on Make Core<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If anything looks incorrect here, please bring it up in #core-editor in <a href=\"https:\/\/make.wordpress.org\/chat\/\">WordPress.org slack<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Gutenberg Versions | WordPress Version |<br>| ------------------ | ----------------- |<br>| 16.8-17.7          | 6.5               |<br>| 16.2-16.7          | 6.4.3             |<br>| 16.2-16.7          | 6.4.2             |<br>| 16.2-16.7          | 6.4.1             |<br>| 16.2-16.7          | 6.4               |<br>| 15.2-16.1          | 6.3.1             |<br>| 15.2-16.1          | 6.3               |<br>| 14.2-15.1          | 6.2               |<br>| 13.1-14.1          | 6.1.1             |<br>| 13.1-14.1          | 6.1               |<br>| 12.0-13.0          | 6.0.3             |<br>| 12.0-13.0          | 6.0.2             |<br>| 12.0-13.0          | 6.0.1             |<br>| 12.0-13.0          | 6.0               |<br>| 10.8-11.9          | 5.9.3             |<br>| 10.8-11.9          | 5.9.2             |<br>| 10.8-11.9          | 5.9.1             |<br>| 10.8-11.9          | 5.9               |<br>| 10.0-10.7          | 5.8.3             |<br>| 10.0-10.7          | 5.8.2             |<br>| 10.0-10.7          | 5.8.1             |<br>| 10.0-10.7          | 5.8               |<br>| 9.3-9.9            | 5.7.1             |<br>| 9.3-9.9            | 5.7               |<br>| 8.6-9.2            | 5.6.1             |<br>| 8.6-9.2            | 5.6               |<br>| 7.6-8.5            | 5.5.3             |<br>| 7.6-8.5            | 5.5.2             |<br>| 7.6-8.5            | 5.5.1             |<br>| 7.6-8.5            | 5.5               |<br>| 6.6-7.5            | 5.4.2             |<br>| 6.6-7.5            | 5.4.0             |<br>| 5.5-6.5            | 5.3.4             |<br>| 5.5-6.5            | 5.3.3             |<br>| 5.5-6.5            | 5.3.2             |<br>| 5.5-6.5            | 5.3.1             |<br>| 5.5-6.5            | 5.3.0             |<br>| 4.9-5.4            | 5.2.7             |<br>| 4.9-5.4            | 5.2.6             |<br>| 4.9-5.4            | 5.2.5             |<br>| 4.9-5.4            | 5.2.4             |<br>| 4.9-5.4            | 5.2.3             |<br>| 4.9-5.4            | 5.2.2             |<br>| 4.9-5.4            | 5.2.1             |<br>| 4.9-5.4            | 5.2.0             |<br>| 4.8                | 5.1.6             |<br>| 4.8                | 5.1.5             |<br>| 4.8                | 5.1.4             |<br>| 4.8                | 5.1.3             |<br>| 4.8                | 5.1.2             |<br>| 4.8                | 5.1.1             |<br>| 4.8                | 5.1.0             |<br>| 4.7.1              | 5.0.10            |<br>| 4.7.1              | 5.0.9             |<br>| 4.7.1              | 5.0.8             |<br>| 4.7.1              | 5.0.7             |<br>| 4.7.1              | 5.0.6             |<br>| 4.7.1              | 5.0.5             |<br>| 4.7.1              | 5.0.4             |<br>| 4.7.1              | 5.0.3             |<br>| 4.7.0              | 5.0.2             |<br>| 4.6.1              | 5.0.1             |<br>| 4.6.1              | 5.0.0             |<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Versions in WordPress\n\nWith each major release of WordPress a new version of Gutenberg is included. This has caused confusion over time as people have tried to figure out how to best debug problems and report bugs appropriately. To make this easier we have made this document to serve as a canonical list of the Gutenberg versions integrated into each major WordPress release. Of note, during the beta period of a WordPress release, additional bug fixes from later Gutenberg releases than those noted are added into the WordPress release where it is needed. If you want details about what's in each Gutenberg release outside of the high level items shared as part of major WordPress releases, please review the [release notes shared on Make Core](https:\/\/make.wordpress.org\/core\/tag\/gutenberg-new\/).\n\nIf anything looks incorrect here, please bring it up in #core-editor in [WordPress.org slack](https:\/\/make.wordpress.org\/chat\/).\n\n| Gutenberg Versions | WordPress Version |\n| ------------------ | ----------------- |\n| 16.8-17.7          | 6.5               |\n| 16.2-16.7          | 6.4.3             |\n| 16.2-16.7          | 6.4.2             |\n| 16.2-16.7          | 6.4.1             |\n| 16.2-16.7          | 6.4               |\n| 15.2-16.1          | 6.3.1             |\n| 15.2-16.1          | 6.3               |\n| 14.2-15.1          | 6.2               |\n| 13.1-14.1          | 6.1.1             |\n| 13.1-14.1          | 6.1               |\n| 12.0-13.0          | 6.0.3             |\n| 12.0-13.0          | 6.0.2             |\n| 12.0-13.0          | 6.0.1             |\n| 12.0-13.0          | 6.0               |\n| 10.8-11.9          | 5.9.3             |\n| 10.8-11.9          | 5.9.2             |\n| 10.8-11.9          | 5.9.1             |\n| 10.8-11.9          | 5.9               |\n| 10.0-10.7          | 5.8.3             |\n| 10.0-10.7          | 5.8.2             |\n| 10.0-10.7          | 5.8.1             |\n| 10.0-10.7          | 5.8               |\n| 9.3-9.9            | 5.7.1             |\n| 9.3-9.9            | 5.7               |\n| 8.6-9.2            | 5.6.1             |\n| 8.6-9.2            | 5.6               |\n| 7.6-8.5            | 5.5.3             |\n| 7.6-8.5            | 5.5.2             |\n| 7.6-8.5            | 5.5.1             |\n| 7.6-8.5            | 5.5               |\n| 6.6-7.5            | 5.4.2             |\n| 6.6-7.5            | 5.4.0             |\n| 5.5-6.5            | 5.3.4             |\n| 5.5-6.5            | 5.3.3             |\n| 5.5-6.5            | 5.3.2             |\n| 5.5-6.5            | 5.3.1             |\n| 5.5-6.5            | 5.3.0             |\n| 4.9-5.4            | 5.2.7             |\n| 4.9-5.4            | 5.2.6             |\n| 4.9-5.4            | 5.2.5             |\n| 4.9-5.4            | 5.2.4             |\n| 4.9-5.4            | 5.2.3             |\n| 4.9-5.4            | 5.2.2             |\n| 4.9-5.4            | 5.2.1             |\n| 4.9-5.4            | 5.2.0             |\n| 4.8                | 5.1.6             |\n| 4.8                | 5.1.5             |\n| 4.8                | 5.1.4             |\n| 4.8                | 5.1.3             |\n| 4.8                | 5.1.2             |\n| 4.8                | 5.1.1             |\n| 4.8                | 5.1.0             |\n| 4.7.1              | 5.0.10            |\n| 4.7.1              | 5.0.9             |\n| 4.7.1              | 5.0.8             |\n| 4.7.1              | 5.0.7             |\n| 4.7.1              | 5.0.6             |\n| 4.7.1              | 5.0.5             |\n| 4.7.1              | 5.0.4             |\n| 4.7.1              | 5.0.3             |\n| 4.7.0              | 5.0.2             |\n| 4.6.1              | 5.0.1             |\n| 4.6.1              | 5.0.0             |\n"
    },
    {
        "path": "\/markdown\/contributors\/accessibility-testing.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Accessibility Testing<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is a guide on how to test accessibility on Gutenberg. This is a living document that can be improved over time with new approaches and techniques.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Getting started<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Make sure you have set up your local environment following the instructions on <a href=\"\/docs\/contributors\/code\/getting-started-with-code-contribution.md\">Getting Started<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Keyboard testing<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In addition to mouse, make sure the interface is fully accessible for keyboard-only users. Try to interact with your changes using only the keyboard:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Make sure interactive elements can receive focus using &lt;kbd>Tab&lt;\/kbd>, &lt;kbd>Shift+Tab&lt;\/kbd> or arrow keys.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Buttons should be activable by pressing &lt;kbd>Enter&lt;\/kbd> and &lt;kbd>Space&lt;\/kbd>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Radio buttons and checkboxes should be checked by pressing &lt;kbd>Space&lt;\/kbd>, but not &lt;kbd>Enter&lt;\/kbd>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>If the elements can be focused using arrow keys, but not &lt;kbd>Tab&lt;\/kbd> or &lt;kbd>Shift+Tab&lt;\/kbd>, consider grouping them using one of the <a href=\"https:\/\/www.w3.org\/TR\/wai-aria-1.1\/#composite\">WAI-ARIA composite subclass roles<\/a>, such as <a href=\"https:\/\/www.w3.org\/TR\/wai-aria-1.1\/#toolbar\"><code>toolbar<\/code><\/a>, <a href=\"https:\/\/www.w3.org\/TR\/wai-aria-1.1\/#menu\"><code>menu<\/code><\/a> and <a href=\"https:\/\/www.w3.org\/TR\/wai-aria-1.1\/#listbox\"><code>listbox<\/code><\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If the interaction is complex or confusing to you, consider that it's also going to impact keyboard-only users.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Screen reader testing<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>According to the <a href=\"https:\/\/webaim.org\/projects\/screenreadersurvey8\/#usage\">WebAIM: Screen Reader User Survey #8 Results<\/a>, these are the most common screen reader and browser combinations:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| Screen Reader &amp; Browser     | # of Respondents | % of Respondents |<br>| --------------------------- | ---------------- | ---------------- |<br>| JAWS with Chrome            | 259              | 21.4%            |<br>| NVDA with Firefox           | 237              | 19.6%            |<br>| NVDA with Chrome            | 218              | 18.0%            |<br>| JAWS with Internet Explorer | 139              | 11.5%            |<br>| VoiceOver with Safari       | 110              | 9.1%             |<br>| JAWS with Firefox           | 71               | 5.9%             |<br>| VoiceOver with Chrome       | 36               | 3.0%             |<br>| NVDA with Internet Explorer | 14               | 1.2%             |<br>| Other combinations          | 126              | 10.4%            |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When testing with screen readers, try to use some of the combinations at the top of this list. For example, when testing with VoiceOver, it's preferable to use Safari.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">NVDA with Firefox<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/www.nvaccess.org\/about-nvda\/\">NVDA<\/a> is a free screen reader for Windows and <a href=\"https:\/\/webaim.org\/projects\/screenreadersurvey8\/#primary\">the most popular one<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After installing it, you can activate NVDA by opening the app as you would do with other programs. An icon will appear on the System Tray where you have access to more options. It's recommended to enable the \"Speech viewer\" dialog so it's easier to demonstrate what's being announced by NVDA when you take screenshots.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/user-images.githubusercontent.com\/3068563\/108868727-428db880-75d5-11eb-84a9-2c0b749a22ad.png\" alt=\"NVDA options with Speech viewer enabled\" width=\"640\">\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>While in the Gutenberg editor, with NVDA activated, you can press &lt;kbd>Insert+F7&lt;\/kbd> to open the Elements List where you can find elements grouped by their types, such as links, headings, form fields, buttons and landmarks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/user-images.githubusercontent.com\/3068563\/109054067-33356a80-76bc-11eb-83d4-e0c536c30d22.png\" alt=\"NVDA Elements List dialog\" width=\"640\">\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Make sure the elements have proper labels and prefer to navigate through landmarks and then use &lt;kbd>Tab&lt;\/kbd> and arrow keys to move through the elements within the landmarks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">VoiceOver with Safari<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/support.apple.com\/guide\/voiceover-guide\/welcome\/web\">VoiceOver<\/a> is the native screen reader on macOS. You can enable it on System Preferences > Accessibility > VoiceOver > Enable VoiceOver or by quickly pressing Touch ID three times while holding the Command key.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/user-images.githubusercontent.com\/3068563\/107645175-2560fd80-6c57-11eb-9e07-365c798869d8.png\" alt=\"macOS accessibility preferences panel\" width=\"720\">\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>While in the Gutenberg editor, with VoiceOver activated, you can press &lt;kbd>Control+Option+U&lt;\/kbd> to open the Rotor and find more easily the different regions and elements on the page. This is also a good way to make sure elements are labelled correctly. If a name on this list doesn't make sense, it should be improved.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<img src=\"https:\/\/user-images.githubusercontent.com\/3068563\/107646280-8e954080-6c58-11eb-8481-72e051d73973.gif\" alt=\"Navigating through form controls and landmarks using the VoiceOver Rotor\" width=\"640\">\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Prefer to select a region or another larger area to begin with instead of individual elements on the Rotor so you can better test the navigation within that region.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once you find the region you want to interact with, you can use &lt;kbd>Control+Option&lt;\/kbd> plus right or left arrow keys to move to the next or previous elements on the page. Then, follow the instructions that VoiceOver will announce.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Accessibility Testing\n\nThis is a guide on how to test accessibility on Gutenberg. This is a living document that can be improved over time with new approaches and techniques.\n\n## Getting started\n\nMake sure you have set up your local environment following the instructions on [Getting Started](\/docs\/contributors\/code\/getting-started-with-code-contribution.md).\n\n## Keyboard testing\n\nIn addition to mouse, make sure the interface is fully accessible for keyboard-only users. Try to interact with your changes using only the keyboard:\n\n-   Make sure interactive elements can receive focus using <kbd>Tab<\/kbd>, <kbd>Shift+Tab<\/kbd> or arrow keys.\n-   Buttons should be activable by pressing <kbd>Enter<\/kbd> and <kbd>Space<\/kbd>.\n-   Radio buttons and checkboxes should be checked by pressing <kbd>Space<\/kbd>, but not <kbd>Enter<\/kbd>.\n\nIf the elements can be focused using arrow keys, but not <kbd>Tab<\/kbd> or <kbd>Shift+Tab<\/kbd>, consider grouping them using one of the [WAI-ARIA composite subclass roles](https:\/\/www.w3.org\/TR\/wai-aria-1.1\/#composite), such as [`toolbar`](https:\/\/www.w3.org\/TR\/wai-aria-1.1\/#toolbar), [`menu`](https:\/\/www.w3.org\/TR\/wai-aria-1.1\/#menu) and [`listbox`](https:\/\/www.w3.org\/TR\/wai-aria-1.1\/#listbox).\n\nIf the interaction is complex or confusing to you, consider that it's also going to impact keyboard-only users.\n\n## Screen reader testing\n\nAccording to the [WebAIM: Screen Reader User Survey #8 Results](https:\/\/webaim.org\/projects\/screenreadersurvey8\/#usage), these are the most common screen reader and browser combinations:\n\n| Screen Reader & Browser     | # of Respondents | % of Respondents |\n| --------------------------- | ---------------- | ---------------- |\n| JAWS with Chrome            | 259              | 21.4%            |\n| NVDA with Firefox           | 237              | 19.6%            |\n| NVDA with Chrome            | 218              | 18.0%            |\n| JAWS with Internet Explorer | 139              | 11.5%            |\n| VoiceOver with Safari       | 110              | 9.1%             |\n| JAWS with Firefox           | 71               | 5.9%             |\n| VoiceOver with Chrome       | 36               | 3.0%             |\n| NVDA with Internet Explorer | 14               | 1.2%             |\n| Other combinations          | 126              | 10.4%            |\n\nWhen testing with screen readers, try to use some of the combinations at the top of this list. For example, when testing with VoiceOver, it's preferable to use Safari.\n\n### NVDA with Firefox\n\n[NVDA](https:\/\/www.nvaccess.org\/about-nvda\/) is a free screen reader for Windows and [the most popular one](https:\/\/webaim.org\/projects\/screenreadersurvey8\/#primary).\n\nAfter installing it, you can activate NVDA by opening the app as you would do with other programs. An icon will appear on the System Tray where you have access to more options. It's recommended to enable the \"Speech viewer\" dialog so it's easier to demonstrate what's being announced by NVDA when you take screenshots.\n\n<img src=\"https:\/\/user-images.githubusercontent.com\/3068563\/108868727-428db880-75d5-11eb-84a9-2c0b749a22ad.png\" alt=\"NVDA options with Speech viewer enabled\" width=\"640\">\n\nWhile in the Gutenberg editor, with NVDA activated, you can press <kbd>Insert+F7<\/kbd> to open the Elements List where you can find elements grouped by their types, such as links, headings, form fields, buttons and landmarks.\n\n<img src=\"https:\/\/user-images.githubusercontent.com\/3068563\/109054067-33356a80-76bc-11eb-83d4-e0c536c30d22.png\" alt=\"NVDA Elements List dialog\" width=\"640\">\n\nMake sure the elements have proper labels and prefer to navigate through landmarks and then use <kbd>Tab<\/kbd> and arrow keys to move through the elements within the landmarks.\n\n### VoiceOver with Safari\n\n[VoiceOver](https:\/\/support.apple.com\/guide\/voiceover-guide\/welcome\/web) is the native screen reader on macOS. You can enable it on System Preferences > Accessibility > VoiceOver > Enable VoiceOver or by quickly pressing Touch ID three times while holding the Command key.\n\n<img src=\"https:\/\/user-images.githubusercontent.com\/3068563\/107645175-2560fd80-6c57-11eb-9e07-365c798869d8.png\" alt=\"macOS accessibility preferences panel\" width=\"720\">\n\nWhile in the Gutenberg editor, with VoiceOver activated, you can press <kbd>Control+Option+U<\/kbd> to open the Rotor and find more easily the different regions and elements on the page. This is also a good way to make sure elements are labelled correctly. If a name on this list doesn't make sense, it should be improved.\n\n<img src=\"https:\/\/user-images.githubusercontent.com\/3068563\/107646280-8e954080-6c58-11eb-8481-72e051d73973.gif\" alt=\"Navigating through form controls and landmarks using the VoiceOver Rotor\" width=\"640\">\n\nPrefer to select a region or another larger area to begin with instead of individual elements on the Rotor so you can better test the navigation within that region.\n\nOnce you find the region you want to interact with, you can use <kbd>Control+Option<\/kbd> plus right or left arrow keys to move to the next or previous elements on the page. Then, follow the instructions that VoiceOver will announce.\n"
    },
    {
        "path": "\/markdown\/contributors\/repository-management.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Repository Management<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is a living document explaining how we collaboratively manage the Gutenberg repository. If you\u2019d like to suggest a change, please open an issue for discussion or submit a pull request to the document.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This document covers:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"#issues\">Issues<\/a><!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"#labels\">Labels<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#milestones\">Milestones<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#triaging-issues\">Triaging Issues<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#pull-requests\">Pull Requests<\/a><!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"#code-review\">Code Review<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#design-review\">Design Review<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#merging-pull-requests\">Merging Pull Requests<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#closing-pull-requests\">Closing Pull Requests<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/contributors\/code\/how-to-get-your-pull-request-reviewed.md\">How To Get Your Pull Request Reviewed?<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#projects\">Projects<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Issues<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A healthy issue list is one where issues are relevant and actionable. <em>Relevant<\/em> in the sense that they relate to the project\u2019s current priorities. <em>Actionable<\/em> in the sense that it\u2019s clear what action(s) need to be taken to resolve the issue.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Any issues that are irrelevant or not actionable should be closed, because they get in the way of making progress on the project. Imagine the issue list as a desk: the more clutter you have on it, the more difficult it is to use the space to get work done.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Labels<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>All issues should have <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\">one or more labels<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Workflow labels start with \u201cNeeds\u201d and may be applied as needed. Ideally, each workflow label will have a group that follows it, such as the Accessibility Team for <code>Needs Accessibility Feedback<\/code>, the Testing Team for <code>Needs Testing<\/code>, etc.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\/%5BPriority%5D%20High\">Priority High<\/a> and <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\/%5BPriority%5D%20OMGWTFBBQ\">Priority OMGWTFBBQ<\/a> issues should have an assignee and\/or be in an active milestone.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Help requests or 'how to' questions should be posted in a relevant support forum as a first step. If something might be a bug but it's not clear, the Support Team or a forum volunteer can help troubleshoot the case to help get all the right information needed for an effective bug report.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here are some labels you might commonly see:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\/Good%20First%20Issue\">Good First Issue<\/a> - Issues identified as good for new contributors to work on. Comment to note that you intend to work on the issue and reference the issue number in the pull request you submit.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\/Good%20First%20Review\">Good First Review<\/a> - Pull requests identified as good for new contributors who are interested in doing code reviews.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\/Needs%20Accessibility%20Feedback\">Needs Accessibility Feedback<\/a> - Changes that impact accessibility and need corresponding review (e.g. markup changes).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\/Needs%20Design%20Feedback\">Needs Design Feedback<\/a> - Changes that modify the design or user experience in some way and need sign-off.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\/%5BType%5D%20Bug\">[Type] Bug<\/a> - An existing feature is broken in some way.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\/%5BType%5D%20Enhancement\">[Type] Enhancement<\/a> - Gutenberg would be better with this improvement added.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\/%5BType%5D%20Plugin%20Interoperability\">[Type] Plugin Interoperability<\/a> - Documentation of a conflict between Gutenberg and a plugin or extension. The plugin author should be informed and provided documentation on how to address.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\/%5BStatus%5D%20Needs%20More%20Info\">[Status] Needs More Info<\/a> - The issue needs more information in order to be actionable and relevant. Typically this requires follow-up from the original reporter.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\">Check out the label directory<\/a> for a listing of all labels.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Milestones<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We put issues into <a href=\"https:\/\/github.com\/wordpress\/gutenberg\/milestones\">milestones<\/a> to better categorize them. Issues are added to milestones starting with <code>WordPress<\/code> and pull requests are added to milestones ending in <code>(Gutenberg)<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here are some milestones you might see:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/milestone\/70\">WordPress X.Y<\/a>: Tasks that should be done for future WordPress releases.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/milestone\/85\">X.Y (Gutenberg)<\/a>: PRs targeted for the Gutenberg Plugin X.Y release.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/milestone\/35\">Future<\/a>: this is something that is confirmed by everyone as a good thing but doesn\u2019t fall into other criteria.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Triaging issues<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To keep the issue list healthy, it needs to be triaged regularly. <em>Triage<\/em> is the practice of reviewing existing issues to make sure they\u2019re relevant, actionable, and have all the information they need.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Anyone can help triage, although you\u2019ll need contributor permission on the Gutenberg repository to modify an issue\u2019s labels or edit its title.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See the <a href=\"\/docs\/contributors\/triage.md\">Triage Contributors guide<\/a> for details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Pull requests<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Gutenberg follows a feature branch pull request workflow for all code and documentation changes. At a high-level, the process looks like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Check out a new feature branch locally.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Make your changes, testing thoroughly.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Commit your changes when you\u2019re happy with them, and push the branch.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Open your pull request.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If you are a regular contributor with proper access, label and name your pull request appropriately (see below).<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For labeling and naming pull requests, here are guidelines to consider that make compiling the changelog more efficient and organized. These guidelines are particularly relevant for regular contributors. Don't let getting the following right be a blocker for sharing your work - mistakes are expected and easy to fix!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>When working on experimental screens and features, apply the <code>[Type] Experimental<\/code> label instead of <code>Feature<\/code>, <code>Enhancement<\/code>, etc.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>When working on new features to technical packages (scripts, create-block, adding react hooks, etc), apply the <code>[Type] New API<\/code> label instead of <code>Feature<\/code>, <code>Enhancement<\/code>, etc.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>When fixing a bug or making an enhancement to an internal tool used in the project, apply the <code>[Type] Build Tooling<\/code> instead of <code>Bugs<\/code>, <code>Enhancement<\/code>, etc<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>In pull request titles, instead of describing the code change done to fix an issue, consider referring to the actual bug being fixed instead. For example: instead of saying \"Check for nullable object in component\", it would be preferable to say \"Fix editor breakage when clicking the copy block button\".<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Along with this process, there are a few important points to mention:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Non-trivial pull requests should be preceded by a related issue that defines the problem to solve and allows for discussion of the most appropriate solution before actually writing code.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>To make it far easier to merge your code, each pull request should only contain one conceptual change. Keeping contributions atomic keeps the pull request discussion focused on one topic and makes it possible to approve changes on a case-by-case basis.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Separate pull requests can address different items or todos from their linked issue, there\u2019s no need for a single pull request to cover a single issue if the issue is non-trivial.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Code review<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Every pull request goes through a manual code review, in addition to automated tests. The objectives for the code review are best thought of as:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Correct \u2014 Does the change do what it\u2019s supposed to?<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Secure \u2014 Would a nefarious party find some way to exploit this change?<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Readable \u2014 Will your future self be able to understand this change months down the road?<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Elegant \u2014 Does the change fit aesthetically within the overall style and architecture?<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Altruistic \u2014 How does this change contribute to the greater whole?<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><em>As a reviewer<\/em>, your feedback should be focused on the idea, not the person. Seek to understand, be respectful, and focus on constructive dialog.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>As a contributor<\/em>, your responsibility is to learn from suggestions and iterate your pull request should it be needed based on feedback. Seek to collaborate and produce the best possible contribution to the greater whole.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Code reviews are encouraged by everyone who is willing to attempt one. If you review a pull request and are confident in the changes, approve it. If you don't feel totally confident it is ready for merging, add your review with a comment that says it should have another set of eyes on it before final approval. This can help filter out obvious bugs and simplify reviews for core members. Following the later reviews will also help improve your reviewing confidence in the future.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you are not yet comfortable leaving a full review, try commenting on a PR. Questions about functionality or the reasoning behind a change are helpful too. You could also comment on changes to parts of the code you understand, without leaving a full review.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you struggle with getting a review, see: <a href=\"\/docs\/contributors\/code\/how-to-get-your-pull-request-reviewed.md\">How To Get Your Pull Request Reviewed?<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Design review<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If your pull request impacts the design\/UI, you need to label appropriately to alert design. To request a design review, add the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\/Needs%20Design%20Feedback\">Needs Design Feedback<\/a> label to your PR. If there are any PRs that require an update to the design\/UI, please use the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\/Figma%20Library%20Update\">Figma Library Update<\/a> label.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As a guide, changes that should be reviewed:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>A change based on a previous design, to confirm the design is still valid with the change.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Anything that changes something visually.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If you just want design feedback on an idea or exploration.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Merging pull requests<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A pull request can generally be merged once it is:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Deemed a worthwhile change to the codebase.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>In compliance with all relevant code review criteria.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Covered by sufficient tests, as necessary.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Vetted against all potential edge cases.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Changelog entries were properly added.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Reviewed by someone other than the original author.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/contributors\/code\/git-workflow.md#keeping-your-branch-up-to-date\">Rebased<\/a> onto the latest version of the <code>trunk<\/code> branch.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The final pull request merge decision is made by the <strong>@wordpress\/gutenberg-core<\/strong> team.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>All members of the WordPress organization on GitHub have the ability to review and merge pull requests. If you have reviewed a PR and are confident in the code, approve the pull request and comment pinging <strong>@wordpress\/gutenberg-core<\/strong> or a specific core member who has been involved in the PR. Once they confirm there are no objections, you are free to merge the PR into trunk.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Most pull requests will be automatically assigned a release milestone, but please make sure your merged pull request was assigned one. Doing so creates the historical legacy of what code landed when, and makes it possible for all project contributors (even non-technical ones) to access this information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Closing pull requests<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Sometimes, a pull request may not be mergeable, no matter how much additional effort is applied to it (e.g. out of scope). In these cases, it\u2019s best to communicate with the contributor graciously while describing why the pull request was closed, this encourages productive future involvement.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Make sure to:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Thank the contributor for their time and effort.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Fully explain the reasoning behind the decision to close the pull request.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Link to as much supporting documentation as possible.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>If you\u2019d like a template to follow:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Thanks ____ for the time you\u2019ve spent on this pull request.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I\u2019m closing this pull request because ____. To clarify further, ____.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For more details, please see ____ and ____.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Teams<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Two GitHub teams are used in the project.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/orgs\/WordPress\/teams\/gutenberg-core\">Gutenberg Core<\/a>: A team composed of people that are actively involved in the project: attending meetings regularly, participating in triage sessions, performing reviews regularly, working on features and bug fixes and performing plugin and npm releases.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/orgs\/WordPress\/teams\/gutenberg\">Gutenberg<\/a>: A team composed of contributors with at least 2\u20133 meaningful contributions to the project.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>If you meet this criterion of several meaningful contributions having been accepted into the repository and would like to be added to the Gutenberg team, feel free to ask in the <a href=\"https:\/\/make.wordpress.org\/chat\/\">#core-editor Slack channel<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Projects<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We use <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/projects\">GitHub projects<\/a> to keep track of details that aren't immediately actionable, but that we want to keep around for future reference.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some key projects include:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/projects\/13\">Phase 2<\/a> - Development tasks needed for Phase 2 of Gutenberg.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/projects\/21\">Phase 2 design<\/a> - Tasks for design in Phase 2. Note: specific projects may have their own boards.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/projects\/8\">Ideas<\/a> - Project containing tickets that, while closed for the time being, can be revisited in the future.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Repository Management\n\nThis is a living document explaining how we collaboratively manage the Gutenberg repository. If you\u2019d like to suggest a change, please open an issue for discussion or submit a pull request to the document.\n\nThis document covers:\n\n-   [Issues](#issues)\n    -   [Labels](#labels)\n    -   [Milestones](#milestones)\n    -   [Triaging Issues](#triaging-issues)\n-   [Pull Requests](#pull-requests)\n    -   [Code Review](#code-review)\n    -   [Design Review](#design-review)\n    -   [Merging Pull Requests](#merging-pull-requests)\n    -   [Closing Pull Requests](#closing-pull-requests)\n    -   [How To Get Your Pull Request Reviewed?](\/docs\/contributors\/code\/how-to-get-your-pull-request-reviewed.md)\n-   [Projects](#projects)\n\n## Issues\n\nA healthy issue list is one where issues are relevant and actionable. _Relevant_ in the sense that they relate to the project\u2019s current priorities. _Actionable_ in the sense that it\u2019s clear what action(s) need to be taken to resolve the issue.\n\nAny issues that are irrelevant or not actionable should be closed, because they get in the way of making progress on the project. Imagine the issue list as a desk: the more clutter you have on it, the more difficult it is to use the space to get work done.\n\n### Labels\n\nAll issues should have [one or more labels](https:\/\/github.com\/WordPress\/gutenberg\/labels).\n\nWorkflow labels start with \u201cNeeds\u201d and may be applied as needed. Ideally, each workflow label will have a group that follows it, such as the Accessibility Team for `Needs Accessibility Feedback`, the Testing Team for `Needs Testing`, etc.\n\n[Priority High](https:\/\/github.com\/WordPress\/gutenberg\/labels\/%5BPriority%5D%20High) and [Priority OMGWTFBBQ](https:\/\/github.com\/WordPress\/gutenberg\/labels\/%5BPriority%5D%20OMGWTFBBQ) issues should have an assignee and\/or be in an active milestone.\n\nHelp requests or 'how to' questions should be posted in a relevant support forum as a first step. If something might be a bug but it's not clear, the Support Team or a forum volunteer can help troubleshoot the case to help get all the right information needed for an effective bug report.\n\nHere are some labels you might commonly see:\n\n-   [Good First Issue](https:\/\/github.com\/WordPress\/gutenberg\/labels\/Good%20First%20Issue) - Issues identified as good for new contributors to work on. Comment to note that you intend to work on the issue and reference the issue number in the pull request you submit.\n-   [Good First Review](https:\/\/github.com\/WordPress\/gutenberg\/labels\/Good%20First%20Review) - Pull requests identified as good for new contributors who are interested in doing code reviews.\n-   [Needs Accessibility Feedback](https:\/\/github.com\/WordPress\/gutenberg\/labels\/Needs%20Accessibility%20Feedback) - Changes that impact accessibility and need corresponding review (e.g. markup changes).\n-   [Needs Design Feedback](https:\/\/github.com\/WordPress\/gutenberg\/labels\/Needs%20Design%20Feedback) - Changes that modify the design or user experience in some way and need sign-off.\n-   [[Type] Bug](https:\/\/github.com\/WordPress\/gutenberg\/labels\/%5BType%5D%20Bug) - An existing feature is broken in some way.\n-   [[Type] Enhancement](https:\/\/github.com\/WordPress\/gutenberg\/labels\/%5BType%5D%20Enhancement) - Gutenberg would be better with this improvement added.\n-   [[Type] Plugin Interoperability](https:\/\/github.com\/WordPress\/gutenberg\/labels\/%5BType%5D%20Plugin%20Interoperability) - Documentation of a conflict between Gutenberg and a plugin or extension. The plugin author should be informed and provided documentation on how to address.\n-   [[Status] Needs More Info](https:\/\/github.com\/WordPress\/gutenberg\/labels\/%5BStatus%5D%20Needs%20More%20Info) - The issue needs more information in order to be actionable and relevant. Typically this requires follow-up from the original reporter.\n\n[Check out the label directory](https:\/\/github.com\/WordPress\/gutenberg\/labels) for a listing of all labels.\n\n### Milestones\n\nWe put issues into [milestones](https:\/\/github.com\/wordpress\/gutenberg\/milestones) to better categorize them. Issues are added to milestones starting with `WordPress` and pull requests are added to milestones ending in `(Gutenberg)`.\n\nHere are some milestones you might see:\n\n-   [WordPress X.Y](https:\/\/github.com\/WordPress\/gutenberg\/milestone\/70): Tasks that should be done for future WordPress releases.\n-   [X.Y (Gutenberg)](https:\/\/github.com\/WordPress\/gutenberg\/milestone\/85): PRs targeted for the Gutenberg Plugin X.Y release.\n-   [Future](https:\/\/github.com\/WordPress\/gutenberg\/milestone\/35): this is something that is confirmed by everyone as a good thing but doesn\u2019t fall into other criteria.\n\n### Triaging issues\n\nTo keep the issue list healthy, it needs to be triaged regularly. _Triage_ is the practice of reviewing existing issues to make sure they\u2019re relevant, actionable, and have all the information they need.\n\nAnyone can help triage, although you\u2019ll need contributor permission on the Gutenberg repository to modify an issue\u2019s labels or edit its title.\n\nSee the [Triage Contributors guide](\/docs\/contributors\/triage.md) for details.\n\n## Pull requests\n\nGutenberg follows a feature branch pull request workflow for all code and documentation changes. At a high-level, the process looks like this:\n\n1. Check out a new feature branch locally.\n2. Make your changes, testing thoroughly.\n3. Commit your changes when you\u2019re happy with them, and push the branch.\n4. Open your pull request.\n5. If you are a regular contributor with proper access, label and name your pull request appropriately (see below).\n\nFor labeling and naming pull requests, here are guidelines to consider that make compiling the changelog more efficient and organized. These guidelines are particularly relevant for regular contributors. Don't let getting the following right be a blocker for sharing your work - mistakes are expected and easy to fix!\n\n-   When working on experimental screens and features, apply the `[Type] Experimental` label instead of `Feature`, `Enhancement`, etc.\n-   When working on new features to technical packages (scripts, create-block, adding react hooks, etc), apply the `[Type] New API` label instead of `Feature`, `Enhancement`, etc.\n-   When fixing a bug or making an enhancement to an internal tool used in the project, apply the `[Type] Build Tooling` instead of `Bugs`, `Enhancement`, etc\n-   In pull request titles, instead of describing the code change done to fix an issue, consider referring to the actual bug being fixed instead. For example: instead of saying \"Check for nullable object in component\", it would be preferable to say \"Fix editor breakage when clicking the copy block button\".\n\nAlong with this process, there are a few important points to mention:\n\n-   Non-trivial pull requests should be preceded by a related issue that defines the problem to solve and allows for discussion of the most appropriate solution before actually writing code.\n-   To make it far easier to merge your code, each pull request should only contain one conceptual change. Keeping contributions atomic keeps the pull request discussion focused on one topic and makes it possible to approve changes on a case-by-case basis.\n-   Separate pull requests can address different items or todos from their linked issue, there\u2019s no need for a single pull request to cover a single issue if the issue is non-trivial.\n\n### Code review\n\nEvery pull request goes through a manual code review, in addition to automated tests. The objectives for the code review are best thought of as:\n\n-   Correct \u2014 Does the change do what it\u2019s supposed to?\n-   Secure \u2014 Would a nefarious party find some way to exploit this change?\n-   Readable \u2014 Will your future self be able to understand this change months down the road?\n-   Elegant \u2014 Does the change fit aesthetically within the overall style and architecture?\n-   Altruistic \u2014 How does this change contribute to the greater whole?\n\n_As a reviewer_, your feedback should be focused on the idea, not the person. Seek to understand, be respectful, and focus on constructive dialog.\n\n_As a contributor_, your responsibility is to learn from suggestions and iterate your pull request should it be needed based on feedback. Seek to collaborate and produce the best possible contribution to the greater whole.\n\nCode reviews are encouraged by everyone who is willing to attempt one. If you review a pull request and are confident in the changes, approve it. If you don't feel totally confident it is ready for merging, add your review with a comment that says it should have another set of eyes on it before final approval. This can help filter out obvious bugs and simplify reviews for core members. Following the later reviews will also help improve your reviewing confidence in the future.\n\nIf you are not yet comfortable leaving a full review, try commenting on a PR. Questions about functionality or the reasoning behind a change are helpful too. You could also comment on changes to parts of the code you understand, without leaving a full review.\n\nIf you struggle with getting a review, see: [How To Get Your Pull Request Reviewed?](\/docs\/contributors\/code\/how-to-get-your-pull-request-reviewed.md)\n\n### Design review\n\nIf your pull request impacts the design\/UI, you need to label appropriately to alert design. To request a design review, add the [Needs Design Feedback](https:\/\/github.com\/WordPress\/gutenberg\/labels\/Needs%20Design%20Feedback) label to your PR. If there are any PRs that require an update to the design\/UI, please use the [Figma Library Update](https:\/\/github.com\/WordPress\/gutenberg\/labels\/Figma%20Library%20Update) label.\n\nAs a guide, changes that should be reviewed:\n\n-   A change based on a previous design, to confirm the design is still valid with the change.\n-   Anything that changes something visually.\n-   If you just want design feedback on an idea or exploration.\n\n### Merging pull requests\n\nA pull request can generally be merged once it is:\n\n-   Deemed a worthwhile change to the codebase.\n-   In compliance with all relevant code review criteria.\n-   Covered by sufficient tests, as necessary.\n-   Vetted against all potential edge cases.\n-   Changelog entries were properly added.\n-   Reviewed by someone other than the original author.\n-   [Rebased](\/docs\/contributors\/code\/git-workflow.md#keeping-your-branch-up-to-date) onto the latest version of the `trunk` branch.\n\nThe final pull request merge decision is made by the **@wordpress\/gutenberg-core** team.\n\nAll members of the WordPress organization on GitHub have the ability to review and merge pull requests. If you have reviewed a PR and are confident in the code, approve the pull request and comment pinging **@wordpress\/gutenberg-core** or a specific core member who has been involved in the PR. Once they confirm there are no objections, you are free to merge the PR into trunk.\n\nMost pull requests will be automatically assigned a release milestone, but please make sure your merged pull request was assigned one. Doing so creates the historical legacy of what code landed when, and makes it possible for all project contributors (even non-technical ones) to access this information.\n\n### Closing pull requests\n\nSometimes, a pull request may not be mergeable, no matter how much additional effort is applied to it (e.g. out of scope). In these cases, it\u2019s best to communicate with the contributor graciously while describing why the pull request was closed, this encourages productive future involvement.\n\nMake sure to:\n\n1. Thank the contributor for their time and effort.\n2. Fully explain the reasoning behind the decision to close the pull request.\n3. Link to as much supporting documentation as possible.\n\nIf you\u2019d like a template to follow:\n\n> Thanks \\_\\_\\_\\_ for the time you\u2019ve spent on this pull request.\n>\n> I\u2019m closing this pull request because \\_\\_\\_\\_. To clarify further, \\_\\_\\_\\_.\n>\n> For more details, please see \\_\\_\\_\\_ and \\_\\_\\_\\_.\n\n## Teams\n\nTwo GitHub teams are used in the project.\n\n-   [Gutenberg Core](https:\/\/github.com\/orgs\/WordPress\/teams\/gutenberg-core): A team composed of people that are actively involved in the project: attending meetings regularly, participating in triage sessions, performing reviews regularly, working on features and bug fixes and performing plugin and npm releases.\n\n-   [Gutenberg](https:\/\/github.com\/orgs\/WordPress\/teams\/gutenberg): A team composed of contributors with at least 2\u20133 meaningful contributions to the project.\n\nIf you meet this criterion of several meaningful contributions having been accepted into the repository and would like to be added to the Gutenberg team, feel free to ask in the [#core-editor Slack channel](https:\/\/make.wordpress.org\/chat\/).\n\n## Projects\n\nWe use [GitHub projects](https:\/\/github.com\/WordPress\/gutenberg\/projects) to keep track of details that aren't immediately actionable, but that we want to keep around for future reference.\n\nSome key projects include:\n\n-   [Phase 2](https:\/\/github.com\/WordPress\/gutenberg\/projects\/13) - Development tasks needed for Phase 2 of Gutenberg.\n-   [Phase 2 design](https:\/\/github.com\/WordPress\/gutenberg\/projects\/21) - Tasks for design in Phase 2. Note: specific projects may have their own boards.\n-   [Ideas](https:\/\/github.com\/WordPress\/gutenberg\/projects\/8) - Project containing tickets that, while closed for the time being, can be revisited in the future.\n"
    },
    {
        "path": "\/markdown\/getting-started\/fundamentals\/file-structure-of-a-block.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">File structure of a block<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When developing custom blocks for WordPress, it's best practice to register them within plugins rather than themes. This strategy guarantees that your blocks stay accessible, even when users switch themes. While there might be situations where embedding blocks directly into a theme could be appropriate, this guide focuses on blocks housed within a plugin. Specifically, it details the file structure as produced by the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-create-block\/\"><code>create-block<\/code><\/a> tool.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Adhering to the <code>create-block<\/code> tool's structure is not mandatory, but it serves as a reliable reference. The files it generates encompass everything needed for a block's definition and registration. Following this structure can help maintain consistency and ensure your blocks are well-organized and easy to maintain.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/developer.wordpress.org\/files\/2023\/11\/file-structure-block.png\" title=\"Open File Structure of a Block diagram image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/11\/file-structure-block.png\">Open File Structure of a Block diagram image<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><code>&lt;plugin-file>.php<\/code><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When creating a block in a WordPress plugin, you usually register the block on the server in the main PHP file of the plugin. This is done using the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/register_block_type\/\"><code>register_block_type()<\/code><\/a> function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n    For more on creating a WordPress plugin, refer to the documentation on <a href=\"https:\/\/developer.wordpress.org\/plugins\/plugin-basics\/\">Plugin Basics<\/a> and the <a href=\"https:\/\/developer.wordpress.org\/plugins\/plugin-basics\/header-requirements\/\"> Header Requirements<\/a> for the main PHP file.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><code>package.json<\/code><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>package.json<\/code> file is used to configure a Node.js project, which is technically what a block plugin is. In this file, you define the <code>npm<\/code> dependencies of the block and the scripts used for local development.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><code>src<\/code> folder<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In a standard project, the <code>src<\/code> (source) folder contains the raw, uncompiled code, including JavaScript, CSS, and other assets necessary for developing the block. This is where you write and edit your block's source code, utilizing modern JavaScript features and JSX for React components.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"docs\/block-editor\/getting-started\/fundamentals\/javascript-in-the-block-editor\/#javascript-build-process.md\">build process<\/a> provided by <code>wp-scripts<\/code> will then take the files from this folder and generate the production-ready files in the project's <code>build<\/code> folder.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>block.json<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>block.json<\/code> file contains the <a href=\"docs\/block-editor\/reference-guides\/block-api\/block-metadata\/\">block's metadata<\/a>, streamlining its definition and registration across client-side and server-side environments.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This file includes the block name, description, <a href=\"docs\/block-editor\/reference-guides\/block-api\/block-attributes.md\">attributes<\/a>, <a href=\"docs\/block-editor\/reference-guides\/block-api\/block-supports.md\">supports<\/a>, and more, as well as the locations of essential files responsible for the block's functionality, appearance, and styling.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When a build process is applied, the <code>block.json<\/code> file and the other generated files are moved to a designated folder, often the <code>build<\/code> folder. Consequently, the file paths specified within <code>block.json<\/code> point to these processed, bundled versions of the files.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A few of the most important properties that can be defined in a <code>block.json<\/code> are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#editor-script\"><code>editorScript<\/code><\/a>:<\/strong> Usually set with the path of a bundled <code>index.js<\/code> file that was built from <code>src\/index.js<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#style\"><code>style<\/code><\/a>:<\/strong> Usually set with the path of a bundled <code>style-index.css<\/code> file that was built from <code>src\/style.(css|scss|sass)<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#editor-style\"><code>editorStyle<\/code><\/a>:<\/strong> Usually set with the path of a bundled <code>index.css<\/code> that was built from <code>src\/editor.(css|scss|sass)<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#render\"><code>render<\/code><\/a>:<\/strong> Usually set with the path of a bundled <code>render.php<\/code> that was copied from <code>src\/render.php<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#view-script\"><code>viewScript<\/code><\/a>:<\/strong> Usually set with the path of a bundled <code>view.js<\/code> that was built from <code>src\/view.js<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/excalidraw.com\/#json=c22LROgcG4JkD-7SkuE-N,rQW_ViJBq0Yk3qhCgqD6zQ\" title=\"Open Build Output Diagram in excalidraw\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/11\/file-structure-build-output.png\">Open Build Output Diagram in excalidraw<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>index.js<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>index.js<\/code> file (or any other file defined in the <code>editorScript<\/code> property of <code>block.json<\/code>) is the entry point file for JavaScript that should only get loaded in the Block Editor. It's responsible for calling the <code>registerBlockType<\/code> function to register the block on the client and typically imports the <code>edit.js<\/code> and <code>save.js<\/code> files to get the functions required for block registration.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>edit.js<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>edit.js<\/code> file contains the React component responsible for rendering the block's editing user interface, allowing users to interact with and customize the block's content and settings in the Block Editor. This component gets passed to the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#edit\"><code>edit<\/code><\/a> property of the <code>registerBlockType<\/code> function in the <code>index.js<\/code> file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>save.js<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>save.js<\/code> exports the function that returns the static HTML markup that gets saved to the WordPress database. This function gets passed to the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#save\"><code>save<\/code><\/a> property of the <code>registerBlockType<\/code> function in the <code>index.js<\/code> file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>style.(css|scss|sass)<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A <code>style<\/code> file with extensions <code>.css<\/code>, <code>.scss<\/code>, or <code>.sass<\/code> contains the styles of the block that will be loaded in both the Block Editor and on the front end. In the build process, this file is converted into <code>style-index.css<\/code>, which is usually defined using the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#style\"><code>style<\/code><\/a> property in <code>block.json<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n    The webpack configuration used internally by <code>wp-scripts<\/code> includes a <a href=\"https:\/\/webpack.js.org\/loaders\/css-loader\/\">css-loader<\/a> chained with <a herf=\"https:\/\/webpack.js.org\/loaders\/postcss-loader\/\">postcss-loader<\/a> and <a href=\"https:\/\/webpack.js.org\/loaders\/sass-loader\/\">sass-loader<\/a> that allows it to process CSS, SASS or SCSS files. Check <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-scripts\/#default-webpack-config\">Default webpack config<\/a> for more info\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>editor.(css|scss|sass)<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>An <code>editor<\/code> file with extensions <code>.css<\/code>, <code>.scss<\/code>, or <code>.sass<\/code> contains the additional styles applied to the block in the Block Editor. You will often use this file for styles specific to the block's user interface. This file is converted to <code>index.css<\/code> during the build process, usually defined using the <code>editorStyle<\/code> property in <code>block.json<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>render.php<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>render.php<\/code> file (or any other file defined in the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#render\"><code>render<\/code><\/a> property of <code>block.json<\/code>) defines the server-side process that returns the markup for the block when there is a request from the front end. If defined, this file will take precedence over other ways to render the block's markup on the front end.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><code>view.js<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>view.js<\/code> file (or any other file defined in the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#view-script\"><code>viewScript<\/code><\/a> property of <code>block.json<\/code>) will be loaded in the front end when the block is displayed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><code>build<\/code> folder<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>build<\/code> folder contains the compiled and optimized versions of the code from the <code>src<\/code> folder. These files are generated from the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-scripts\/#the-build-process-with-wp-scripts\">build process<\/a>, triggered by the <code>build<\/code> or <code>start<\/code> commands of <code>wp-scripts<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This transformation process includes minification, transpilation from modern JavaScript to a version compatible with a wider range of browsers, and bundling of assets for efficient loading. WordPress ultimately enqueues and uses the <code>build<\/code> folder's contents to render the block in the Block Editor and on the front end.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n    You can use <code>webpack-src-dir<\/code> and <code>output-path<\/code> option of <code>wp-scripts<\/code> build commands to <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-scripts\/#automatic-block-json-detection-and-the-source-code-directory\">customize the entry and output points<\/a>.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Additional resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/excalidraw.com\/#json=YYpeR-kY1ZMhFKVZxGhMi,mVZewfwNAh_oL-7bj4gmdw\">Diagram featuring the file structure of a block<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# File structure of a block\n\nWhen developing custom blocks for WordPress, it's best practice to register them within plugins rather than themes. This strategy guarantees that your blocks stay accessible, even when users switch themes. While there might be situations where embedding blocks directly into a theme could be appropriate, this guide focuses on blocks housed within a plugin. Specifically, it details the file structure as produced by the [`create-block`](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-create-block\/) tool.\n\nAdhering to the `create-block` tool's structure is not mandatory, but it serves as a reliable reference. The files it generates encompass everything needed for a block's definition and registration. Following this structure can help maintain consistency and ensure your blocks are well-organized and easy to maintain.\n\n[![Open File Structure of a Block diagram image](https:\/\/developer.wordpress.org\/files\/2023\/11\/file-structure-block.png)](https:\/\/developer.wordpress.org\/files\/2023\/11\/file-structure-block.png \"Open File Structure of a Block diagram image\")\n\n## `<plugin-file>.php`\n\n\nWhen creating a block in a WordPress plugin, you usually register the block on the server in the main PHP file of the plugin. This is done using the [`register_block_type()`](https:\/\/developer.wordpress.org\/reference\/functions\/register_block_type\/) function. \n\n<div class=\"callout callout-info\">\n    For more on creating a WordPress plugin, refer to the documentation on <a href=\"https:\/\/developer.wordpress.org\/plugins\/plugin-basics\/\">Plugin Basics<\/a> and the <a href=\"https:\/\/developer.wordpress.org\/plugins\/plugin-basics\/header-requirements\/\"> Header Requirements<\/a> for the main PHP file.\n<\/div>\n\n## `package.json`\n\nThe `package.json` file is used to configure a Node.js project, which is technically what a block plugin is. In this file, you define the `npm` dependencies of the block and the scripts used for local development.\n\n## `src` folder\n\nIn a standard project, the `src` (source) folder contains the raw, uncompiled code, including JavaScript, CSS, and other assets necessary for developing the block. This is where you write and edit your block's source code, utilizing modern JavaScript features and JSX for React components.\n\nThe [build process](docs\/block-editor\/getting-started\/fundamentals\/javascript-in-the-block-editor\/#javascript-build-process.md) provided by `wp-scripts` will then take the files from this folder and generate the production-ready files in the project's `build` folder. \n\n### `block.json`\n\nThe `block.json` file contains the [block's metadata](docs\/block-editor\/reference-guides\/block-api\/block-metadata\/), streamlining its definition and registration across client-side and server-side environments. \n\nThis file includes the block name, description, [attributes](docs\/block-editor\/reference-guides\/block-api\/block-attributes.md), [supports](docs\/block-editor\/reference-guides\/block-api\/block-supports.md), and more, as well as the locations of essential files responsible for the block's functionality, appearance, and styling. \n\nWhen a build process is applied, the `block.json` file and the other generated files are moved to a designated folder, often the `build` folder. Consequently, the file paths specified within `block.json` point to these processed, bundled versions of the files. \n\nA few of the most important properties that can be defined in a `block.json` are:\n\n- **[`editorScript`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#editor-script):** Usually set with the path of a bundled `index.js` file that was built from `src\/index.js`.\n- **[`style`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#style):** Usually set with the path of a bundled `style-index.css` file that was built from `src\/style.(css|scss|sass)`.\n- **[`editorStyle`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#editor-style):** Usually set with the path of a bundled `index.css` that was built from `src\/editor.(css|scss|sass)`.\n- **[`render`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#render):** Usually set with the path of a bundled `render.php` that was copied from `src\/render.php`.\n- **[`viewScript`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#view-script):** Usually set with the path of a bundled `view.js` that was built from `src\/view.js`.\n\n[![Open Build Output Diagram in excalidraw](https:\/\/developer.wordpress.org\/files\/2023\/11\/file-structure-build-output.png)](https:\/\/excalidraw.com\/#json=c22LROgcG4JkD-7SkuE-N,rQW_ViJBq0Yk3qhCgqD6zQ \"Open Build Output Diagram in excalidraw\")\n\n### `index.js`\n\nThe `index.js` file (or any other file defined in the `editorScript` property of `block.json`) is the entry point file for JavaScript that should only get loaded in the Block Editor. It's responsible for calling the `registerBlockType` function to register the block on the client and typically imports the `edit.js` and `save.js` files to get the functions required for block registration.\n\n### `edit.js`\n\nThe `edit.js` file contains the React component responsible for rendering the block's editing user interface, allowing users to interact with and customize the block's content and settings in the Block Editor. This component gets passed to the [`edit`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#edit) property of the `registerBlockType` function in the `index.js` file.\n\n### `save.js`\n\nThe `save.js` exports the function that returns the static HTML markup that gets saved to the WordPress database. This function gets passed to the [`save`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#save) property of the `registerBlockType` function in the `index.js` file.\n\n### `style.(css|scss|sass)`\n\nA `style` file with extensions `.css`, `.scss`, or `.sass` contains the styles of the block that will be loaded in both the Block Editor and on the front end. In the build process, this file is converted into `style-index.css`, which is usually defined using the [`style`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#style) property in `block.json`\n\n<div class=\"callout callout-info\">\n    The webpack configuration used internally by <code>wp-scripts<\/code> includes a <a href=\"https:\/\/webpack.js.org\/loaders\/css-loader\/\">css-loader<\/a> chained with <a herf=\"https:\/\/webpack.js.org\/loaders\/postcss-loader\/\">postcss-loader<\/a> and <a href=\"https:\/\/webpack.js.org\/loaders\/sass-loader\/\">sass-loader<\/a> that allows it to process CSS, SASS or SCSS files. Check <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-scripts\/#default-webpack-config\">Default webpack config<\/a> for more info\n<\/div>\n\n### `editor.(css|scss|sass)`\n\nAn `editor` file with extensions `.css`, `.scss`, or `.sass` contains the additional styles applied to the block in the Block Editor. You will often use this file for styles specific to the block's user interface. This file is converted to `index.css` during the build process, usually defined using the `editorStyle` property in `block.json`.\n\n### `render.php`\n\nThe `render.php` file (or any other file defined in the [`render`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#render) property of `block.json`) defines the server-side process that returns the markup for the block when there is a request from the front end. If defined, this file will take precedence over other ways to render the block's markup on the front end.\n\n### `view.js`\n\nThe `view.js` file (or any other file defined in the [`viewScript`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#view-script) property of `block.json`) will be loaded in the front end when the block is displayed.\n\n## `build` folder\n\nThe `build` folder contains the compiled and optimized versions of the code from the `src` folder. These files are generated from the [build process](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-scripts\/#the-build-process-with-wp-scripts), triggered by the `build` or `start` commands of `wp-scripts`.\n\nThis transformation process includes minification, transpilation from modern JavaScript to a version compatible with a wider range of browsers, and bundling of assets for efficient loading. WordPress ultimately enqueues and uses the `build` folder's contents to render the block in the Block Editor and on the front end.\n\n<div class=\"callout callout-info\">\n    You can use <code>webpack-src-dir<\/code> and <code>output-path<\/code> option of <code>wp-scripts<\/code> build commands to <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-scripts\/#automatic-block-json-detection-and-the-source-code-directory\">customize the entry and output points<\/a>.\n<\/div>\n\n## Additional resources\n\n- [Diagram featuring the file structure of a block](https:\/\/excalidraw.com\/#json=YYpeR-kY1ZMhFKVZxGhMi,mVZewfwNAh_oL-7bj4gmdw)\n"
    },
    {
        "path": "\/markdown\/getting-started\/fundamentals\/block-wrapper.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">The block wrapper<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Every block in the Block Editor is contained within an HTML wrapper, which must have specific attributes to function correctly both in the Editor and on the front end. As developers, we can directly manipulate this markup, and WordPress offers tools like <code>useBlockProps()<\/code> to modify the attributes added to a block's wrapper.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Ensuring proper attributes to the block wrapper is especially important when using custom styling or features like <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-supports\/\">block supports<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A block in WordPress can be defined with three distinct types of markup, each serving a unique role:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Editor Markup:<\/strong> This is the visual representation of the block within the Block Editor. It's defined using an <code>Edit<\/code> React component when the block is registered on the client side via <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-registration\/#registerblocktype\"><code>registerBlockType<\/code><\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Save Markup:<\/strong> This markup is what gets saved to the database when the block's content is saved. It's specified through a <code>save<\/code> function, also provided to <code>registerBlockType<\/code> during block registration. If the block doesn't utilize dynamic rendering, this saved markup is what will be displayed on the front end.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Dynamic Render Markup:<\/strong> When a block's content needs to be generated dynamically, this markup comes into play. It's defined server-side, either through a <code>render_callback<\/code> function in <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/register_block_type\/\"><code>register_block_type<\/code><\/a> or a <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#render\"><code>render.php<\/code><\/a> file specified in <code>block.json<\/code>. If present, this markup overrides any saved markup and is used for the block's front-end display.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For both the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/\"><code>Edit<\/code> component and the <code>save<\/code> function<\/a>, it's important to use a wrapper element that's a standard DOM element (like a <code>&lt;div><\/code>) or a React component that passes all additional props to native DOM elements. Using React Fragments (<code>&lt;Fragment><\/code>) or the <code>&lt;ServerSideRender><\/code> component won't work for these wrappers.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Editor markup<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-block-editor\/#useblockprops\"><code>useBlockProps()<\/code><\/a> hook, provided by the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-block-editor\"><code>@wordpress\/block-editor<\/code><\/a> package, is used to define the outer markup of a block in the <code>Edit<\/code> component.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This hook simplifies several tasks, including:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Assigning a unique <code>id<\/code> to the block's HTML structure.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Adding various accessibility and <code>data-<\/code> attributes for enhanced functionality and information.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Incorporating classes and inline styles that reflect the block's custom settings. By default, this includes:<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The <code>wp-block<\/code> class for general block styling.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>A block-specific class that combines the block's namespace and name, ensuring unique and targeted styling capabilities.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>In the following example, the Editor markup of the block is defined in the <code>Edit<\/code> component using the <code>useBlockProps()<\/code> hook.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const Edit = () => <p {=\"\" ...useblockprops()=\"\" }=\"\">Hello World - Block Editor<\/p>;\n\nregisterBlockType( ..., {\n\tedit: Edit\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>See the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/minimal-block-ca6eda\">full block example<\/a> of the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/minimal-block-ca6eda\/src\/index.js\">code above<\/a>.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The markup of the block in the Block Editor could look like this, where the classes and attributes are applied automatically:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><p<br>    tabindex=\"0\"\n    id=\"block-4462939a-b918-44bb-9b7c-35a0db5ab8fe\"\n    role=\"document\"\n    aria-label=\"Block: Minimal Gutenberg Block ca6eda\"\n    data-block=\"4462939a-b918-44bb-9b7c-35a0db5ab8fe\"\n    data-type=\"block-development-examples\/minimal-block-ca6eda\"\n    data-title=\"Minimal Gutenberg Block ca6eda\"\n    class=\"\n        block-editor-block-list__block\n        wp-block\n        is-selected\n        wp-block-block-development-examples-minimal-block-ca6eda\n    \"\n>Hello World - Block Editor\n<\/p<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In a block's <code>Edit<\/code> component, use the <code>useBlockProps()<\/code> hook to include additional classes and attributes by passing them as arguments. (See <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/stylesheets-79a4c3\/src\/edit.js\">example<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you enable features using the <code>supports<\/code> property, any corresponding classes or attributes are included in the object returned by <code>useBlockProps<\/code> automatically.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Save markup<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When saving the markup in the database, it\u2019s important to add the props returned by <code>useBlockProps.save()<\/code> to the wrapper element of your block. <code>useBlockProps.save()<\/code> ensures that the block class name is rendered correctly in addition to any HTML attributes injected by the block supports API.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Consider the following code that registers a block in the client. Notice how it defines the markup that should be used when editing the block and when the block is saved in the database.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const Edit = () => <p {=\"\" ...useblockprops()=\"\" }=\"\">Hello World - Block Editor<\/p>;\nconst save = () => <p {=\"\" ...useblockprops.save()=\"\" }=\"\">Hello World - Frontend<\/p>;\n\nregisterBlockType( ..., {\n\tedit: Edit,\n\tsave,\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>See the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/minimal-block-ca6eda\">full block example<\/a> of the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/minimal-block-ca6eda\/src\/index.js\">code above<\/a>.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The markup of the block on the front end could look like this, where the class is applied automatically:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><p class=\"wp-block-block-development-examples-minimal-block-ca6eda\">Hello World \u2013 Frontend<\/p>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If you want to add any additional classes or attributes to the <code>save<\/code> function of the block, they should be passed as an argument of <code>useBlockProps.save()<\/code>. (See <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/stylesheets-79a4c3\/src\/save.js\">example<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you add <code>supports<\/code> for any feature, the proper classes get added to the object returned by the <code>useBlockProps.save()<\/code> hook. Text and background color classes have been added to the Paragraph block in the example below.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><p class=\"<br&gt;    wp-block-block-development-examples-block-supports-6aa4dd<br&gt;    has-accent-4-color<br&gt;    has-contrast-background-color<br&gt;    has-text-color<br&gt;    has-background<br&gt;\">Hello World<\/p>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/block-supports-6aa4dd\">example block<\/a> that generated this HTML is available in the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\">Block Development Examples<\/a> repository.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Dynamic render markup<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In dynamic blocks, where the font-end markup is rendered server-side, you can utilize the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/get_block_wrapper_attributes\/\"><code>get_block_wrapper_attributes()<\/code><\/a> function to output the necessary classes and attributes just like you would use <code>useBlockProps.save()<\/code> in the <code>save<\/code> function. (See <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/blob\/f68640f42d993f0866d1879f67c73910285ca114\/plugins\/block-dynamic-rendering-64756b\/src\/render.php#L11\">example<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><p <?php=\"\" echo=\"\" get_block_wrapper_attributes();=\"\" ?=\"\">>\n\t\n<\/p>\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# The block wrapper\n\nEvery block in the Block Editor is contained within an HTML wrapper, which must have specific attributes to function correctly both in the Editor and on the front end. As developers, we can directly manipulate this markup, and WordPress offers tools like `useBlockProps()` to modify the attributes added to a block's wrapper.\n\nEnsuring proper attributes to the block wrapper is especially important when using custom styling or features like [block supports](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-supports\/).\n\nA block in WordPress can be defined with three distinct types of markup, each serving a unique role:\n\n- **Editor Markup:** This is the visual representation of the block within the Block Editor. It's defined using an `Edit` React component when the block is registered on the client side via [`registerBlockType`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-registration\/#registerblocktype).\n- **Save Markup:** This markup is what gets saved to the database when the block's content is saved. It's specified through a `save` function, also provided to `registerBlockType` during block registration. If the block doesn't utilize dynamic rendering, this saved markup is what will be displayed on the front end.\n- **Dynamic Render Markup:** When a block's content needs to be generated dynamically, this markup comes into play. It's defined server-side, either through a `render_callback` function in [`register_block_type`](https:\/\/developer.wordpress.org\/reference\/functions\/register_block_type\/) or a [`render.php`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#render) file specified in `block.json`. If present, this markup overrides any saved markup and is used for the block's front-end display.\n\nFor both the [`Edit` component and the `save` function](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/), it's important to use a wrapper element that's a standard DOM element (like a `<div>`) or a React component that passes all additional props to native DOM elements. Using React Fragments (`<Fragment>`) or the `<ServerSideRender>` component won't work for these wrappers.\n\n## Editor markup\n\nThe [`useBlockProps()`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-block-editor\/#useblockprops) hook, provided by the [`@wordpress\/block-editor`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-block-editor) package, is used to define the outer markup of a block in the `Edit` component.\n\nThis hook simplifies several tasks, including:\n\n- Assigning a unique `id` to the block's HTML structure.\n- Adding various accessibility and `data-` attributes for enhanced functionality and information.\n- Incorporating classes and inline styles that reflect the block's custom settings. By default, this includes:\n    - The `wp-block` class for general block styling.\n    - A block-specific class that combines the block's namespace and name, ensuring unique and targeted styling capabilities.\n\nIn the following example, the Editor markup of the block is defined in the `Edit` component using the `useBlockProps()` hook.\n\n```js\nconst Edit = () => <p { ...useBlockProps() }>Hello World - Block Editor<\/p>;\n\nregisterBlockType( ..., {\n\tedit: Edit\n} );\n```\n\n_See the [full block example](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/minimal-block-ca6eda) of the [code above](https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/minimal-block-ca6eda\/src\/index.js)._\n\nThe markup of the block in the Block Editor could look like this, where the classes and attributes are applied automatically:\n\n```html\n<p\n    tabindex=\"0\"\n    id=\"block-4462939a-b918-44bb-9b7c-35a0db5ab8fe\"\n    role=\"document\"\n    aria-label=\"Block: Minimal Gutenberg Block ca6eda\"\n    data-block=\"4462939a-b918-44bb-9b7c-35a0db5ab8fe\"\n    data-type=\"block-development-examples\/minimal-block-ca6eda\"\n    data-title=\"Minimal Gutenberg Block ca6eda\"\n    class=\"\n        block-editor-block-list__block\n        wp-block\n        is-selected\n        wp-block-block-development-examples-minimal-block-ca6eda\n    \"\n>Hello World - Block Editor<\/p>\n```\n\nIn a block's `Edit` component, use the `useBlockProps()` hook to include additional classes and attributes by passing them as arguments. (See [example](https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/stylesheets-79a4c3\/src\/edit.js))\n\nWhen you enable features using the `supports` property, any corresponding classes or attributes are included in the object returned by `useBlockProps` automatically.\n\n## Save markup\n\nWhen saving the markup in the database, it\u2019s important to add the props returned by `useBlockProps.save()` to the wrapper element of your block. `useBlockProps.save()` ensures that the block class name is rendered correctly in addition to any HTML attributes injected by the block supports API.\n\nConsider the following code that registers a block in the client. Notice how it defines the markup that should be used when editing the block and when the block is saved in the database.\n\n```js\nconst Edit = () => <p { ...useBlockProps() }>Hello World - Block Editor<\/p>;\nconst save = () => <p { ...useBlockProps.save() }>Hello World - Frontend<\/p>;\n\nregisterBlockType( ..., {\n\tedit: Edit,\n\tsave,\n} );\n```\n\n_See the [full block example](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/minimal-block-ca6eda) of the [code above](https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/minimal-block-ca6eda\/src\/index.js)._\n\nThe markup of the block on the front end could look like this, where the class is applied automatically:\n\n```html\n<p class=\"wp-block-block-development-examples-minimal-block-ca6eda\">Hello World \u2013 Frontend<\/p>\n```\n\nIf you want to add any additional classes or attributes to the `save` function of the block, they should be passed as an argument of `useBlockProps.save()`. (See [example](https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/stylesheets-79a4c3\/src\/save.js))\n\nWhen you add `supports` for any feature, the proper classes get added to the object returned by the `useBlockProps.save()` hook. Text and background color classes have been added to the Paragraph block in the example below.\n\n```html\n<p class=\"\n    wp-block-block-development-examples-block-supports-6aa4dd\n    has-accent-4-color\n    has-contrast-background-color\n    has-text-color\n    has-background\n\">Hello World<\/p>\n```\n\nThe [example block](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/block-supports-6aa4dd) that generated this HTML is available in the [Block Development Examples](https:\/\/github.com\/WordPress\/block-development-examples) repository.\n\n## Dynamic render markup\n\nIn dynamic blocks, where the font-end markup is rendered server-side, you can utilize the [`get_block_wrapper_attributes()`](https:\/\/developer.wordpress.org\/reference\/functions\/get_block_wrapper_attributes\/) function to output the necessary classes and attributes just like you would use `useBlockProps.save()` in the `save` function. (See [example](https:\/\/github.com\/WordPress\/block-development-examples\/blob\/f68640f42d993f0866d1879f67c73910285ca114\/plugins\/block-dynamic-rendering-64756b\/src\/render.php#L11))\n\n```php\n<p <?php echo get_block_wrapper_attributes(); ?>>\n\t<?php esc_html_e( 'Block with Dynamic Rendering \u2013 hello!!!', 'block-development-examples' ); ?>\n<\/p>\n```\n"
    },
    {
        "path": "\/markdown\/getting-started\/fundamentals\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Fundamentals of Block Development<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This section provides an introduction to the most relevant concepts in block development. Use the following links to learn more:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/file-structure-of-a-block\">File structure of a block<\/a>:<\/strong> The purpose of each file that composes a block plugin, the relationships between them, and their role in the block output.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-json\"><code>block.json<\/code><\/a>:<\/strong> How a block is defined using its <code>block.json<\/code> metadata and some relevant properties of this file (such as <code>attributes<\/code> and <code>supports<\/code>).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/registration-of-a-block\">Registration of a block<\/a>:<\/strong> How a block is registered on both the server and in the client.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-wrapper\">Block wrapper<\/a>:<\/strong> How to apply the proper attributes to the block's markup wrapper.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-in-the-editor\">The block in the Editor<\/a>:<\/strong> How a block, as a React component, is loaded in the Block Editor and an overview of its structure.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/markup-representation-block\">Markup representation of a block<\/a>:<\/strong> How blocks are represented in the database, theme templates, and patterns.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/static-dynamic-rendering\">Static or Dynamic rendering of a block<\/a>:<\/strong> How blocks generate their front-end output either dynamically or statically.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/javascript-in-the-block-editor\">Javascript in the Block Editor<\/a>:<\/strong> How to work with modern Javascript when developing for the Block Editor.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->",
        "markdown": "# Fundamentals of Block Development\n\nThis section provides an introduction to the most relevant concepts in block development. Use the following links to learn more:\n\n1. **[File structure of a block](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/file-structure-of-a-block):** The purpose of each file that composes a block plugin, the relationships between them, and their role in the block output.\n1. **[`block.json`](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-json):** How a block is defined using its `block.json` metadata and some relevant properties of this file (such as `attributes` and `supports`).\n1. **[Registration of a block](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/registration-of-a-block):** How a block is registered on both the server and in the client.\n1. **[Block wrapper](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-wrapper):** How to apply the proper attributes to the block's markup wrapper.\n1. **[The block in the Editor](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-in-the-editor):** How a block, as a React component, is loaded in the Block Editor and an overview of its structure.\n1. **[Markup representation of a block](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/markup-representation-block):** How blocks are represented in the database, theme templates, and patterns.\n1. **[Static or Dynamic rendering of a block](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/static-dynamic-rendering):** How blocks generate their front-end output either dynamically or statically.\n1. **[Javascript in the Block Editor](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/javascript-in-the-block-editor):** How to work with modern Javascript when developing for the Block Editor.\n"
    },
    {
        "path": "\/markdown\/getting-started\/fundamentals\/javascript-in-the-block-editor.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Working with Javascript for the Block Editor<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Developing blocks for the Block Editor often involves using modern JavaScript (ESNext and JSX), and most examples here in the Block Editor Handbook are written in these syntaxes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>However, this form of JavaScript must be transformed into a browser-compatible format, necessitating a build step. This process transforms, bundles, and optimizes JavaScript source code and related assets into a format suitable for production environments.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">JavaScript with a build process<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Using a build process for block development unlocks the full potential of modern JavaScript, facilitating the use of ESNext and JSX.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/JavaScript_technologies_overview#standardization_process\">ESNext<\/a> refers to Javascript's most recent syntax and features. <a href=\"https:\/\/react.dev\/learn\/writing-markup-with-jsx\">JSX<\/a> is a syntax extension developed by the React project that enables you to write JavaScript that resembles HTML.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Since browsers cannot directly execute ESNext and JSX, these syntaxes must be transformed into browser-compatible JavaScript.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/webpack.js.org\/concepts\/why-webpack\/\">webpack<\/a> is a pluggable tool that processes and bundles JavaScript for browser compatibility. <a href=\"https:\/\/babeljs.io\/\">Babel<\/a>, a plugin for webpack, converts ESNext and JSX into standard JavaScript.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Configuring webpack and Babel can be challenging, so it's recommended that you use the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-scripts\/\"><code>@wordpress\/scripts<\/code><\/a> package. This tool simplifies development by preconfiguring both, so you rarely need to write custom webpack or Babel configurations.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For an introduction, refer to the <a href=\"\/docs\/getting-started\/devenv\/get-started-with-wp-scripts.md\">Get started with wp-scripts<\/a> guide.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">An overview of <code>wp-scripts<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The diagram below provides an overview of the build process when using the <code>wp-scripts<\/code> package. It's designed to work out of the box with <a href=\"\/docs\/getting-started\/devenv\/get-started-with-wp-scripts.md#basic-usage\">standard configurations<\/a> for development and production environments.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/developer.wordpress.org\/files\/2023\/11\/build-process.png\" title=\"Open Build Process diagram image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/11\/build-process.png\">Open Build Process diagram image<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Production Mode (<code>npm run build<\/code>):<\/strong> In this mode, <code>wp-scripts<\/code> compiles your JavaScript, minifying the output to reduce file size and improve loading times in the browser. This is ideal for deploying your code to a live site.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Development Mode (<code>npm run start<\/code>):<\/strong> This mode is tailored for active development. It skips minification for easier debugging, generates source maps for better error tracking, and watches your source files for changes. When a change is detected, it automatically rebuilds the affected files, allowing you to see updates in real-time.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The <code>wp-scripts<\/code> package also facilitates the use of JavaScript modules, allowing code distribution across multiple files and resulting in a streamlined bundle after the build process. The <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/data-basics-59c8f8\">block-development-example<\/a> GitHub repository provides some good examples.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\n    In most situations, no customization will be needed, but you can provide a <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-scripts\/#provide-your-own-webpack-config\"><code>webpack.config.js<\/code><\/a> when using <code>wp-scripts<\/code> to modify the build process to suit your needs.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Javascript without a build process<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Integrating JavaScript into your WordPress projects without a build process can be the most straightforward approach in specific scenarios. This is particularly true for projects that don't leverage JSX or other advanced JavaScript features requiring compilation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you opt out of a build process, you interact directly with WordPress's <a href=\"\/docs\/reference-guides\/packages\/\">Javascript APIs<\/a> through the global <code>wp<\/code> object. This means that all the methods and packages provided by WordPress are readily available, but with one caveat: you must manually manage script dependencies. This is done by adding <a href=\"\/docs\/contributors\/code\/scripts.md\">the handle<\/a> of each corresponding package to the dependency array of your enqueued JavaScript file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, suppose you're creating a script that registers a new block <a href=\"\/docs\/reference-guides\/block-api\/block-variations.md\">variation<\/a> using the <code>registerBlockVariation<\/code> function from the <a href=\"\/docs\/reference-guides\/packages\/packages-blocks.md\"><code>blocks<\/code><\/a> package. You must include <code>wp-blocks<\/code> in your script's dependency array. This guarantees that the <code>wp.blocks.registerBlockVariation<\/code> method is available and defined by the time your script executes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the following example, the <code>wp-blocks<\/code> dependency is defined when enqueuing the <code>variations.js<\/code> file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function example_enqueue_block_variations() {\n\twp_enqueue_script(\n\t\t'example-enqueue-block-variations',\n\t\tget_template_directory_uri() . '\/assets\/js\/variations.js',\n\t\tarray( 'wp-blocks' ),\n\t\twp_get_theme()->get( 'Version' ),\n\t\tfalse\n\t);\n}\nadd_action( 'enqueue_block_editor_assets', 'example_enqueue_block_variations' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then in the <code>variations.js<\/code> file, you can register a new variation for the Media &amp; Text block like so:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.blocks.registerBlockVariation(\n\t'core\/media-text',\n\t{\n\t\tname: 'media-text-custom',\n\t\ttitle: 'Media &amp; Text Custom',\n\t\tattributes: {\n\t\t\talign: 'wide',\n\t\t\tbackgroundColor: 'tertiary'\n\t\t},\n\t}\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>For scripts that need to run in the Block Editor, make sure you use the <a href=\"https:\/\/developer.wordpress.org\/reference\/hooks\/enqueue_block_editor_assets\/\"><code>enqueue_block_editor_assets<\/code><\/a> hook coupled with the standard <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_enqueue_script\/\"><code>wp_enqueue_script<\/code><\/a> function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Refer to <a href=\"\/docs\/how-to-guides\/enqueueing-assets-in-the-editor.md\">Enqueueing assets in the Editor<\/a> for more information. You can also visit the <a href=\"https:\/\/github.com\/wptrainingteam\/block-theme-examples\/blob\/master\/example-block-variation\/functions.php\">block-development-example<\/a> GitHub repository for more practical examples.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\n    Open your browser's dev tools and try running <code>wp.data.select('core\/editor').getBlocks()<\/code> in the console when editing a post or when using the Site Editor. This command will return all available blocks.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Additional resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/packages.md\">Package reference<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/getting-started\/devenv\/get-started-with-wp-scripts.md\">Get started with wp-scripts<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/how-to-guides\/enqueueing-assets-in-the-editor.md\">Enqueueing assets in the Editor<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/contributors\/code\/scripts.md\">WordPress package handles<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\">Javascript reference<\/a> | MDN Web Docs<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/block-development-examples\">block-development-examples<\/a> | GitHub repository<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/wptrainingteam\/block-theme-examples\">block-theme-examples<\/a> | GitHub repository<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/news\/2023\/04\/how-webpack-and-wordpress-packages-interact\/\">How webpack and WordPress packages interact<\/a> | Developer Blog<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/excalidraw.com\/#json=4aNG9JUti3pMnsfoga35b,ihEAI8p5dwkpjWr6gQmjuw\">Build process diagram<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Working with Javascript for the Block Editor\n\nDeveloping blocks for the Block Editor often involves using modern JavaScript (ESNext and JSX), and most examples here in the Block Editor Handbook are written in these syntaxes.\n\nHowever, this form of JavaScript must be transformed into a browser-compatible format, necessitating a build step. This process transforms, bundles, and optimizes JavaScript source code and related assets into a format suitable for production environments. \n\n## JavaScript with a build process\n\nUsing a build process for block development unlocks the full potential of modern JavaScript, facilitating the use of ESNext and JSX.\n\n[ESNext](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/JavaScript_technologies_overview#standardization_process) refers to Javascript's most recent syntax and features. [JSX](https:\/\/react.dev\/learn\/writing-markup-with-jsx) is a syntax extension developed by the React project that enables you to write JavaScript that resembles HTML.\n\nSince browsers cannot directly execute ESNext and JSX, these syntaxes must be transformed into browser-compatible JavaScript.\n\n[webpack](https:\/\/webpack.js.org\/concepts\/why-webpack\/) is a pluggable tool that processes and bundles JavaScript for browser compatibility. [Babel](https:\/\/babeljs.io\/), a plugin for webpack, converts ESNext and JSX into standard JavaScript.\n\nConfiguring webpack and Babel can be challenging, so it's recommended that you use the [`@wordpress\/scripts`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-scripts\/) package. This tool simplifies development by preconfiguring both, so you rarely need to write custom webpack or Babel configurations. \n\nFor an introduction, refer to the [Get started with wp-scripts](\/docs\/getting-started\/devenv\/get-started-with-wp-scripts.md) guide.\n\n### An overview of `wp-scripts`\n\nThe diagram below provides an overview of the build process when using the `wp-scripts` package. It's designed to work out of the box with [standard configurations](\/docs\/getting-started\/devenv\/get-started-with-wp-scripts.md#basic-usage) for development and production environments.\n\n[![Open Build Process diagram image](https:\/\/developer.wordpress.org\/files\/2023\/11\/build-process.png)](https:\/\/developer.wordpress.org\/files\/2023\/11\/build-process.png \"Open Build Process diagram image\")\n\n- **Production Mode (`npm run build`):** In this mode, `wp-scripts` compiles your JavaScript, minifying the output to reduce file size and improve loading times in the browser. This is ideal for deploying your code to a live site.\n\n- **Development Mode (`npm run start`):** This mode is tailored for active development. It skips minification for easier debugging, generates source maps for better error tracking, and watches your source files for changes. When a change is detected, it automatically rebuilds the affected files, allowing you to see updates in real-time.\n\nThe `wp-scripts` package also facilitates the use of JavaScript modules, allowing code distribution across multiple files and resulting in a streamlined bundle after the build process. The [block-development-example](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/data-basics-59c8f8) GitHub repository provides some good examples. \n\n<div class=\"callout callout-tip\">\n    In most situations, no customization will be needed, but you can provide a <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-scripts\/#provide-your-own-webpack-config\"><code>webpack.config.js<\/code><\/a> when using <code>wp-scripts<\/code> to modify the build process to suit your needs.\n<\/div>\n\n## Javascript without a build process\n\nIntegrating JavaScript into your WordPress projects without a build process can be the most straightforward approach in specific scenarios. This is particularly true for projects that don't leverage JSX or other advanced JavaScript features requiring compilation.\n\nWhen you opt out of a build process, you interact directly with WordPress's [Javascript APIs](\/docs\/reference-guides\/packages\/) through the global `wp` object. This means that all the methods and packages provided by WordPress are readily available, but with one caveat: you must manually manage script dependencies. This is done by adding [the handle](\/docs\/contributors\/code\/scripts.md) of each corresponding package to the dependency array of your enqueued JavaScript file.\n\nFor example, suppose you're creating a script that registers a new block [variation](\/docs\/reference-guides\/block-api\/block-variations.md) using the `registerBlockVariation` function from the [`blocks`](\/docs\/reference-guides\/packages\/packages-blocks.md) package. You must include `wp-blocks` in your script's dependency array. This guarantees that the `wp.blocks.registerBlockVariation` method is available and defined by the time your script executes.\n\nIn the following example, the `wp-blocks` dependency is defined when enqueuing the `variations.js` file. \n\n```php\nfunction example_enqueue_block_variations() {\n\twp_enqueue_script(\n\t\t'example-enqueue-block-variations',\n\t\tget_template_directory_uri() . '\/assets\/js\/variations.js',\n\t\tarray( 'wp-blocks' ),\n\t\twp_get_theme()->get( 'Version' ),\n\t\tfalse\n\t);\n}\nadd_action( 'enqueue_block_editor_assets', 'example_enqueue_block_variations' );\n```\n\nThen in the `variations.js` file, you can register a new variation for the Media & Text block like so:\n\n```js\nwp.blocks.registerBlockVariation(\n\t'core\/media-text',\n\t{\n\t\tname: 'media-text-custom',\n\t\ttitle: 'Media & Text Custom',\n\t\tattributes: {\n\t\t\talign: 'wide',\n\t\t\tbackgroundColor: 'tertiary'\n\t\t},\n\t}\n);\n```\n\nFor scripts that need to run in the Block Editor, make sure you use the [`enqueue_block_editor_assets`](https:\/\/developer.wordpress.org\/reference\/hooks\/enqueue_block_editor_assets\/) hook coupled with the standard [`wp_enqueue_script`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_enqueue_script\/) function.\n\nRefer to [Enqueueing assets in the Editor](\/docs\/how-to-guides\/enqueueing-assets-in-the-editor.md) for more information. You can also visit the [block-development-example](https:\/\/github.com\/wptrainingteam\/block-theme-examples\/blob\/master\/example-block-variation\/functions.php) GitHub repository for more practical examples.\n\n<div class=\"callout callout-tip\">\n    Open your browser's dev tools and try running <code>wp.data.select('core\/editor').getBlocks()<\/code> in the console when editing a post or when using the Site Editor. This command will return all available blocks.\n<\/div>\n\n## Additional resources\n\n- [Package reference](\/docs\/reference-guides\/packages.md)\n- [Get started with wp-scripts](\/docs\/getting-started\/devenv\/get-started-with-wp-scripts.md) \n- [Enqueueing assets in the Editor](\/docs\/how-to-guides\/enqueueing-assets-in-the-editor.md) \n- [WordPress package handles](\/docs\/contributors\/code\/scripts.md) \n- [Javascript reference](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript) | MDN Web Docs\n- [block-development-examples](https:\/\/github.com\/WordPress\/block-development-examples) | GitHub repository\n- [block-theme-examples](https:\/\/github.com\/wptrainingteam\/block-theme-examples) | GitHub repository\n- [How webpack and WordPress packages interact](https:\/\/developer.wordpress.org\/news\/2023\/04\/how-webpack-and-wordpress-packages-interact\/) | Developer Blog\n- [Build process diagram](https:\/\/excalidraw.com\/#json=4aNG9JUti3pMnsfoga35b,ihEAI8p5dwkpjWr6gQmjuw)\n"
    },
    {
        "path": "\/markdown\/getting-started\/fundamentals\/registration-of-a-block.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Registration of a block<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Blocks in WordPress are typically bundled in a plugin and registered on both the server and client-side using <code>block.json<\/code> metadata.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>While it's possible to register blocks solely on the client-side, best practices strongly advise registering them on both the server and client. This dual registration is crucial for enabling server-side features such as Dynamic Rendering, Block Supports, Block Hooks, and Style Variations. Without server-side registration, these functionalities will not operate correctly.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For instance, if you want a block <a href=\"https:\/\/developer.wordpress.org\/themes\/global-settings-and-styles\/settings\/blocks\/\">to be styled via <code>theme.json<\/code><\/a>, it must be registered on the server. Otherwise, the block won't recognize or apply any styles assigned to it in <code>theme.json<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following diagram details the registration process for a block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/developer.wordpress.org\/files\/2023\/11\/block-registration-e1700493399839.png\" title=\"Open Block Registration diagram image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/11\/block-registration-e1700493399839.png\">Open Block Registration diagram image<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Registering a block with PHP (server-side)<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Block registration on the server usually takes place in the main plugin PHP file with the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/register_block_type\/\"><code>register_block_type()<\/code><\/a> function called on the <a href=\"https:\/\/developer.wordpress.org\/reference\/hooks\/init\/\"><code>init<\/code><\/a> hook. This function simplifies block type registration by reading metadata stored in a <code>block.json<\/code> file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This function is designed to register block types and primarily uses two parameters in this context, although it can accommodate more variations:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong><code>$block_type<\/code> (<code>string<\/code>):<\/strong> This can either be the path to the directory containing the <code>block.json<\/code> file or the complete path to the metadata file if it has a different name. This parameter tells WordPress where to find the block's configuration.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>$args<\/code> (<code>array<\/code>):<\/strong> This is an optional parameter where you can specify additional arguments for the block type. By default, this is an empty array, but it can include various options, one of which is the <code>$render_callback<\/code>. This callback is used to render blocks on the front end and is an alternative to the <code>render<\/code> property in <code>block.json<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>During the development process, the <code>block.json<\/code> file is typically moved from the <code>src<\/code> (source) directory to the <code>build<\/code> directory as part of compiling your code. Therefore, when registering your block, ensure the <code>$block_type<\/code> path points to the <code>block.json<\/code> file within the <code>build<\/code> directory.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>register_block_type()<\/code> function returns the registered block type (<code>WP_Block_Type<\/code>) on success or <code>false<\/code> on failure. Here is a simple example using the <code>render_callback<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>register_block_type(\n\t__DIR__ . '\/build',\n\tarray(\n\t\t'render_callback' => 'render_block_core_notice',\n\t)\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Here is a more complete example, including the <code>init<\/code> hook.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function minimal_block_ca6eda___register_block() {\n\tregister_block_type( __DIR__ . '\/build' );\n}\nadd_action( 'init', 'minimal_block_ca6eda___register_block' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>See the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/minimal-block-ca6eda\">full block example<\/a> of the  <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/minimal-block-ca6eda\/index.php\">code above<\/a><\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Registering a block with JavaScript (client-side)<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When the block has already been registered on the server, you only need to register the client-side settings in JavaScipt using the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-blocks\/#registerblocktype\"><code>registerBlockType<\/code><\/a> method from the <code>@wordpress\/blocks<\/code> package. You just need to make sure you use the same block name as defined in the block's <code>block.json<\/code> file. Here's an example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerBlockType } from '@wordpress\/blocks';\n\nregisterBlockType( 'my-plugin\/notice', {\n\tedit: Edit,\n\t\/\/ ...other client-side settings\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>While it's generally advised to register blocks on the server using PHP for the benefits outlined in the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#benefits-using-the-metadata-file\">\"Benefits using the metadata file\"<\/a> section, you can opt to register a block solely on the client-side. The <code>registerBlockType<\/code> method allows you to register a block type using metadata.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The function accepts two parameters:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong><code>blockNameOrMetadata<\/code> (<code>string<\/code>|<code>Object<\/code>):<\/strong> This can either be the block type's name as a string or an object containing the block's metadata, which is typically loaded from the <code>block.json<\/code> file.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>settings<\/code> (<code>Object<\/code>):<\/strong> This is an object containing the block's client-side settings.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\n\tYou can import the contents of the <code>block.json<\/code> file (or any other <code>.json<\/code> file) directly into your JavaScript files if you're using a build process, such as the one provided by <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-scripts\/#the-build-process-with-wp-scripts\"><code>wp-scripts<\/code><\/a>.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>The <code>settings<\/code> object passed as the second parameter includes many properties, but these are the two most important ones:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong><code>edit<\/code>:<\/strong> The React component that gets used in the Editor for our block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><code>save<\/code>:<\/strong> The function that returns the static HTML markup that gets saved to the database.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The <code>registerBlockType()<\/code> function returns the registered block type (<code>WPBlock<\/code>) on success or <code>undefined<\/code> on failure. Here's an example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerBlockType } from '@wordpress\/blocks';\nimport { useBlockProps } from '@wordpress\/block-editor';\nimport metadata from '.\/block.json';\n\nconst Edit = () => <p {=\"\" ...useblockprops()=\"\" }=\"\">Hello World - Block Editor<\/p>;\nconst save = () => <p {=\"\" ...useblockprops.save()=\"\" }=\"\">Hello World - Frontend<\/p>;\n\nregisterBlockType( metadata.name, {\n\tedit: Edit,\n\tsave,\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>See the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/minimal-block-ca6eda\">full block example<\/a> of the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/minimal-block-ca6eda\/src\/index.js\">code above<\/a><\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Additional resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/register_block_type\/\"><code>register_block_type<\/code> PHP function<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-blocks\/#registerblocktype\"><code>registerBlockType<\/code> JS function<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/discussions\/55884\">Why a block needs to be registered in both the server and the client?<\/a> | GitHub Discussion<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/excalidraw.com\/#json=PUQu7jpvbKsUHYfpHWn7s,61QnhpZtjykp3s44lbUN_g\">Block Registration diagram<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Registration of a block\n\nBlocks in WordPress are typically bundled in a plugin and registered on both the server and client-side using `block.json` metadata.\n\nWhile it's possible to register blocks solely on the client-side, best practices strongly advise registering them on both the server and client. This dual registration is crucial for enabling server-side features such as Dynamic Rendering, Block Supports, Block Hooks, and Style Variations. Without server-side registration, these functionalities will not operate correctly.\n\nFor instance, if you want a block [to be styled via `theme.json`](https:\/\/developer.wordpress.org\/themes\/global-settings-and-styles\/settings\/blocks\/), it must be registered on the server. Otherwise, the block won't recognize or apply any styles assigned to it in `theme.json`.\n\nThe following diagram details the registration process for a block.\n\n[![Open Block Registration diagram image](https:\/\/developer.wordpress.org\/files\/2023\/11\/block-registration-e1700493399839.png)](https:\/\/developer.wordpress.org\/files\/2023\/11\/block-registration-e1700493399839.png \"Open Block Registration diagram image\")\n\n## Registering a block with PHP (server-side)\n\nBlock registration on the server usually takes place in the main plugin PHP file with the [`register_block_type()`](https:\/\/developer.wordpress.org\/reference\/functions\/register_block_type\/) function called on the [`init`](https:\/\/developer.wordpress.org\/reference\/hooks\/init\/) hook. This function simplifies block type registration by reading metadata stored in a `block.json` file.\n\nThis function is designed to register block types and primarily uses two parameters in this context, although it can accommodate more variations:\n\n- **`$block_type` (`string`):** This can either be the path to the directory containing the `block.json` file or the complete path to the metadata file if it has a different name. This parameter tells WordPress where to find the block's configuration.\n\n- **`$args` (`array`):** This is an optional parameter where you can specify additional arguments for the block type. By default, this is an empty array, but it can include various options, one of which is the `$render_callback`. This callback is used to render blocks on the front end and is an alternative to the `render` property in `block.json`.\n\nDuring the development process, the `block.json` file is typically moved from the `src` (source) directory to the `build` directory as part of compiling your code. Therefore, when registering your block, ensure the `$block_type` path points to the `block.json` file within the `build` directory.\n\nThe `register_block_type()` function returns the registered block type (`WP_Block_Type`) on success or `false` on failure. Here is a simple example using the `render_callback`.\n\n```php\nregister_block_type(\n\t__DIR__ . '\/build',\n\tarray(\n\t\t'render_callback' => 'render_block_core_notice',\n\t)\n);\n```\n\nHere is a more complete example, including the `init` hook. \n\n```php\nfunction minimal_block_ca6eda___register_block() {\n\tregister_block_type( __DIR__ . '\/build' );\n}\nadd_action( 'init', 'minimal_block_ca6eda___register_block' );\n```\n\n_See the [full block example](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/minimal-block-ca6eda) of the  [code above](https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/minimal-block-ca6eda\/index.php)_\n\n## Registering a block with JavaScript (client-side)\n\nWhen the block has already been registered on the server, you only need to register the client-side settings in JavaScipt using the [`registerBlockType`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-blocks\/#registerblocktype) method from the `@wordpress\/blocks` package. You just need to make sure you use the same block name as defined in the block's `block.json` file. Here's an example:\n\n```js\nimport { registerBlockType } from '@wordpress\/blocks';\n\nregisterBlockType( 'my-plugin\/notice', {\n\tedit: Edit,\n\t\/\/ ...other client-side settings\n} );\n```\n\nWhile it's generally advised to register blocks on the server using PHP for the benefits outlined in the [\"Benefits using the metadata file\"](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#benefits-using-the-metadata-file) section, you can opt to register a block solely on the client-side. The `registerBlockType` method allows you to register a block type using metadata.\n\nThe function accepts two parameters:\n\n- **`blockNameOrMetadata` (`string`|`Object`):** This can either be the block type's name as a string or an object containing the block's metadata, which is typically loaded from the `block.json` file.\n- **`settings` (`Object`):** This is an object containing the block's client-side settings.\n\n<div class=\"callout callout-tip\">\n\tYou can import the contents of the <code>block.json<\/code> file (or any other <code>.json<\/code> file) directly into your JavaScript files if you're using a build process, such as the one provided by <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-scripts\/#the-build-process-with-wp-scripts\"><code>wp-scripts<\/code><\/a>.\n<\/div>\n\nThe `settings` object passed as the second parameter includes many properties, but these are the two most important ones:\n\n- **`edit`:** The React component that gets used in the Editor for our block.\n- **`save`:** The function that returns the static HTML markup that gets saved to the database. \n\nThe `registerBlockType()` function returns the registered block type (`WPBlock`) on success or `undefined` on failure. Here's an example:\n\n```js\nimport { registerBlockType } from '@wordpress\/blocks';\nimport { useBlockProps } from '@wordpress\/block-editor';\nimport metadata from '.\/block.json';\n\nconst Edit = () => <p { ...useBlockProps() }>Hello World - Block Editor<\/p>;\nconst save = () => <p { ...useBlockProps.save() }>Hello World - Frontend<\/p>;\n\nregisterBlockType( metadata.name, {\n\tedit: Edit,\n\tsave,\n} );\n```\n\n_See the [full block example](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/minimal-block-ca6eda) of the [code above](https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/minimal-block-ca6eda\/src\/index.js)_\n\n## Additional resources\n\n- [`register_block_type` PHP function](https:\/\/developer.wordpress.org\/reference\/functions\/register_block_type\/)\n- [`registerBlockType` JS function](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-blocks\/#registerblocktype)\n- [Why a block needs to be registered in both the server and the client?](https:\/\/github.com\/WordPress\/gutenberg\/discussions\/55884) | GitHub Discussion\n- [Block Registration diagram](https:\/\/excalidraw.com\/#json=PUQu7jpvbKsUHYfpHWn7s,61QnhpZtjykp3s44lbUN_g)\n"
    },
    {
        "path": "\/markdown\/getting-started\/fundamentals\/block-in-the-editor.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">The block in the Editor<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Block Editor is a React Single Page Application (SPA). Every block in the Editor is displayed through a React component defined in the <code>edit<\/code> property of the settings object used to <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/registration-of-a-block\/#registration-of-the-block-with-javascript-client-side\">register the block<\/a> on the client.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>props<\/code> object received by the block's <code>Edit<\/code> React component includes:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#attributes\"><code>attributes<\/code><\/a>:<\/strong> An object of all the block's attributes.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#setattributes\"><code>setAttributes<\/code><\/a>:<\/strong> A method to update the attributes object.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#isselected\"><code>isSelected<\/code><\/a>:<\/strong> A boolean value that communicates whether the block is currently selected<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>WordPress provides many built-in standard components that can be used to define the block interface in the Editor. These built-in components are available via packages such as <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-components\/\"><code>@wordpress\/components<\/code><\/a> and <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-block-editor\/\"><code>@wordpress\/block-editor<\/code><\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout\">\n\tThe WordPress Gutenberg project uses <a href=\"https:\/\/wordpress.github.io\/gutenberg\/?path=\/docs\/docs-introduction--page\">Storybook<\/a> to document the user interface components that are available in WordPress packages.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Custom settings controls for the block in the Block Toolbar or the Settings Sidebar can also be defined through this <code>Edit<\/code> React component via built-in components such as:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/inspector-controls\/README.md\"><code>InspectorControls<\/code><\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-editor\/src\/components\/block-controls\"><code>BlockControls<\/code><\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Built-in components<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The package <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-components\/\"><code>@wordpress\/components<\/code><\/a> includes a library of generic WordPress components to create common UI elements for the Block Editor and the WordPress dashboard. Some of the  most commonly used components from this package are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/wordpress.github.io\/gutenberg\/?path=\/docs\/components-textcontrol--docs\"><code>TextControl<\/code><\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/wordpress.github.io\/gutenberg\/?path=\/docs\/components-panel--docs\"><code>Panel<\/code><\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/wordpress.github.io\/gutenberg\/?path=\/docs\/components-togglecontrol--docs\"><code>ToggleControl<\/code><\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/wordpress.github.io\/gutenberg\/?path=\/docs\/components-externallink--docs\"><code>ExternalLink<\/code><\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The package <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-block-editor\/\"><code>@wordpress\/block-editor<\/code><\/a> includes a library of components and hooks for the Block Editor, including those to define custom settings controls for the block. Some of the components most commonly used from this package are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/rich-text\/README.md\"><code>RichText<\/code><\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-editor\/src\/components\/block-controls\"><code>BlockControls<\/code><\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/inspector-controls\/README.md\"><code>InspectorControls<\/code><\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/inner-blocks\/README.md\"><code>InnerBlocks<\/code><\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n\tThe package <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-block-editor\/\"><code>@wordpress\/block-editor<\/code><\/a> also provides the tools to create and use standalone block editors.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>A good workflow when using a component for the Block Editor is:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Import the component from a WordPress package.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Add the corresponding code for the component to your project in JSX format.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Most built-in components will be used to set <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-json\/#using-attributes-to-store-block-data\">block attributes<\/a>, so define any necessary attributes in <code>block.json<\/code> and create event handlers to update those attributes with <code>setAttributes<\/code> in your component.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Adapt the code to be serialized and stored in the database if needed.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block Controls: Block Toolbar and Settings Sidebar<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To simplify block customization and ensure a consistent user experience, there are several built-in UI patterns to help generate the Editor preview of a block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The image below details the Block Toolbar and the Settings Sidebar of a selected Paragraph block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/12\/block-toolbar-settings-sidebar.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Diagram showing the Block Toolbar and the Settings Sidebar when a Paragraph block is selected<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block Toolbar<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When the user selects a block, a number of control buttons may be shown in a toolbar above the selected block. Some of these block-level controls may be included automatically, but you can also customize the toolbar to include controls specific to your block type. If the return value of your block type's <code>Edit<\/code> function includes a <code>BlockControls<\/code> element, those controls will be shown in the selected block's toolbar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export default function Edit( { className, attributes: attr, setAttributes } ) {\n\n\tconst onChangeContent = ( newContent ) => {\n\t\tsetAttributes( { content: newContent } );\n\t};\n\n\tconst onChangeAlignment = ( newAlignment ) => {\n\t\tsetAttributes( {\n\t\t\talignment: newAlignment === undefined ? 'none' : newAlignment,\n\t\t} );\n\t};\n\n\treturn (\n\t\t<div {=\"\" ...useblockprops()=\"\" }=\"\">\n\t\t\t<blockcontrols>\n\t\t\t\t<toolbargroup>\n\t\t\t\t\t<alignmenttoolbar<br>\t\t\t\t\t\tvalue={ attr.alignment }\n\t\t\t\t\t\tonChange={ onChangeAlignment }\n\t\t\t\t\t\/>\n\t\t\t\t<\/alignmenttoolbar<br><\/toolbargroup>\n\t\t\t<\/blockcontrols>\n\n\t\t\t<richtext<br>\t\t\t\tclassName={ className }\n\t\t\t\tstyle={ { textAlign: attr.alignment } }\n\t\t\t\ttagName=\"p\"\n\t\t\t\tonChange={ onChangeContent }\n\t\t\t\tvalue={ attr.content }\n\t\t\t\/>\n\t\t<\/richtext<br><\/div>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>See the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/block-toolbar-ab967f\">full block example<\/a> of the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/block-toolbar-ab967f\/src\/edit.js\">code above<\/a>.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note that <code>BlockControls<\/code> is only visible when the block is currently selected and in visual editing mode. <code>BlockControls<\/code> are not shown when editing a block in HTML editing mode.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Settings Sidebar<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Settings Sidebar is used to display less-often-used settings or those that require more screen space. The Settings Sidebar should be used for <strong>block-level settings only<\/strong> and is shown when a block is selected.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If a setting only affects selected content inside a block, such as \"bolding\" text, <strong>do not place the setting inside the Settings Sidebar<\/strong>. Use a toolbar instead. The Settings Sidebar is displayed even when editing a block in HTML mode, so it should only contain block-level settings.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Similar to rendering a toolbar, if you include an <code>InspectorControls<\/code> component in the <code>return<\/code> value of your block type's <code>Edit<\/code> function, those controls will be shown in the Settings Sidebar region.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export default function Edit( { attributes, setAttributes } ) {\n\tconst onChangeBGColor = ( hexColor ) => {\n\t\tsetAttributes( { bg_color: hexColor } );\n\t};\n\n\tconst onChangeTextColor = ( hexColor ) => {\n\t\tsetAttributes( { text_color: hexColor } );\n\t};\n\n\treturn (\n\t\t<div {=\"\" ...useblockprops()=\"\" }=\"\">\n\t\t\t<inspectorcontrols key=\"setting\">\n\t\t\t\t<div>\n\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t<legend classname=\"blocks-base-control__label\">\n\t\t\t\t\t\t\t{ __( 'Background color', 'block-development-examples' ) }\n\t\t\t\t\t\t<\/legend>\n\t\t\t\t\t\t<colorpalette element=\"\" tag=\"\" for=\"\" gutenberg=\"\" standard=\"\" colour=\"\" selector<br=\"\">\t\t\t\t\t\t\tonChange={ onChangeBGColor } \/\/ onChange event callback\n\t\t\t\t\t\t\/>\n\t\t\t\t\t<\/colorpalette><\/fieldset>\n\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t<legend classname=\"blocks-base-control__label\">\n\t\t\t\t\t\t\t{ __( 'Text color', 'block-development-examples' ) }\n\t\t\t\t\t\t<\/legend>\n\t\t\t\t\t\t<colorpalette<br>\t\t\t\t\t\t\tonChange={ onChangeTextColor }\n\t\t\t\t\t\t\/>\n\t\t\t\t\t<\/colorpalette<br><\/fieldset>\n\t\t\t\t<\/div>\n\t\t\t<\/inspectorcontrols>\n\t\t\t<textcontrol<br>\t\t\t\tvalue={ attributes.message }\n\t\t\t\tonChange={ ( val ) => setAttributes( { message: val } ) }\n\t\t\t\tstyle={ {\n\t\t\t\t\tbackgroundColor: attributes.bg_color,\n\t\t\t\t\tcolor: attributes.text_color,\n\t\t\t\t} }\n\t\t\t\/>\n\t\t<\/textcontrol<br><\/div>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>See the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/settings-sidebar-82c525\">full block example<\/a> of the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/settings-sidebar-82c525\/src\/edit.js\">code above<\/a>.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Block controls rendered in both the toolbar and sidebar will also be available when multiple blocks of the same type are selected.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-note\">\n\tFor common customization settings, including color, border, spacing, and more, you can rely on <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-json\/#enable-ui-settings-panels-for-the-block-with-supports\">block supports<\/a> instead of a custom solution. Block supports provide a consistent UI with the same functionality as other Core blocks.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Additional resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/wordpress.github.io\/gutenberg\/?path=\/docs\/docs-introduction--page\">Storybook for WordPress components<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-block-editor\/\">@wordpress\/block-editor<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-components\/\">@wordpress\/components<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/inspector-controls\/README.md\"><code>InspectorControls<\/code><\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-editor\/src\/components\/block-controls\"><code>BlockControls<\/code><\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# The block in the Editor\n\nThe Block Editor is a React Single Page Application (SPA). Every block in the Editor is displayed through a React component defined in the `edit` property of the settings object used to [register the block](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/registration-of-a-block\/#registration-of-the-block-with-javascript-client-side) on the client. \n\nThe `props` object received by the block's `Edit` React component includes:\n\n- **[`attributes`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#attributes):** An object of all the block's attributes.\n- **[`setAttributes`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#setattributes):** A method to update the attributes object.\n- **[`isSelected`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#isselected):** A boolean value that communicates whether the block is currently selected\n\nWordPress provides many built-in standard components that can be used to define the block interface in the Editor. These built-in components are available via packages such as [`@wordpress\/components`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-components\/) and [`@wordpress\/block-editor`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-block-editor\/).\n\n<div class=\"callout\">\n\tThe WordPress Gutenberg project uses <a href=\"https:\/\/wordpress.github.io\/gutenberg\/?path=\/docs\/docs-introduction--page\">Storybook<\/a> to document the user interface components that are available in WordPress packages.\n<\/div>\n\nCustom settings controls for the block in the Block Toolbar or the Settings Sidebar can also be defined through this `Edit` React component via built-in components such as:\n\n- [`InspectorControls`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/inspector-controls\/README.md) \n- [`BlockControls`](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-editor\/src\/components\/block-controls) \n\n## Built-in components\n\nThe package [`@wordpress\/components`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-components\/) includes a library of generic WordPress components to create common UI elements for the Block Editor and the WordPress dashboard. Some of the  most commonly used components from this package are:\n\n- [`TextControl`](https:\/\/wordpress.github.io\/gutenberg\/?path=\/docs\/components-textcontrol--docs) \n- [`Panel`](https:\/\/wordpress.github.io\/gutenberg\/?path=\/docs\/components-panel--docs)\n- [`ToggleControl`](https:\/\/wordpress.github.io\/gutenberg\/?path=\/docs\/components-togglecontrol--docs)\n- [`ExternalLink`](https:\/\/wordpress.github.io\/gutenberg\/?path=\/docs\/components-externallink--docs)\n\nThe package [`@wordpress\/block-editor`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-block-editor\/) includes a library of components and hooks for the Block Editor, including those to define custom settings controls for the block. Some of the components most commonly used from this package are:\n\n- [`RichText`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/rich-text\/README.md)\n- [`BlockControls`](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-editor\/src\/components\/block-controls)\n- [`InspectorControls`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/inspector-controls\/README.md)\n- [`InnerBlocks`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/inner-blocks\/README.md)\n\n<div class=\"callout callout-info\">\n\tThe package <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-block-editor\/\"><code>@wordpress\/block-editor<\/code><\/a> also provides the tools to create and use standalone block editors.\n<\/div>\n\nA good workflow when using a component for the Block Editor is:\n\n- Import the component from a WordPress package.\n- Add the corresponding code for the component to your project in JSX format.\n- Most built-in components will be used to set [block attributes](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-json\/#using-attributes-to-store-block-data), so define any necessary attributes in `block.json` and create event handlers to update those attributes with `setAttributes` in your component.\n- Adapt the code to be serialized and stored in the database if needed.\n\n## Block Controls: Block Toolbar and Settings Sidebar\n\nTo simplify block customization and ensure a consistent user experience, there are several built-in UI patterns to help generate the Editor preview of a block. \n\nThe image below details the Block Toolbar and the Settings Sidebar of a selected Paragraph block.\n\n![Diagram showing the Block Toolbar and the Settings Sidebar when a Paragraph block is selected](https:\/\/developer.wordpress.org\/files\/2023\/12\/block-toolbar-settings-sidebar.png)\n\n### Block Toolbar\n\nWhen the user selects a block, a number of control buttons may be shown in a toolbar above the selected block. Some of these block-level controls may be included automatically, but you can also customize the toolbar to include controls specific to your block type. If the return value of your block type's `Edit` function includes a `BlockControls` element, those controls will be shown in the selected block's toolbar.\n\n```jsx\nexport default function Edit( { className, attributes: attr, setAttributes } ) {\n\n\tconst onChangeContent = ( newContent ) => {\n\t\tsetAttributes( { content: newContent } );\n\t};\n\n\tconst onChangeAlignment = ( newAlignment ) => {\n\t\tsetAttributes( {\n\t\t\talignment: newAlignment === undefined ? 'none' : newAlignment,\n\t\t} );\n\t};\n\n\treturn (\n\t\t<div { ...useBlockProps() }>\n\t\t\t<BlockControls>\n\t\t\t\t<ToolbarGroup>\n\t\t\t\t\t<AlignmentToolbar\n\t\t\t\t\t\tvalue={ attr.alignment }\n\t\t\t\t\t\tonChange={ onChangeAlignment }\n\t\t\t\t\t\/>\n\t\t\t\t<\/ToolbarGroup>\n\t\t\t<\/BlockControls>\n\n\t\t\t<RichText\n\t\t\t\tclassName={ className }\n\t\t\t\tstyle={ { textAlign: attr.alignment } }\n\t\t\t\ttagName=\"p\"\n\t\t\t\tonChange={ onChangeContent }\n\t\t\t\tvalue={ attr.content }\n\t\t\t\/>\n\t\t<\/div>\n\t);\n}\n```\n\n_See the [full block example](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/block-toolbar-ab967f) of the [code above](https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/block-toolbar-ab967f\/src\/edit.js)._\n\nNote that `BlockControls` is only visible when the block is currently selected and in visual editing mode. `BlockControls` are not shown when editing a block in HTML editing mode.\n\n### Settings Sidebar\n\nThe Settings Sidebar is used to display less-often-used settings or those that require more screen space. The Settings Sidebar should be used for **block-level settings only** and is shown when a block is selected.\n\nIf a setting only affects selected content inside a block, such as \"bolding\" text, **do not place the setting inside the Settings Sidebar**. Use a toolbar instead. The Settings Sidebar is displayed even when editing a block in HTML mode, so it should only contain block-level settings.\n\nSimilar to rendering a toolbar, if you include an `InspectorControls` component in the `return` value of your block type's `Edit` function, those controls will be shown in the Settings Sidebar region.\n\n```jsx\nexport default function Edit( { attributes, setAttributes } ) {\n\tconst onChangeBGColor = ( hexColor ) => {\n\t\tsetAttributes( { bg_color: hexColor } );\n\t};\n\n\tconst onChangeTextColor = ( hexColor ) => {\n\t\tsetAttributes( { text_color: hexColor } );\n\t};\n\n\treturn (\n\t\t<div { ...useBlockProps() }>\n\t\t\t<InspectorControls key=\"setting\">\n\t\t\t\t<div>\n\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t<legend className=\"blocks-base-control__label\">\n\t\t\t\t\t\t\t{ __( 'Background color', 'block-development-examples' ) }\n\t\t\t\t\t\t<\/legend>\n\t\t\t\t\t\t<ColorPalette \/\/ Element Tag for Gutenberg standard colour selector\n\t\t\t\t\t\t\tonChange={ onChangeBGColor } \/\/ onChange event callback\n\t\t\t\t\t\t\/>\n\t\t\t\t\t<\/fieldset>\n\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t<legend className=\"blocks-base-control__label\">\n\t\t\t\t\t\t\t{ __( 'Text color', 'block-development-examples' ) }\n\t\t\t\t\t\t<\/legend>\n\t\t\t\t\t\t<ColorPalette\n\t\t\t\t\t\t\tonChange={ onChangeTextColor }\n\t\t\t\t\t\t\/>\n\t\t\t\t\t<\/fieldset>\n\t\t\t\t<\/div>\n\t\t\t<\/InspectorControls>\n\t\t\t<TextControl\n\t\t\t\tvalue={ attributes.message }\n\t\t\t\tonChange={ ( val ) => setAttributes( { message: val } ) }\n\t\t\t\tstyle={ {\n\t\t\t\t\tbackgroundColor: attributes.bg_color,\n\t\t\t\t\tcolor: attributes.text_color,\n\t\t\t\t} }\n\t\t\t\/>\n\t\t<\/div>\n\t);\n}\n```\n_See the [full block example](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/settings-sidebar-82c525) of the [code above](https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/settings-sidebar-82c525\/src\/edit.js)._\n\nBlock controls rendered in both the toolbar and sidebar will also be available when multiple blocks of the same type are selected.\n\n<div class=\"callout callout-note\">\n\tFor common customization settings, including color, border, spacing, and more, you can rely on <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-json\/#enable-ui-settings-panels-for-the-block-with-supports\">block supports<\/a> instead of a custom solution. Block supports provide a consistent UI with the same functionality as other Core blocks.\n<\/div>\n\n## Additional resources\n\n- [Storybook for WordPress components](https:\/\/wordpress.github.io\/gutenberg\/?path=\/docs\/docs-introduction--page)\n- [@wordpress\/block-editor](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-block-editor\/)\n- [@wordpress\/components](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-components\/)\n- [`InspectorControls`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/inspector-controls\/README.md)\n- [`BlockControls`](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-editor\/src\/components\/block-controls)"
    },
    {
        "path": "\/markdown\/getting-started\/fundamentals\/static-dynamic-rendering.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Static or Dynamic rendering of a block<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block's front-end markup can either be dynamically generated server-side upon request (dynamic blocks) or statically generated during the save process in the Block Editor (static blocks). This article explores each method.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\nThe post <a href=\"https:\/\/developer.wordpress.org\/news\/2023\/02\/27\/static-vs-dynamic-blocks-whats-the-difference\/\">Static vs. dynamic blocks: What\u2019s the difference?<\/a> provides a great introduction to this topic.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Static rendering<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Blocks with \"static rendering\" produce front-end output that is fixed and stored in the database upon saving. These blocks rely solely on their <code>save<\/code> function to define their <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/markup-representation-block\/\">HTML markup<\/a>, which remains unchanged unless manually edited in the Block Editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If a block does not use a dynamic rendering method\u2014meaning it doesn't generate content on the fly via PHP when the page loads\u2014it's considered a \"static block.\"<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The diagram below illustrates how static block content is saved in the database and then retrieved and rendered as HTML on the front end.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2024\/01\/static-rendering.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Blocks with static rendering diagram<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">How to define static rendering for a block<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>save<\/code> function, which can be defined when <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/registration-of-a-block\/#registration-of-the-block-with-javascript-client-side\">registering a block on the client<\/a>, specifies the block's HTML structure that gets saved in the database whenever you save the block in the Editor. This saved HTML is then used to display the block on the front end.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Blocks in WordPress are encapsulated within special comment tags that serve as unique <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/markup-representation-block\/\">block delimiters<\/a>. However, only the HTML defined in the static block's <code>save<\/code> function\u2014excluding these delimiters\u2014is rendered.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<details><summary><strong>View an example of static rendering in the Preformatted block<\/strong><\/summary>\n<br\/>\nThe following <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/preformatted\/save.js\"><code>save<\/code> function<\/a> for the <a hreh=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/preformatted\">Preformatted<\/a> core block looks like this:\n<!-- \/wp:html -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { RichText, useBlockProps } from '@wordpress\/block-editor';\n\nexport default function save( { attributes } ) {\n\tconst { content } = attributes;\n\n\treturn (\n\t\t<pre {=\"\" ...useblockprops.save()=\"\" }=\"\">\n\t\t\t<richtext.content value=\"{\" content=\"\" }=\"\">\n\t\t<\/richtext.content><\/pre>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The function generates the following markup representation of the block when <code>attributes.content<\/code> has the value <code>\"This is some preformatted text\"<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n<pre class=\"wp-block-preformatted\">This is some preformatted text<\/pre>\n\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>On the front end, the block will return the following markup. Notice how the delimiters are no longer present.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><pre class=\"wp-block-preformatted\">This is some preformatted text<\/pre>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:html -->\n<\/details>\n<br\/>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Dynamic blocks, which we'll explore in the following section, can specify an initial HTML structure through a <code>save<\/code> function, similar to static blocks. However, dynamic blocks primarily rely on server-side rendering to generate their content. If, for any reason, the dynamic rendering isn't available\u2014perhaps due to the block's plugin being deactivated\u2014the system will fall back to using the HTML structure saved in the database to display the block on the front end.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For a practical demonstration of how this works, refer to the <a href=\"\/docs\/getting-started\/tutorial.md\">Building your first block<\/a> tutorial. Specifically, the <a href=\"\/docs\/getting-started\/tutorial.md#adding-static-rendering\">Adding static rendering<\/a> section illustrates how a block can have both a saved HTML structure and dynamic rendering capabilities.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\nWordPress provides mechanisms like the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/render_block\/\"><code>render_block<\/code><\/a> are the <code>$render_callback<\/code> function to alter the saved HTML of a block before it appears on the front end. These tools offer developers the capability to customize block output dynamically, catering to complex and interactive user experiences.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Additional examples of WordPress blocks that use static rendering, meaning their output is fixed at the time of saving and doesn't rely on server-side processing, include:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/separator\/save.js\">Separator<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/spacer\/save.js\">Spacer<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/button\/save.js\">Button<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Dynamic rendering<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Blocks with \"dynamic rendering\" are designed to generate their content and structure in real-time when requested on the front end. Unlike static blocks, which have a fixed HTML structure saved in the database, \"dynamic blocks\" rely on server-side processing to construct their output dynamically, making them highly versatile and suitable for content that needs to be updated frequently or is dependent on external data.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The diagram below illustrates how the representation of a dynamic block is saved in the database and then retrieved and dynamically rendered as HTML on the front end.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2024\/01\/dynamic-rendering.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Blocks with dynamic rendering diagram<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>There are some common use cases for dynamic blocks:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Blocks where content should change even if a post has not been updated:<\/strong> An example is the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/latest-posts\">Latest Posts<\/a> block, which will automatically update whenever a new post is published.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Blocks where updates to the markup should be immediately shown on the front end:<\/strong> If you update the structure of a block by adding a new class, adding an HTML element, or changing the layout in any other way, using a dynamic block ensures those changes are applied immediately on all occurrences of that block across the site. Without dynamic blocks, similar updates could trigger <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#validation\">validation errors<\/a> in the Block Editor.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">How to define dynamic rendering for a block<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block can define dynamic rendering in two main ways:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Using the <code>render_callback<\/code> argument that can be passed to the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/registration-of-a-block\/#registration-of-the-block-with-php-server-side\"><code>register_block_type()<\/code><\/a> function.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Using a separate PHP file usually named <code>render.php<\/code>. This file's path should be defined using the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-json\/#files-for-the-blocks-behavior-output-or-style\"><code>render<\/code><\/a> property in the <code>block.json<\/code> file.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Both of these methods receive the following data:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>$attributes<\/code>: The array of attributes for the block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>$content<\/code>: The markup of the block as stored in the database, if any.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>$block<\/code>: The instance of the <a href=\"https:\/\/developer.wordpress.org\/reference\/classes\/wp_block\/\">WP_Block<\/a> class that represents the rendered block (<a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/\">metadata of the block<\/a>).<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<details><summary><strong>View an example of dynamic rendering in the Site Title block<\/strong><\/summary>\n<br\/>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/site-title\">Site Title<\/a> block uses the following <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/site-title\/index.php\"><code>render_callback<\/code><\/a>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function render_block_core_site_title( $attributes ) {\n\t$site_title = get_bloginfo( 'name' );\n\tif ( ! $site_title ) {\n\t\treturn;\n\t}\n\n\t$tag_name = 'h1';\n\t$classes  = empty( $attributes&#91;'textAlign'] ) ? '' : \"has-text-align-{$attributes&#91;'textAlign']}\";\n\tif ( isset( $attributes&#91;'style']&#91;'elements']&#91;'link']&#91;'color']&#91;'text'] ) ) {\n\t\t$classes .= ' has-link-color';\n\t}\n\n\tif ( isset( $attributes&#91;'level'] ) ) {\n\t\t$tag_name = 0 === $attributes&#91;'level'] ? 'p' : 'h' . (int) $attributes&#91;'level'];\n\t}\n\n\tif ( $attributes&#91;'isLink'] ) {\n\t\t$aria_current = is_home() || ( is_front_page() &amp;&amp; 'page' === get_option( 'show_on_front' ) ) ? ' aria-current=\"page\"' : '';\n\t\t$link_target  = ! empty( $attributes&#91;'linkTarget'] ) ? $attributes&#91;'linkTarget'] : '_self';\n\n\t\t$site_title = sprintf(\n\t\t\t'<a href=\"%1$s\" target=\"%2$s\" rel=\"home\" %3$s=\"\">%4$s<\/a>',\n\t\t\tesc_url( home_url() ),\n\t\t\tesc_attr( $link_target ),\n\t\t\t$aria_current,\n\t\t\tesc_html( $site_title )\n\t\t);\n\t}\n\t$wrapper_attributes = get_block_wrapper_attributes( array( 'class' => trim( $classes ) ) );\n\n\treturn sprintf(\n\t\t'&lt;%1$s %2$s>%3$s',\n\t\t$tag_name,\n\t\t$wrapper_attributes,\n\t\t\/\/ already pre-escaped if it is a link.\n\t\t$attributes&#91;'isLink'] ? $site_title : esc_html( $site_title )\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>However, there is no <code>save<\/code> function defined for this block, as you can see from its <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/site-title\/index.js\"><code>index.js<\/code><\/a> file, which means the markup representation of the block in the database looks like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>On the front end, the <code>render_callback<\/code> is used to dynamically render the markup for the block depending on the specific values on the server at the time the block is requested. These values include the current site title, URL, link target, etc.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><h1 class=\"wp-block-site-title\"><a href=\"https:\/\/www.wp.org\" target=\"_self\" rel=\"home\">My WordPress Website<\/a><\/h1>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:html -->\n<\/details>\n<br\/>\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">HTML representation of dynamic blocks in the database (<code>save<\/code>)<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For dynamic blocks, the <code>save<\/code> callback function can return just <code>null<\/code>, which tells the editor to save only the block delimiter comment (along with any existing <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-attributes\/\">block attributes<\/a>) to the database. These attributes are then passed into the server-side rendering callback, which will determine how to display the block on the front end of your site.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When <code>save<\/code> is <code>null<\/code>, the Block Editor will skip the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#validation\">block markup validation process<\/a>, avoiding issues with frequently changing markup.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Blocks with dynamic rendering can also save an HTML representation of the block as a backup. If you provide a server-side rendering callback, the HTML representing the block in the database will be replaced with the output of your callback but will be rendered if your block is deactivated (the plugin that registers the block is uninstalled), or your render callback is removed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In some cases, the block saves an HTML representation of the block and uses a dynamic rendering to fine-tune this markup if some conditions are met. Some examples of core blocks using this approach are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/cover\">Cover<\/a> block <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/cover\/save.js\">saves<\/a> a full HTML representation of the block in the database. This markup is processed via a <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/22741661998834e69db74ad863705ee2ce97b446\/packages\/block-library\/src\/cover\/index.php#L74\"><code>render_callback<\/code><\/a>, which <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/22741661998834e69db74ad863705ee2ce97b446\/packages\/block-library\/src\/cover\/index.php#L16\">dynamically injects<\/a> the featured image if the \"Use featured image\" setting is enabled.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/image\">Image<\/a> block also <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/image\/save.js\">saves<\/a> its HTML representation in the database. This markup is processed via a <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/22741661998834e69db74ad863705ee2ce97b446\/packages\/block-library\/src\/image\/index.php#L363\"><code>render_callback<\/code><\/a>, which <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/22741661998834e69db74ad863705ee2ce97b446\/packages\/block-library\/src\/image\/index.php#L18\">adds additional attributes<\/a> to the markup if specific conditions are met.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>If you are using <a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/block-tutorial\/nested-blocks-inner-blocks\/\">InnerBlocks<\/a> in a dynamic block, you will need to save the <code>InnerBlocks<\/code> in the <code>save<\/code> callback function using <code>&lt;InnerBlocks.Content\/><\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Additional resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/news\/2023\/02\/27\/static-vs-dynamic-blocks-whats-the-difference\/\">Static vs. dynamic blocks: What\u2019s the difference?<\/a> | Developer Blog<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/news\/2023\/03\/10\/block-deprecation-a-tutorial\/\">Block deprecation \u2013 a tutorial<\/a> | Developer Blog<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Static or Dynamic rendering of a block\n\nA block's front-end markup can either be dynamically generated server-side upon request (dynamic blocks) or statically generated during the save process in the Block Editor (static blocks). This article explores each method.\n\n<div class=\"callout callout-tip\">\nThe post <a href=\"https:\/\/developer.wordpress.org\/news\/2023\/02\/27\/static-vs-dynamic-blocks-whats-the-difference\/\">Static vs. dynamic blocks: What\u2019s the difference?<\/a> provides a great introduction to this topic.\n<\/div>\n\n## Static rendering \n\nBlocks with \"static rendering\" produce front-end output that is fixed and stored in the database upon saving. These blocks rely solely on their `save` function to define their [HTML markup](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/markup-representation-block\/), which remains unchanged unless manually edited in the Block Editor.\n\nIf a block does not use a dynamic rendering method\u2014meaning it doesn't generate content on the fly via PHP when the page loads\u2014it's considered a \"static block.\" \n\nThe diagram below illustrates how static block content is saved in the database and then retrieved and rendered as HTML on the front end.\n\n![Blocks with static rendering diagram](https:\/\/developer.wordpress.org\/files\/2024\/01\/static-rendering.png)\n\n### How to define static rendering for a block\n\nThe `save` function, which can be defined when [registering a block on the client](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/registration-of-a-block\/#registration-of-the-block-with-javascript-client-side), specifies the block's HTML structure that gets saved in the database whenever you save the block in the Editor. This saved HTML is then used to display the block on the front end.\n\nBlocks in WordPress are encapsulated within special comment tags that serve as unique [block delimiters](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/markup-representation-block\/). However, only the HTML defined in the static block's `save` function\u2014excluding these delimiters\u2014is rendered.\n\n<details><summary><strong>View an example of static rendering in the Preformatted block<\/strong><\/summary>\n<br\/>\nThe following <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/preformatted\/save.js\"><code>save<\/code> function<\/a> for the <a hreh=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/preformatted\">Preformatted<\/a> core block looks like this:\n\n```js\nimport { RichText, useBlockProps } from '@wordpress\/block-editor';\n\nexport default function save( { attributes } ) {\n\tconst { content } = attributes;\n\n\treturn (\n\t\t<pre { ...useBlockProps.save() }>\n\t\t\t<RichText.Content value={ content } \/>\n\t\t<\/pre>\n\t);\n}\n```\n\nThe function generates the following markup representation of the block when `attributes.content` has the value `\"This is some preformatted text\"`:\n\n```html\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">This is some preformatted text<\/pre>\n<!-- \/wp:preformatted -->\n```\n\nOn the front end, the block will return the following markup. Notice how the delimiters are no longer present.\n\n```html\n<pre class=\"wp-block-preformatted\">This is some preformatted text<\/pre>\n```\n<\/details>\n<br\/>\n\nDynamic blocks, which we'll explore in the following section, can specify an initial HTML structure through a `save` function, similar to static blocks. However, dynamic blocks primarily rely on server-side rendering to generate their content. If, for any reason, the dynamic rendering isn't available\u2014perhaps due to the block's plugin being deactivated\u2014the system will fall back to using the HTML structure saved in the database to display the block on the front end.\n\nFor a practical demonstration of how this works, refer to the [Building your first block](\/docs\/getting-started\/tutorial.md) tutorial. Specifically, the [Adding static rendering](\/docs\/getting-started\/tutorial.md#adding-static-rendering) section illustrates how a block can have both a saved HTML structure and dynamic rendering capabilities.\n\n<div class=\"callout callout-info\">\nWordPress provides mechanisms like the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/render_block\/\"><code>render_block<\/code><\/a> are the <code>$render_callback<\/code> function to alter the saved HTML of a block before it appears on the front end. These tools offer developers the capability to customize block output dynamically, catering to complex and interactive user experiences.\n<\/div>\n\nAdditional examples of WordPress blocks that use static rendering, meaning their output is fixed at the time of saving and doesn't rely on server-side processing, include:\n\n- [Separator](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/separator\/save.js)\n- [Spacer](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/spacer\/save.js)\n- [Button](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/button\/save.js)\n\n\n## Dynamic rendering\n\nBlocks with \"dynamic rendering\" are designed to generate their content and structure in real-time when requested on the front end. Unlike static blocks, which have a fixed HTML structure saved in the database, \"dynamic blocks\" rely on server-side processing to construct their output dynamically, making them highly versatile and suitable for content that needs to be updated frequently or is dependent on external data.\n\nThe diagram below illustrates how the representation of a dynamic block is saved in the database and then retrieved and dynamically rendered as HTML on the front end.\n\n![Blocks with dynamic rendering diagram](https:\/\/developer.wordpress.org\/files\/2024\/01\/dynamic-rendering.png)\n\nThere are some common use cases for dynamic blocks:\n\n1. **Blocks where content should change even if a post has not been updated:** An example is the [Latest Posts](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/latest-posts) block, which will automatically update whenever a new post is published.\n2. **Blocks where updates to the markup should be immediately shown on the front end:** If you update the structure of a block by adding a new class, adding an HTML element, or changing the layout in any other way, using a dynamic block ensures those changes are applied immediately on all occurrences of that block across the site. Without dynamic blocks, similar updates could trigger [validation errors](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#validation) in the Block Editor.\n\n### How to define dynamic rendering for a block\n\nA block can define dynamic rendering in two main ways:\n\n1. Using the `render_callback` argument that can be passed to the [`register_block_type()`](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/registration-of-a-block\/#registration-of-the-block-with-php-server-side) function.\n2. Using a separate PHP file usually named `render.php`. This file's path should be defined using the [`render`](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-json\/#files-for-the-blocks-behavior-output-or-style) property in the `block.json` file.\n\nBoth of these methods receive the following data:\n\n - `$attributes`: The array of attributes for the block.\n - `$content`: The markup of the block as stored in the database, if any.\n - `$block`: The instance of the [WP_Block](https:\/\/developer.wordpress.org\/reference\/classes\/wp_block\/) class that represents the rendered block ([metadata of the block](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/)).\n\n<details><summary><strong>View an example of dynamic rendering in the Site Title block<\/strong><\/summary>\n<br\/>\n\nThe [Site Title](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/block-library\/src\/site-title) block uses the following [`render_callback`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/site-title\/index.php):\n\n```php\nfunction render_block_core_site_title( $attributes ) {\n\t$site_title = get_bloginfo( 'name' );\n\tif ( ! $site_title ) {\n\t\treturn;\n\t}\n\n\t$tag_name = 'h1';\n\t$classes  = empty( $attributes['textAlign'] ) ? '' : \"has-text-align-{$attributes['textAlign']}\";\n\tif ( isset( $attributes['style']['elements']['link']['color']['text'] ) ) {\n\t\t$classes .= ' has-link-color';\n\t}\n\n\tif ( isset( $attributes['level'] ) ) {\n\t\t$tag_name = 0 === $attributes['level'] ? 'p' : 'h' . (int) $attributes['level'];\n\t}\n\n\tif ( $attributes['isLink'] ) {\n\t\t$aria_current = is_home() || ( is_front_page() && 'page' === get_option( 'show_on_front' ) ) ? ' aria-current=\"page\"' : '';\n\t\t$link_target  = ! empty( $attributes['linkTarget'] ) ? $attributes['linkTarget'] : '_self';\n\n\t\t$site_title = sprintf(\n\t\t\t'<a href=\"%1$s\" target=\"%2$s\" rel=\"home\"%3$s>%4$s<\/a>',\n\t\t\tesc_url( home_url() ),\n\t\t\tesc_attr( $link_target ),\n\t\t\t$aria_current,\n\t\t\tesc_html( $site_title )\n\t\t);\n\t}\n\t$wrapper_attributes = get_block_wrapper_attributes( array( 'class' => trim( $classes ) ) );\n\n\treturn sprintf(\n\t\t'<%1$s %2$s>%3$s<\/%1$s>',\n\t\t$tag_name,\n\t\t$wrapper_attributes,\n\t\t\/\/ already pre-escaped if it is a link.\n\t\t$attributes['isLink'] ? $site_title : esc_html( $site_title )\n\t);\n}\n```\n\nHowever, there is no `save` function defined for this block, as you can see from its [`index.js`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/site-title\/index.js) file, which means the markup representation of the block in the database looks like this:\n\n```html\n<!-- wp:site-title \/-->\n```\n\nOn the front end, the `render_callback` is used to dynamically render the markup for the block depending on the specific values on the server at the time the block is requested. These values include the current site title, URL, link target, etc.\n\n```\n<h1 class=\"wp-block-site-title\"><a href=\"https:\/\/www.wp.org\" target=\"_self\" rel=\"home\">My WordPress Website<\/a><\/h1>\n```\n\n<\/details>\n<br\/>\n\n### HTML representation of dynamic blocks in the database (`save`)\n\nFor dynamic blocks, the `save` callback function can return just `null`, which tells the editor to save only the block delimiter comment (along with any existing [block attributes](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-attributes\/)) to the database. These attributes are then passed into the server-side rendering callback, which will determine how to display the block on the front end of your site. \n\nWhen `save` is `null`, the Block Editor will skip the [block markup validation process](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#validation), avoiding issues with frequently changing markup.\n\nBlocks with dynamic rendering can also save an HTML representation of the block as a backup. If you provide a server-side rendering callback, the HTML representing the block in the database will be replaced with the output of your callback but will be rendered if your block is deactivated (the plugin that registers the block is uninstalled), or your render callback is removed.\n\nIn some cases, the block saves an HTML representation of the block and uses a dynamic rendering to fine-tune this markup if some conditions are met. Some examples of core blocks using this approach are:\n\n- The [Cover](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/cover) block [saves](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/cover\/save.js) a full HTML representation of the block in the database. This markup is processed via a [`render_callback`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/22741661998834e69db74ad863705ee2ce97b446\/packages\/block-library\/src\/cover\/index.php#L74), which [dynamically injects](https:\/\/github.com\/WordPress\/gutenberg\/blob\/22741661998834e69db74ad863705ee2ce97b446\/packages\/block-library\/src\/cover\/index.php#L16) the featured image if the \"Use featured image\" setting is enabled.\n- The [Image](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/image) block also [saves](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/image\/save.js) its HTML representation in the database. This markup is processed via a [`render_callback`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/22741661998834e69db74ad863705ee2ce97b446\/packages\/block-library\/src\/image\/index.php#L363), which [adds additional attributes](https:\/\/github.com\/WordPress\/gutenberg\/blob\/22741661998834e69db74ad863705ee2ce97b446\/packages\/block-library\/src\/image\/index.php#L18) to the markup if specific conditions are met.\n\nIf you are using [InnerBlocks](https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/block-tutorial\/nested-blocks-inner-blocks\/) in a dynamic block, you will need to save the `InnerBlocks` in the `save` callback function using `<InnerBlocks.Content\/>`.\n\n## Additional resources\n\n- [Static vs. dynamic blocks: What\u2019s the difference?](https:\/\/developer.wordpress.org\/news\/2023\/02\/27\/static-vs-dynamic-blocks-whats-the-difference\/) | Developer Blog\n- [Block deprecation \u2013 a tutorial](https:\/\/developer.wordpress.org\/news\/2023\/03\/10\/block-deprecation-a-tutorial\/) | Developer Blog"
    },
    {
        "path": "\/markdown\/getting-started\/fundamentals\/block-json.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">block.json<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>block.json<\/code> file simplifies the process of defining and registering a block by using the same block's definition in JSON format to register the block on both the server and the client (Block Editor).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The diagram below details the basic structure of the <code>block.json<\/code> file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/developer.wordpress.org\/files\/2023\/11\/block-json.png\" title=\"Open block.json diagram image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/11\/block-json.png\">Open block.json diagram image<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n\tTo view a complete block example and its associated <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/block-supports-6aa4dd\/src\/block.json\"><code>block.json<\/code><\/a> file, visit the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/block-supports-6aa4dd\">Block Development Examples<\/a> GitHub repository.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Besides simplifying a block's registration, using a <code>block.json<\/code> has <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#benefits-using-the-metadata-file\">several benefits<\/a>, including improved performance.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/\">Metadata in block.json<\/a> documentation has a comprehensive guide on all the properties you can use in a <code>block.json<\/code> file for a block. This article will cover the most common options, which allow you to specify:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The block's basic metadata.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The files that dictate the block's functionality, appearance, and output.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>How data is stored within the block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The block's setting panels within the user interface.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic metadata of a block<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Using <code>block.json<\/code> properties, you can define how the block will be uniquely identified and what information is displayed in the Block Editor. These properties include:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#api-version\"><code>apiVersion<\/code><\/a>:<\/strong> Specifies the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-api-versions\/\">API<\/a> version the block uses. Use the latest version unless you have specific requirements.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#name\"><code>name<\/code><\/a>:<\/strong>  The unique name of the block, including namespace (e.g., <code>my-plugin\/my-custom-block<\/code>).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#title\"><code>title<\/code><\/a>:<\/strong> The display title for the block, shown in the Inserter.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#category\"><code>category<\/code><\/a>:<\/strong> The category under which the block appears in the Inserter. Common categories include <code>text<\/code>, <code>media<\/code>, <code>design<\/code>, <code>widgets<\/code>, and <code>theme<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#icon\"><code>icon<\/code><\/a>:<\/strong>  An icon representing the block in the Inserter. This can be a <a href=\"https:\/\/developer.wordpress.org\/resource\/dashicons\">Dashicon<\/a> slug or a custom SVG icon.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#description\"><code>description<\/code><\/a>:<\/strong>  A short description of the block, providing more context than the title.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#keywords\"><code>keywords<\/code><\/a>:<\/strong> An array of keywords to help users find the block when searching.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#text-domain\"><code>textdomain<\/code><\/a>:<\/strong> The text domain for the block, used for internationalization.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Files for the block's behavior, output, or style<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>block.json<\/code> file also allows you to specify the essential files for a block's functionality:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#editor-script\"><code>editorScript<\/code><\/a>:<\/strong> A JavaScript file or files for use only in the Block Editor.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#editor-style\"><code>editorStyle<\/code><\/a>:<\/strong> A CSS file or files for styling within the Block Editor.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#script\"><code>script<\/code><\/a>:<\/strong> A JavaScript file or files loaded in both the Block Editor and the front end.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#style\"><code>style<\/code><\/a>:<\/strong> A CSS file or files applied in both the Block Editor and the front end.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#view-script\"><code>viewScript<\/code><\/a>:<\/strong> A JavaScript file or files intended solely for the front end.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For all these properties, you can provide a <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#wpdefinedpath\">file path<\/a> (starting with <code>file:<\/code>), a <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#wpdefinedasset\">handle<\/a> that has been registered using <code>wp_register_script<\/code> or <code>wp_register_style<\/code>, or an array combining both options.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Additionally, the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#render\"><code>render<\/code><\/a> property, <a href=\"https:\/\/make.wordpress.org\/core\/2022\/10\/12\/block-api-changes-in-wordpress-6-1\/\">introduced on WordPress 6.1<\/a>, specifies the path to a PHP template file responsible for generating a <a href=\"\/docs\/getting-started\/fundamentals\/static-dynamic-rendering.md\">dynamically rendered<\/a> block's front-end markup. This approach is used if a <code>$render_callback<\/code> function is not provided to the <code>register_block_type()<\/code> function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Using block <code>attributes<\/code> to store data<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Block <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#attributes\">attributes<\/a> are settings or data assigned to blocks. They can determine various aspects of a block, such as its content, layout, style, and any other specific information you need to store along with your block's structure. If the user changes a block, such as modifying the font size, you need a way to persist these changes. Attributes are the solution.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When registering a new block type, the <code>attributes<\/code> property of <code>block.json<\/code> describes the custom data the block requires and how they're stored in the database. This allows the Block Editor to parse these values correctly and pass the <code>attributes<\/code> to the block's <code>Edit<\/code> component and <code>save<\/code> function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here's an example of three attributes defined in <code>block.json<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\"attributes\": {\n\t\"fallbackCurrentYear\": {\n\t\t\"type\": \"string\"\n\t},\n\t\"showStartingYear\": {\n\t\t\"type\": \"boolean\"\n\t},\n\t\"startingYear\": {\n\t\t\"type\": \"string\"\n\t}\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Blocks are \"delimited\" using HTML-style comment tags that contain specific JSON-like attributes. These delimiters make it possible to recognize block boundaries and parse block attributes when rendering post content or editing a post in the Block Editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The code example below demonstrates the attributes defined in the block delimiter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n<p class=\"wp-block-block-development-examples-copyright-date-block-09aac3\">\u00a9 2020\u20132023<\/p>\n\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>All attributes are serialized and stored in the block's delimiter by default, but this can be configured to suit your needs. Check out the <a href=\"https:\/\/developer.wordpress.org\/news\/2023\/09\/understanding-block-attributes\/\">Understanding Block Attributes<\/a> article to learn more.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Reading and updating attributes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>These <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#attributes\">attributes<\/a> are passed to the block's <code>Edit<\/code> React component for display in the Block Editor, to the <code>save<\/code> function for generating the markup that gets stored in the database, and to any server-side rendering definition for the block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>Edit<\/code> component uniquely possesses the ability to modify these attributes through the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#setattributes\"><code>setAttributes<\/code><\/a> function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following diagram details how attributes are stored, read, and updated in a typical block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/developer.wordpress.org\/files\/2023\/11\/attributes.png\" title=\"Open Attributes diagram image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/11\/attributes.png\">Open Attributes diagram image<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>See how the attributes are passed to the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/copyright-date-block-09aac3\/src\/edit.js\"><code>Edit<\/code><\/a> component, the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/copyright-date-block-09aac3\/src\/save.js\"><code>save<\/code><\/a> function, and <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/copyright-date-block-09aac3\/src\/render.php\"><code>render.php<\/code><\/a> in this <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/copyright-date-block-09aac3\">complete block example<\/a>.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For more information about attributes and how to use them in your custom blocks, visit the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-attributes\/\">Attributes API<\/a> reference page.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Using block supports to enable settings and styles<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Many blocks, including Core blocks, offer similar customization options, such as background color, text color, and padding adjustments.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#supports\"><code>supports<\/code><\/a> property in <code>block.json<\/code> allows a block to declare support for a set of these common customization options. When enabled, users of the block can then adjust things like color or padding directly from the Settings Sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Leveraging these predefined block supports helps ensure your block behaves consistently with Core blocks, eliminating the need to recreate similar functionalities from scratch.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here's an example of color supports defined in <code>block.json<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\"supports\": {\n\t\"color\": {\n\t\t\"text\": true,\n\t\t\"link\": true,\n\t\t\"background\": true\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The use of block supports generates a set of properties that need to be manually added to the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-wrapper\/\">wrapping element of the block<\/a>. This ensures they're properly stored as part of the block data and taken into account when generating the markup of the block that will be delivered to the front end.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following code demonstrates how the attributes and CSS classes generated by enabling block supports are stored in the markup representation of the block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n<p class=\"wp-block-block-development-examples-block-supports-6aa4dd has-accent-4-color has-contrast-background-color has-text-color has-background\">Hello World<\/p>\n\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>See the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/block-supports-6aa4dd\">complete block example<\/a> of the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/block-supports-6aa4dd\/src\/block.json\">code above<\/a>.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For more information about supports and how to use them in your custom blocks, visit the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-supports\/\">Supports API<\/a> reference page.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Additional resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/excalidraw.com\/#json=v1GrIkGsYGKv8P14irBy6,Yy0vl8q7DTTL2VsH5Ww27A\">block.json diagram<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/excalidraw.com\/#json=pSgCZy8q9GbH7r0oz2fL1,MFCLd6ddQHqi_UqNp5ZSgg\">Attributes diagram<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# block.json\n\nThe `block.json` file simplifies the process of defining and registering a block by using the same block's definition in JSON format to register the block on both the server and the client (Block Editor).\n\nThe diagram below details the basic structure of the `block.json` file.\n\n[![Open block.json diagram image](https:\/\/developer.wordpress.org\/files\/2023\/11\/block-json.png)](https:\/\/developer.wordpress.org\/files\/2023\/11\/block-json.png \"Open block.json diagram image\")\n\n<div class=\"callout callout-info\">\n\tTo view a complete block example and its associated <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/block-supports-6aa4dd\/src\/block.json\"><code>block.json<\/code><\/a> file, visit the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/block-supports-6aa4dd\">Block Development Examples<\/a> GitHub repository.\n<\/div>\n\nBesides simplifying a block's registration, using a `block.json` has [several benefits](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#benefits-using-the-metadata-file), including improved performance.\n\nThe [Metadata in block.json](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/) documentation has a comprehensive guide on all the properties you can use in a `block.json` file for a block. This article will cover the most common options, which allow you to specify:\n\n- The block's basic metadata.\n- The files that dictate the block's functionality, appearance, and output.\n- How data is stored within the block.\n- The block's setting panels within the user interface.\n\n## Basic metadata of a block\n\nUsing `block.json` properties, you can define how the block will be uniquely identified and what information is displayed in the Block Editor. These properties include:\n\n- **[`apiVersion`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#api-version):** Specifies the [API](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-api-versions\/) version the block uses. Use the latest version unless you have specific requirements.\n- **[`name`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#name):**  The unique name of the block, including namespace (e.g., `my-plugin\/my-custom-block`).\n- **[`title`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#title):** The display title for the block, shown in the Inserter.\n- **[`category`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#category):** The category under which the block appears in the Inserter. Common categories include `text`, `media`, `design`, `widgets`, and `theme`.\n- **[`icon`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#icon):**  An icon representing the block in the Inserter. This can be a [Dashicon](https:\/\/developer.wordpress.org\/resource\/dashicons) slug or a custom SVG icon.\n- **[`description`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#description):**  A short description of the block, providing more context than the title.\n- **[`keywords`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#keywords):** An array of keywords to help users find the block when searching.\n- **[`textdomain`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#text-domain):** The text domain for the block, used for internationalization.\n\n## Files for the block's behavior, output, or style \n\nThe `block.json` file also allows you to specify the essential files for a block's functionality:\n\n- **[`editorScript`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#editor-script):** A JavaScript file or files for use only in the Block Editor.\n- **[`editorStyle`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#editor-style):** A CSS file or files for styling within the Block Editor.\n- **[`script`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#script):** A JavaScript file or files loaded in both the Block Editor and the front end.\n- **[`style`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#style):** A CSS file or files applied in both the Block Editor and the front end.\n- **[`viewScript`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#view-script):** A JavaScript file or files intended solely for the front end.\n\nFor all these properties, you can provide a [file path](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#wpdefinedpath) (starting with `file:`), a [handle](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#wpdefinedasset) that has been registered using `wp_register_script` or `wp_register_style`, or an array combining both options.\n\nAdditionally, the [`render`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#render) property, [introduced on WordPress 6.1](https:\/\/make.wordpress.org\/core\/2022\/10\/12\/block-api-changes-in-wordpress-6-1\/), specifies the path to a PHP template file responsible for generating a [dynamically rendered](\/docs\/getting-started\/fundamentals\/static-dynamic-rendering.md) block's front-end markup. This approach is used if a `$render_callback` function is not provided to the `register_block_type()` function.\n\n## Using block `attributes` to store data\n\nBlock [attributes](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#attributes) are settings or data assigned to blocks. They can determine various aspects of a block, such as its content, layout, style, and any other specific information you need to store along with your block's structure. If the user changes a block, such as modifying the font size, you need a way to persist these changes. Attributes are the solution. \n\nWhen registering a new block type, the `attributes` property of `block.json` describes the custom data the block requires and how they're stored in the database. This allows the Block Editor to parse these values correctly and pass the `attributes` to the block's `Edit` component and `save` function.\n\nHere's an example of three attributes defined in `block.json`:\n\n```json\n\"attributes\": {\n\t\"fallbackCurrentYear\": {\n\t\t\"type\": \"string\"\n\t},\n\t\"showStartingYear\": {\n\t\t\"type\": \"boolean\"\n\t},\n\t\"startingYear\": {\n\t\t\"type\": \"string\"\n\t}\n},\n```\n\nBlocks are \"delimited\" using HTML-style comment tags that contain specific JSON-like attributes. These delimiters make it possible to recognize block boundaries and parse block attributes when rendering post content or editing a post in the Block Editor. \n\nThe code example below demonstrates the attributes defined in the block delimiter. \n\n```html\n<!-- wp:block-development-examples\/copyright-date-block-09aac3 {\"fallbackCurrentYear\":\"2023\",\"showStartingYear\":true,\"startingYear\":\"2020\"} -->\n<p class=\"wp-block-block-development-examples-copyright-date-block-09aac3\">\u00a9 2020\u20132023<\/p>\n<!-- \/wp:block-development-examples\/copyright-date-block-09aac3 -->\n```\n \nAll attributes are serialized and stored in the block's delimiter by default, but this can be configured to suit your needs. Check out the [Understanding Block Attributes](https:\/\/developer.wordpress.org\/news\/2023\/09\/understanding-block-attributes\/) article to learn more.\n\n### Reading and updating attributes \n\nThese [attributes](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#attributes) are passed to the block's `Edit` React component for display in the Block Editor, to the `save` function for generating the markup that gets stored in the database, and to any server-side rendering definition for the block.\n\nThe `Edit` component uniquely possesses the ability to modify these attributes through the [`setAttributes`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#setattributes) function.\n\nThe following diagram details how attributes are stored, read, and updated in a typical block.\n\n[![Open Attributes diagram image](https:\/\/developer.wordpress.org\/files\/2023\/11\/attributes.png)](https:\/\/developer.wordpress.org\/files\/2023\/11\/attributes.png \"Open Attributes diagram image\")\n\n_See how the attributes are passed to the [`Edit`](https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/copyright-date-block-09aac3\/src\/edit.js) component, the [`save`](https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/copyright-date-block-09aac3\/src\/save.js) function, and [`render.php`](https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/copyright-date-block-09aac3\/src\/render.php) in this [complete block example](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/copyright-date-block-09aac3)._\n\nFor more information about attributes and how to use them in your custom blocks, visit the [Attributes API](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-attributes\/) reference page. \n\n## Using block supports to enable settings and styles\n\nMany blocks, including Core blocks, offer similar customization options, such as background color, text color, and padding adjustments.\n\nThe [`supports`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/#supports) property in `block.json` allows a block to declare support for a set of these common customization options. When enabled, users of the block can then adjust things like color or padding directly from the Settings Sidebar.\n\nLeveraging these predefined block supports helps ensure your block behaves consistently with Core blocks, eliminating the need to recreate similar functionalities from scratch.\n\nHere's an example of color supports defined in `block.json`:\n\n```json\n\"supports\": {\n\t\"color\": {\n\t\t\"text\": true,\n\t\t\"link\": true,\n\t\t\"background\": true\n\t}\n}\n```\n\nThe use of block supports generates a set of properties that need to be manually added to the [wrapping element of the block](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-wrapper\/). This ensures they're properly stored as part of the block data and taken into account when generating the markup of the block that will be delivered to the front end.\n\nThe following code demonstrates how the attributes and CSS classes generated by enabling block supports are stored in the markup representation of the block.\n\n```html\n<!-- wp:block-development-examples\/block-supports-6aa4dd {\"backgroundColor\":\"contrast\",\"textColor\":\"accent-4\"} -->\n<p class=\"wp-block-block-development-examples-block-supports-6aa4dd has-accent-4-color has-contrast-background-color has-text-color has-background\">Hello World<\/p>\n<!-- \/wp:block-development-examples\/block-supports-6aa4dd -->\n```\n\n_See the [complete block example](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/block-supports-6aa4dd) of the [code above](https:\/\/github.com\/WordPress\/block-development-examples\/blob\/trunk\/plugins\/block-supports-6aa4dd\/src\/block.json)._\n\nFor more information about supports and how to use them in your custom blocks, visit the [Supports API](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-supports\/) reference page. \n\n\n## Additional resources\n\n- [block.json diagram](https:\/\/excalidraw.com\/#json=v1GrIkGsYGKv8P14irBy6,Yy0vl8q7DTTL2VsH5Ww27A)\n- [Attributes diagram](https:\/\/excalidraw.com\/#json=pSgCZy8q9GbH7r0oz2fL1,MFCLd6ddQHqi_UqNp5ZSgg)"
    },
    {
        "path": "\/markdown\/getting-started\/fundamentals\/markup-representation-block.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Markup representation of a block<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Blocks are stored in the database or within HTML templates using a unique <a href=\"https:\/\/developer.wordpress.org\/block-editor\/explanations\/architecture\/key-concepts\/#data-and-attributes\">HTML-based syntax<\/a>, distinguished by HTML comments that serve as clear block delimiters. This ensures that block markup is technically valid HTML.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here are a few guidelines for the markup that defines a block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Core blocks begin with the <code>wp:<\/code> prefix, followed by the block name (e.g., <code>wp:image<\/code>). Notably, the <code>core<\/code> namespace is omitted.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Custom blocks begin with the <code>wp:<\/code> prefix, followed by the block namespace and name (e.g., <code>wp:namespace\/name<\/code>).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The comment can be a single line, self-closing, or wrapper for HTML content.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Block settings and attributes are stored as a JSON object inside the block comment.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The following is the simplified markup representation of an Image block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n<figure class=\"wp-block-image size-large\">\n    <img src=\"source.jpg\" alt=\"\">\n<\/figure>\n\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The markup for a block is crucial both in the Block Editor and for displaying the block on the front end:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>WordPress analyzes the block's markup within the Editor to extract its data and present the editable version to the user.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>On the front end, WordPress again parses the markup to extract data and render the final HTML output.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\n    Refer to the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/explanations\/architecture\/data-flow\/\">Data Flow<\/a> article for a more in-depth look at how block data is parsed in WordPress.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>When a block is saved, the <code>save<\/code> function\u2014defined when the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/registration-of-a-block\/#registration-of-the-block-with-javascript-client-side\">block is registered in the client<\/a>\u2014is executed to generate the markup stored in the database, wrapped in block delimiter comments. For dynamically rendered blocks, which typically set <code>save<\/code> to <code>null<\/code>, only a placeholder comment with block attributes is saved.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here is the markup representation of a dynamically rendered block (<code>save<\/code> = <code>null<\/code>). Notice there is no HTML markup besides the comment.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When a block has a <code>save<\/code> function, the Block Editor checks that the markup created by the <code>save<\/code> function is identical to the block's markup saved to the database:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Discrepancies will trigger a <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#validation\">validation error<\/a>, often due to changes in the <code>save<\/code> function's output.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Developers can address potential validation issues by implementing <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-deprecation\/\">block deprecations<\/a> to account for changes.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>As the example above shows, the stored markup is minimal for dynamically rendered blocks. Generally, this is just a delimiter comment containing block attributes, which is not subject to the Block Editor's validation. This approach reflects the dynamic nature of these blocks, where the actual HTML is generated server-side and is not stored in the database.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Additional resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/explanations\/architecture\/data-flow\/\">Data Flow and Data Format<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/news\/2023\/02\/27\/static-vs-dynamic-blocks-whats-the-difference\/\">Static vs. dynamic blocks: What\u2019s the difference?<\/a> | Developer Blog<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/news\/2023\/03\/10\/block-deprecation-a-tutorial\/\">Block deprecation \u2013 a tutorial<\/a> | Developer Blog<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/themes\/templates\/introduction-to-templates\/#block-markup\">Introduction to Templates > Block markup<\/a> | Theme Handbook<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Markup representation of a block\n\nBlocks are stored in the database or within HTML templates using a unique [HTML-based syntax](https:\/\/developer.wordpress.org\/block-editor\/explanations\/architecture\/key-concepts\/#data-and-attributes), distinguished by HTML comments that serve as clear block delimiters. This ensures that block markup is technically valid HTML.\n\nHere are a few guidelines for the markup that defines a block:\n\n- Core blocks begin with the `wp:` prefix, followed by the block name (e.g., `wp:image`). Notably, the `core` namespace is omitted.\n- Custom blocks begin with the `wp:` prefix, followed by the block namespace and name (e.g., `wp:namespace\/name`).\n- The comment can be a single line, self-closing, or wrapper for HTML content.\n- Block settings and attributes are stored as a JSON object inside the block comment.\n\nThe following is the simplified markup representation of an Image block:\n\n```html\n<!-- wp:image {\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large\">\n    <img src=\"source.jpg\" alt=\"\" \/>\n<\/figure>\n<!-- \/wp:image -->\n```\n\nThe markup for a block is crucial both in the Block Editor and for displaying the block on the front end:\n\n- WordPress analyzes the block's markup within the Editor to extract its data and present the editable version to the user.\n- On the front end, WordPress again parses the markup to extract data and render the final HTML output.\n\n<div class=\"callout callout-tip\">\n    Refer to the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/explanations\/architecture\/data-flow\/\">Data Flow<\/a> article for a more in-depth look at how block data is parsed in WordPress.\n<\/div>\n\nWhen a block is saved, the `save` function\u2014defined when the [block is registered in the client](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/registration-of-a-block\/#registration-of-the-block-with-javascript-client-side)\u2014is executed to generate the markup stored in the database, wrapped in block delimiter comments. For dynamically rendered blocks, which typically set `save` to `null`, only a placeholder comment with block attributes is saved.\n\nHere is the markup representation of a dynamically rendered block (`save` = `null`). Notice there is no HTML markup besides the comment.\n\n```html\n<!-- wp:latest-posts {\"postsToShow\":4,\"displayPostDate\":true} \/-->\n```\n\nWhen a block has a `save` function, the Block Editor checks that the markup created by the `save` function is identical to the block's markup saved to the database:\n\n- Discrepancies will trigger a [validation error](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#validation), often due to changes in the `save` function's output.\n- Developers can address potential validation issues by implementing [block deprecations](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-deprecation\/) to account for changes.\n\nAs the example above shows, the stored markup is minimal for dynamically rendered blocks. Generally, this is just a delimiter comment containing block attributes, which is not subject to the Block Editor's validation. This approach reflects the dynamic nature of these blocks, where the actual HTML is generated server-side and is not stored in the database.\n\n## Additional resources\n\n- [Data Flow and Data Format](https:\/\/developer.wordpress.org\/block-editor\/explanations\/architecture\/data-flow\/)\n- [Static vs. dynamic blocks: What\u2019s the difference?](https:\/\/developer.wordpress.org\/news\/2023\/02\/27\/static-vs-dynamic-blocks-whats-the-difference\/) | Developer Blog\n- [Block deprecation \u2013 a tutorial](https:\/\/developer.wordpress.org\/news\/2023\/03\/10\/block-deprecation-a-tutorial\/) | Developer Blog\n- [Introduction to Templates > Block markup](https:\/\/developer.wordpress.org\/themes\/templates\/introduction-to-templates\/#block-markup) | Theme Handbook "
    },
    {
        "path": "\/markdown\/getting-started\/faq.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Frequently Asked Questions<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>What follows is a set of questions that have come up from the last few years of Gutenberg development. If you have any questions you\u2019d like to have answered and included here, <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\">just open up a GitHub issue<\/a> with your question. We\u2019d love the chance to answer and provide clarity to questions we might not have thought to answer. For a look back historically, please see Matt's November 2018 post <a href=\"https:\/\/ma.tt\/2018\/11\/a-gutenberg-faq\/\">WordPress 5.0: A Gutenberg FAQ<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The Gutenberg Project<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">What is Gutenberg?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>\u201cGutenberg\u201d is the name of the project to create a new editor experience for WordPress \u2014 contributors have been working on it since January 2017 and it\u2019s one of the most significant changes to WordPress in years. It\u2019s built on the idea of using \u201cblocks\u201d to write and design posts and pages. This will serve as the foundation for future improvements to WordPress, including blocks as a way not just to design posts and pages, but also entire sites. The overall goal is to simplify the first-time user experience of WordPress \u2014 for those who are writing, editing, publishing, and designing web pages. The editing experience is intended to give users a better visual representation of what their post or page will look like when they hit publish. Originally, this was the kickoff goal:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>The editor will endeavour to create a new page and post building experience that makes writing rich posts effortless, and has \u201cblocks\u201d to make it easy what today might take shortcodes, custom HTML, or \u201cmystery meat\u201d embed discovery.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Key takeaways include the following points:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Authoring richly laid-out posts is a key strength of WordPress.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>By embracing blocks as an interaction paradigm, we can unify multiple different interfaces into one. Instead of learning how to write shortcodes and custom HTML, or pasting URLs to embed media, there's a common, reliable flow for inserting any kind of content.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>\u201cMystery meat\u201d refers to hidden features in software, features that you have to discover. WordPress already supports a large number of blocks and 30+ embeds, so let's surface them.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Gutenberg is developed on <a href=\"https:\/\/github.com\/WordPress\/gutenberg\">GitHub<\/a> under the WordPress organization. The block editor has been available in core WordPress since 5.0. If you want to test upcoming features from Gutenberg project, it is <a href=\"https:\/\/wordpress.org\/plugins\/gutenberg\/\">available in the plugin repository<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">What\u2019s on the roadmap long term?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There are four phases of Gutenberg which you can see on the <a href=\"https:\/\/wordpress.org\/about\/roadmap\/\">official WordPress roadmap<\/a>. As of writing this, we\u2019re currently in phase 2:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Easier Editing \u2014 Already available in WordPress since 5.0, with ongoing improvements.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Customization \u2014 Full Site editing, Block Patterns, Block Directory, Block based themes.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Collaboration \u2014 A more intuitive way to co-author content<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Multi-lingual \u2014 Core implementation for Multi-lingual sites<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">When was Gutenberg started?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The editor focus started in early 2017 with the first three months spent designing, planning, prototyping, and testing prototypes, to help us inform how to approach this project. The first plugin was launched during WordCamp Europe in June 2017.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">When was Gutenberg merged into WordPress?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Gutenberg was first merged into <a href=\"https:\/\/wordpress.org\/news\/2018\/12\/bebo\/\">WordPress 5.0<\/a> in December 2018. See <a href=\"https:\/\/developer.wordpress.org\/block-editor\/principles\/versions-in-wordpress\/\">the versions in WordPress page<\/a> for a complete list of Gutenberg plugin versions merged into WordPress core releases.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">WordPress is already the world's most popular publishing platform. Why change the editor at all?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Editor is where most of the action happens in WordPress\u2019s daily use, and it was a place where we could polish and perfect the block experience in a contained environment. Further, as an open-source project, we believe that it is critical for WordPress to continue to innovate and keep working to make the core experience intuitive and enjoyable for all users. As a community project, Gutenberg has the potential to do just that, and we\u2019re excited to pursue this goal together. If you\u2019d like to test, contribute, or offer feedback, we welcome you to <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\">share what you find on GitHub<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The Editing Experience<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">What are \u201cblocks\u201d and why are we using them?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The classic WordPress editor is an open text window\u2014it\u2019s always been a wonderful blank canvas for writing, but when it comes to building posts and pages with images, multimedia, embedded content from social media, polls, and other elements, it required a mix of different approaches that were not always intuitive:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Media library\/HTML for images, multimedia and approved files.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Pasted links for embeds.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Shortcodes for specialized assets from plugins.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Featured images for the image at the top of a post or page.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Excerpts for subheadings.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Widgets for content on the side of a page.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>As we thought about these uses and how to make them obvious and consistent, we began to embrace the concept of \u201cblocks.\u201d All of the above items could be blocks: easy to search and understand, and easy to dynamically shift around the page. The block concept is very powerful, and when designed thoughtfully, can offer an outstanding editing and publishing experience. Ultimately, the idea with blocks is to create a new common language across WordPress, a new way to connect users to plugins, and replace a number of older content types \u2014 things like shortcodes and widgets \u2014 that one usually has to be well-versed in the idiosyncrasies of WordPress to understand.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">What is the writing experience like?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Our goal with Gutenberg is not just to create a seamless post- and page-building experience. We also want to ensure that it provides a seamless writing experience. To test this out yourself, <a href=\"https:\/\/wordpress.org\/gutenberg\/\">head to this demo and give it a try<\/a>!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Is Gutenberg built on top of TinyMCE?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>No. <a href=\"https:\/\/www.tinymce.com\/\">TinyMCE<\/a> is only used for the \"Classic\" block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Are there Keyboard Shortcuts for Gutenberg?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Yes. There are a lot! There is a help modal showing all available keyboard shortcuts.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can see the whole list going to the top right corner menu of the new editor and clicking on \u201cKeyboard Shortcuts\u201d (or by using the keyboard shortcut &lt;kbd>Shift&lt;\/kbd>+&lt;kbd>Alt&lt;\/kbd>+&lt;kbd>H&lt;\/kbd> on Linux\/Windows and &lt;kbd>\u2303&lt;\/kbd>&lt;kbd>\u2325&lt;\/kbd>&lt;kbd>H&lt;\/kbd> on macOS).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is the canonical list of keyboard shortcuts:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Editor shortcuts<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Shortcut description<\/th>\n\t\t\t<th>Linux\/Windows shortcut<\/th>\n\t\t\t<th>macOS shortcut<\/th>\n\t\t<\/tr>\n\t<\/thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Display keyboard shortcuts.<\/td>\n\t\t\t<td><kbd>Shift<\/kbd>+<kbd>Alt<\/kbd>+<kbd>H<\/kbd><\/td>\n\t\t\t<td><kbd>\u2303<\/kbd><kbd>\u2325<\/kbd><kbd>H<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Save your changes.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>S<\/kbd><\/td>\n\t\t\t<td><kbd>\u2318<\/kbd><kbd>S<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Undo your last changes.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Z<\/kbd><\/td>\n\t\t\t<td><kbd>\u2318<\/kbd><kbd>Z<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Redo your last undo.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>Z<\/kbd><\/td>\n\t\t\t<td><kbd>\u21e7<\/kbd><kbd>\u2318<\/kbd><kbd>Z<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Show or hide the Settings sidebar.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>,<\/kbd><\/td>\n\t\t\t<td><kbd>\u21e7<\/kbd><kbd>\u2318<\/kbd><kbd>,<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Open the list view menu.<\/td>\n\t\t\t<td><kbd>Shift<\/kbd>+<kbd>Alt<\/kbd>+<kbd>O<\/kbd><\/td>\n\t\t\t<td><kbd>\u2303<\/kbd><kbd>\u2325<\/kbd><kbd>O<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Navigate to the next part of the editor.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>`<\/kbd><\/td>\n\t\t\t<td><kbd>\u2303<\/kbd><kbd>`<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Navigate to the previous part of the editor.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>`<\/kbd><\/td>\n\t\t\t<td><kbd>\u2303<\/kbd><kbd>\u21e7<\/kbd><kbd>`<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Navigate to the next part of the editor (alternative).<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Alt<\/kbd>+<kbd>N<\/kbd><\/td>\n\t\t\t<td><kbd>\u2303<\/kbd><kbd>\u2325<\/kbd><kbd>N<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Navigate to the previous part of the editor (alternative).<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Alt<\/kbd>+<kbd>P<\/kbd><\/td>\n\t\t\t<td><kbd>\u2303<\/kbd><kbd>\u2325<\/kbd><kbd>P<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Navigate to the nearest toolbar.<\/td>\n\t\t\t<td><kbd>Alt<\/kbd>+<kbd>F10<\/kbd><\/td>\n\t\t\t<td><kbd>\u2325<\/kbd><kbd>F10<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Switch between visual editor and code editor.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>Alt<\/kbd>+<kbd>M<\/kbd><\/td>\n\t\t\t<td><kbd>\u21e7<\/kbd><kbd>\u2325<\/kbd><kbd>\u2318<\/kbd><kbd>M<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Toggle fullscreen mode.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Alt<\/kbd>+<kbd>Shift<\/kbd>+<kbd>F<\/kbd><\/td>\n\t\t\t<td><kbd>\u21e7<\/kbd><kbd>\u2325<\/kbd><kbd>\u2318<\/kbd><kbd>F<\/kbd><\/td>\n\t\t<\/tr>\n\t<\/tbody>\n<\/table>\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Selection shortcuts<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Shortcut description<\/th>\n\t\t\t<th>Linux\/Windows shortcut<\/th>\n\t\t\t<th>macOS shortcut<\/th>\n\t\t<\/tr>\n\t<\/thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Select all text when typing. Press again to select all blocks.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>A<\/kbd><\/td>\n\t\t\t<td><kbd>\u2318<\/kbd><kbd>A<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Clear selection.<\/td>\n\t\t\t<td><kbd>Esc<\/kbd><\/td>\n\t\t\t<td><kbd>Esc<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Select text across multiple blocks.<\/td>\n\t\t\t<td><kbd>Shift<\/kbd>+<kbd>Arrow (\u21e6, \u21e7, \u21e8, \u21e9)<\/kbd><\/td>\n\t\t\t<td><kbd>Shift<\/kbd>+<kbd>Arrow (\u21e6, \u21e7, \u21e8, \u21e9)<\/kbd><\/td>\n\t\t<\/tr>\n\t<\/tbody>\n<\/table>\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Block shortcuts<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Shortcut description<\/th>\n\t\t\t<th>Linux\/Windows shortcut<\/th>\n\t\t\t<th>macOS shortcut<\/th>\n\t\t<\/tr>\n\t<\/thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Duplicate the selected block(s).<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>D<\/kbd><\/td>\n\t\t\t<td><kbd>\u21e7<\/kbd><kbd>\u2318<\/kbd><kbd>D<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Remove the selected block(s).<\/td>\n\t\t\t<td><kbd>Shift<\/kbd>+<kbd>Alt<\/kbd>+<kbd>Z<\/kbd><\/td>\n\t\t\t<td><kbd>\u2303<\/kbd><kbd>\u2325<\/kbd><kbd>Z<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Insert a new block before the selected block(s).<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Alt<\/kbd>+<kbd>T<\/kbd><\/td>\n\t\t\t<td><kbd>\u2325<\/kbd><kbd>\u2318<\/kbd><kbd>T<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Insert a new block after the selected block(s).<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Alt<\/kbd>+<kbd>Y<\/kbd><\/td>\n\t\t\t<td><kbd>\u2325<\/kbd><kbd>\u2318<\/kbd><kbd>Y<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Move the selected block(s) up.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Alt<\/kbd>+<kbd>Shift<\/kbd>+<kbd>T<\/kbd><\/td>\n\t\t\t<td><kbd>\u2325<\/kbd><kbd>\u2318<\/kbd><kbd>\u21e7<\/kbd><kbd>T<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Move the selected block(s) down.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Alt<\/kbd>+<kbd>Shift<\/kbd>+<kbd>Y<\/kbd><\/td>\n\t\t\t<td><kbd>\u2325<\/kbd><kbd>\u2318<\/kbd><kbd>\u21e7<\/kbd><kbd>Y<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Change the block type after adding a new paragraph.<\/td>\n\t\t\t<td><kbd>\/<\/kbd><\/td>\n\t\t\t<td><kbd>\/<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Remove multiple selected blocks.<\/td>\n\t\t\t<td><kbd>del<\/kbd><kbd>backspace<\/kbd><\/td>\n\t\t\t<td><kbd>del<\/kbd><kbd>backspace<\/kbd><\/td>\n\t\t<\/tr>\n\t<\/tbody>\n<\/table>\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Text formatting<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Shortcut description<\/th>\n\t\t\t<th>Linux\/Windows shortcut<\/th>\n\t\t\t<th>macOS shortcut<\/th>\n\t\t<\/tr>\n\t<\/thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Make the selected text bold.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>B<\/kbd><\/td>\n\t\t\t<td><kbd>\u2318<\/kbd><kbd>B<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Make the selected text italic.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>I<\/kbd><\/td>\n\t\t\t<td><kbd>\u2318<\/kbd><kbd>I<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Underline the selected text.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>U<\/kbd><\/td>\n\t\t\t<td><kbd>\u2318<\/kbd><kbd>U<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Convert the selected text into a link.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>K<\/kbd><\/td>\n\t\t\t<td><kbd>\u2318<\/kbd><kbd>K<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Remove a link.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>K<\/kbd><\/td>\n\t\t\t<td><kbd>\u21e7<\/kbd><kbd>\u2318<\/kbd><kbd>K<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Add a strikethrough to the selected text.<\/td>\n\t\t\t<td><kbd>Shift<\/kbd>+<kbd>Alt<\/kbd>+<kbd>D<\/kbd><\/td>\n\t\t\t<td><kbd>\u2303<\/kbd><kbd>\u2325<\/kbd><kbd>D<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Display the selected text in a monospaced font.<\/td>\n\t\t\t<td><kbd>Shift<\/kbd>+<kbd>Alt<\/kbd>+<kbd>X<\/kbd><\/td>\n\t\t\t<td><kbd>\u2303<\/kbd><kbd>\u2325<\/kbd><kbd>X<\/kbd><\/td>\n\t\t<\/tr>\n\t<\/tbody>\n<\/table>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Here is a brief animation illustrating how to find and use the keyboard shortcuts:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/make.wordpress.org\/core\/files\/2020\/07\/keyboard-shortcuts.gif\" alt=\"\"\/><figcaption class=\"wp-element-caption\">GIF showing how to access keyboard shortcuts<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Does Gutenberg support columns?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Yes, a columns block is available in Gutenberg.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Does Gutenberg support nested blocks?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Yes, it is supported. You can have multiple levels of nesting \u2013 blocks within blocks within blocks. See the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/tutorials\/block-tutorial\/nested-blocks-inner-blocks\/\">Nested Block Tutorial<\/a> for more information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Does drag and drop work for rearranging blocks?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Yes, you can drag and drop blocks to rearrange their order.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The Development Experience<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">How do I make my own block?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The best place to start is the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/create-block\/\">Create a Block Tutorial<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Does Gutenberg involve editing posts\/pages in the front end?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>No, we are designing Gutenberg primarily as a replacement for the post and page editing screens. That said, front-end editing is often confused with an editor that looks exactly like the front end. And that is something that Gutenberg will allow as themes customize individual blocks and provide those styles to the editor. Since content is designed to be distributed across so many different experiences\u2014from desktop and mobile to full-text feeds and syndicated article platforms\u2014we believe it's not ideal to create or design posts from just one front-end experience.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Given Gutenberg is built in JavaScript, how do old meta boxes (PHP) work?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>See the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/metabox\/\">Meta Box Tutorial<\/a> for more information on using Meta boxes with the new block editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">How can plugins extend the Gutenberg UI?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The main extension point we want to emphasize is creating new blocks. Blocks are added to the block editor using plugins, see the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-stared\/create-block\/\">Create a Block Tutorial<\/a> to get started.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Are Custom Post Types still supported?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Indeed. There are multiple ways in which custom post types can leverage Gutenberg. The plan is to allow them to specify the blocks they support, as well as defining a default block for the post type. It's not currently the case, but if a post type disables the content field, the \u201cadvanced\u201d section at the bottom would fill the page.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Styles<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Can themes <em>style<\/em> blocks?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Yes. Blocks can provide their own styles, which themes can add to or override, or they can provide no styles at all and rely fully on what the theme provides.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">How do block styles work in both the front-end and back-end?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Blocks are able to provide base structural CSS styles, and themes can add styles on top of this. Some blocks, like a Separator (<code>&lt;hr\/><\/code>), likely don't need any front-end styles, while others, like a Gallery, need a few.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Other features, like the new <em>wide<\/em> and <em>full-wide<\/em> alignment options, are simply CSS classes applied to blocks that offer this alignment. We are looking at how a theme can opt into this feature, for example using <code>add_theme_support<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is currently a work in progress and we recommend reviewing the <a href=\"https:\/\/developer.wordpress.org\/themes\/block-themes\/\">block based theme documentation<\/a> to learn more.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">What are block variations? Are they the same as block styles?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>No, <a href=\"\/docs\/reference-guides\/block-api\/block-variations.md\">block variations<\/a> are different versions of a single base block, sharing a similar functionality but with slight differences in their implementation or settings (attributes, InnerBlocks, etc.). Block variations are transparent for users, and once there is a registered block variation, it will appear as a new block. For example, the <code>embed<\/code> block registers different block variations to embed content from specific providers.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Meanwhile, <a href=\"\/docs\/reference-guides\/filters\/block-filters.md#block-style-variations\">block styles<\/a> allow you to provide alternative styles to existing blocks, and they work by adding a <code>className<\/code> to the block\u2019s wrapper. Once a block has registered block styles, a block style selector will appear in its sidebar so that users can choose among the different registered styles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">How do editor styles work?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Regular editor styles are opt-in and work as is in most cases. Themes can also load extra stylesheets by using the following hook:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function gutenbergtheme_editor_styles() {\n    wp_enqueue_style( 'gutenbergtheme-blocks-style', get_template_directory_uri() . '\/blocks.css');\n}\nadd_action( 'enqueue_block_editor_assets', 'gutenbergtheme_editor_styles' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>See:<\/em> <a href=\"\/docs\/how-to-guides\/themes\/theme-support.md#editor-styles\">Editor Styles<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Compatibility<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">What browsers does Gutenberg support?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Gutenberg works in modern browsers.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/browser-support\/\">list of supported browsers can be found in the Make WordPress handbook<\/a>. The term \u201cmodern browsers\u201d generally refers to the <em>current and previous two versions<\/em> of each major browser.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Since WordPress 5.8, Gutenberg no longer supports any version of Internet Explorer.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Should I be concerned that Gutenberg will make my plugin obsolete?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The goal of Gutenberg is not to put anyone out of business. It's to evolve WordPress so there's more business to be had in the future, for everyone.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Aside from enabling a rich post and page building experience, a meta goal is to <em>move WordPress forward<\/em> as a platform. Not only by modernizing the UI, but by modernizing the foundation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We realize it's a big change. We also think there will be many new opportunities for plugins. WordPress is likely to ship with a range of basic blocks, but there will be plenty of room for highly tailored premium plugins to augment existing blocks or add new blocks to the mix.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Is it possible to opt out of Gutenberg for my site?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There is a \u201cClassic\u201d block, which is virtually the same as the current editor, except in block form.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There is also the <a href=\"https:\/\/wordpress.org\/plugins\/classic-editor\/\">Classic Editor plugin<\/a> which restores the previous editor, see the plugin for more information. The WordPress Core team has committed to supporting the Classic Editor plugin <a href=\"https:\/\/make.wordpress.org\/core\/2018\/11\/07\/classic-editor-plugin-support-window\/\">until December 2021<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">How do custom TinyMCE buttons work in Gutenberg?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Custom TinyMCE buttons still work in the \u201cClassic\u201d block, which is a block version of the classic editor you know today.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Gutenberg comes with a new universal inserter tool, which gives you access to every block available, searchable, sorted by recency and categories. This inserter tool levels the playing field for every plugin that adds content to the editor, and provides a single interface to learn how to use.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">How do shortcodes work in Gutenberg?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Shortcodes continue to work as they do now.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>However we see the block as an evolution of the <code>[shortcode]<\/code>. Instead of having to type out code, you can use the universal inserter tray to pick a block and get a richer interface for both configuring the block and previewing it. We would recommend people eventually upgrade their shortcodes to be blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Should I move shortcodes to content blocks?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We think so for a variety of reasons including but not limited to:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Blocks have visual editing built-in which creates a more rich, dynamic experience for building your site.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Blocks are simply html and don\u2019t persist things the browser doesn't understand on the front-end. In comparison, if you disable a plugin that powers a shortcode, you end up with strange visuals on the front-end (often just showing the shortcode in plain text).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Blocks will be discovered more readily with the launch of the block directory in a way shortcodes never could be allowing for more people to get more functionality.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Ultimately, Blocks are designed to be visually representative of the final look, and, with the launch of the Block Directory in 5.5, they will become the expected way in which users will discover and insert content in WordPress.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Miscellaneous<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Is Gutenberg made to be properly accessible?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Accessibility is not an afterthought. Not every aspect of Gutenberg is accessible at the moment. You can check logged issues <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/labels\/Accessibility%20%28a11y%29\">here<\/a>. We understand that WordPress is for everyone, and that accessibility is about inclusion. This is a key value for us.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you would like to contribute to the accessibility of Gutenberg, we can always use more people to test and contribute.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">How is data stored? I've seen HTML comments. What is their purpose?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Our approach\u2014as outlined in <a href=\"https:\/\/make.wordpress.org\/core\/2017\/01\/17\/editor-technical-overview\/\">the technical overview introduction<\/a>\u2014is to augment the existing data format in a way that doesn\u2019t break the decade-and-a-half-fabric of content WordPress provides. In other terms, this optimizes for a format that prioritizes human readability (the HTML document of the web) and easy-to-render-anywhere over a machine convenient file (JSON in post-meta) that benefits the editing context primarily.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This also <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\/1516\">gives us the flexibility<\/a> to store those blocks that are inherently separate from the content stream (reusable pieces like widgets or small post type elements) elsewhere, and just keep token references for their placement.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We suggest you look at the <a href=\"\/docs\/getting-started\/architecture\/key-concepts.md\">Gutenberg key concepts<\/a> to learn more about how this aspect of the project works.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">How can I parse the post content back out into blocks in PHP or JS?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In JS:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>var blocks = wp.blocks.parse( postContent );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In PHP:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$blocks = parse_blocks( $post_content );\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# Frequently Asked Questions\n\nWhat follows is a set of questions that have come up from the last few years of Gutenberg development. If you have any questions you\u2019d like to have answered and included here, [just open up a GitHub issue](https:\/\/github.com\/WordPress\/gutenberg\/issues) with your question. We\u2019d love the chance to answer and provide clarity to questions we might not have thought to answer. For a look back historically, please see Matt's November 2018 post [WordPress 5.0: A Gutenberg FAQ](https:\/\/ma.tt\/2018\/11\/a-gutenberg-faq\/).\n\n## The Gutenberg Project\n\n### What is Gutenberg?\n\n\u201cGutenberg\u201d is the name of the project to create a new editor experience for WordPress \u2014 contributors have been working on it since January 2017 and it\u2019s one of the most significant changes to WordPress in years. It\u2019s built on the idea of using \u201cblocks\u201d to write and design posts and pages. This will serve as the foundation for future improvements to WordPress, including blocks as a way not just to design posts and pages, but also entire sites. The overall goal is to simplify the first-time user experience of WordPress \u2014 for those who are writing, editing, publishing, and designing web pages. The editing experience is intended to give users a better visual representation of what their post or page will look like when they hit publish. Originally, this was the kickoff goal:\n\n> The editor will endeavour to create a new page and post building experience that makes writing rich posts effortless, and has \u201cblocks\u201d to make it easy what today might take shortcodes, custom HTML, or \u201cmystery meat\u201d embed discovery.\n\nKey takeaways include the following points:\n\n-   Authoring richly laid-out posts is a key strength of WordPress.\n-   By embracing blocks as an interaction paradigm, we can unify multiple different interfaces into one. Instead of learning how to write shortcodes and custom HTML, or pasting URLs to embed media, there's a common, reliable flow for inserting any kind of content.\n-   \u201cMystery meat\u201d refers to hidden features in software, features that you have to discover. WordPress already supports a large number of blocks and 30+ embeds, so let's surface them.\n\nGutenberg is developed on [GitHub](https:\/\/github.com\/WordPress\/gutenberg) under the WordPress organization. The block editor has been available in core WordPress since 5.0. If you want to test upcoming features from Gutenberg project, it is [available in the plugin repository](https:\/\/wordpress.org\/plugins\/gutenberg\/).\n\n### What\u2019s on the roadmap long term?\n\nThere are four phases of Gutenberg which you can see on the [official WordPress roadmap](https:\/\/wordpress.org\/about\/roadmap\/). As of writing this, we\u2019re currently in phase 2:\n\n1. Easier Editing \u2014 Already available in WordPress since 5.0, with ongoing improvements.\n2. Customization \u2014 Full Site editing, Block Patterns, Block Directory, Block based themes.\n3. Collaboration \u2014 A more intuitive way to co-author content\n4. Multi-lingual \u2014 Core implementation for Multi-lingual sites\n\n### When was Gutenberg started?\n\nThe editor focus started in early 2017 with the first three months spent designing, planning, prototyping, and testing prototypes, to help us inform how to approach this project. The first plugin was launched during WordCamp Europe in June 2017.\n\n### When was Gutenberg merged into WordPress?\n\nGutenberg was first merged into [WordPress 5.0](https:\/\/wordpress.org\/news\/2018\/12\/bebo\/) in December 2018. See [the versions in WordPress page](https:\/\/developer.wordpress.org\/block-editor\/principles\/versions-in-wordpress\/) for a complete list of Gutenberg plugin versions merged into WordPress core releases.\n\n### WordPress is already the world's most popular publishing platform. Why change the editor at all?\n\nThe Editor is where most of the action happens in WordPress\u2019s daily use, and it was a place where we could polish and perfect the block experience in a contained environment. Further, as an open-source project, we believe that it is critical for WordPress to continue to innovate and keep working to make the core experience intuitive and enjoyable for all users. As a community project, Gutenberg has the potential to do just that, and we\u2019re excited to pursue this goal together. If you\u2019d like to test, contribute, or offer feedback, we welcome you to [share what you find on GitHub](https:\/\/github.com\/WordPress\/gutenberg\/issues).\n\n## The Editing Experience\n\n### What are \u201cblocks\u201d and why are we using them?\n\nThe classic WordPress editor is an open text window\u2014it\u2019s always been a wonderful blank canvas for writing, but when it comes to building posts and pages with images, multimedia, embedded content from social media, polls, and other elements, it required a mix of different approaches that were not always intuitive:\n\n-   Media library\/HTML for images, multimedia and approved files.\n-   Pasted links for embeds.\n-   Shortcodes for specialized assets from plugins.\n-   Featured images for the image at the top of a post or page.\n-   Excerpts for subheadings.\n-   Widgets for content on the side of a page.\n\nAs we thought about these uses and how to make them obvious and consistent, we began to embrace the concept of \u201cblocks.\u201d All of the above items could be blocks: easy to search and understand, and easy to dynamically shift around the page. The block concept is very powerful, and when designed thoughtfully, can offer an outstanding editing and publishing experience. Ultimately, the idea with blocks is to create a new common language across WordPress, a new way to connect users to plugins, and replace a number of older content types \u2014 things like shortcodes and widgets \u2014 that one usually has to be well-versed in the idiosyncrasies of WordPress to understand.\n\n### What is the writing experience like?\n\nOur goal with Gutenberg is not just to create a seamless post- and page-building experience. We also want to ensure that it provides a seamless writing experience. To test this out yourself, [head to this demo and give it a try](https:\/\/wordpress.org\/gutenberg\/)!\n\n### Is Gutenberg built on top of TinyMCE?\n\nNo. [TinyMCE](https:\/\/www.tinymce.com\/) is only used for the \"Classic\" block.\n\n### Are there Keyboard Shortcuts for Gutenberg?\n\nYes. There are a lot! There is a help modal showing all available keyboard shortcuts.\n\nYou can see the whole list going to the top right corner menu of the new editor and clicking on \u201cKeyboard Shortcuts\u201d (or by using the keyboard shortcut <kbd>Shift<\/kbd>+<kbd>Alt<\/kbd>+<kbd>H<\/kbd> on Linux\/Windows and <kbd>\u2303<\/kbd><kbd>\u2325<\/kbd><kbd>H<\/kbd> on macOS).\n\nThis is the canonical list of keyboard shortcuts:\n\n#### Editor shortcuts\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Shortcut description<\/th>\n\t\t\t<th>Linux\/Windows shortcut<\/th>\n\t\t\t<th>macOS shortcut<\/th>\n\t\t<\/tr>\n\t<\/thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Display keyboard shortcuts.<\/td>\n\t\t\t<td><kbd>Shift<\/kbd>+<kbd>Alt<\/kbd>+<kbd>H<\/kbd><\/td>\n\t\t\t<td><kbd>\u2303<\/kbd><kbd>\u2325<\/kbd><kbd>H<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Save your changes.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>S<\/kbd><\/td>\n\t\t\t<td><kbd>\u2318<\/kbd><kbd>S<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Undo your last changes.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Z<\/kbd><\/td>\n\t\t\t<td><kbd>\u2318<\/kbd><kbd>Z<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Redo your last undo.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>Z<\/kbd><\/td>\n\t\t\t<td><kbd>\u21e7<\/kbd><kbd>\u2318<\/kbd><kbd>Z<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Show or hide the Settings sidebar.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>,<\/kbd><\/td>\n\t\t\t<td><kbd>\u21e7<\/kbd><kbd>\u2318<\/kbd><kbd>,<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Open the list view menu.<\/td>\n\t\t\t<td><kbd>Shift<\/kbd>+<kbd>Alt<\/kbd>+<kbd>O<\/kbd><\/td>\n\t\t\t<td><kbd>\u2303<\/kbd><kbd>\u2325<\/kbd><kbd>O<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Navigate to the next part of the editor.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>`<\/kbd><\/td>\n\t\t\t<td><kbd>\u2303<\/kbd><kbd>`<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Navigate to the previous part of the editor.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>`<\/kbd><\/td>\n\t\t\t<td><kbd>\u2303<\/kbd><kbd>\u21e7<\/kbd><kbd>`<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Navigate to the next part of the editor (alternative).<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Alt<\/kbd>+<kbd>N<\/kbd><\/td>\n\t\t\t<td><kbd>\u2303<\/kbd><kbd>\u2325<\/kbd><kbd>N<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Navigate to the previous part of the editor (alternative).<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Alt<\/kbd>+<kbd>P<\/kbd><\/td>\n\t\t\t<td><kbd>\u2303<\/kbd><kbd>\u2325<\/kbd><kbd>P<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Navigate to the nearest toolbar.<\/td>\n\t\t\t<td><kbd>Alt<\/kbd>+<kbd>F10<\/kbd><\/td>\n\t\t\t<td><kbd>\u2325<\/kbd><kbd>F10<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Switch between visual editor and code editor.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>Alt<\/kbd>+<kbd>M<\/kbd><\/td>\n\t\t\t<td><kbd>\u21e7<\/kbd><kbd>\u2325<\/kbd><kbd>\u2318<\/kbd><kbd>M<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Toggle fullscreen mode.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Alt<\/kbd>+<kbd>Shift<\/kbd>+<kbd>F<\/kbd><\/td>\n\t\t\t<td><kbd>\u21e7<\/kbd><kbd>\u2325<\/kbd><kbd>\u2318<\/kbd><kbd>F<\/kbd><\/td>\n\t\t<\/tr>\n\t<\/tbody>\n<\/table>\n\n#### Selection shortcuts\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Shortcut description<\/th>\n\t\t\t<th>Linux\/Windows shortcut<\/th>\n\t\t\t<th>macOS shortcut<\/th>\n\t\t<\/tr>\n\t<\/thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Select all text when typing. Press again to select all blocks.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>A<\/kbd><\/td>\n\t\t\t<td><kbd>\u2318<\/kbd><kbd>A<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Clear selection.<\/td>\n\t\t\t<td><kbd>Esc<\/kbd><\/td>\n\t\t\t<td><kbd>Esc<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Select text across multiple blocks.<\/td>\n\t\t\t<td><kbd>Shift<\/kbd>+<kbd>Arrow (\u21e6, \u21e7, \u21e8, \u21e9)<\/kbd><\/td>\n\t\t\t<td><kbd>Shift<\/kbd>+<kbd>Arrow (\u21e6, \u21e7, \u21e8, \u21e9)<\/kbd><\/td>\n\t\t<\/tr>\n\t<\/tbody>\n<\/table>\n\n#### Block shortcuts\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Shortcut description<\/th>\n\t\t\t<th>Linux\/Windows shortcut<\/th>\n\t\t\t<th>macOS shortcut<\/th>\n\t\t<\/tr>\n\t<\/thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Duplicate the selected block(s).<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>D<\/kbd><\/td>\n\t\t\t<td><kbd>\u21e7<\/kbd><kbd>\u2318<\/kbd><kbd>D<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Remove the selected block(s).<\/td>\n\t\t\t<td><kbd>Shift<\/kbd>+<kbd>Alt<\/kbd>+<kbd>Z<\/kbd><\/td>\n\t\t\t<td><kbd>\u2303<\/kbd><kbd>\u2325<\/kbd><kbd>Z<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Insert a new block before the selected block(s).<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Alt<\/kbd>+<kbd>T<\/kbd><\/td>\n\t\t\t<td><kbd>\u2325<\/kbd><kbd>\u2318<\/kbd><kbd>T<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Insert a new block after the selected block(s).<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Alt<\/kbd>+<kbd>Y<\/kbd><\/td>\n\t\t\t<td><kbd>\u2325<\/kbd><kbd>\u2318<\/kbd><kbd>Y<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Move the selected block(s) up.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Alt<\/kbd>+<kbd>Shift<\/kbd>+<kbd>T<\/kbd><\/td>\n\t\t\t<td><kbd>\u2325<\/kbd><kbd>\u2318<\/kbd><kbd>\u21e7<\/kbd><kbd>T<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Move the selected block(s) down.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Alt<\/kbd>+<kbd>Shift<\/kbd>+<kbd>Y<\/kbd><\/td>\n\t\t\t<td><kbd>\u2325<\/kbd><kbd>\u2318<\/kbd><kbd>\u21e7<\/kbd><kbd>Y<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Change the block type after adding a new paragraph.<\/td>\n\t\t\t<td><kbd>\/<\/kbd><\/td>\n\t\t\t<td><kbd>\/<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Remove multiple selected blocks.<\/td>\n\t\t\t<td><kbd>del<\/kbd><kbd>backspace<\/kbd><\/td>\n\t\t\t<td><kbd>del<\/kbd><kbd>backspace<\/kbd><\/td>\n\t\t<\/tr>\n\t<\/tbody>\n<\/table>\n\n#### Text formatting\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Shortcut description<\/th>\n\t\t\t<th>Linux\/Windows shortcut<\/th>\n\t\t\t<th>macOS shortcut<\/th>\n\t\t<\/tr>\n\t<\/thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Make the selected text bold.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>B<\/kbd><\/td>\n\t\t\t<td><kbd>\u2318<\/kbd><kbd>B<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Make the selected text italic.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>I<\/kbd><\/td>\n\t\t\t<td><kbd>\u2318<\/kbd><kbd>I<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Underline the selected text.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>U<\/kbd><\/td>\n\t\t\t<td><kbd>\u2318<\/kbd><kbd>U<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Convert the selected text into a link.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>K<\/kbd><\/td>\n\t\t\t<td><kbd>\u2318<\/kbd><kbd>K<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Remove a link.<\/td>\n\t\t\t<td><kbd>Ctrl<\/kbd>+<kbd>Shift<\/kbd>+<kbd>K<\/kbd><\/td>\n\t\t\t<td><kbd>\u21e7<\/kbd><kbd>\u2318<\/kbd><kbd>K<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Add a strikethrough to the selected text.<\/td>\n\t\t\t<td><kbd>Shift<\/kbd>+<kbd>Alt<\/kbd>+<kbd>D<\/kbd><\/td>\n\t\t\t<td><kbd>\u2303<\/kbd><kbd>\u2325<\/kbd><kbd>D<\/kbd><\/td>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td>Display the selected text in a monospaced font.<\/td>\n\t\t\t<td><kbd>Shift<\/kbd>+<kbd>Alt<\/kbd>+<kbd>X<\/kbd><\/td>\n\t\t\t<td><kbd>\u2303<\/kbd><kbd>\u2325<\/kbd><kbd>X<\/kbd><\/td>\n\t\t<\/tr>\n\t<\/tbody>\n<\/table>\n\nHere is a brief animation illustrating how to find and use the keyboard shortcuts:\n\n![GIF showing how to access keyboard shortcuts](https:\/\/make.wordpress.org\/core\/files\/2020\/07\/keyboard-shortcuts.gif)\n\n### Does Gutenberg support columns?\n\nYes, a columns block is available in Gutenberg.\n\n### Does Gutenberg support nested blocks?\n\nYes, it is supported. You can have multiple levels of nesting \u2013 blocks within blocks within blocks. See the [Nested Block Tutorial](https:\/\/developer.wordpress.org\/block-editor\/tutorials\/block-tutorial\/nested-blocks-inner-blocks\/) for more information.\n\n### Does drag and drop work for rearranging blocks?\n\nYes, you can drag and drop blocks to rearrange their order.\n\n\n## The Development Experience\n\n### How do I make my own block?\n\nThe best place to start is the [Create a Block Tutorial](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/create-block\/).\n\n### Does Gutenberg involve editing posts\/pages in the front end?\n\nNo, we are designing Gutenberg primarily as a replacement for the post and page editing screens. That said, front-end editing is often confused with an editor that looks exactly like the front end. And that is something that Gutenberg will allow as themes customize individual blocks and provide those styles to the editor. Since content is designed to be distributed across so many different experiences\u2014from desktop and mobile to full-text feeds and syndicated article platforms\u2014we believe it's not ideal to create or design posts from just one front-end experience.\n\n### Given Gutenberg is built in JavaScript, how do old meta boxes (PHP) work?\n\nSee the [Meta Box Tutorial](https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/metabox\/) for more information on using Meta boxes with the new block editor.\n\n### How can plugins extend the Gutenberg UI?\n\nThe main extension point we want to emphasize is creating new blocks. Blocks are added to the block editor using plugins, see the [Create a Block Tutorial](https:\/\/developer.wordpress.org\/block-editor\/getting-stared\/create-block\/) to get started.\n\n### Are Custom Post Types still supported?\n\nIndeed. There are multiple ways in which custom post types can leverage Gutenberg. The plan is to allow them to specify the blocks they support, as well as defining a default block for the post type. It's not currently the case, but if a post type disables the content field, the \u201cadvanced\u201d section at the bottom would fill the page.\n\n## Styles\n\n### Can themes _style_ blocks?\n\nYes. Blocks can provide their own styles, which themes can add to or override, or they can provide no styles at all and rely fully on what the theme provides.\n\n### How do block styles work in both the front-end and back-end?\n\nBlocks are able to provide base structural CSS styles, and themes can add styles on top of this. Some blocks, like a Separator (`<hr\/>`), likely don't need any front-end styles, while others, like a Gallery, need a few.\n\nOther features, like the new _wide_ and _full-wide_ alignment options, are simply CSS classes applied to blocks that offer this alignment. We are looking at how a theme can opt into this feature, for example using `add_theme_support`.\n\nThis is currently a work in progress and we recommend reviewing the [block based theme documentation](https:\/\/developer.wordpress.org\/themes\/block-themes\/) to learn more.\n\n### What are block variations? Are they the same as block styles?\n\nNo, [block variations](\/docs\/reference-guides\/block-api\/block-variations.md) are different versions of a single base block, sharing a similar functionality but with slight differences in their implementation or settings (attributes, InnerBlocks, etc.). Block variations are transparent for users, and once there is a registered block variation, it will appear as a new block. For example, the `embed` block registers different block variations to embed content from specific providers.\n\nMeanwhile, [block styles](\/docs\/reference-guides\/filters\/block-filters.md#block-style-variations) allow you to provide alternative styles to existing blocks, and they work by adding a `className` to the block\u2019s wrapper. Once a block has registered block styles, a block style selector will appear in its sidebar so that users can choose among the different registered styles.\n\n### How do editor styles work?\n\nRegular editor styles are opt-in and work as is in most cases. Themes can also load extra stylesheets by using the following hook:\n\n```php\nfunction gutenbergtheme_editor_styles() {\n    wp_enqueue_style( 'gutenbergtheme-blocks-style', get_template_directory_uri() . '\/blocks.css');\n}\nadd_action( 'enqueue_block_editor_assets', 'gutenbergtheme_editor_styles' );\n```\n\n_See:_ [Editor Styles](\/docs\/how-to-guides\/themes\/theme-support.md#editor-styles)\n\n## Compatibility\n\n### What browsers does Gutenberg support?\n\nGutenberg works in modern browsers.\n\nThe [list of supported browsers can be found in the Make WordPress handbook](https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/browser-support\/). The term \u201cmodern browsers\u201d generally refers to the _current and previous two versions_ of each major browser.\n\nSince WordPress 5.8, Gutenberg no longer supports any version of Internet Explorer.\n\n### Should I be concerned that Gutenberg will make my plugin obsolete?\n\nThe goal of Gutenberg is not to put anyone out of business. It's to evolve WordPress so there's more business to be had in the future, for everyone.\n\nAside from enabling a rich post and page building experience, a meta goal is to _move WordPress forward_ as a platform. Not only by modernizing the UI, but by modernizing the foundation.\n\nWe realize it's a big change. We also think there will be many new opportunities for plugins. WordPress is likely to ship with a range of basic blocks, but there will be plenty of room for highly tailored premium plugins to augment existing blocks or add new blocks to the mix.\n\n### Is it possible to opt out of Gutenberg for my site?\n\nThere is a \u201cClassic\u201d block, which is virtually the same as the current editor, except in block form.\n\nThere is also the [Classic Editor plugin](https:\/\/wordpress.org\/plugins\/classic-editor\/) which restores the previous editor, see the plugin for more information. The WordPress Core team has committed to supporting the Classic Editor plugin [until December 2021](https:\/\/make.wordpress.org\/core\/2018\/11\/07\/classic-editor-plugin-support-window\/).\n\n### How do custom TinyMCE buttons work in Gutenberg?\n\nCustom TinyMCE buttons still work in the \u201cClassic\u201d block, which is a block version of the classic editor you know today.\n\nGutenberg comes with a new universal inserter tool, which gives you access to every block available, searchable, sorted by recency and categories. This inserter tool levels the playing field for every plugin that adds content to the editor, and provides a single interface to learn how to use.\n\n### How do shortcodes work in Gutenberg?\n\nShortcodes continue to work as they do now.\n\nHowever we see the block as an evolution of the `[shortcode]`. Instead of having to type out code, you can use the universal inserter tray to pick a block and get a richer interface for both configuring the block and previewing it. We would recommend people eventually upgrade their shortcodes to be blocks.\n\n### Should I move shortcodes to content blocks?\n\nWe think so for a variety of reasons including but not limited to:\n\n-   Blocks have visual editing built-in which creates a more rich, dynamic experience for building your site.\n-   Blocks are simply html and don\u2019t persist things the browser doesn't understand on the front-end. In comparison, if you disable a plugin that powers a shortcode, you end up with strange visuals on the front-end (often just showing the shortcode in plain text).\n-   Blocks will be discovered more readily with the launch of the block directory in a way shortcodes never could be allowing for more people to get more functionality.\n\nUltimately, Blocks are designed to be visually representative of the final look, and, with the launch of the Block Directory in 5.5, they will become the expected way in which users will discover and insert content in WordPress.\n\n## Miscellaneous\n\n### Is Gutenberg made to be properly accessible?\n\nAccessibility is not an afterthought. Not every aspect of Gutenberg is accessible at the moment. You can check logged issues [here](https:\/\/github.com\/WordPress\/gutenberg\/labels\/Accessibility%20%28a11y%29). We understand that WordPress is for everyone, and that accessibility is about inclusion. This is a key value for us.\n\nIf you would like to contribute to the accessibility of Gutenberg, we can always use more people to test and contribute.\n\n### How is data stored? I've seen HTML comments. What is their purpose?\n\nOur approach\u2014as outlined in [the technical overview introduction](https:\/\/make.wordpress.org\/core\/2017\/01\/17\/editor-technical-overview\/)\u2014is to augment the existing data format in a way that doesn\u2019t break the decade-and-a-half-fabric of content WordPress provides. In other terms, this optimizes for a format that prioritizes human readability (the HTML document of the web) and easy-to-render-anywhere over a machine convenient file (JSON in post-meta) that benefits the editing context primarily.\n\nThis also [gives us the flexibility](https:\/\/github.com\/WordPress\/gutenberg\/issues\/1516) to store those blocks that are inherently separate from the content stream (reusable pieces like widgets or small post type elements) elsewhere, and just keep token references for their placement.\n\nWe suggest you look at the [Gutenberg key concepts](\/docs\/getting-started\/architecture\/key-concepts.md) to learn more about how this aspect of the project works.\n\n### How can I parse the post content back out into blocks in PHP or JS?\n\nIn JS:\n\n```js\nvar blocks = wp.blocks.parse( postContent );\n```\n\nIn PHP:\n\n```php\n$blocks = parse_blocks( $post_content );\n```\n\n\n"
    },
    {
        "path": "\/markdown\/getting-started\/quick-start-guide.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Quick Start Guide<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This guide is designed to demonstrate the basic principles of block development in WordPress using a hands-on approach. Following the steps below, you will create a custom block plugin that uses modern JavaScript (ESNext and JSX) in a matter of minutes. The example block displays the copyright symbol (\u00a9) and the current year, the perfect addition to any website's footer. You can see these steps in action through this short video demonstration.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<iframe width=\"960\" height=\"540\" src=\"https:\/\/www.youtube.com\/embed\/nrut8SfXA44?si=YxvmHmAoYx-BDCog\" title=\"WordPress Block Development: Quick Start Guide Video\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"true\"><\/iframe>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Scaffold the block plugin<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Start by ensuring you have Node.js and <code>npm<\/code> installed on your computer. Review the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/nodejs-development-environment\/\">Node.js development environment<\/a> guide if not.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next, use the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/\"><code>@wordpress\/create-block<\/code><\/a> package and the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block-tutorial-template\/\"><code>@wordpress\/create-block-tutorial-template<\/code><\/a> template to scaffold the complete \u201cCopyright Date Block\u201d plugin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n    <p>You can use <code>create-block<\/code> to scaffold a block just about anywhere and then use <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-env\/\"><code>wp-env<\/code><\/a> inside the generated plugin folder. This will create a local WordPress development environment with your new block plugin installed and activated.<\/p>\n    <p>If you already have your own <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/#local-wordpress-environment\">local WordPress development environment<\/a>, navigate to the <code>plugins\/<\/code> folder using the terminal.<\/p>\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Choose the folder where you want to create the plugin, and then execute the following command in the terminal from within that folder:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npx @wordpress\/create-block copyright-date-block --template @wordpress\/create-block-tutorial-template\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The <code>slug<\/code> provided (<code>copyright-date-block<\/code>) defines the folder name for the scaffolded plugin and the internal block name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Navigate to the Plugins page of your local WordPress installation and activate the \u201cCopyright Date Block\u201d plugin. The example block will then be available in the Editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic usage<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>With the plugin activated, you can explore how the block works. Use the following command to move into the newly created plugin folder and start the development process.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>cd copyright-date-block &amp;&amp; npm start\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When <code>create-block<\/code> scaffolds the block, it installs <code>wp-scripts<\/code> and adds the most common scripts to the block\u2019s <code>package.json<\/code> file. Refer to the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-scripts\/\">Get started with wp-scripts<\/a> article for an introduction to this package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>npm start<\/code> command will start a development server and watch for changes in the block\u2019s code, rebuilding the block whenever modifications are made.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you are finished making changes, run the <code>npm run build<\/code> command. This optimizes the block code and makes it production-ready.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">View the block in action<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You can use any local WordPress development environment to test your new block, but the scaffolded plugin includes configuration for <code>wp-env<\/code>. You must have <a href=\"https:\/\/www.docker.com\/products\/docker-desktop\">Docker<\/a> already installed and running on your machine, but if you do, run the <code>npx wp-env start<\/code> command.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once the script finishes running, you can access the local environment at: &lt;code>http:\/\/localhost:8888&lt;\/code>. Log into the WordPress dashboard using username <code>admin<\/code> and password <code>password<\/code>. The plugin will already be installed and activated. Open the Editor or Site Editor, and insert the Copyright Date Block as you would any other block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Visit the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-env\/\">Getting started<\/a> guide to learn more about <code>wp-env<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Additional resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-create-block\/\">Get started with create-block<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-scripts\/\">Get started with wp-scripts<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-env\/\">Get started with wp-env<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Quick Start Guide\n\nThis guide is designed to demonstrate the basic principles of block development in WordPress using a hands-on approach. Following the steps below, you will create a custom block plugin that uses modern JavaScript (ESNext and JSX) in a matter of minutes. The example block displays the copyright symbol (\u00a9) and the current year, the perfect addition to any website's footer. You can see these steps in action through this short video demonstration.\n\n<iframe width=\"960\" height=\"540\" src=\"https:\/\/www.youtube.com\/embed\/nrut8SfXA44?si=YxvmHmAoYx-BDCog\" title=\"WordPress Block Development: Quick Start Guide Video\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"true\"><\/iframe>\n\n## Scaffold the block plugin\n\nStart by ensuring you have Node.js and `npm` installed on your computer. Review the [Node.js development environment](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/nodejs-development-environment\/) guide if not.\n\nNext, use the [`@wordpress\/create-block`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/) package and the [`@wordpress\/create-block-tutorial-template`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block-tutorial-template\/) template to scaffold the complete \u201cCopyright Date Block\u201d plugin. \n\n<div class=\"callout callout-info\">\n    <p>You can use <code>create-block<\/code> to scaffold a block just about anywhere and then use <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-env\/\"><code>wp-env<\/code><\/a> inside the generated plugin folder. This will create a local WordPress development environment with your new block plugin installed and activated.<\/p>\n    <p>If you already have your own <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/#local-wordpress-environment\">local WordPress development environment<\/a>, navigate to the <code>plugins\/<\/code> folder using the terminal.<\/p>\n<\/div>\n\nChoose the folder where you want to create the plugin, and then execute the following command in the terminal from within that folder:\n\n```sh\nnpx @wordpress\/create-block copyright-date-block --template @wordpress\/create-block-tutorial-template\n```\n\nThe `slug` provided (`copyright-date-block`) defines the folder name for the scaffolded plugin and the internal block name.\n\nNavigate to the Plugins page of your local WordPress installation and activate the \u201cCopyright Date Block\u201d plugin. The example block will then be available in the Editor.\n\n## Basic usage\n\nWith the plugin activated, you can explore how the block works. Use the following command to move into the newly created plugin folder and start the development process.\n\n```sh\ncd copyright-date-block && npm start\n```\n\nWhen `create-block` scaffolds the block, it installs `wp-scripts` and adds the most common scripts to the block\u2019s `package.json` file. Refer to the [Get started with wp-scripts](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-scripts\/) article for an introduction to this package.\n\nThe `npm start` command will start a development server and watch for changes in the block\u2019s code, rebuilding the block whenever modifications are made. \n\nWhen you are finished making changes, run the `npm run build` command. This optimizes the block code and makes it production-ready.\n\n## View the block in action\n\nYou can use any local WordPress development environment to test your new block, but the scaffolded plugin includes configuration for `wp-env`. You must have [Docker](https:\/\/www.docker.com\/products\/docker-desktop) already installed and running on your machine, but if you do, run the `npx wp-env start` command. \n\nOnce the script finishes running, you can access the local environment at: <code>http:\/\/localhost:8888<\/code>. Log into the WordPress dashboard using username `admin` and password `password`. The plugin will already be installed and activated. Open the Editor or Site Editor, and insert the Copyright Date Block as you would any other block.\n\nVisit the [Getting started](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-env\/) guide to learn more about `wp-env`.\n\n## Additional resources\n\n- [Get started with create-block](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-create-block\/)\n- [Get started with wp-scripts](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-scripts\/)\n- [Get started with wp-env](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-env\/)\n"
    },
    {
        "path": "\/markdown\/getting-started\/devenv\/get-started-with-wp-env.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Get started with wp-env<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/www.npmjs.com\/package\/@wordpress\/env\">@wordpress\/env<\/a> package (<code>wp-env<\/code>) lets you set up a local WordPress environment (site) for building and testing plugins and themes, without any additional configuration.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before following this guide, install <a href=\"\/docs\/getting-started\/devenv#node-js-development-tools\">Node.js development tools<\/a> if you have not already done so.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/10\/wp-env-diagram.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">wp-env basics diagram<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Quick start<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Download, install, and start <a href=\"https:\/\/www.docker.com\/products\/docker-desktop\">Docker Desktop<\/a> following the instructions for your operating system.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Run <code>npm -g install @wordpress\/env<\/code> in the terminal to install <code>wp-env<\/code> globally.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>In the terminal, navigate to an existing plugin directory, theme directory, or a new working directory.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Run <code>wp-env start<\/code> in the terminal to start the local WordPress environment.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>After the script runs, navigate to &lt;code>http:\/\/localhost:8888\/wp-admin&lt;\/code> and log into the WordPress dashboard using username <code>admin<\/code> and password <code>password<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Set up Docker Desktop<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>wp-env<\/code> tool uses <a href=\"https:\/\/www.docker.com\/\">Docker<\/a> to create a virtual machine that runs the local WordPress site. The Docker Desktop application is free for small businesses, personal use, education, and non-commercial open-source projects. See their <a href=\"https:\/\/docs.docker.com\/desktop\/faqs\/general\/#do-i-need-to-pay-to-use-docker-desktop\">FAQ<\/a> for more information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Use the links below to download and install Docker Desktop for your operating system.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/docs.docker.com\/desktop\/install\/mac-install\/\">Docker Desktop for Mac<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/docs.docker.com\/desktop\/install\/windows-install\/\">Docker Desktop for Windows<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/docs.docker.com\/desktop\/install\/linux-install\/\">Docker Desktop for Linux<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>If you are using a version of Ubuntu prior to 20.04.1, see the additional <a href=\"#ubuntu-docker-setup\">troubleshooting notes<\/a> below.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After successful installation, start the Docker Desktop application and follow the prompts to get set up. You should generally use the recommended (default) settings, and creating a Docker account is optional.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Install and run <code>wp-env<\/code><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>wp-env<\/code> tool is used to create a local WordPress environment with Docker. So, after you have set up Docker Desktop, open the terminal and install the <code>wp-env<\/code> by running the command:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm -g install @wordpress\/env\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This will install the <code>wp-env<\/code> globally, allowing the tool to be run from any directory. To confirm it's installed and available, run <code>wp-env --version<\/code>, and the version number should appear.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next, navigate to an existing plugin directory, theme directory, or a new working directory in the terminal and run:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp-env start\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Once the script completes, you can access the local environment at: &lt;code>http:\/\/localhost:8888&lt;\/code>. Log into the WordPress dashboard using username <code>admin<\/code> and password <code>password<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\n    Some projects, like Gutenberg, include their own specific <code>wp-env<\/code> configurations, and the documentation might prompt you to run <code>npm run start wp-env<\/code> instead.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>For more information on controlling the Docker environment, see the <a href=\"\/packages\/env\/README.md\">@wordpress\/env package<\/a> readme.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Where to run <code>wp-env<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>wp-env<\/code> tool can run from practically anywhere. When using the script while developing a single plugin, <code>wp-env start<\/code> can mount and activate the plugin automatically when run from the directory containing the plugin. This also works for themes when run from the directory in which you are developing the theme.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A generic WordPress environment will be created if you run <code>wp-env start<\/code> from a directory that is not a plugin or theme. The script will display the following warning, but ignore if this is your intention.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>!! Warning: could not find a .wp-env.json configuration file and could not determine if 'DIR' is a WordPress installation, a plugin, or a theme.\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can also use the <code>.wp-env.json<\/code> configuration file to create an environment that works with multiple plugins and\/or themes. See the <a href=\"\/packages\/env\/README.md#wp-envjson\">@wordpress\/env package<\/a> readme for more configuration details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Uninstall or reset <code>wp-env<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Here are a few instructions if you need to start over or want to remove what was installed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>If you just want to reset and clean the WordPress database, run <code>wp-env clean all<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>To remove the local environment completely for a specific project, run <code>wp-env destroy<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>To globally uninstall the <code>wp-env<\/code> tool, run <code>npm -g uninstall @wordpress\/env<\/code><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Troubleshooting<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Common errors<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When using <code>wp-env<\/code>, it's common to get the error: <code>Error while running docker-compose command<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Check that Docker Desktop is started and running.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Check Docker Desktop dashboard for logs, restart, or remove existing virtual machines.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Then try rerunning <code>wp-env start<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>If you see the error: <code>Host is already in use by another container<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The container you are attempting to start is already running, or another container is. You can stop an existing container by running <code>wp-env stop<\/code> from the directory that you started it in.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If you do not remember the directory where you started <code>wp-env<\/code>, you can stop all containers by running <code>docker stop $(docker ps -q)<\/code>. This will stop all Docker containers, so use with caution.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Then try rerunning <code>wp-env start<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Ubuntu Docker setup<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you are using a version of Ubuntu prior to 20.04.1, you may encounter errors when setting up a local WordPress environment with <code>wp-env<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To resolve this, start by following the <a href=\"https:\/\/docs.docker.com\/install\/linux\/docker-ce\/ubuntu\/\">installation guide<\/a> from Docker. <code>docker-compose<\/code> is also required, which you may need to install separately. Refer to the <a href=\"https:\/\/docs.docker.com\/compose\/install\/\">Docker compose documentation<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once Docker and <code>wp-env<\/code> are installed, and assuming <code>wp-env<\/code> is configured globally, try running <code>wp-env start<\/code> in a directory. If you run into this error:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>ERROR: Couldn't connect to Docker daemon at http+docker:\/\/localhost - is it running?\n\nIf it's at a non-standard location, specify the URL with the DOCKER_HOST environment variable.\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>First, make sure Docker is running. You can check by running <code>ps -ef | grep docker<\/code>, which should return something like:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/usr\/bin\/dockerd -H fd:\/\/ --containerd=\/run\/containerd\/containerd.sock\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If Docker is not running, try starting the service by running <code>sudo systemctl start docker.service<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If Docker is running, then it is not listening to how the WordPress environment is trying to communicate. Try adding the following service override file to include listening on <code>tcp<\/code>. See <a href=\"https:\/\/docs.docker.com\/config\/daemon\/remote-access\/\">this Docker documentation<\/a> on how to configure remote access for Docker daemon.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># \/etc\/systemd\/system\/docker.service.d\/override.conf\n&#91;Service]\nExecStart=\nExecStart=\/usr\/bin\/dockerd -H fd:\/\/ -H tcp:\/\/0.0.0.0:2376\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Restart the service from the command-line:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>sudo systemctl daemon-reload\nsudo systemctl restart docker.service\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>After restarting the services, set the environment variable <code>DOCKER_HOST<\/code> and try starting <code>wp-env<\/code> with:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export DOCKER_HOST=tcp:\/\/127.0.0.1:2376\nwp-env start\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Your environment should now be set up at &lt;code>http:\/\/localhost:8888&lt;\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Additional resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/www.npmjs.com\/package\/@wordpress\/env\">@wordpress\/env<\/a> (Official documentation)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/docs.docker.com\/desktop\">Docker Desktop<\/a> (Official documentation)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/news\/2023\/03\/quick-and-easy-local-wordpress-development-with-wp-env\/\">Quick and easy local WordPress development with wp-env<\/a> (WordPress Developer Blog)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/make.wordpress.org\/core\/2020\/03\/03\/wp-env-simple-local-environments-for-wordpress\/\">wp-env: Simple Local Environments for WordPress<\/a> (Make WordPress Core Blog)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/excalidraw.com\/#json=8Tp55B-R6Z6-pNGtmenU6,_DeBR1IBxuHNIKPTVEaseA\"><code>wp-env<\/code> Basics diagram<\/a> (Excalidraw)<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Get started with wp-env\n\nThe [@wordpress\/env](https:\/\/www.npmjs.com\/package\/@wordpress\/env) package (`wp-env`) lets you set up a local WordPress environment (site) for building and testing plugins and themes, without any additional configuration.\n\nBefore following this guide, install [Node.js development tools](\/docs\/getting-started\/devenv#node-js-development-tools) if you have not already done so.\n\n![wp-env basics diagram](https:\/\/developer.wordpress.org\/files\/2023\/10\/wp-env-diagram.png)\n\n## Quick start\n \n1. Download, install, and start [Docker Desktop](https:\/\/www.docker.com\/products\/docker-desktop) following the instructions for your operating system.\n2. Run `npm -g install @wordpress\/env` in the terminal to install `wp-env` globally.\n3. In the terminal, navigate to an existing plugin directory, theme directory, or a new working directory.\n4. Run `wp-env start` in the terminal to start the local WordPress environment.\n5. After the script runs, navigate to <code>http:\/\/localhost:8888\/wp-admin<\/code> and log into the WordPress dashboard using username `admin` and password `password`.\n\n## Set up Docker Desktop\n\nThe `wp-env` tool uses [Docker](https:\/\/www.docker.com\/) to create a virtual machine that runs the local WordPress site. The Docker Desktop application is free for small businesses, personal use, education, and non-commercial open-source projects. See their [FAQ](https:\/\/docs.docker.com\/desktop\/faqs\/general\/#do-i-need-to-pay-to-use-docker-desktop) for more information.\n\nUse the links below to download and install Docker Desktop for your operating system.\n\n- [Docker Desktop for Mac](https:\/\/docs.docker.com\/desktop\/install\/mac-install\/)\n- [Docker Desktop for Windows](https:\/\/docs.docker.com\/desktop\/install\/windows-install\/)\n- [Docker Desktop for Linux](https:\/\/docs.docker.com\/desktop\/install\/linux-install\/)\n\nIf you are using a version of Ubuntu prior to 20.04.1, see the additional [troubleshooting notes](#ubuntu-docker-setup) below.\n\nAfter successful installation, start the Docker Desktop application and follow the prompts to get set up. You should generally use the recommended (default) settings, and creating a Docker account is optional.\n\n## Install and run `wp-env`\n\nThe `wp-env` tool is used to create a local WordPress environment with Docker. So, after you have set up Docker Desktop, open the terminal and install the `wp-env` by running the command:\n\n```sh\nnpm -g install @wordpress\/env\n```\n\nThis will install the `wp-env` globally, allowing the tool to be run from any directory. To confirm it's installed and available, run `wp-env --version`, and the version number should appear. \n\nNext, navigate to an existing plugin directory, theme directory, or a new working directory in the terminal and run:\n\n```sh\nwp-env start\n```\n\nOnce the script completes, you can access the local environment at: <code>http:\/\/localhost:8888<\/code>. Log into the WordPress dashboard using username `admin` and password `password`.\n\n<div class=\"callout callout-tip\">\n    Some projects, like Gutenberg, include their own specific <code>wp-env<\/code> configurations, and the documentation might prompt you to run <code>npm run start wp-env<\/code> instead.\n<\/div>\n\nFor more information on controlling the Docker environment, see the [@wordpress\/env package](\/packages\/env\/README.md) readme.\n\n### Where to run `wp-env`\n\nThe `wp-env` tool can run from practically anywhere. When using the script while developing a single plugin, `wp-env start` can mount and activate the plugin automatically when run from the directory containing the plugin. This also works for themes when run from the directory in which you are developing the theme.\n\nA generic WordPress environment will be created if you run `wp-env start` from a directory that is not a plugin or theme. The script will display the following warning, but ignore if this is your intention.\n\n```\n!! Warning: could not find a .wp-env.json configuration file and could not determine if 'DIR' is a WordPress installation, a plugin, or a theme.\n```\n\nYou can also use the `.wp-env.json` configuration file to create an environment that works with multiple plugins and\/or themes. See the [@wordpress\/env package](\/packages\/env\/README.md#wp-envjson) readme for more configuration details.\n\n### Uninstall or reset `wp-env`\n\nHere are a few instructions if you need to start over or want to remove what was installed.\n\n-   If you just want to reset and clean the WordPress database, run `wp-env clean all`\n-   To remove the local environment completely for a specific project, run `wp-env destroy`\n-   To globally uninstall the `wp-env` tool, run `npm -g uninstall @wordpress\/env`\n\n## Troubleshooting\n\n### Common errors\n\nWhen using `wp-env`, it's common to get the error: `Error while running docker-compose command`\n\n-   Check that Docker Desktop is started and running.\n-   Check Docker Desktop dashboard for logs, restart, or remove existing virtual machines.\n-   Then try rerunning `wp-env start`.\n\nIf you see the error: `Host is already in use by another container`\n\n-   The container you are attempting to start is already running, or another container is. You can stop an existing container by running `wp-env stop` from the directory that you started it in.\n-   If you do not remember the directory where you started `wp-env`, you can stop all containers by running `docker stop $(docker ps -q)`. This will stop all Docker containers, so use with caution.\n-   Then try rerunning `wp-env start`.\n\n### Ubuntu Docker setup\n\nIf you are using a version of Ubuntu prior to 20.04.1, you may encounter errors when setting up a local WordPress environment with `wp-env`. \n\nTo resolve this, start by following the [installation guide](https:\/\/docs.docker.com\/install\/linux\/docker-ce\/ubuntu\/) from Docker. `docker-compose` is also required, which you may need to install separately. Refer to the [Docker compose documentation](https:\/\/docs.docker.com\/compose\/install\/).\n\nOnce Docker and `wp-env` are installed, and assuming `wp-env` is configured globally, try running `wp-env start` in a directory. If you run into this error:\n\n```\nERROR: Couldn't connect to Docker daemon at http+docker:\/\/localhost - is it running?\n\nIf it's at a non-standard location, specify the URL with the DOCKER_HOST environment variable.\n```\n\nFirst, make sure Docker is running. You can check by running `ps -ef | grep docker`, which should return something like:\n\n```\n\/usr\/bin\/dockerd -H fd:\/\/ --containerd=\/run\/containerd\/containerd.sock\n```\n\nIf Docker is not running, try starting the service by running `sudo systemctl start docker.service`.\n\nIf Docker is running, then it is not listening to how the WordPress environment is trying to communicate. Try adding the following service override file to include listening on `tcp`. See [this Docker documentation](https:\/\/docs.docker.com\/config\/daemon\/remote-access\/) on how to configure remote access for Docker daemon.\n\n```\n# \/etc\/systemd\/system\/docker.service.d\/override.conf\n[Service]\nExecStart=\nExecStart=\/usr\/bin\/dockerd -H fd:\/\/ -H tcp:\/\/0.0.0.0:2376\n```\n\nRestart the service from the command-line:\n\n```\nsudo systemctl daemon-reload\nsudo systemctl restart docker.service\n```\n\nAfter restarting the services, set the environment variable `DOCKER_HOST` and try starting `wp-env` with:\n\n```\nexport DOCKER_HOST=tcp:\/\/127.0.0.1:2376\nwp-env start\n```\n\nYour environment should now be set up at <code>http:\/\/localhost:8888<\/code>.\n\n## Additional resources\n\n- [@wordpress\/env](https:\/\/www.npmjs.com\/package\/@wordpress\/env) (Official documentation)\n- [Docker Desktop](https:\/\/docs.docker.com\/desktop) (Official documentation)\n- [Quick and easy local WordPress development with wp-env](https:\/\/developer.wordpress.org\/news\/2023\/03\/quick-and-easy-local-wordpress-development-with-wp-env\/) (WordPress Developer Blog)\n- [wp-env: Simple Local Environments for WordPress](https:\/\/make.wordpress.org\/core\/2020\/03\/03\/wp-env-simple-local-environments-for-wordpress\/) (Make WordPress Core Blog)\n- [`wp-env` Basics diagram](https:\/\/excalidraw.com\/#json=8Tp55B-R6Z6-pNGtmenU6,_DeBR1IBxuHNIKPTVEaseA) (Excalidraw)\n"
    },
    {
        "path": "\/markdown\/getting-started\/devenv\/nodejs-development-environment.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Node.js development environment<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When developing for the Block Editor, you will need <a href=\"https:\/\/nodejs.org\/en\">Node.js<\/a> development tools along with a code editor and a local WordPress environment (see <a href=\"\/docs\/getting-started\/devenv\/README.md\">Block Development Environment<\/a>). Node.js (<code>node<\/code>) is an open-source runtime environment that allows you to execute JavaScript code from the terminal (also known as a command-line interface, CLI, or shell)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Installing <code>node<\/code> will automatically include the Node Package Manager (<code>npm<\/code>) and the Node Package eXecute (<code>npx<\/code>), two tools you will frequently use in block and plugin development.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Node Package Manager (<a href=\"https:\/\/docs.npmjs.com\/cli\/v10\/commands\/npm\"><code>npm<\/code><\/a>) serves multiple purposes, including dependency management and script execution. It's the recommended package manager and is extensively featured in all documentation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The Node Package eXecute (<a href=\"https:\/\/docs.npmjs.com\/cli\/v10\/commands\/npx\"><code>npx<\/code><\/a>) tool is used to run commands from packages without installing them globally and is commonly used when scaffolding blocks with the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/\"><code>create-block<\/code><\/a> package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Node.js installation on Mac and Linux (with <code>nvm<\/code>)<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It's recommended that you use <a href=\"https:\/\/github.com\/nvm-sh\/nvm\">Node Version Manager<\/a> (<code>nvm<\/code>) to install Node.js. This allows you to install and manage specific versions of <code>node<\/code>, which are installed locally in your home directory, avoiding any global permission issues.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here are the quick instructions for installing <code>node<\/code> using <code>nvm<\/code> and setting the recommended Node.js version for block development. See the <a href=\"https:\/\/github.com\/nvm-sh\/nvm#installing-and-updating\">complete installation guide<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Open the terminal and run the following to install <code>nvm<\/code>. On macOS, the required developer tools are not installed by default. Install them if prompted.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>curl -o- https:\/\/raw.githubusercontent.com\/nvm-sh\/nvm\/v0.39.5\/install.sh | bash\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:list {\"ordered\":true,\"start\":2} -->\n<ol start=\"2\" class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Quit and restart the terminal.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Run <code>nvm install --lts<\/code> in the terminal to install the latest <a href=\"https:\/\/nodejs.org\/en\/about\/previous-releases\">LTS<\/a> (Long Term Support) version of Node.js.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Run <code>node -v<\/code> and <code>npm -v<\/code> in the terminal to verify the installed <code>node<\/code> and <code>npm<\/code> versions.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>If needed, you can also install specific versions of <code>node<\/code>. For example, install version 18 by running <code>nvm install 18<\/code>, and switch between different versions by running <code>nvm use [version-number]<\/code>. See the <code>nvm<\/code> <a href=\"https:\/\/github.com\/nvm-sh\/nvm#usage\">usage guide<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some projects, like Gutenberg, include an <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/.nvmrc\"><code>.nvmrc<\/code><\/a> file which specifies the version of <code>node<\/code> that should be used. In this case, running <code>nvm use<\/code> will automatically select the correct version. If the version is not yet installed, you will get an error that tells you what version needs to be added. Run <code>nvm install [version-number]<\/code> followed by <code>nvm use<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Node.js installation on Windows and others<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You can <a href=\"https:\/\/nodejs.org\/en\/download\/\">download a Node.js installer<\/a> directly from the main Node.js website. The latest version is recommended. Installers are available for Windows and Mac, and binaries are available for Linux.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Microsoft also provides a <a href=\"https:\/\/learn.microsoft.com\/en-us\/windows\/dev-environment\/javascript\/nodejs-on-windows#install-nvm-windows-nodejs-and-npm\">detailed guide<\/a> on how to install <code>nvm<\/code> and Node.js on Windows and WSL.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Troubleshooting<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you encounter the error <code>zsh: command not found: nvm<\/code> when attempting to install <code>node<\/code>, you might need to create the default profile file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The default shell is <code>zsh<\/code> on macOS, so create the profile file by running <code>touch ~\/.zshrc<\/code> in the terminal. It's fine to run if the file already exists. The default profile is <code>bash<\/code> for Ubuntu, including WSL, so use <code>touch ~\/.bashrc<\/code> instead. Then repeat steps 2-4.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The latest <code>node<\/code> version should work for most development projects, but be aware that some packages and tools have specific requirements. If you encounter issues, you might need to install and use a previous <code>node<\/code> version. Also, make sure to check if the project has an <code>.nvmrc<\/code> and use the <code>node<\/code> version indicated.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Additional resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/nodejs.org\/en\">Node.js<\/a> (Official documentation)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/nvm-sh\/nvm\">Node Version Manager<\/a> (Official documentation)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/learn.wordpress.org\/tutorial\/installing-node-js-and-npm-for-local-wordpress-development\/\">Installing Node.js and npm for local WordPress development<\/a> (Learn WordPress tutorial)<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Node.js development environment\n\nWhen developing for the Block Editor, you will need [Node.js](https:\/\/nodejs.org\/en) development tools along with a code editor and a local WordPress environment (see [Block Development Environment](\/docs\/getting-started\/devenv\/README.md)). Node.js (`node`) is an open-source runtime environment that allows you to execute JavaScript code from the terminal (also known as a command-line interface, CLI, or shell)\n\nInstalling `node` will automatically include the Node Package Manager (`npm`) and the Node Package eXecute (`npx`), two tools you will frequently use in block and plugin development.\n\nNode Package Manager ([`npm`](https:\/\/docs.npmjs.com\/cli\/v10\/commands\/npm)) serves multiple purposes, including dependency management and script execution. It's the recommended package manager and is extensively featured in all documentation.\n\nThe Node Package eXecute ([`npx`](https:\/\/docs.npmjs.com\/cli\/v10\/commands\/npx)) tool is used to run commands from packages without installing them globally and is commonly used when scaffolding blocks with the [`create-block`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/) package.\n\n\n## Node.js installation on Mac and Linux (with `nvm`)\n\nIt's recommended that you use [Node Version Manager](https:\/\/github.com\/nvm-sh\/nvm) (`nvm`) to install Node.js. This allows you to install and manage specific versions of `node`, which are installed locally in your home directory, avoiding any global permission issues.\n\nHere are the quick instructions for installing `node` using `nvm` and setting the recommended Node.js version for block development. See the [complete installation guide](https:\/\/github.com\/nvm-sh\/nvm#installing-and-updating) for more details.\n\n1. Open the terminal and run the following to install `nvm`. On macOS, the required developer tools are not installed by default. Install them if prompted.\n\n```sh\ncurl -o- https:\/\/raw.githubusercontent.com\/nvm-sh\/nvm\/v0.39.5\/install.sh | bash\n```\n\n2. Quit and restart the terminal.\n3. Run `nvm install --lts` in the terminal to install the latest [LTS](https:\/\/nodejs.org\/en\/about\/previous-releases) (Long Term Support) version of Node.js.\n4. Run `node -v` and `npm -v` in the terminal to verify the installed `node` and `npm` versions.\n\nIf needed, you can also install specific versions of `node`. For example, install version 18 by running `nvm install 18`, and switch between different versions by running `nvm use [version-number]`. See the `nvm` [usage guide](https:\/\/github.com\/nvm-sh\/nvm#usage) for more details.\n\nSome projects, like Gutenberg, include an [`.nvmrc`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/.nvmrc) file which specifies the version of `node` that should be used. In this case, running `nvm use` will automatically select the correct version. If the version is not yet installed, you will get an error that tells you what version needs to be added. Run `nvm install [version-number]` followed by `nvm use`.\n\n## Node.js installation on Windows and others\n\nYou can [download a Node.js installer](https:\/\/nodejs.org\/en\/download\/) directly from the main Node.js website. The latest version is recommended. Installers are available for Windows and Mac, and binaries are available for Linux. \n\nMicrosoft also provides a [detailed guide](https:\/\/learn.microsoft.com\/en-us\/windows\/dev-environment\/javascript\/nodejs-on-windows#install-nvm-windows-nodejs-and-npm) on how to install `nvm` and Node.js on Windows and WSL.\n\n## Troubleshooting\n\nIf you encounter the error `zsh: command not found: nvm` when attempting to install `node`, you might need to create the default profile file. \n\nThe default shell is `zsh` on macOS, so create the profile file by running `touch ~\/.zshrc` in the terminal. It's fine to run if the file already exists. The default profile is `bash` for Ubuntu, including WSL, so use `touch ~\/.bashrc` instead. Then repeat steps 2-4.\n\nThe latest `node` version should work for most development projects, but be aware that some packages and tools have specific requirements. If you encounter issues, you might need to install and use a previous `node` version. Also, make sure to check if the project has an `.nvmrc` and use the `node` version indicated.\n\n## Additional resources\n\n-   [Node.js](https:\/\/nodejs.org\/en) (Official documentation)\n-   [Node Version Manager](https:\/\/github.com\/nvm-sh\/nvm) (Official documentation)\n-   [Installing Node.js and npm for local WordPress development](https:\/\/learn.wordpress.org\/tutorial\/installing-node-js-and-npm-for-local-wordpress-development\/) (Learn WordPress tutorial)"
    },
    {
        "path": "\/markdown\/getting-started\/devenv\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Block Development Environment<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This guide will help you set up the right development environment to create blocks and other plugins that extend and modify the Block Editor in WordPress.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A block development environment includes the tools you need on your computer to successfully develop for the Block Editor. The three essential requirements are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"#code-editor\">Code editor<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#node-js-development-tools\">Node.js development tools<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#local-wordpress-environment\">Local WordPress environment (site)<\/a><\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n    To contribute to the Gutenberg project itself, refer to the additional documentation in the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/contributors\/code\/getting-started-with-code-contribution\">code contribution guide<\/a>.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Code editor<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A code editor is used to write code. You can use whichever editor you're most comfortable with. The key is having a way to open, edit, and save text files.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you do not already have a preferred code editor, <a href=\"https:\/\/code.visualstudio.com\/\">Visual Studio Code<\/a> (VS Code) is a popular choice for JavaScript development among Core contributors. It works well across the three major platforms (Windows, Linux, and Mac), is open-source, and is actively maintained by Microsoft. VS Code also has a vibrant community providing plugins and extensions, including many for WordPress development.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Node.js development tools<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Node.js (<code>node<\/code>) is an open-source runtime environment that allows you to execute JavaScript outside of the web browser. While Node.js is not required for all WordPress JavaScript development, it's essential when working with modern JavaScript tools and developing for the Block Editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Node.js and its accompanying development tools allow you to:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Install and run WordPress packages needed for Block Editor development, such as <code>wp-scripts<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Setup local WordPress environments with <code>wp-env<\/code> and <code>wp-now<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Use the latest ECMAScript features and write code in ESNext<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Lint, format, and test JavaScript code<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Scaffold custom blocks with the <code>create-block<\/code> package<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The list goes on. While modern JavaScript development can be challenging, WordPress provides several tools, like <a href=\"\/docs\/getting-started\/devenv\/get-started-with-wp-scripts.md\"><code>wp-scripts<\/code><\/a> and <a href=\"\/docs\/getting-started\/devenv\/get-started-with-create-block.md\"><code>create-block<\/code><\/a>, that streamline the process and are made possible by Node.js development tools.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>The recommended Node.js version for block development is <a href=\"https:\/\/nodejs.org\/en\/about\/previous-releases\">Active LTS<\/a> (Long Term Support)<\/strong>. However, there are times when you need to use different versions. A Node.js version manager tool like <code>nvm<\/code> is strongly recommended and allows you to change your <code>node<\/code> version when required. You will also need Node Package Manager (<code>npm<\/code>) and the Node Package eXecute (<code>npx<\/code>) to work with some WordPress packages. Both are installed automatically with Node.js.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To be able to use the Node.js tools and <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\">packages provided by WordPress<\/a> for block development, you'll need to set a proper Node.js runtime environment on your machine. To learn more about how to do this, refer to the links below.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/getting-started\/devenv\/nodejs-development-environment.md#node-js-installation-on-mac-and-linux-with-nvm\">Install Node.js for Mac and Linux<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/getting-started\/devenv\/nodejs-development-environment.md#node-js-installation-on-windows-and-others\">Install Node.js for Windows<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Local WordPress environment<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A local WordPress environment (site) provides a controlled, efficient, and secure space for development, allowing you to build and test your code before deploying it to a production site. The same <a href=\"https:\/\/en-gb.wordpress.org\/about\/requirements\/\">requirements<\/a> for WordPress apply to local sites.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the broader WordPress community, many tools are available for setting up a local WordPress environment on your computer. The Block Editor Handbook covers <code>wp-env<\/code>, which is open-source and maintained by the WordPress project itself. It's also the recommended tool for Gutenberg development.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Refer to the <a href=\"\/docs\/getting-started\/devenv\/get-started-with-wp-env.md\">Get started with <code>wp-env<\/code><\/a> guide for setup instructions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n    Throughout the Handbook, you may also see references to <code><a href=\"https:\/\/github.com\/WordPress\/playground-tools\/tree\/trunk\/packages\/wp-now\">wp-now<\/a><\/code>. This is a lightweight tool powered by <a hre=\"https:\/\/developer.wordpress.org\/playground\/\">WordPress Playground<\/a> that streamlines setting up a simple local WordPress environment. While still experimental, this tool is great for quickly testing WordPress releases, plugins, and themes. \n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>This list is not exhaustive, but here are several additional options to choose from if you prefer not to use <code>wp-env<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/localwp.com\/\">Local<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/www.apachefriends.org\/\">XAMPP<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/www.mamp.info\/en\/mamp\/mac\/\">MAMP<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/varyingvagrantvagrants.org\/\">Varying Vagrant Vagrants<\/a> (VVV)<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Block Development Environment\n\nThis guide will help you set up the right development environment to create blocks and other plugins that extend and modify the Block Editor in WordPress.\n\nA block development environment includes the tools you need on your computer to successfully develop for the Block Editor. The three essential requirements are:\n\n1.  [Code editor](#code-editor)\n2.  [Node.js development tools](#node-js-development-tools)\n3.  [Local WordPress environment (site)](#local-wordpress-environment)\n\n<div class=\"callout callout-info\">\n    To contribute to the Gutenberg project itself, refer to the additional documentation in the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/contributors\/code\/getting-started-with-code-contribution\">code contribution guide<\/a>.\n<\/div>\n\n## Code editor\n\nA code editor is used to write code. You can use whichever editor you're most comfortable with. The key is having a way to open, edit, and save text files.\n\nIf you do not already have a preferred code editor, [Visual Studio Code](https:\/\/code.visualstudio.com\/) (VS Code) is a popular choice for JavaScript development among Core contributors. It works well across the three major platforms (Windows, Linux, and Mac), is open-source, and is actively maintained by Microsoft. VS Code also has a vibrant community providing plugins and extensions, including many for WordPress development.\n\n## Node.js development tools\n\nNode.js (`node`) is an open-source runtime environment that allows you to execute JavaScript outside of the web browser. While Node.js is not required for all WordPress JavaScript development, it's essential when working with modern JavaScript tools and developing for the Block Editor.\n\nNode.js and its accompanying development tools allow you to:\n\n-   Install and run WordPress packages needed for Block Editor development, such as `wp-scripts`\n-   Setup local WordPress environments with `wp-env` and `wp-now`\n-   Use the latest ECMAScript features and write code in ESNext\n-   Lint, format, and test JavaScript code\n-   Scaffold custom blocks with the `create-block` package\n\nThe list goes on. While modern JavaScript development can be challenging, WordPress provides several tools, like [`wp-scripts`](\/docs\/getting-started\/devenv\/get-started-with-wp-scripts.md) and [`create-block`](\/docs\/getting-started\/devenv\/get-started-with-create-block.md), that streamline the process and are made possible by Node.js development tools.\n\n**The recommended Node.js version for block development is [Active LTS](https:\/\/nodejs.org\/en\/about\/previous-releases) (Long Term Support)**. However, there are times when you need to use different versions. A Node.js version manager tool like `nvm` is strongly recommended and allows you to change your `node` version when required. You will also need Node Package Manager (`npm`) and the Node Package eXecute (`npx`) to work with some WordPress packages. Both are installed automatically with Node.js.\n\nTo be able to use the Node.js tools and [packages provided by WordPress](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages) for block development, you'll need to set a proper Node.js runtime environment on your machine. To learn more about how to do this, refer to the links below.\n\n-   [Install Node.js for Mac and Linux](\/docs\/getting-started\/devenv\/nodejs-development-environment.md#node-js-installation-on-mac-and-linux-with-nvm)\n-   [Install Node.js for Windows](\/docs\/getting-started\/devenv\/nodejs-development-environment.md#node-js-installation-on-windows-and-others)\n\n## Local WordPress environment\n\nA local WordPress environment (site) provides a controlled, efficient, and secure space for development, allowing you to build and test your code before deploying it to a production site. The same [requirements](https:\/\/en-gb.wordpress.org\/about\/requirements\/) for WordPress apply to local sites.\n\nIn the broader WordPress community, many tools are available for setting up a local WordPress environment on your computer. The Block Editor Handbook covers `wp-env`, which is open-source and maintained by the WordPress project itself. It's also the recommended tool for Gutenberg development. \n\nRefer to the [Get started with `wp-env`](\/docs\/getting-started\/devenv\/get-started-with-wp-env.md) guide for setup instructions.\n\n<div class=\"callout callout-info\">\n    Throughout the Handbook, you may also see references to <code><a href=\"https:\/\/github.com\/WordPress\/playground-tools\/tree\/trunk\/packages\/wp-now\">wp-now<\/a><\/code>. This is a lightweight tool powered by <a hre=\"https:\/\/developer.wordpress.org\/playground\/\">WordPress Playground<\/a> that streamlines setting up a simple local WordPress environment. While still experimental, this tool is great for quickly testing WordPress releases, plugins, and themes. \n<\/div>\n\nThis list is not exhaustive, but here are several additional options to choose from if you prefer not to use `wp-env`:\n\n- [Local](https:\/\/localwp.com\/)\n- [XAMPP](https:\/\/www.apachefriends.org\/)\n- [MAMP](https:\/\/www.mamp.info\/en\/mamp\/mac\/)\n- [Varying Vagrant Vagrants](https:\/\/varyingvagrantvagrants.org\/) (VVV)\n"
    },
    {
        "path": "\/markdown\/getting-started\/devenv\/get-started-with-wp-scripts.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Get started with wp-scripts<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-scripts\/\"><code>@wordpress\/scripts<\/code><\/a> package, commonly referred to as <code>wp-scripts<\/code>, is a set of configuration files and scripts that primarily aims to standardize and simplify the development process of WordPress projects that require a JavaScript build step.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A JavaScript build step refers to the process of transforming, bundling, and optimizing JavaScript source code and related assets into a format suitable for production environments. These build steps often take modern JavaScript (ESNext and JSX) and convert it to a version compatible with most browsers. They can also bundle multiple files into one, minify the code to reduce file size and perform various other tasks to optimize the code.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You will typically be working with ESNext and JSX when building for the Block Editor, and most examples in the Block Editor Handbook are written in these syntaxes. Learning how to set up a build step is essential. However, configuring the necessary tools like <a href=\"https:\/\/webpack.js.org\/\">webpack<\/a>, <a href=\"https:\/\/babeljs.io\/\">Babel<\/a>, and <a href=\"https:\/\/eslint.org\/\">ESLint<\/a> can become complex. This is where <code>wp-scripts<\/code> comes in.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here are a few things that <code>wp-scripts<\/code> can do:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Compilation:<\/strong> Converts modern JavaScript (ESNext and JSX) into code compatible with most browsers, using Babel.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Bundling:<\/strong> Uses webpack to combine multiple JavaScript files into a single bundle for better performance.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Code Linting:<\/strong> Provides configurations for ESLint to help ensure code quality and conformity to coding standards.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Code Formatting:<\/strong> Incorporates Prettier for automated code styling to maintain consistent code formatting across projects.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Sass Compilation:<\/strong> Converts Sass (.scss or .sass) files to standard CSS.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Code Minification:<\/strong> Reduces the size of the JavaScript code for production to ensure faster page loads.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The package abstracts away much of the initial setup, configuration, and boilerplate code associated with JavaScript development for modern WordPress. You can then focus on building blocks and Block Editor extensions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Quick start<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\n    If you use <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-create-block\/\"><code>@wordpress\/create-block<\/code><\/a> package to scaffold the structure of files needed to create and register a block, you'll also get a modern JavaScript build setup (using <code>wp-scripts<\/code>) with no configuration required, so you don't need to worry about installing <code>wp-scripts<\/code> or enqueuing assets. Refer to <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-create-block\/\">Get started with <code>create-block<\/code><\/a> for more details.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Installation<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Ensure you have Node.js and <code>npm<\/code> installed on your computer. Review the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/nodejs-development-environment\/\">Node.js development environment<\/a> guide if not.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then, create a project folder and ensure it contains a <code>package.json<\/code> file, a <code>build<\/code> folder, and an <code>src<\/code> folder. The <code>src<\/code> folder should also include an <code>index.js<\/code> file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you have not created a <code>package.json<\/code> file before, navigate to the project folder in the terminal and run the <code>npm init<\/code> command. An interactive prompt will walk you through the steps. Configure as you like, but when it asks for the \"entry point\", enter <code>build\/index.js<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Of course, there are many ways to set up a project using <code>wp-scripts<\/code>, but this is the recommended approach used throughout the Block Editor Handbook.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally, install the <code>wp-scripts<\/code> package as a development dependency by running the command:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm install @wordpress\/scripts --save-dev\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Once the installation is complete, your project folder should look like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>example-project-folder\/\n\u251c\u2500\u2500 build\/\n\u251c\u2500\u2500 node_modules\/ (autogenerated)\n\u251c\u2500\u2500 src\/\n\u2502   \u2514\u2500\u2500 index.js\n\u251c\u2500\u2500 package-lock.json (autogenerated)\n\u2514\u2500\u2500 package.json\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic usage<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once installed, you can run the predefined scripts provided with <code>wp-scripts<\/code> by referencing them in the scripts section of your <code>package.json<\/code> file. Here\u2019s an example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n    \"scripts\": {\n        \"start\": \"wp-scripts start\",\n        \"build\": \"wp-scripts build\"\n    }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>These scripts can then be run using the command <code>npm run {script name}<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">The build process with <code>wp-scripts<\/code><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The two scripts you will use most often are <code>start<\/code> and <code>build<\/code> since they handle the build step. See the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/packages\/packages-scripts\/\">package documentation<\/a> for all options.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When working on your project, use the <code>npm run start<\/code> command. This will start a development server and automatically rebuild the project whenever any change is detected. Note that the compiled code in <code>build\/index.js<\/code> will not be optimized.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you are ready to deploy your project, use the <code>npm run build<\/code> command. This optimizes your code and makes it production-ready.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After the build finishes, you will see the compiled JavaScript file created at <code>build\/index.js<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A <code>build\/index.asset.php<\/code> file will also be created in the build process, which contains an array of dependencies and a version number (for cache busting). Please, note that to register a block without this <code>wp-scripts<\/code> build process you'll need to manually create <code>*.asset.php<\/code> dependencies files (see <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/minimal-block-no-build-e621a6\">example<\/a>).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Enqueuing assets<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you register a block via <code>register_block_type<\/code> the scripts defined in <code>block.json<\/code> will be automatically enqueued (see <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/minimal-block-ca6eda\">example<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To manually enqueue files in the editor, in any other context, you can refer to the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/enqueueing-assets-in-the-editor\/\">Enqueueing assets in the Editor<\/a> guide for more information, but here's a typical implementation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * Enqueue Editor assets.\n *\/\nfunction example_project_enqueue_editor_assets() {\n    $asset_file = include( plugin_dir_path( __FILE__ ) . 'build\/index.asset.php');\n\n    wp_enqueue_script(\n        'example-editor-scripts',\n        plugins_url( 'build\/index.js', __FILE__ ),\n        $asset_file&#91;'dependencies'],\n        $asset_file&#91;'version']\n    );\n}\nadd_action( 'enqueue_block_editor_assets', 'example_project_enqueue_editor_assets' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Here's <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/data-basics-59c8f8\">an example<\/a> of manually enqueuing files in the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Next steps<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>While <code>start<\/code> and <code>build<\/code> will be the two most used scripts, several other useful tools come with <code>wp-scripts<\/code> that are worth exploring. Here's a look at a few.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Maintaining code quality<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To help developers improve the quality of their code, <code>wp-scripts<\/code> comes pre-configured with tools like ESLint and Prettier. ESLint ensures your JavaScript adheres to best practices and the <a href=\"https:\/\/developer.wordpress.org\/coding-standards\/wordpress-coding-standards\/\">WordPress coding standards<\/a>, while Prettier automatically formats your code. The available scripts include:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n    \"scripts\": {\n        \"format\": \"wp-scripts format\",\n        \"lint:css\": \"wp-scripts lint-style\",\n        \"lint:js\": \"wp-scripts lint-js\",\n    }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Regularly linting and formatting your code ensures it's functional, clear, and maintainable for yourself and other developers.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Running tests<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Beyond just writing code, verifying its functionality is crucial. <code>wp-scripts<\/code> includes <a href=\"https:\/\/jestjs.io\/\">Jest<\/a>, a JavaScript testing framework, and both end-to-end and unit testing scripts:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n    \"scripts\": {\n        \"test:e2e\": \"wp-scripts test-e2e\",\n        \"test:unit\": \"wp-scripts test-unit-js\"\n    }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Unit tests validate individual units of code, such as functions, ensuring they work as intended, while end-to-end (E2E) tests evaluate the entire project by simulating real-world user scenarios to ensure all parts of the system work seamlessly together.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Advanced configurations<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>While <code>wp-scripts<\/code> provides a solid default configuration, there might be cases where you need more specialized setups. The good news is <code>wp-scripts<\/code> is highly adaptable. For example, you can extend and override the default webpack configuration, allowing you to add loaders and plugins or modify almost any part of the build process. This flexibility ensures that as your project grows or its requirements change, <code>wp-scripts<\/code> can be tailored to your evolving needs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See the <code>wp-scripts<\/code> <a href=\"https:\/\/developer.wordpress.org\/block-editor\/packages\/packages-scripts\/\">package documentation<\/a> for all configuration options.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Additional resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-scripts\/\">@wordpress\/scripts<\/a> (Official documentation)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/news\/2023\/04\/how-webpack-and-wordpress-packages-interact\/\">How webpack and WordPress packages interact<\/a> (WordPress Developer Blog)<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Get started with wp-scripts\n\nThe [`@wordpress\/scripts`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-scripts\/) package, commonly referred to as `wp-scripts`, is a set of configuration files and scripts that primarily aims to standardize and simplify the development process of WordPress projects that require a JavaScript build step.\n\nA JavaScript build step refers to the process of transforming, bundling, and optimizing JavaScript source code and related assets into a format suitable for production environments. These build steps often take modern JavaScript (ESNext and JSX) and convert it to a version compatible with most browsers. They can also bundle multiple files into one, minify the code to reduce file size and perform various other tasks to optimize the code.\n\nYou will typically be working with ESNext and JSX when building for the Block Editor, and most examples in the Block Editor Handbook are written in these syntaxes. Learning how to set up a build step is essential. However, configuring the necessary tools like [webpack](https:\/\/webpack.js.org\/), [Babel](https:\/\/babeljs.io\/), and [ESLint](https:\/\/eslint.org\/) can become complex. This is where `wp-scripts` comes in. \n\nHere are a few things that `wp-scripts` can do: \n\n- **Compilation:** Converts modern JavaScript (ESNext and JSX) into code compatible with most browsers, using Babel.\n- **Bundling:** Uses webpack to combine multiple JavaScript files into a single bundle for better performance.\n- **Code Linting:** Provides configurations for ESLint to help ensure code quality and conformity to coding standards.\n- **Code Formatting:** Incorporates Prettier for automated code styling to maintain consistent code formatting across projects.\n- **Sass Compilation:** Converts Sass (.scss or .sass) files to standard CSS.\n- **Code Minification:** Reduces the size of the JavaScript code for production to ensure faster page loads.\n\nThe package abstracts away much of the initial setup, configuration, and boilerplate code associated with JavaScript development for modern WordPress. You can then focus on building blocks and Block Editor extensions.\n\n## Quick start\n\n<div class=\"callout callout-tip\">\n    If you use <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-create-block\/\"><code>@wordpress\/create-block<\/code><\/a> package to scaffold the structure of files needed to create and register a block, you'll also get a modern JavaScript build setup (using <code>wp-scripts<\/code>) with no configuration required, so you don't need to worry about installing <code>wp-scripts<\/code> or enqueuing assets. Refer to <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-create-block\/\">Get started with <code>create-block<\/code><\/a> for more details.\n<\/div>\n\n### Installation\n\nEnsure you have Node.js and `npm` installed on your computer. Review the [Node.js development environment](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/nodejs-development-environment\/) guide if not. \n\nThen, create a project folder and ensure it contains a `package.json` file, a `build` folder, and an `src` folder. The `src` folder should also include an `index.js` file. \n\nIf you have not created a `package.json` file before, navigate to the project folder in the terminal and run the `npm init` command. An interactive prompt will walk you through the steps. Configure as you like, but when it asks for the \"entry point\", enter `build\/index.js`.\n\nOf course, there are many ways to set up a project using `wp-scripts`, but this is the recommended approach used throughout the Block Editor Handbook.\n\nFinally, install the `wp-scripts` package as a development dependency by running the command:\n\n```bash\nnpm install @wordpress\/scripts --save-dev\n```\n\nOnce the installation is complete, your project folder should look like this:\n\n```bash\nexample-project-folder\/\n\u251c\u2500\u2500 build\/\n\u251c\u2500\u2500 node_modules\/ (autogenerated)\n\u251c\u2500\u2500 src\/\n\u2502   \u2514\u2500\u2500 index.js\n\u251c\u2500\u2500 package-lock.json (autogenerated)\n\u2514\u2500\u2500 package.json\n```\n\n### Basic usage\n\nOnce installed, you can run the predefined scripts provided with `wp-scripts` by referencing them in the scripts section of your `package.json` file. Here\u2019s an example:\n\n```json\n{\n    \"scripts\": {\n        \"start\": \"wp-scripts start\",\n        \"build\": \"wp-scripts build\"\n    }\n}\n```\n\nThese scripts can then be run using the command `npm run {script name}`. \n\n### The build process with `wp-scripts`\n\nThe two scripts you will use most often are `start` and `build` since they handle the build step. See the [package documentation](https:\/\/developer.wordpress.org\/block-editor\/packages\/packages-scripts\/) for all options.\n\nWhen working on your project, use the `npm run start` command. This will start a development server and automatically rebuild the project whenever any change is detected. Note that the compiled code in `build\/index.js` will not be optimized.\n\nWhen you are ready to deploy your project, use the `npm run build` command. This optimizes your code and makes it production-ready.\n\nAfter the build finishes, you will see the compiled JavaScript file created at `build\/index.js`. \n\nA `build\/index.asset.php` file will also be created in the build process, which contains an array of dependencies and a version number (for cache busting). Please, note that to register a block without this `wp-scripts` build process you'll need to manually create `*.asset.php` dependencies files (see [example](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/minimal-block-no-build-e621a6)).\n\n### Enqueuing assets\n\nIf you register a block via `register_block_type` the scripts defined in `block.json` will be automatically enqueued (see [example](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/minimal-block-ca6eda))\n\nTo manually enqueue files in the editor, in any other context, you can refer to the [Enqueueing assets in the Editor](https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/enqueueing-assets-in-the-editor\/) guide for more information, but here's a typical implementation. \n\n```php\n\/**\n * Enqueue Editor assets.\n *\/\nfunction example_project_enqueue_editor_assets() {\n    $asset_file = include( plugin_dir_path( __FILE__ ) . 'build\/index.asset.php');\n\n    wp_enqueue_script(\n        'example-editor-scripts',\n        plugins_url( 'build\/index.js', __FILE__ ),\n        $asset_file['dependencies'],\n        $asset_file['version']\n    );\n}\nadd_action( 'enqueue_block_editor_assets', 'example_project_enqueue_editor_assets' );\n```\n\nHere's [an example](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/data-basics-59c8f8) of manually enqueuing files in the editor.\n\n## Next steps\n\nWhile `start` and `build` will be the two most used scripts, several other useful tools come with `wp-scripts` that are worth exploring. Here's a look at a few.\n\n### Maintaining code quality\n\nTo help developers improve the quality of their code, `wp-scripts` comes pre-configured with tools like ESLint and Prettier. ESLint ensures your JavaScript adheres to best practices and the [WordPress coding standards](https:\/\/developer.wordpress.org\/coding-standards\/wordpress-coding-standards\/), while Prettier automatically formats your code. The available scripts include: \n\n```json\n{\n    \"scripts\": {\n        \"format\": \"wp-scripts format\",\n        \"lint:css\": \"wp-scripts lint-style\",\n        \"lint:js\": \"wp-scripts lint-js\",\n    }\n}\n```\n\nRegularly linting and formatting your code ensures it's functional, clear, and maintainable for yourself and other developers.\n\n### Running tests\n\nBeyond just writing code, verifying its functionality is crucial. `wp-scripts` includes [Jest](https:\/\/jestjs.io\/), a JavaScript testing framework, and both end-to-end and unit testing scripts:\n\n```json\n{\n    \"scripts\": {\n        \"test:e2e\": \"wp-scripts test-e2e\",\n        \"test:unit\": \"wp-scripts test-unit-js\"\n    }\n}\n```\n\nUnit tests validate individual units of code, such as functions, ensuring they work as intended, while end-to-end (E2E) tests evaluate the entire project by simulating real-world user scenarios to ensure all parts of the system work seamlessly together.\n\n### Advanced configurations \n\nWhile `wp-scripts` provides a solid default configuration, there might be cases where you need more specialized setups. The good news is `wp-scripts` is highly adaptable. For example, you can extend and override the default webpack configuration, allowing you to add loaders and plugins or modify almost any part of the build process. This flexibility ensures that as your project grows or its requirements change, `wp-scripts` can be tailored to your evolving needs.\n\nSee the `wp-scripts` [package documentation](https:\/\/developer.wordpress.org\/block-editor\/packages\/packages-scripts\/) for all configuration options.\n\n## Additional resources\n\n- [@wordpress\/scripts](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-scripts\/) (Official documentation)\n- [How webpack and WordPress packages interact](https:\/\/developer.wordpress.org\/news\/2023\/04\/how-webpack-and-wordpress-packages-interact\/) (WordPress Developer Blog)\n"
    },
    {
        "path": "\/markdown\/getting-started\/devenv\/get-started-with-create-block.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Get started with create-block<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Custom blocks for the Block Editor in WordPress are typically registered using plugins and are defined through a specific set of files. The <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/\"><code>@wordpress\/create-block<\/code><\/a> package is an officially supported tool to scaffold the structure of files needed to create and register a block. It generates all the necessary code to start a project and integrates a modern JavaScript build setup (using <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-scripts\/\"><code>wp-scripts<\/code><\/a>) with no configuration required.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The package is designed to help developers quickly set up a block development environment following WordPress best practices.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Quick start<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Installation<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Start by ensuring you have Node.js and <code>npm<\/code> installed on your computer. Review the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/nodejs-development-environment\/\">Node.js development environment<\/a> guide if not.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can use <code>create-block<\/code> to scaffold a block just about anywhere and then <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-env\/\">use <code>wp-env<\/code><\/a> from the inside of the generated plugin folder. This will create a local WordPress development environment with your new block plugin installed and activated.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you have your own <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/#local-wordpress-environment\">local WordPress development environment<\/a> already set up, navigate to the <code>plugins\/<\/code> folder using the terminal.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Run the following command to scaffold an example block plugin:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npx @wordpress\/create-block@latest todo-list\ncd todo-list\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The <code>slug<\/code> provided (<code>todo-list<\/code>) defines the folder name for the scaffolded plugin and the internal block name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Navigate to the Plugins page of our local WordPress installation and activate the \"Todo List\" plugin. The example block will then be available in the Editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic usage<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>create-block<\/code> assumes you will use modern JavaScript (ESNext and JSX) to build your block. This requires a build step to compile the code into a format that browsers can understand. Luckily, the <code>wp-scripts<\/code> package handles this process for you. Refer to the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-scripts\">Get started with wp-scripts<\/a> for an introduction to this package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When <code>create-block<\/code> scaffolds the block, it installs <code>wp-scripts<\/code> and adds the most common scripts to the block's <code>package.json<\/code> file. By default, those include:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n    \"scripts\": {\n\t\t\"build\": \"wp-scripts build\",\n\t\t\"format\": \"wp-scripts format\",\n\t\t\"lint:css\": \"wp-scripts lint-style\",\n\t\t\"lint:js\": \"wp-scripts lint-js\",\n\t\t\"packages-update\": \"wp-scripts packages-update\",\n\t\t\"plugin-zip\": \"wp-scripts plugin-zip\",\n\t\t\"start\": \"wp-scripts start\"\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>These scripts can then be run using the command <code>npm run {script name}<\/code>. The two scripts you will use most often are <code>start<\/code> and <code>build<\/code> since they handle the build step.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When working on your block, use the <code>npm run start<\/code> command. This will start a development server and automatically rebuild the block whenever any code change is detected.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you are ready to deploy your block, use the <code>npm run build<\/code> command. This optimizes your code and makes it production-ready.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See the <code>wp-scripts<\/code> <a href=\"https:\/\/developer.wordpress.org\/block-editor\/packages\/packages-scripts\/\">package documentation<\/a> for more details about each available script.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Alternate implementations<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Interactive mode<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For developers who prefer a more guided experience, the <code>create-block<\/code> package provides an interactive mode. Instead of manually specifying all options upfront, like the <code>slug<\/code> in the above example, this mode will prompt you for inputs step-by-step.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To use this mode, run the command:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npx @wordpress\/create-block@latest\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Follow the prompts to configure your block settings interactively.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Quick start mode using options<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you're already familiar with the <code>create-block<\/code> <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/#options\">options<\/a> and want a more streamlined setup, you can use quick start mode. This allows you to pass specific options directly in the command line, eliminating the need for interactive prompts.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For instance, to quickly create a block named \"my-block\" with a namespace of \"my-plugin\" that is a Dynamic block, use this command:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npx @wordpress\/create-block@latest --namespace=\"my-plugin\" --slug=\"my-block\" --variant=\"dynamic\"\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Using templates<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>create-block<\/code> package also supports the use of templates, enabling you to create blocks based on predefined configurations and structures. This is especially useful when you have a preferred block structure or when you're building multiple blocks with similar configurations.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To use a template, specify the <code>--template<\/code> option followed by the template name or path:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npx @wordpress\/create-block --template=\"my-custom-template\"\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Templates must be set up in advance so the <code>create-block<\/code> package knows where to find them. Learn more in the <code>create-block<\/code> <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/#template\">documentation<\/a>, and review the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/packages-create-block-external-template\/\">External Project Templates<\/a> guide.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Additional resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/learn.wordpress.org\/tutorial\/using-the-create-block-tool\/\">Using the create-block tool<\/a> (Learn WordPress tutorial)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/\">@wordpress\/create-block<\/a> (Official documentation)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-scripts\/\">@wordpress\/scripts<\/a> (Official documentation)<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Get started with create-block\n\nCustom blocks for the Block Editor in WordPress are typically registered using plugins and are defined through a specific set of files. The [`@wordpress\/create-block`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/) package is an officially supported tool to scaffold the structure of files needed to create and register a block. It generates all the necessary code to start a project and integrates a modern JavaScript build setup (using [`wp-scripts`](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-scripts\/)) with no configuration required. \n\nThe package is designed to help developers quickly set up a block development environment following WordPress best practices.\n\n## Quick start\n\n### Installation\n\nStart by ensuring you have Node.js and `npm` installed on your computer. Review the [Node.js development environment](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/nodejs-development-environment\/) guide if not.\n\nYou can use `create-block` to scaffold a block just about anywhere and then [use `wp-env`](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-env\/) from the inside of the generated plugin folder. This will create a local WordPress development environment with your new block plugin installed and activated.\n\nIf you have your own [local WordPress development environment](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/#local-wordpress-environment) already set up, navigate to the `plugins\/` folder using the terminal.\n\nRun the following command to scaffold an example block plugin:\n\n```bash\nnpx @wordpress\/create-block@latest todo-list\ncd todo-list\n```\n\nThe `slug` provided (`todo-list`) defines the folder name for the scaffolded plugin and the internal block name. \n\nNavigate to the Plugins page of our local WordPress installation and activate the \"Todo List\" plugin. The example block will then be available in the Editor. \n\n### Basic usage\n\nThe `create-block` assumes you will use modern JavaScript (ESNext and JSX) to build your block. This requires a build step to compile the code into a format that browsers can understand. Luckily, the `wp-scripts` package handles this process for you. Refer to the [Get started with wp-scripts](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-scripts) for an introduction to this package. \n\n When `create-block` scaffolds the block, it installs `wp-scripts` and adds the most common scripts to the block's `package.json` file. By default, those include:\n\n```json\n{\n    \"scripts\": {\n\t\t\"build\": \"wp-scripts build\",\n\t\t\"format\": \"wp-scripts format\",\n\t\t\"lint:css\": \"wp-scripts lint-style\",\n\t\t\"lint:js\": \"wp-scripts lint-js\",\n\t\t\"packages-update\": \"wp-scripts packages-update\",\n\t\t\"plugin-zip\": \"wp-scripts plugin-zip\",\n\t\t\"start\": \"wp-scripts start\"\n\t}\n}\n```\n\nThese scripts can then be run using the command `npm run {script name}`. The two scripts you will use most often are `start` and `build` since they handle the build step.\n\nWhen working on your block, use the `npm run start` command. This will start a development server and automatically rebuild the block whenever any code change is detected.\n\nWhen you are ready to deploy your block, use the `npm run build` command. This optimizes your code and makes it production-ready.\n\nSee the `wp-scripts` [package documentation](https:\/\/developer.wordpress.org\/block-editor\/packages\/packages-scripts\/) for more details about each available script.\n\n## Alternate implementations\n\n### Interactive mode\n\nFor developers who prefer a more guided experience, the `create-block` package provides an interactive mode. Instead of manually specifying all options upfront, like the `slug` in the above example, this mode will prompt you for inputs step-by-step.\n\nTo use this mode, run the command:\n\n```bash\nnpx @wordpress\/create-block@latest\n```\n\nFollow the prompts to configure your block settings interactively.\n\n### Quick start mode using options\n\nIf you're already familiar with the `create-block` [options](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/#options) and want a more streamlined setup, you can use quick start mode. This allows you to pass specific options directly in the command line, eliminating the need for interactive prompts.\n\nFor instance, to quickly create a block named \"my-block\" with a namespace of \"my-plugin\" that is a Dynamic block, use this command:\n\n```bash\nnpx @wordpress\/create-block@latest --namespace=\"my-plugin\" --slug=\"my-block\" --variant=\"dynamic\"\n```\n\n### Using templates\n\nThe `create-block` package also supports the use of templates, enabling you to create blocks based on predefined configurations and structures. This is especially useful when you have a preferred block structure or when you're building multiple blocks with similar configurations.\n\nTo use a template, specify the `--template` option followed by the template name or path:\n```bash\nnpx @wordpress\/create-block --template=\"my-custom-template\"\n```\n\nTemplates must be set up in advance so the `create-block` package knows where to find them. Learn more in the `create-block` [documentation](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/#template), and review the [External Project Templates](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/packages-create-block-external-template\/) guide.\n\n## Additional resources\n\n- [Using the create-block tool](https:\/\/learn.wordpress.org\/tutorial\/using-the-create-block-tool\/) (Learn WordPress tutorial)\n- [@wordpress\/create-block](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/) (Official documentation)\n- [@wordpress\/scripts](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-scripts\/) (Official documentation)\n"
    },
    {
        "path": "\/markdown\/getting-started\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Getting Started<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Welcome to the Getting Started documentation. From setting up your development environment and building your first block to understanding the fundamentals, this section is the perfect starting point if you are new to block development or want to improve your skills.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Navigating this chapter<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Use the following links to locate a topic within this chapter. If you have never built a block before, consider reading through the documentation in the order listed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/\">Block Development Environment<\/a>:<\/strong> Set up the right development environment to create blocks and get introduced to basic tools for block development such as <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-env\/\"><code>wp-env<\/code><\/a>, <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-create-block\/\"><code>create-block<\/code><\/a>, and <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-create-block\/\"><code>wp-scripts<\/code><\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/quick-start-guide\/\">Quick Start Guide<\/a>:<\/strong> Get a custom block up and running in less than one minute.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/tutorial\/\">Tutorial: Build your first block<\/a>:<\/strong> Learn how to build a fully functional custom block from the ground up.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/\">Fundamentals of Block Development<\/a>:<\/strong> Learn the most relevant concepts in block development.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/glossary\/\">Glossary<\/a>:<\/strong> A glossary of common terms you will encounter when working with the Block Editor.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/faq\/\">Frequently Asked Questions<\/a>:<\/strong> Common questions (and answers) that have come up from the last few years of Gutenberg's development.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Keeping up with the WordPress project<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once you have finished reviewing this chapter, you will have a solid understanding of blocks and how to develop for the Block Editor, but what's next?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The WordPress project, and Gutenberg in particular, iterates quickly. Staying up-to-date on all the changes can be challenging. So, here are a few essential developer resources you should be aware of. Each person will have their own unique needs in keeping up with a project of this scale, so choose what's right for you.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/wordpress.org\/about\/roadmap\/\">WordPress Roadmap<\/a>:<\/strong> The high-level roadmap for WordPress and Gutenberg.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/make.wordpress.org\/core\/\">Make Core<\/a>:<\/strong> The primary blog for WordPress Core where all major project updates are posted.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/make.wordpress.org\/chat\/\">WordPress Slack<\/a>:<\/strong> The official Slack community for all WordPress contributors is the hub for team meetings, ongoing conversations, and more. Make sure to join the <code>#core<\/code> and <code>#core-editor<\/code> channels.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/\">Gutenberg GitHub repository<\/a>:<\/strong> This is where all Block Editor development happens. Keeping a close eye on the repository will give you a real-time understanding of what\u2019s being worked on by fellow contributors.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/make.wordpress.org\/core\/handbook\/references\/keeping-up-with-gutenberg-index\/\">Keeping up with Gutenberg<\/a>:<\/strong> A compilation of Gutenberg-related posts from the many <a href=\"https:\/\/make.wordpress.org\/\">Make teams<\/a>, including Core, Design, Meta, and Themes.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/make.wordpress.org\/core\/tag\/gutenberg-new\/\">\"What's new in Gutenberg?\"<\/a>:<\/strong> Biweekly posts published on Make Core with each Gutenberg release. They are a great way to review the most relevant new features and the full changelog.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong><a href=\"https:\/\/developer.wordpress.org\/news\/\">\"What's new for developers?\"<\/a>:<\/strong> Monthly posts on the WordPress Developer Blog that showcase the most important developer-related changes that happened in WordPress the previous month.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Additional resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For more resources on block development and extending the Block Editor, review the additional sections here in the Block Editor Handbook. Further practical examples are also available in the <a href=\"https:\/\/github.com\/wptrainingteam\/block-development-examples\">block-development-examples<\/a> GitHub repository.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you are looking for more educational content, check out <a href=\"https:\/\/learn.wordpress.org\/\">Learn WordPress<\/a>, where you can find <a href=\"https:\/\/learn.wordpress.org\/tutorials\/\">tutorials<\/a>, <a href=\"https:\/\/learn.wordpress.org\/courses\/\">courses<\/a>, and <a href=\"https:\/\/learn.wordpress.org\/online-workshops\/\">online workshops<\/a>. Here is a selection of current offerings:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/learn.wordpress.org\/course\/introduction-to-block-development-build-your-first-custom-block\/\">Intro to Block Development: Build Your First Custom Block<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/learn.wordpress.org\/course\/converting-a-shortcode-to-a-block\/\">Converting a Shortcode to a Block<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/learn.wordpress.org\/course\/using-the-wordpress-data-layer\/\">Using the WordPress Data Layer<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/learn.wordpress.org\/workshop\/registering-block-patterns\/\">Registering Block Patterns<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/learn.wordpress.org\/workshop\/intro-to-gutenberg-block-development\/\">Intro to Gutenberg Block Development<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/learn.wordpress.org\/workshop\/intro-to-publishing-with-the-block-editor\/\">Intro to Publishing with the Block Editor<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Getting Started\n\nWelcome to the Getting Started documentation. From setting up your development environment and building your first block to understanding the fundamentals, this section is the perfect starting point if you are new to block development or want to improve your skills.\n\n## Navigating this chapter\n\nUse the following links to locate a topic within this chapter. If you have never built a block before, consider reading through the documentation in the order listed.\n\n- **[Block Development Environment](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/):** Set up the right development environment to create blocks and get introduced to basic tools for block development such as [`wp-env`](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-env\/), [`create-block`](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-create-block\/), and [`wp-scripts`](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-create-block\/)\n- **[Quick Start Guide](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/quick-start-guide\/):** Get a custom block up and running in less than one minute.\n- **[Tutorial: Build your first block](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/tutorial\/):** Learn how to build a fully functional custom block from the ground up.\n- **[Fundamentals of Block Development](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/):** Learn the most relevant concepts in block development.\n- **[Glossary](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/glossary\/):** A glossary of common terms you will encounter when working with the Block Editor.\n- **[Frequently Asked Questions](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/faq\/):** Common questions (and answers) that have come up from the last few years of Gutenberg's development. \n\n## Keeping up with the WordPress project\n\nOnce you have finished reviewing this chapter, you will have a solid understanding of blocks and how to develop for the Block Editor, but what's next? \n\nThe WordPress project, and Gutenberg in particular, iterates quickly. Staying up-to-date on all the changes can be challenging. So, here are a few essential developer resources you should be aware of. Each person will have their own unique needs in keeping up with a project of this scale, so choose what's right for you.\n\n- **[WordPress Roadmap](https:\/\/wordpress.org\/about\/roadmap\/):** The high-level roadmap for WordPress and Gutenberg.\n- **[Make Core](https:\/\/make.wordpress.org\/core\/):** The primary blog for WordPress Core where all major project updates are posted.\n- **[WordPress Slack](https:\/\/make.wordpress.org\/chat\/):** The official Slack community for all WordPress contributors is the hub for team meetings, ongoing conversations, and more. Make sure to join the `#core` and `#core-editor` channels.\n- **[Gutenberg GitHub repository](https:\/\/github.com\/WordPress\/gutenberg\/):** This is where all Block Editor development happens. Keeping a close eye on the repository will give you a real-time understanding of what\u2019s being worked on by fellow contributors.\n- **[Keeping up with Gutenberg](https:\/\/make.wordpress.org\/core\/handbook\/references\/keeping-up-with-gutenberg-index\/):** A compilation of Gutenberg-related posts from the many [Make teams](https:\/\/make.wordpress.org\/), including Core, Design, Meta, and Themes.\n- **[\"What's new in Gutenberg?\"](https:\/\/make.wordpress.org\/core\/tag\/gutenberg-new\/):** Biweekly posts published on Make Core with each Gutenberg release. They are a great way to review the most relevant new features and the full changelog.\n- **[\"What's new for developers?\"](https:\/\/developer.wordpress.org\/news\/):** Monthly posts on the WordPress Developer Blog that showcase the most important developer-related changes that happened in WordPress the previous month.\n\n## Additional resources\n\nFor more resources on block development and extending the Block Editor, review the additional sections here in the Block Editor Handbook. Further practical examples are also available in the [block-development-examples](https:\/\/github.com\/wptrainingteam\/block-development-examples) GitHub repository.\n\nIf you are looking for more educational content, check out [Learn WordPress](https:\/\/learn.wordpress.org\/), where you can find [tutorials](https:\/\/learn.wordpress.org\/tutorials\/), [courses](https:\/\/learn.wordpress.org\/courses\/), and [online workshops](https:\/\/learn.wordpress.org\/online-workshops\/). Here is a selection of current offerings:\n\n-   [Intro to Block Development: Build Your First Custom Block](https:\/\/learn.wordpress.org\/course\/introduction-to-block-development-build-your-first-custom-block\/)\n-   [Converting a Shortcode to a Block](https:\/\/learn.wordpress.org\/course\/converting-a-shortcode-to-a-block\/)\n-   [Using the WordPress Data Layer](https:\/\/learn.wordpress.org\/course\/using-the-wordpress-data-layer\/)\n-   [Registering Block Patterns](https:\/\/learn.wordpress.org\/workshop\/registering-block-patterns\/)\n-   [Intro to Gutenberg Block Development](https:\/\/learn.wordpress.org\/workshop\/intro-to-gutenberg-block-development\/)\n-   [Intro to Publishing with the Block Editor](https:\/\/learn.wordpress.org\/workshop\/intro-to-publishing-with-the-block-editor\/)\n"
    },
    {
        "path": "\/markdown\/getting-started\/tutorial.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Tutorial: Build your first block<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In this tutorial, you will build a \"Copyright Date Block\"\u2014a basic yet practical block that displays the copyright symbol (\u00a9), the current year, and an optional starting year. This type of content is commonly used in website footers.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The tutorial will guide you through the complete process, from scaffolding the block plugin using the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-create-block\/\"><code>create-block<\/code><\/a> package to modifying each file. While previous WordPress development experience is beneficial, it's not a prerequisite for this tutorial.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>By the end of this guide, you will have a clear understanding of block development fundamentals and the necessary skills to create your own WordPress blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">What you're going to build<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Here's a quick look at what you're going to build.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-1.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">What you're going to build<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>You can also interact with the finished project in <a href=\"https:\/\/playground.wordpress.net\/?blueprint-url=https:\/\/raw.githubusercontent.com\/WordPress\/block-development-examples\/trunk\/plugins\/copyright-date-block-09aac3\/_playground\/blueprint.json\">WordPress Playground<\/a> or use the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/quick-start-guide\/\">Quick Start Guide<\/a> to install the complete block plugin in your local WordPress environment.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Prerequisites<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To complete this tutorial, you will need:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Code editor<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Node.js development tools<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Local WordPress environment<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>If you don't have one or more of these items, the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/\">Block Development Environment<\/a> documentation will help you get started. Come back here once you are all set up.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n\tThis tutorial uses <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-env\/\"><code>wp-env<\/code><\/a> to create a local WordPress development environment. However, feel free to use alternate local development tools if you already have one that you prefer.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Scaffolding the block<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The first step in creating the Copyright Date Block is to scaffold the initial block structure using the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/\"><code>@wordpress\/create-block<\/code><\/a> package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n\tReview the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-env\/\">Get started with create-block<\/a> documentation for an introduction to using this package.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>You can use <code>create-block<\/code> from just about any directory (folder) on your computer and then use <code>wp-env<\/code> to create a local WordPress development environment with your new block plugin installed and activated.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Therefore, choose a directory to place the block plugin or optionally create a new folder called \"Block Tutorial\". Open your terminal and <code>cd<\/code> to this directory. Then run the following command.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n\tIf you are not using <code>wp-env<\/code>, instead, navigate to the <code>plugins\/<\/code> folder in your local WordPress installation using the terminal and run the following command.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npx @wordpress\/create-block@latest copyright-date-block --variant=dynamic\ncd copyright-date-block\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>After executing this command, you'll find a new directory named <code>copyright-date-block<\/code> in the plugins folder. This directory contains all the initial files needed to start customizing your block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This command also sets up the basic structure of your block, with <code>copyright-date-block<\/code> as its slug. This slug uniquely identifies your block within WordPress.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n\tYou might have noticed that the command uses the <code>--variant=dynamic<\/code> flag. This tells <code>create-block<\/code> you want to scaffold a dynamically rendered block. Later in this tutorial, you will learn about dynamic and static rendering and add static rendering to this block.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Navigate to the Plugins page in the WordPress admin and confirm that the plugin is active. Then, create a new page or post and ensure you can insert the Copyright Date Block. It should look like this once inserted.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-2.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">The scaffolded block in the Editor<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Reviewing the files<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Before we begin modifying the scaffolded block, it's important to review the plugin's file structure. Open the plugin folder in your code editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-3.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">The files that make up the block plugin<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Next, look at the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/file-structure-of-a-block\/\">File structure of a block<\/a> documentation for a thorough overview of what each file does. Don't worry if this is overwhelming right now. You will learn how to use each file throughout this tutorial.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n\tSince you scaffolded a dynamic block, you will not see a <code>save.js<\/code> file. Later in the tutorial, you will add this file to the plugin to enable static rendering, so stay tuned.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Initial setup<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let's start by creating the simplest Copyright Date Block possible, which will be a dynamically rendered block that simply displays the copyright symbol (\u00a9) and the current year. We'll also add a few controls allowing the user to modify font size and text color.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before proceeding to the following steps, run <code>npm run start<\/code> in the terminal from within the plugin directory. This command will watch each file in the <code>\/src<\/code> folder for changes. The block's build files will be updated each time you save a file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Check out the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/javascript-in-the-block-editor\/\">Working with JavaScript for the Block Editor<\/a> documentation to learn more.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Updating block.json<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Open the <code>block.json<\/code> file in the <code>\/src<\/code> folder.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"$schema\": \"https:\/\/schemas.wp.org\/trunk\/block.json\",\n\t\"apiVersion\": 3,\n\t\"name\": \"create-block\/copyright-date-block\",\n\t\"version\": \"0.1.0\",\n\t\"title\": \"Copyright Date Block\",\n\t\"category\": \"widgets\",\n\t\"icon\": \"smiley\",\n\t\"description\": \"Example block scaffolded with Create Block tool.\",\n\t\"example\": {},\n\t\"supports\": {\n\t\t\"html\": false\n\t},\n\t\"textdomain\": \"copyright-date-block\",\n\t\"editorScript\": \"file:.\/index.js\",\n\t\"editorStyle\": \"file:.\/index.css\",\n\t\"style\": \"file:.\/style-index.css\",\n\t\"render\": \"file:.\/render.php\",\n\t\"viewScript\": \"file:.\/view.js\"\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n\tReview the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-json\/\">block.json<\/a> documentation for an introduction to this file.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Since this scaffolding process created this file, it requires some updating to suit the needs of the Copyright Date Block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Modifying the block identity<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Begin by removing the icon and adding a more appropriate description. You will add a custom icon later.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Remove the line for <code>icon<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Update the description to \"Display your site's copyright date.\"<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Save the file<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>After you refresh the Editor, you should now see that the block no longer has the smiley face icon, and its description has been updated.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-4.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">The block in the Editor with updated information<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Adding block supports<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Next, let's add a few <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-supports\/\">block supports<\/a> so that the user can control the font size and text color of the block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\n\tYou should always try to use native block supports before building custom functionality. This approach provides users with a consistent editing experience across blocks, and your block benefits from Core functionality with only a few lines of code.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Update the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-json\/#enable-ui-settings-panels-for-the-block-with-supports\"><code>supports<\/code><\/a> section of the <code>block.json<\/code> file to look like this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\"supports\": {\n\t\"color\": {\n\t\t\"background\": false,\n\t\t\"text\": true\n\t},\n\t\"html\": false,\n\t\"typography\": {\n\t\t\"fontSize\": true\n\t}\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note that when you enable text color support with <code>\"text\": true<\/code>, the background color is also enabled by default. You are welcome to keep it enabled, but it's not required for this tutorial, so you can manually set <code>\"background\": false<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Save the file and select the block in the Editor. You will now see both Color and Typography panels in the Settings Sidebar. Try modifying the settings and see what happens.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-5.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">The block in the Editor with block supports<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Removing unnecessary code<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For simplicity, the styling for the Copyright Date Block will be controlled entirely by the color and typography block supports. This block also does not have any front-end Javascript. Therefore, you don't need to specify stylesheets or a <code>viewScript<\/code> in the <code>block.json<\/code> file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Remove the line for <code>editorStyle<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Remove the line for <code>style<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Remove the line for <code>viewScript<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Save the file<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Refresh the Editor, and you will see that the block styling now matches your current theme.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-6.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">The block in the Editor without default styling<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Putting it all together<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Your final <code>block.json<\/code> file should look like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"$schema\": \"https:\/\/schemas.wp.org\/trunk\/block.json\",\n\t\"apiVersion\": 3,\n\t\"name\": \"create-block\/copyright-date-block\",\n\t\"version\": \"0.1.0\",\n\t\"title\": \"Copyright Date Block\",\n\t\"category\": \"widgets\",\n\t\"description\": \"Display your site's copyright date.\",\n\t\"example\": {},\n\t\"supports\": {\n\t\t\"color\": {\n\t\t\t\"background\": false,\n\t\t\t\"text\": true\n\t\t},\n\t\t\"html\": false,\n\t\t\"typography\": {\n\t\t\t\"fontSize\": true\n\t\t}\n\t},\n\t\"textdomain\": \"copyright-date-block\",\n\t\"editorScript\": \"file:.\/index.js\",\n\t\"render\": \"file:.\/render.php\"\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Updating index.js<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Before you start building the functionality of the block itself, let's do a bit more cleanup and add a custom icon to the block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Open the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/file-structure-of-a-block\/#index-js\"><code>index.js<\/code><\/a> file. This is the main JavaScript file of the block and is used to register it on the client. You can learn more about client-side and server-side registration in the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/registration-of-a-block\/\">Registration of a block<\/a> documentation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by looking at the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-registration\/\"><code>registerBlockType<\/code><\/a> function. This function accepts the name of the block, which we are getting from the imported <code>block.json<\/code> file, and the block configuration object.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import Edit from '.\/edit';\nimport metadata from '.\/block.json';\n\nregisterBlockType( metadata.name, {\n\tedit: Edit,\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>By default, the object just includes the <code>edit<\/code> property, but you can add many more, including <code>icon<\/code>. While most of these properties are already defined in <code>block.json<\/code>, you need to specify the icon here to use a custom SVG.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Adding a custom icon<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Using the calendar icon from the <a href=\"https:\/\/wordpress.github.io\/gutenberg\/?path=\/story\/icons-icon--library\">Gutenberg Storybook<\/a>, add the SVG to the function like so:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const calendarIcon = (\n\t<svg<br>\t\tviewBox=\"0 0 24 24\"\n\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\taria-hidden=\"true\"\n\t\tfocusable=\"false\"\n\t>\n\t\t<path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm.5 16c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5V7h15v12zM9 10H7v2h2v-2zm0 4H7v2h2v-2zm4-4h-2v2h2v-2zm4 0h-2v2h2v-2zm-4 4h-2v2h2v-2zm4 0h-2v2h2v-2z\">\n\t\n);\n\nregisterBlockType( metadata.name, {\n\ticon: calendarIcon,\n\tedit: Edit\n} );\n<\/svg<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\n\tAll block icons should be 24 pixels square. Note the <code>viewBox<\/code> parameter above.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Save the <code>index.js<\/code> file and refresh the Editor. You will now see the calendar icon instead of the default.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-7.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">The block in the Editor a custom icon<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>At this point, the block's icon and description are correct, and block supports allow you to change the font size and text color. Now, it's time to move on to the actual functionality of the block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Updating edit.js<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/file-structure-of-a-block\/#edit-js\"><code>edit.js<\/code><\/a> file controls how the block functions and appears in the Editor. Right now, the user sees the message \" Copyright Date Block \u2013 hello from the editor!\". Let's change that.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Open the file and see that the <code>Edit()<\/code> function returns a paragraph tag with the default message.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export default function Edit() {\n\treturn (\n\t\t<p {=\"\" ...useblockprops()=\"\" }=\"\">\n\t\t\t{ __(\n\t\t\t\t'Copyright Date Block \u2013 hello from the editor!',\n\t\t\t\t'copyright-date-block-demo'\n\t\t\t) }\n\t\t<\/p>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>It looks a bit more complicated than it is.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#block-wrapper-props\"><code>useBlockProps()<\/code><\/a> outputs all the necessary CSS classes and styles in the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-wrapper\/#the-edit-components-markup\">block's wrapper<\/a> needed by the Editor, which includes the style provided by the block supports you added earlier<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-i18n\/\"><code>__()<\/code><\/a> is used for the internationalization of text strings<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n\tReview the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-wrapper\/\">block wrapper<\/a> documentation for an introductory guide on how to ensure the block's markup wrapper has the proper attributes.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>As a reminder, the main purpose of this block is to display the copyright symbol (\u00a9) and the current year. So, you first need to get the current year in string form, which can be done with the following code.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const currentYear = new Date().getFullYear().toString();\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Next, update the function to display the correct information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export default function Edit() {\n\tconst currentYear = new Date().getFullYear().toString();\n\n\treturn (\n\t\t<p {=\"\" ...useblockprops()=\"\" }=\"\">\u00a9 { currentYear }<\/p>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Save the <code>edit.js<\/code> file and refresh the Editor. You will now see the copyright symbol (\u00a9) followed by the current year.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-8.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">The block in the Editor displays the correct content<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Updating render.php<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>While the block is working properly in the Editor, the default block message is still being displayed on the front end. To fix this, open the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/file-structure-of-a-block\/#render-php\"><code>render.php<\/code><\/a> file, and you will see the following.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>...\n?>\n<p <?php=\"\" echo=\"\" get_block_wrapper_attributes();=\"\" ?=\"\">>\n\t\n<\/p>\n\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Similar to the <code>useBlockProps()<\/code> function in the Editor, <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/get_block_wrapper_attributes\/\"><code>get_block_wrapper_attributes()<\/code><\/a> outputs all the necessary CSS classes and styles in the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-wrapper\/#the-server-side-render-markup\">block's wrapper<\/a>. Only the content needs to be updated.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can use <code>date( \"Y\" )<\/code> to get the current year in PHP, and your <code>render.php<\/code> should look like this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>...\n?>\n<p <?php=\"\" echo=\"\" get_block_wrapper_attributes();=\"\" ?=\"\">>\u00a9 <\/p>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Save the file and confirm that the block appears correctly in the Editor and on the front end.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Cleaning up<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When you use the <code>create-block<\/code> package to scaffold a block, it might include files that you don't need. In the case of this tutorial, the block doesn't use stylesheets or front end JavaScript. Clean up the plugin's <code>src\/<\/code> folder with the following actions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>In the <code>edit.js<\/code> file, remove the lines that import <code>editor.scss<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>In the <code>index.js<\/code> file, remove the lines that import <code>style.scss<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Delete the editor.scss, style.scss, and view.js files<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Finally, make sure that there are no unsaved changes and then terminate the <code>npm run start<\/code> command. Run <code>npm run build<\/code> to optimize your code and make it production-ready.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You have built a fully functional WordPress block, but let's not stop here. In the next sections, we'll add functionality and enable static rendering.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Adding block attributes<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Copyright Date Block you have built shows the current year, but what if you wanted to display a starting year as well?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-1.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">What you're going to build<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>This functionality would require users to enter their starting year somewhere on the block. They should also have the ability to toggle it on or off.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You could implement this in different ways, but all would require <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-attributes\/\">block attributes<\/a>. Attributes allow you to store custom data for the block that can then be used to modify the block's markup.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To enable this starting year functionality, you will need one attribute to store the starting year and another that will be used to tell WordPress whether the starting year should be displayed or not.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Updating block.json<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Block attributes are generally specified in the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-json\/#data-storage-in-the-block-with-attributes\"><code>block.json<\/code><\/a> file. So open up the file and add the following section after the <code>example<\/code> property.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\"example\": {},\n\"attributes\": {\n\t\"showStartingYear\": {\n\t\t\"type\": \"boolean\"\n\t},\n\t\"startingYear\": {\n\t\t\"type\": \"string\"\n\t}\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You must indicate the <code>type<\/code> when defining attributes. In this case, the <code>showStartingYear<\/code> should be true or false, so it's set to <code>boolean<\/code>. The <code>startingYear<\/code> is just a string.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Save the file, and you can now move on to the Editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Updating edit.js<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Open the <code>edit.js<\/code> file. You will need to accomplish two tasks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Add a user interface that allows the user to enter a starting year, toggle the functionality on or off, and store these settings as attributes.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Update the block to display the correct content depending on the defined attributes.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Adding the user interface<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Earlier in this tutorial, you added block supports that automatically created Color and Typography panels in the Settings Sidebar of the block. You can create your own custom panels using the <code>InspectorControls<\/code> component.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Inspector controls<\/h5>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>InspectorControls<\/code> belongs to the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-block-editor\/\"><code>@wordpress\/block-editor<\/code><\/a> package, so you can import it into the <code>edit.js<\/code> file by adding the component name on line 14. The result should look like this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { InspectorControls, useBlockProps } from '@wordpress\/block-editor';\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Next, update the Edit function to return the current block content and an <code>InspectorControls<\/code> component that includes the text \"Testing.\" You can wrap everything in a <a href=\"https:\/\/react.dev\/reference\/react\/Fragment\">Fragment<\/a> (<code>&lt;>&lt;\/><\/code>) to ensure proper JSX syntax. The result should look like this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export default function Edit() {\n\tconst currentYear = new Date().getFullYear().toString();\n\n\treturn (\n\t\t&lt;>\n\t\t\t<inspectorcontrols>\n\t\t\t\tTesting\n\t\t\t<\/inspectorcontrols>\n\t\t\t<p {=\"\" ...useblockprops()=\"\" }=\"\">\u00a9 { currentYear }<\/p>\n\t\t\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Save the file and refresh the Editor. When selecting the block, you should see the \"Testing\" message in the Settings Sidebar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-9.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">The Setting Sidebar now displays the message<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Components and panels<\/h5>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now, let's use a few more Core components to add a custom panel and the user interface for the starting year functionality. You will want to import <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/components\/panel\/#panelbody\"><code>PanelBody<\/code><\/a>, <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/components\/text-control\/\"><code>TextControl<\/code><\/a>, and <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/components\/toggle-control\/\"><code>ToggleControl<\/code><\/a> from the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-components\/\"><code>@wordpress\/components<\/code><\/a> package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Add the following line below the other imports in the <code>edit.js<\/code> file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { PanelBody, TextControl, ToggleControl } from '@wordpress\/components';\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then wrap the \"Testing\" message in the <code>PanelBody<\/code> component and set the <code>title<\/code> parameter to \"Settings\". Refer to the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/components\/panel\/#panelbody\">component documentation<\/a> for additional parameter options.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export default function Edit() {\n\tconst currentYear = new Date().getFullYear().toString();\n\n\treturn (\n\t\t&lt;>\n\t\t\t<inspectorcontrols>\n\t\t\t\t<panelbody title=\"{\" __(=\"\" )=\"\" }=\"\">\n\t\t\t\t\tTesting\n\t\t\t\t<\/panelbody>\n\t\t\t<\/inspectorcontrols>\n\t\t\t<p {=\"\" ...useblockprops()=\"\" }=\"\">\u00a9 { currentYear }<\/p>\n\t\t\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Save the file and refresh the Editor. You should now see the new Settings panel.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-10.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">The Setting Sidebar now displays a custom panel<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Text control<\/h5>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The next step is to replace the \"Testing\" message with a <code>TextControl<\/code> component that allows the user to set the <code>startingYear<\/code> attribute. However, you must include two parameters in the <code>Edit()<\/code> function before doing so.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>attributes<\/code> is an object that contains all the attributes for the block<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>setAttributes<\/code> is a function that allows you to update the value of an attribute<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>With these parameters included, you can fetch the <code>showStartingYear<\/code> and <code>startingYear<\/code> attributes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Update the top of the <code>Edit()<\/code> function to look like this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export default function Edit( { attributes, setAttributes } ) {\n\tconst { showStartingYear, startingYear } = attributes;\n\t...\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\n\tTo see all the attributes associated with the Copyright Date Block, add <code>console.log( attributes );<\/code> at the top of the <code>Edit()<\/code> function. This can be useful when building and testing a custom block.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Now, you can remove the \"Testing\" message and add a <code>TextControl<\/code>. It should include:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>A <code>label<\/code> property set to \"Starting year\"<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>A <code>value<\/code> property set to the attribute <code>startingYear<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>An <code>onChange<\/code> property that updates the <code>startingYear<\/code> attribute whenever the value changes<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Putting it all together, the <code>Edit()<\/code> function should look like the following.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export default function Edit( { attributes, setAttributes } ) {\n\tconst { showStartingYear, startingYear } = attributes;\n\tconst currentYear = new Date().getFullYear().toString();\n\n\treturn (\n\t\t&lt;>\n\t\t\t<inspectorcontrols>\n\t\t\t\t<panelbody title=\"{\" __(=\"\" )=\"\" }=\"\">\n\t\t\t\t\t<textcontrol<br>\t\t\t\t\t\tlabel={ __(\n\t\t\t\t\t\t\t'Starting year',\n\t\t\t\t\t\t\t'copyright-date-block'\n\t\t\t\t\t\t) }\n\t\t\t\t\t\tvalue={ startingYear || '' }\n\t\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\t\tsetAttributes( { startingYear: value } )\n\t\t\t\t\t\t}\n\t\t\t\t\t\/>\n\t\t\t\t<\/textcontrol<br><\/panelbody>\n\t\t\t<\/inspectorcontrols>\n\t\t\t<p {=\"\" ...useblockprops()=\"\" }=\"\">\u00a9 { currentYear }<\/p>\n\t\t\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\n\tYou may have noticed that the <code>value<\/code> property has a value of <code>startingYear || ''<\/code>. The symbol <code>||<\/code> is called the <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Operators\/Logical_OR\">Logical OR<\/a> (logical disjunction) operator. This prevents warnings in React when the <code>startingYear<\/code> is empty. See <a href=\"https:\/\/react.dev\/learn\/sharing-state-between-components#controlled-and-uncontrolled-components\">Controlled and uncontrolled components<\/a> for details.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Save the file and refresh the Editor. Confirm that a text field now exists in the Settings panel. Add a starting year and confirm that when you update the page, the value is saved.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-11.gif\" alt=\"\"\/><figcaption class=\"wp-element-caption\">A live look at editing the new Starting Year field in the Settings Sidebar<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Toggle control<\/h5>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Next, let's add a toggle that will turn the starting year functionality on or off. You can do this with a <code>ToggleControl<\/code> component that sets the <code>showStartingYear<\/code> attribute. It should include:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>A <code>label<\/code> property set to \"Show starting year\"<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>A <code>checked<\/code> property set to the attribute <code>showStartingYear<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>An <code>onChange<\/code> property that updates the <code>showStartingYear<\/code> attribute whenever the toggle is checked or unchecked<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>You can also update the \"Starting year\" text input so it's only displayed when <code>showStartingYear<\/code> is <code>true<\/code>, which can be done using the <code>&amp;&amp;<\/code> logical operator.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>Edit()<\/code> function should look like the following.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export default function Edit( { attributes, setAttributes } ) {\n\tconst { showStartingYear, startingYear } = attributes;\n\tconst currentYear = new Date().getFullYear().toString();\n\n\treturn (\n\t\t&lt;>\n\t\t\t<inspectorcontrols>\n\t\t\t\t<panelbody title=\"{\" __(=\"\" )=\"\" }=\"\">\n\t\t\t\t\t<togglecontrol<br>\t\t\t\t\t\tchecked={ !! showStartingYear }\n\t\t\t\t\t\tlabel={ __(\n\t\t\t\t\t\t\t'Show starting year',\n\t\t\t\t\t\t\t'copyright-date-block'\n\t\t\t\t\t\t) }\n\t\t\t\t\t\tonChange={ () =>\n\t\t\t\t\t\t\tsetAttributes( {\n\t\t\t\t\t\t\t\tshowStartingYear: ! showStartingYear,\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t}\n\t\t\t\t\t\/>\n\t\t\t\t\t{ showStartingYear &amp;&amp; (\n\t\t\t\t\t\t<textcontrol<br>\t\t\t\t\t\t\tlabel={ __(\n\t\t\t\t\t\t\t\t'Starting year',\n\t\t\t\t\t\t\t\t'copyright-date-block'\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\tvalue={ startingYear || '' }\n\t\t\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\t\t\tsetAttributes( { startingYear: value } )\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\/>\n\t\t\t\t\t) }\n\t\t\t\t<\/textcontrol<br><\/togglecontrol<br><\/panelbody>\n\t\t\t<\/inspectorcontrols>\n\t\t\t<p {=\"\" ...useblockprops()=\"\" }=\"\">\u00a9 { currentYear }<\/p>\n\t\t\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Save the file and refresh the Editor. Confirm that clicking the toggle displays the text input, and when you update the page, the toggle remains active.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-12.gif\" alt=\"\"\/><figcaption class=\"wp-element-caption\">A live look at editing the new Show Starting Year toggle in the Settings Sidebar<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Updating the block content<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>So far, you have created the user interface for adding a starting year and updating the associated block attributes. Now you need to actually update the block content in the Editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let's create a new variable called <code>displayDate<\/code>. When <code>showStartingYear<\/code> is <code>true<\/code> and the user has provided a <code>startingYear<\/code>, the <code>displayDate<\/code> should include the <code>startingYear<\/code> and the <code>currentYear<\/code> separated by an em dash. Otherwise, just display the <code>currentYear<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The code should look something like this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>let displayDate;\n\nif ( showStartingYear &amp;&amp; startingYear ) {\n\tdisplayDate = startingYear + '\u2013' + currentYear;\n} else {\n\tdisplayDate = currentYear;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\n\tWhen you declare a variable with <code>let<\/code>, it means that the variable may be reassigned later. Declaring a variable with <code>const<\/code> means that the variable will never change. You could rewrite this code using <code>const<\/code>. It's just a matter of personal preference.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Next, you just need to update the block content to use the <code>displayDate<\/code> instead of the <code>currentYear<\/code> variable.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>Edit()<\/code> function should look like the following.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export default function Edit( { attributes, setAttributes } ) {\n\tconst { showStartingYear, startingYear } = attributes;\n\tconst currentYear = new Date().getFullYear().toString();\n\n\tlet displayDate;\n\n\tif ( showStartingYear &amp;&amp; startingYear ) {\n\t\t\tdisplayDate = startingYear + '\u2013' + currentYear;\n\t} else {\n\t\tdisplayDate = currentYear;\n\t}\n\n\treturn (\n\t\t&lt;>\n\t\t\t<inspectorcontrols>\n\t\t\t\t<panelbody title=\"{\" __(=\"\" )=\"\" }=\"\">\n\t\t\t\t\t<togglecontrol<br>\t\t\t\t\t\tchecked={ !! showStartingYear }\n\t\t\t\t\t\tlabel={ __(\n\t\t\t\t\t\t\t'Show starting year',\n\t\t\t\t\t\t\t'copyright-date-block'\n\t\t\t\t\t\t) }\n\t\t\t\t\t\tonChange={ () =>\n\t\t\t\t\t\t\tsetAttributes( {\n\t\t\t\t\t\t\t\tshowStartingYear: ! showStartingYear,\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t}\n\t\t\t\t\t\/>\n\t\t\t\t\t{ showStartingYear &amp;&amp; (\n\t\t\t\t\t\t<textcontrol<br>\t\t\t\t\t\t\tlabel={ __(\n\t\t\t\t\t\t\t\t'Starting year',\n\t\t\t\t\t\t\t\t'copyright-date-block'\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\tvalue={ startingYear || '' }\n\t\t\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\t\t\tsetAttributes( { startingYear: value } )\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\/>\n\t\t\t\t\t) }\n\t\t\t\t<\/textcontrol<br><\/togglecontrol<br><\/panelbody>\n\t\t\t<\/inspectorcontrols>\n\t\t\t<p {=\"\" ...useblockprops()=\"\" }=\"\">\u00a9 { displayDate }<\/p>\n\t\t\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Save the file and refresh the Editor. Confirm that the block content updates correctly when you make changes in the Settings panel.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-13.gif\" alt=\"\"\/><figcaption class=\"wp-element-caption\">A live look at the block content being updated by the new fields in the Setting Sidebar<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Updating render.php<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>While the Editor looks great, the starting year functionality has yet to be added to the front end. Let's fix that by updating the <code>render.php<\/code> file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by adding a variable called <code>$display_date<\/code> and replicate what you did in the <code>Edit()<\/code> function above.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This variable should display the value of the <code>startingYear<\/code> attribute and the <code>$current_year<\/code> variable separated by an em dash, or just the <code>$current_year<\/code> is the <code>showStartingYear<\/code> attribute is <code>false<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\n\t<p>Three variables are exposed in the <code>render.php<\/code>, which you can use to customize the block's output:<\/p>\n\t<ul>\n\t\t<li><code>$attributes<\/code> (array): The block attributes.<\/li>\n\t\t<li><code>$content<\/code> (string): The block default content.<\/li>\n\t\t<li><code>$block<\/code> (WP_Block): The block instance.<\/li>\n\t<\/ul>\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>The code should look something like this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>if ( ! empty( $attributes&#91;'startingYear'] ) &amp;&amp; ! empty( $attributes&#91;'showStartingYear'] ) ) {\n\t$display_date = $attributes&#91;'startingYear'] . '\u2013' . $current_year;\n} else {\n\t$display_date = $current_year;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Next, you just need to update the block content to use the <code>$display_date<\/code> instead of the <code>$current_year<\/code> variable.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Your final <code>render.php<\/code> file should look like this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$current_year = date( \"Y\" );\n\nif ( ! empty( $attributes&#91;'startingYear'] ) &amp;&amp; ! empty( $attributes&#91;'showStartingYear'] ) ) {\n\t$display_date = $attributes&#91;'startingYear'] . '\u2013' . $current_year;\n} else {\n\t$display_date = $current_year;\n}\n?>\n<p <?php=\"\" echo=\"\" get_block_wrapper_attributes();=\"\" ?=\"\">>\n    \u00a9 \n<\/p>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Save the file and confirm that the correct block content is now appearing on the front end of your site.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You have now successfully built a dynamically rendered custom block that utilizes block supports, core WordPress components, and custom attributes. In many situations, this is as far as you would need to go for a block displaying the copyright date with some additional functionality.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the next section, however, you will add static rendering to the block. This exercise will illustrate how block data is stored in WordPress and provide a fallback should this plugin ever be inadvertently disabled.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Adding static rendering<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block can utilize dynamic rendering, static rendering, or both. The block you have built so far is dynamically rendered. Its block markup and associated attributes are stored in the database, but its HTML output is not.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Statically rendered blocks will always store the block markup, attributes, and output in the database. Blocks can also store static output in the database while being further enhanced dynamically on the front end, a combination of both methods.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You will see the following if you switch to the Code editor from within the Editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Compare this to a statically rendered block like the Paragraph block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n<p>This is a test.<\/p>\n\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The HTML of the paragraph is stored in post content and saved in the database.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can learn more about dynamic and static rendering in the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/static-dynamic-rendering\/\">Fundamentals documentation<\/a>. While most blocks are either dynamically or statically rendered, you can build a block that utilizes both methods.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Why add static rendering?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When you add static rendering to a dynamically rendered block, the <code>render.php<\/code> file will still control the output on the front end, but the block's HTML content will be saved in the database. This means that the content will remain if the plugin is ever removed from the site. In the case of this Copyright Date Block, the content will revert to a Custom HTML block that you can easily convert to a Paragraph block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-14.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">An error message in the Editor when a block type no longer exists<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>While not necessary in all situations, adding static rendering to a dynamically rendered block can provide a helpful fallback should the plugin ever be disabled unintentionally.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Also, consider a situation where the block markup is included in a block pattern or theme template. If a user installs that theme or uses the pattern without the Copyright Date Block installed, they will get a notice that the block is not available, but the content will still be displayed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Adding static rendering is also a good exploration of how block content is stored and rendered in WordPress.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Adding a save function<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Start by adding a new file named <code>save.js<\/code> to the <code>src\/<\/code> folder. In this file, add the following.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useBlockProps } from '@wordpress\/block-editor';\n\nexport default function save() {\n\treturn (\n\t\t<p {=\"\" ...useblockprops.save()=\"\" }=\"\">\n\t\t\t{ 'Copyright Date Block \u2013 hello from the saved content!' }\n\t\t<\/p>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This should look similar to the original <code>edit.js<\/code> file, and you can refer to the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-wrapper\/#the-save-components-markup\">block wrapper<\/a> documentation for additional information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next, in the <code>index.js<\/code> file, import this <code>save()<\/code> function and add a save property to the <code>registerBlockType()<\/code> function. Here's a simplified view of the updated file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import save from '.\/save';\n\n...\n\nregisterBlockType( metadata.name, {\n\ticon: calendarIcon,\n\tedit: Edit,\n\tsave\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\n\tWhen defining properties of an object, if the property name and the variable name are the same, you can use shorthand property names. This is why the code above uses <code>save<\/code> instead of <code>save: save<\/code>.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Save both <code>save.js<\/code> and <code>index.js<\/code> files and refresh the Editor. It should look like this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-15.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">A block validation error message in the Editor<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Don't worry, the error is expected. If you open the inspector in your browser, you should see the following message.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-16.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">A block validation error message in the console<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>This block validation error occurs because the <code>save()<\/code> function returns block content, but no HTML is stored in the block markup since the previously saved block was dynamic. Remember that this is what the markup currently looks like.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You will see more of these errors as you update the <code>save()<\/code> function in subsequent steps. Just click \"Attempt Block Recovery\" and update the page.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After preforming block recovery, open the Code editor and you will see the markup now looks like this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n<p class=\"wp-block-create-block-copyright-date-block\">Copyright Date Block \u2013 hello from the saved content!<\/p>\n\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You will often encounter block validation errors when building a block with static rendering, and that's ok. The output of the <code>save()<\/code> function must match the HTML in the post content exactly, which may end up out of sync as you add functionality. So long as there are no validation errors when you're completely finished building the block, you will be all set.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Updating save.js<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Next, let's update the output of the <code>save()<\/code> function to display the correct content. Start by copying the same approach used in <code>edit.js<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Add the <code>attributes<\/code> parameter to the function<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Define the <code>showStartingYear<\/code> and <code>startingYear<\/code> variables<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Define a <code>currentYear<\/code> variable<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Define a <code>displayDate<\/code> variable depending on the values of <code>currentYear<\/code>, <code>showStartingYear<\/code>, and <code>startingYear<\/code><\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The result should look like this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export default function save( { attributes } ) {\n\tconst { showStartingYear, startingYear } = attributes;\n\tconst currentYear = new Date().getFullYear().toString();\n\n\tlet displayDate;\n\n\tif ( showStartingYear &amp;&amp; startingYear ) {\n\t\tdisplayDate = startingYear + '\u2013' + currentYear;\n\t} else {\n\t\tdisplayDate = currentYear;\n\t}\n\n\treturn (\n\t\t<p {=\"\" ...useblockprops.save()=\"\" }=\"\">\u00a9 { displayDate }<\/p>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Save the file and refresh the Editor. Click \"Attempt Block Recovery\" and update the page. Check the Code editor, and the block markup should now look something like this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n<p class=\"wp-block-create-block-copyright-date-block\">\u00a9 2017\u20132023<\/p>\n\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>At this point, it might look like you're done. The block content is now saved as HTML in the database and the output on the front end is dynamically rendered. However, there are still a few things that need to be addressed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Consider the situation where the user added the block to a page in 2023 and then went back to edit the page in 2024. The front end will update as expected, but in the Editor, there will be a block validation error. The <code>save()<\/code> function knows that it's 2024, but the block content saved in the database still says 2023.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let's fix this in the next section.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Handling dynamic content in statically rendered blocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Generally, you want to avoid dynamic content in statically rendered blocks. This is part of the reason why the term \"dynamic\" is used when referring to dynamic rendering.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That said, in this tutorial, you are combining both rendering methods, and you just need a bit more code to avoid any block validation errors when the year changes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The root of the issue is that the <code>currentYear<\/code> variable is set dynamically in the <code>save()<\/code> function. Instead, this should be a static variable within the function, which can be solved with an additional attribute.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Adding a new attribute<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Open the <code>block.json<\/code> file and add a new attribute called <code>fallbackCurrentYear<\/code> with the type <code>string<\/code>. The <code>attributes<\/code> section of the file should now look like this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\"attributes\": {\n    \"fallbackCurrentYear\": {\n\t\t\"type\": \"string\"\n    },\n    \"showStartingYear\": {\n\t\t\"type\": \"boolean\"\n    },\n    \"startingYear\": {\n\t\t\"type\": \"string\"\n\t}\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Next, open the <code>save.js<\/code> file and use the new <code>fallbackCurrentYear<\/code> attribute in place of <code>currentYear<\/code>. Your updated <code>save()<\/code> function should look like this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export default function save( { attributes } ) {\n\tconst { fallbackCurrentYear, showStartingYear, startingYear } = attributes;\n\n\tlet displayDate;\n\n\tif ( showStartingYear &amp;&amp; startingYear ) {\n\t\tdisplayDate = startingYear + '\u2013' + fallbackCurrentYear;\n\t} else {\n\t\tdisplayDate = fallbackCurrentYear;\n\t}\n\n\treturn (\n\t\t<p {=\"\" ...useblockprops.save()=\"\" }=\"\">\u00a9 { displayDate }<\/p>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now, what happens if the <code>fallbackCurrentYear<\/code> is undefined?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before the <code>currentYear<\/code> was defined within the function, so the <code>save()<\/code> function always had content to return, even if <code>showStartingYear<\/code> and <code>startingYear<\/code> were undefined.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Instead of returning just the copyright symbol, let's add a condition that if <code>fallbackCurrentYear<\/code> is not set, return <code>null<\/code>. It's generally better to save no HTML in the database than incomplete data.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The final <code>save()<\/code> function should look like this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export default function save( { attributes } ) {\n\tconst { fallbackCurrentYear, showStartingYear, startingYear } = attributes;\n\n\tif ( ! fallbackCurrentYear ) {\n\t\treturn null;\n\t}\n\n\tlet displayDate;\n\n\tif ( showStartingYear &amp;&amp; startingYear ) {\n\t\tdisplayDate = startingYear + '\u2013' + fallbackCurrentYear;\n\t} else {\n\t\tdisplayDate = fallbackCurrentYear;\n\t}\n\n\treturn (\n\t\t<p {=\"\" ...useblockprops.save()=\"\" }=\"\">\u00a9 { displayDate }<\/p>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Save both the <code>block.json<\/code> and <code>save.js<\/code> files; you won't need to make any more changes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Setting the attribute in edit.js<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>save()<\/code> function now uses the new <code>fallbackCurrentYear<\/code>, so it needs to be set somewhere. Let's use the <code>Edit()<\/code> function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Open the <code>edit.js<\/code> file and start by defining the <code>fallbackCurrentYear<\/code> variable at the top of the <code>Edit()<\/code> functional alongside the other attributes. Next, review what's happening in the function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When the block loads in the Editor, the <code>currentYear<\/code> variable is defined. The function then uses this variable to set the content of the block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, let's set the <code>fallbackCurrentYear<\/code> attribute to the <code>currentYear<\/code> when the block loads if the attribute is not already set.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>if ( currentYear !== fallbackCurrentYear ) {\n\tsetAttributes( { fallbackCurrentYear: currentYear } );\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This will work but can be improved by ensuring this code only runs once when the block is initialized. To do so, you can use the <a href=\"https:\/\/react.dev\/reference\/react\/useEffect\"><code>useEffect<\/code><\/a> React hook. Refer to the React documentation for more information about how to use this hook.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First, import <code>useEffect<\/code> with the following code.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useEffect } from 'react';\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then wrap the <code>setAttribute()<\/code> code above in a <code>useEffect<\/code> and place this code after the <code>currentYear<\/code> definition in the <code>Edit()<\/code> function. The result should look like this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export default function Edit( { attributes, setAttributes } ) {\n\tconst { fallbackCurrentYear, showStartingYear, startingYear } = attributes;\n\n\t\/\/ Get the current year and make sure it's a string.\n\tconst currentYear = new Date().getFullYear().toString();\n\n\t\/\/ When the block loads, set the fallbackCurrentYear attribute to the\n\t\/\/ current year if it's not already set.\n\tuseEffect( () => {\n\t\tif ( currentYear !== fallbackCurrentYear ) {\n\t\t\tsetAttributes( { fallbackCurrentYear: currentYear } );\n\t\t}\n\t}, &#91; currentYear, fallbackCurrentYear, setAttributes ] );\n\n\t...\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When the block is initialized in the Editor, the <code>fallbackCurrentYear<\/code> attribute will be immediately set. This value will then be available to the <code>save()<\/code> function, and the correct block content will be displayed without block validation errors.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The one caveat is when the year changes. If a Copyright Date Block was added to a page in 2023 and then edited in 2024, the <code>fallbackCurrentYear<\/code> attribute will no longer equal the <code>currentYear<\/code>, and the attribute will be automatically updated to <code>2024<\/code>. This will update the HTML returned by the <code>save()<\/code> function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You will not get any block validation errors, but the Editor will detect that changes have been made to the page and prompt you to update.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Optimizing render.php<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The final step is to optimize the <code>render.php<\/code> file. If the <code>currentYear<\/code> and the <code>fallbackCurrentYear<\/code> attribute are the same, then there is no need to dynamically create the block content. It is already saved in the database and is available in the  <code>render.php<\/code> file via the <code>$content<\/code> variable.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Therefore, update the file to render the generated content if <code>currentYear<\/code> and <code>fallbackCurrentYear<\/code> do not match.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$current_year = date( \"Y\" );\n\n\/\/ Determine which content to display.\nif ( isset( $attributes&#91;'fallbackCurrentYear'] ) &amp;&amp; $attributes&#91;'fallbackCurrentYear'] === $current_year ) {\n\n\t\/\/ The current year is the same as the fallback, so use the block content saved in the database (by the save.js function).\n\t$block_content = $content;\n} else {\n\n\t\/\/ The current year is different from the fallback, so render the updated block content.\n\tif ( ! empty( $attributes&#91;'startingYear'] ) &amp;&amp; ! empty( $attributes&#91;'showStartingYear'] ) ) {\n\t\t$display_date = $attributes&#91;'startingYear'] . '\u2013' . $current_year;\n\t} else {\n\t\t$display_date = $current_year;\n\t}\n\n\t$block_content = '<p .=\"\" get_block_wrapper_attributes()=\"\">\u00a9 ' . esc_html( $display_date ) . '<\/p>';\n}\n\necho wp_kses_post( $block_content );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>That's it! You now have a block that utilizes both dynamic and static rendering.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Wrapping up<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Congratulations on completing this tutorial and building your very own Copyright Date Block. Throughout this journey, you have gained a solid foundation in WordPress block development and are now ready to start building your own blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For final reference, the complete code for this tutorial is available in the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/copyright-date-block-09aac3\">Block Development Examples<\/a> repository on GitHub.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, whether you're now looking to refine your skills, tackle more advanced projects, or stay updated with the latest WordPress trends, the following resources will help you improve your block development skills:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/\">Block Development Environment<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/\">Fundamentals of Block Development<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/news\/\">WordPress Developer Blog<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/github.com\/WordPress\/block-development-examples\">Block Development Examples<\/a> | GitHub repository<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Remember, every expert was once a beginner. Keep learning, experimenting, and, most importantly, have fun building with WordPress.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Tutorial: Build your first block\n\nIn this tutorial, you will build a \"Copyright Date Block\"\u2014a basic yet practical block that displays the copyright symbol (\u00a9), the current year, and an optional starting year. This type of content is commonly used in website footers.\n\nThe tutorial will guide you through the complete process, from scaffolding the block plugin using the [`create-block`](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-create-block\/) package to modifying each file. While previous WordPress development experience is beneficial, it's not a prerequisite for this tutorial.\n\nBy the end of this guide, you will have a clear understanding of block development fundamentals and the necessary skills to create your own WordPress blocks.\n\n## What you're going to build\n\nHere's a quick look at what you're going to build.\n\n![What you're going to build](https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-1.png)\n\nYou can also interact with the finished project in [WordPress Playground](https:\/\/playground.wordpress.net\/?blueprint-url=https:\/\/raw.githubusercontent.com\/WordPress\/block-development-examples\/trunk\/plugins\/copyright-date-block-09aac3\/_playground\/blueprint.json) or use the [Quick Start Guide](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/quick-start-guide\/) to install the complete block plugin in your local WordPress environment.\n\n## Prerequisites\n\nTo complete this tutorial, you will need:\n\n1. Code editor\n2. Node.js development tools\n3. Local WordPress environment\n\nIf you don't have one or more of these items, the [Block Development Environment](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/) documentation will help you get started. Come back here once you are all set up.\n\n<div class=\"callout callout-info\">\n\tThis tutorial uses <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-env\/\"><code>wp-env<\/code><\/a> to create a local WordPress development environment. However, feel free to use alternate local development tools if you already have one that you prefer.\n<\/div>\n\n## Scaffolding the block\n\nThe first step in creating the Copyright Date Block is to scaffold the initial block structure using the [`@wordpress\/create-block`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/) package.\n\n<div class=\"callout callout-info\">\n\tReview the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/get-started-with-wp-env\/\">Get started with create-block<\/a> documentation for an introduction to using this package.\n<\/div>\n\nYou can use `create-block` from just about any directory (folder) on your computer and then use `wp-env` to create a local WordPress development environment with your new block plugin installed and activated.\n\nTherefore, choose a directory to place the block plugin or optionally create a new folder called \"Block Tutorial\". Open your terminal and `cd` to this directory. Then run the following command.\n\n<div class=\"callout callout-info\">\n\tIf you are not using <code>wp-env<\/code>, instead, navigate to the <code>plugins\/<\/code> folder in your local WordPress installation using the terminal and run the following command.\n<\/div>\n\n```bash\nnpx @wordpress\/create-block@latest copyright-date-block --variant=dynamic\ncd copyright-date-block\n```\n\nAfter executing this command, you'll find a new directory named `copyright-date-block` in the plugins folder. This directory contains all the initial files needed to start customizing your block.\n\nThis command also sets up the basic structure of your block, with `copyright-date-block` as its slug. This slug uniquely identifies your block within WordPress.\n\n<div class=\"callout callout-info\">\n\tYou might have noticed that the command uses the <code>--variant=dynamic<\/code> flag. This tells <code>create-block<\/code> you want to scaffold a dynamically rendered block. Later in this tutorial, you will learn about dynamic and static rendering and add static rendering to this block.\n<\/div>\n\nNavigate to the Plugins page in the WordPress admin and confirm that the plugin is active. Then, create a new page or post and ensure you can insert the Copyright Date Block. It should look like this once inserted.\n\n![The scaffolded block in the Editor](https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-2.png)\n\n## Reviewing the files\nBefore we begin modifying the scaffolded block, it's important to review the plugin's file structure. Open the plugin folder in your code editor.\n\n![The files that make up the block plugin](https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-3.png)\n\nNext, look at the [File structure of a block](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/file-structure-of-a-block\/) documentation for a thorough overview of what each file does. Don't worry if this is overwhelming right now. You will learn how to use each file throughout this tutorial.\n\n<div class=\"callout callout-info\">\n\tSince you scaffolded a dynamic block, you will not see a <code>save.js<\/code> file. Later in the tutorial, you will add this file to the plugin to enable static rendering, so stay tuned.\n<\/div>\n\n## Initial setup\n\nLet's start by creating the simplest Copyright Date Block possible, which will be a dynamically rendered block that simply displays the copyright symbol (\u00a9) and the current year. We'll also add a few controls allowing the user to modify font size and text color.\n\nBefore proceeding to the following steps, run `npm run start` in the terminal from within the plugin directory. This command will watch each file in the `\/src` folder for changes. The block's build files will be updated each time you save a file.\n\nCheck out the [Working with JavaScript for the Block Editor](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/javascript-in-the-block-editor\/) documentation to learn more.\n\n### Updating block.json\n\nOpen the `block.json` file in the `\/src` folder.\n\n```json\n{\n\t\"$schema\": \"https:\/\/schemas.wp.org\/trunk\/block.json\",\n\t\"apiVersion\": 3,\n\t\"name\": \"create-block\/copyright-date-block\",\n\t\"version\": \"0.1.0\",\n\t\"title\": \"Copyright Date Block\",\n\t\"category\": \"widgets\",\n\t\"icon\": \"smiley\",\n\t\"description\": \"Example block scaffolded with Create Block tool.\",\n\t\"example\": {},\n\t\"supports\": {\n\t\t\"html\": false\n\t},\n\t\"textdomain\": \"copyright-date-block\",\n\t\"editorScript\": \"file:.\/index.js\",\n\t\"editorStyle\": \"file:.\/index.css\",\n\t\"style\": \"file:.\/style-index.css\",\n\t\"render\": \"file:.\/render.php\",\n\t\"viewScript\": \"file:.\/view.js\"\n}\n```\n\n<div class=\"callout callout-info\">\n\tReview the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-json\/\">block.json<\/a> documentation for an introduction to this file.\n<\/div>\n\nSince this scaffolding process created this file, it requires some updating to suit the needs of the Copyright Date Block.\n\n#### Modifying the block identity\n\nBegin by removing the icon and adding a more appropriate description. You will add a custom icon later.\n\n1. Remove the line for `icon`\n2. Update the description to \"Display your site's copyright date.\"\n3. Save the file\n\nAfter you refresh the Editor, you should now see that the block no longer has the smiley face icon, and its description has been updated.\n\n![The block in the Editor with updated information](https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-4.png)\n\n#### Adding block supports\n\nNext, let's add a few [block supports](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-supports\/) so that the user can control the font size and text color of the block.\n\n<div class=\"callout callout-tip\">\n\tYou should always try to use native block supports before building custom functionality. This approach provides users with a consistent editing experience across blocks, and your block benefits from Core functionality with only a few lines of code.\n<\/div>\n\nUpdate the [`supports`](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-json\/#enable-ui-settings-panels-for-the-block-with-supports) section of the `block.json` file to look like this.\n\n```json\n\"supports\": {\n\t\"color\": {\n\t\t\"background\": false,\n\t\t\"text\": true\n\t},\n\t\"html\": false,\n\t\"typography\": {\n\t\t\"fontSize\": true\n\t}\n},\n```\n\nNote that when you enable text color support with `\"text\": true`, the background color is also enabled by default. You are welcome to keep it enabled, but it's not required for this tutorial, so you can manually set `\"background\": false`.\n\nSave the file and select the block in the Editor. You will now see both Color and Typography panels in the Settings Sidebar. Try modifying the settings and see what happens.\n\n![The block in the Editor with block supports](https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-5.png)\n\n#### Removing unnecessary code\n\nFor simplicity, the styling for the Copyright Date Block will be controlled entirely by the color and typography block supports. This block also does not have any front-end Javascript. Therefore, you don't need to specify stylesheets or a `viewScript` in the `block.json` file.\n\n1. Remove the line for `editorStyle`\n2. Remove the line for `style`\n3. Remove the line for `viewScript`\n4. Save the file\n\nRefresh the Editor, and you will see that the block styling now matches your current theme.\n\n![The block in the Editor without default styling](https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-6.png)\n\n#### Putting it all together\n\nYour final `block.json` file should look like this:\n\n```json\n{\n\t\"$schema\": \"https:\/\/schemas.wp.org\/trunk\/block.json\",\n\t\"apiVersion\": 3,\n\t\"name\": \"create-block\/copyright-date-block\",\n\t\"version\": \"0.1.0\",\n\t\"title\": \"Copyright Date Block\",\n\t\"category\": \"widgets\",\n\t\"description\": \"Display your site's copyright date.\",\n\t\"example\": {},\n\t\"supports\": {\n\t\t\"color\": {\n\t\t\t\"background\": false,\n\t\t\t\"text\": true\n\t\t},\n\t\t\"html\": false,\n\t\t\"typography\": {\n\t\t\t\"fontSize\": true\n\t\t}\n\t},\n\t\"textdomain\": \"copyright-date-block\",\n\t\"editorScript\": \"file:.\/index.js\",\n\t\"render\": \"file:.\/render.php\"\n}\n```\n\n### Updating index.js\n\nBefore you start building the functionality of the block itself, let's do a bit more cleanup and add a custom icon to the block.\n\nOpen the [`index.js`](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/file-structure-of-a-block\/#index-js) file. This is the main JavaScript file of the block and is used to register it on the client. You can learn more about client-side and server-side registration in the [Registration of a block](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/registration-of-a-block\/) documentation.\n\nStart by looking at the [`registerBlockType`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-registration\/) function. This function accepts the name of the block, which we are getting from the imported `block.json` file, and the block configuration object.\n\n```js\nimport Edit from '.\/edit';\nimport metadata from '.\/block.json';\n\nregisterBlockType( metadata.name, {\n\tedit: Edit,\n} );\n```\n\nBy default, the object just includes the `edit` property, but you can add many more, including `icon`. While most of these properties are already defined in `block.json`, you need to specify the icon here to use a custom SVG.\n\n#### Adding a custom icon\n\nUsing the calendar icon from the [Gutenberg Storybook](https:\/\/wordpress.github.io\/gutenberg\/?path=\/story\/icons-icon--library), add the SVG to the function like so:\n\n```js\nconst calendarIcon = (\n\t<svg\n\t\tviewBox=\"0 0 24 24\"\n\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\taria-hidden=\"true\"\n\t\tfocusable=\"false\"\n\t>\n\t\t<path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm.5 16c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5V7h15v12zM9 10H7v2h2v-2zm0 4H7v2h2v-2zm4-4h-2v2h2v-2zm4 0h-2v2h2v-2zm-4 4h-2v2h2v-2zm4 0h-2v2h2v-2z\"><\/path>\n\t<\/svg>\n);\n\nregisterBlockType( metadata.name, {\n\ticon: calendarIcon,\n\tedit: Edit\n} );\n```\n\n<div class=\"callout callout-tip\">\n\tAll block icons should be 24 pixels square. Note the <code>viewBox<\/code> parameter above.\n<\/div>\n\nSave the `index.js` file and refresh the Editor. You will now see the calendar icon instead of the default.\n\n![The block in the Editor a custom icon](https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-7.png)\n\nAt this point, the block's icon and description are correct, and block supports allow you to change the font size and text color. Now, it's time to move on to the actual functionality of the block.\n\n### Updating edit.js\n\nThe [`edit.js`](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/file-structure-of-a-block\/#edit-js) file controls how the block functions and appears in the Editor. Right now, the user sees the message \" Copyright Date Block \u2013 hello from the editor!\". Let's change that.\n\nOpen the file and see that the `Edit()` function returns a paragraph tag with the default message.\n\n```js\nexport default function Edit() {\n\treturn (\n\t\t<p { ...useBlockProps() }>\n\t\t\t{ __(\n\t\t\t\t'Copyright Date Block \u2013 hello from the editor!',\n\t\t\t\t'copyright-date-block-demo'\n\t\t\t) }\n\t\t<\/p>\n\t);\n}\n```\n\nIt looks a bit more complicated than it is.\n\n- [`useBlockProps()`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-edit-save\/#block-wrapper-props) outputs all the necessary CSS classes and styles in the [block's wrapper](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-wrapper\/#the-edit-components-markup) needed by the Editor, which includes the style provided by the block supports you added earlier\n- [`__()`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-i18n\/) is used for the internationalization of text strings\n\n<div class=\"callout callout-info\">\n\tReview the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-wrapper\/\">block wrapper<\/a> documentation for an introductory guide on how to ensure the block's markup wrapper has the proper attributes.\n<\/div>\n\nAs a reminder, the main purpose of this block is to display the copyright symbol (\u00a9) and the current year. So, you first need to get the current year in string form, which can be done with the following code.\n\n```js\nconst currentYear = new Date().getFullYear().toString();\n```\n\nNext, update the function to display the correct information.\n\n```js\nexport default function Edit() {\n\tconst currentYear = new Date().getFullYear().toString();\n\n\treturn (\n\t\t<p { ...useBlockProps() }>\u00a9 { currentYear }<\/p>\n\t);\n}\n```\n\nSave the `edit.js` file and refresh the Editor. You will now see the copyright symbol (\u00a9) followed by the current year.\n\n![The block in the Editor displays the correct content](https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-8.png)\n\n### Updating render.php\n\nWhile the block is working properly in the Editor, the default block message is still being displayed on the front end. To fix this, open the [`render.php`](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/file-structure-of-a-block\/#render-php) file, and you will see the following.\n\n```php\n<?php\n...\n?>\n<p <?php echo get_block_wrapper_attributes(); ?>>\n\t<?php esc_html_e( 'Copyright Date Block \u2013 hello from a dynamic block!', 'copyright-date-block' ); ?>\n<\/p>\n\n```\n\nSimilar to the `useBlockProps()` function in the Editor, [`get_block_wrapper_attributes()`](https:\/\/developer.wordpress.org\/reference\/functions\/get_block_wrapper_attributes\/) outputs all the necessary CSS classes and styles in the [block's wrapper](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-wrapper\/#the-server-side-render-markup). Only the content needs to be updated.\n\nYou can use `date( \"Y\" )` to get the current year in PHP, and your `render.php` should look like this.\n\n```php\n<?php\n...\n?>\n<p <?php echo get_block_wrapper_attributes(); ?>>\u00a9 <?php echo date( \"Y\" ); ?><\/p>\n```\n\nSave the file and confirm that the block appears correctly in the Editor and on the front end.\n\n### Cleaning up\n\nWhen you use the `create-block` package to scaffold a block, it might include files that you don't need. In the case of this tutorial, the block doesn't use stylesheets or front end JavaScript. Clean up the plugin's `src\/` folder with the following actions.\n\n1. In the `edit.js` file, remove the lines that import `editor.scss`\n2. In the `index.js` file, remove the lines that import `style.scss`\n3. Delete the editor.scss, style.scss, and view.js files\n\nFinally, make sure that there are no unsaved changes and then terminate the `npm run start` command. Run `npm run build` to optimize your code and make it production-ready.\n\nYou have built a fully functional WordPress block, but let's not stop here. In the next sections, we'll add functionality and enable static rendering.\n\n## Adding block attributes\n\nThe Copyright Date Block you have built shows the current year, but what if you wanted to display a starting year as well?\n\n![What you're going to build](https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-1.png)\n\nThis functionality would require users to enter their starting year somewhere on the block. They should also have the ability to toggle it on or off.\n\nYou could implement this in different ways, but all would require [block attributes](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-attributes\/). Attributes allow you to store custom data for the block that can then be used to modify the block's markup.\n\nTo enable this starting year functionality, you will need one attribute to store the starting year and another that will be used to tell WordPress whether the starting year should be displayed or not.\n\n### Updating block.json\n\nBlock attributes are generally specified in the [`block.json`](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-json\/#data-storage-in-the-block-with-attributes) file. So open up the file and add the following section after the `example` property.\n\n```json\n\"example\": {},\n\"attributes\": {\n\t\"showStartingYear\": {\n\t\t\"type\": \"boolean\"\n\t},\n\t\"startingYear\": {\n\t\t\"type\": \"string\"\n\t}\n},\n```\n\nYou must indicate the `type` when defining attributes. In this case, the `showStartingYear` should be true or false, so it's set to `boolean`. The `startingYear` is just a string.\n\nSave the file, and you can now move on to the Editor.\n\n### Updating edit.js\n\nOpen the `edit.js` file. You will need to accomplish two tasks.\n\n- Add a user interface that allows the user to enter a starting year, toggle the functionality on or off, and store these settings as attributes.\n- Update the block to display the correct content depending on the defined attributes.\n\n#### Adding the user interface\n\nEarlier in this tutorial, you added block supports that automatically created Color and Typography panels in the Settings Sidebar of the block. You can create your own custom panels using the `InspectorControls` component.\n\n##### Inspector controls\n\nThe `InspectorControls` belongs to the [`@wordpress\/block-editor`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-block-editor\/) package, so you can import it into the `edit.js` file by adding the component name on line 14. The result should look like this.\n\n```js\nimport { InspectorControls, useBlockProps } from '@wordpress\/block-editor';\n```\n\nNext, update the Edit function to return the current block content and an `InspectorControls` component that includes the text \"Testing.\" You can wrap everything in a [Fragment](https:\/\/react.dev\/reference\/react\/Fragment) (`<><\/>`) to ensure proper JSX syntax. The result should look like this.\n\n```js\nexport default function Edit() {\n\tconst currentYear = new Date().getFullYear().toString();\n\n\treturn (\n\t\t<>\n\t\t\t<InspectorControls>\n\t\t\t\tTesting\n\t\t\t<\/InspectorControls>\n\t\t\t<p { ...useBlockProps() }>\u00a9 { currentYear }<\/p>\n\t\t<\/>\n\t);\n}\n```\nSave the file and refresh the Editor. When selecting the block, you should see the \"Testing\" message in the Settings Sidebar.\n\n![The Setting Sidebar now displays the message](https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-9.png)\n\n##### Components and panels\n\nNow, let's use a few more Core components to add a custom panel and the user interface for the starting year functionality. You will want to import [`PanelBody`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/components\/panel\/#panelbody), [`TextControl`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/components\/text-control\/), and [`ToggleControl`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/components\/toggle-control\/) from the [`@wordpress\/components`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-components\/) package.\n\nAdd the following line below the other imports in the `edit.js` file.\n\n```js\nimport { PanelBody, TextControl, ToggleControl } from '@wordpress\/components';\n```\n\nThen wrap the \"Testing\" message in the `PanelBody` component and set the `title` parameter to \"Settings\". Refer to the [component documentation](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/components\/panel\/#panelbody) for additional parameter options.\n\n```js\nexport default function Edit() {\n\tconst currentYear = new Date().getFullYear().toString();\n\n\treturn (\n\t\t<>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title={ __( 'Settings', 'copyright-date-block' ) }>\n\t\t\t\t\tTesting\n\t\t\t\t<\/PanelBody>\n\t\t\t<\/InspectorControls>\n\t\t\t<p { ...useBlockProps() }>\u00a9 { currentYear }<\/p>\n\t\t<\/>\n\t);\n}\n```\n\nSave the file and refresh the Editor. You should now see the new Settings panel.\n\n![The Setting Sidebar now displays a custom panel](https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-10.png)\n\n##### Text control\n\nThe next step is to replace the \"Testing\" message with a `TextControl` component that allows the user to set the `startingYear` attribute. However, you must include two parameters in the `Edit()` function before doing so.\n\n- `attributes` is an object that contains all the attributes for the block\n- `setAttributes` is a function that allows you to update the value of an attribute\n\nWith these parameters included, you can fetch the `showStartingYear` and `startingYear` attributes.\n\nUpdate the top of the `Edit()` function to look like this.\n\n```js\nexport default function Edit( { attributes, setAttributes } ) {\n\tconst { showStartingYear, startingYear } = attributes;\n\t...\n```\n\n<div class=\"callout callout-tip\">\n\tTo see all the attributes associated with the Copyright Date Block, add <code>console.log( attributes );<\/code> at the top of the <code>Edit()<\/code> function. This can be useful when building and testing a custom block.\n<\/div>\n\nNow, you can remove the \"Testing\" message and add a `TextControl`. It should include:\n\n1. A `label` property set to \"Starting year\"\n2. A `value` property set to the attribute `startingYear`\n3. An `onChange` property that updates the `startingYear` attribute whenever the value changes\n\nPutting it all together, the `Edit()` function should look like the following.\n\n```js\nexport default function Edit( { attributes, setAttributes } ) {\n\tconst { showStartingYear, startingYear } = attributes;\n\tconst currentYear = new Date().getFullYear().toString();\n\n\treturn (\n\t\t<>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title={ __( 'Settings', 'copyright-date-block' ) }>\n\t\t\t\t\t<TextControl\n\t\t\t\t\t\tlabel={ __(\n\t\t\t\t\t\t\t'Starting year',\n\t\t\t\t\t\t\t'copyright-date-block'\n\t\t\t\t\t\t) }\n\t\t\t\t\t\tvalue={ startingYear || '' }\n\t\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\t\tsetAttributes( { startingYear: value } )\n\t\t\t\t\t\t}\n\t\t\t\t\t\/>\n\t\t\t\t<\/PanelBody>\n\t\t\t<\/InspectorControls>\n\t\t\t<p { ...useBlockProps() }>\u00a9 { currentYear }<\/p>\n\t\t<\/>\n\t);\n}\n```\n\n<div class=\"callout callout-tip\">\n\tYou may have noticed that the <code>value<\/code> property has a value of <code>startingYear || ''<\/code>. The symbol <code>||<\/code> is called the <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Operators\/Logical_OR\">Logical OR<\/a> (logical disjunction) operator. This prevents warnings in React when the <code>startingYear<\/code> is empty. See <a href=\"https:\/\/react.dev\/learn\/sharing-state-between-components#controlled-and-uncontrolled-components\">Controlled and uncontrolled components<\/a> for details.\n<\/div>\n\nSave the file and refresh the Editor. Confirm that a text field now exists in the Settings panel. Add a starting year and confirm that when you update the page, the value is saved.\n\n![A live look at editing the new Starting Year field in the Settings Sidebar](https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-11.gif)\n\n##### Toggle control\n\nNext, let's add a toggle that will turn the starting year functionality on or off. You can do this with a `ToggleControl` component that sets the `showStartingYear` attribute. It should include:\n\n1. A `label` property set to \"Show starting year\"\n2. A `checked` property set to the attribute `showStartingYear`\n3. An `onChange` property that updates the `showStartingYear` attribute whenever the toggle is checked or unchecked\n\nYou can also update the \"Starting year\" text input so it's only displayed when `showStartingYear` is `true`, which can be done using the `&&` logical operator.\n\nThe `Edit()` function should look like the following.\n\n```js\nexport default function Edit( { attributes, setAttributes } ) {\n\tconst { showStartingYear, startingYear } = attributes;\n\tconst currentYear = new Date().getFullYear().toString();\n\n\treturn (\n\t\t<>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title={ __( 'Settings', 'copyright-date-block' ) }>\n\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\tchecked={ !! showStartingYear }\n\t\t\t\t\t\tlabel={ __(\n\t\t\t\t\t\t\t'Show starting year',\n\t\t\t\t\t\t\t'copyright-date-block'\n\t\t\t\t\t\t) }\n\t\t\t\t\t\tonChange={ () =>\n\t\t\t\t\t\t\tsetAttributes( {\n\t\t\t\t\t\t\t\tshowStartingYear: ! showStartingYear,\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t}\n\t\t\t\t\t\/>\n\t\t\t\t\t{ showStartingYear && (\n\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\tlabel={ __(\n\t\t\t\t\t\t\t\t'Starting year',\n\t\t\t\t\t\t\t\t'copyright-date-block'\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\tvalue={ startingYear || '' }\n\t\t\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\t\t\tsetAttributes( { startingYear: value } )\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\/>\n\t\t\t\t\t) }\n\t\t\t\t<\/PanelBody>\n\t\t\t<\/InspectorControls>\n\t\t\t<p { ...useBlockProps() }>\u00a9 { currentYear }<\/p>\n\t\t<\/>\n\t);\n}\n```\n\nSave the file and refresh the Editor. Confirm that clicking the toggle displays the text input, and when you update the page, the toggle remains active.\n\n![A live look at editing the new Show Starting Year toggle in the Settings Sidebar](https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-12.gif)\n\n#### Updating the block content\n\nSo far, you have created the user interface for adding a starting year and updating the associated block attributes. Now you need to actually update the block content in the Editor.\n\nLet's create a new variable called `displayDate`. When `showStartingYear` is `true` and the user has provided a `startingYear`, the `displayDate` should include the `startingYear` and the `currentYear` separated by an em dash. Otherwise, just display the `currentYear`.\n\nThe code should look something like this.\n\n```js\nlet displayDate;\n\nif ( showStartingYear && startingYear ) {\n\tdisplayDate = startingYear + '\u2013' + currentYear;\n} else {\n\tdisplayDate = currentYear;\n}\n```\n\n<div class=\"callout callout-tip\">\n\tWhen you declare a variable with <code>let<\/code>, it means that the variable may be reassigned later. Declaring a variable with <code>const<\/code> means that the variable will never change. You could rewrite this code using <code>const<\/code>. It's just a matter of personal preference.\n<\/div>\n\nNext, you just need to update the block content to use the `displayDate` instead of the `currentYear` variable.\n\nThe `Edit()` function should look like the following.\n\n```js\nexport default function Edit( { attributes, setAttributes } ) {\n\tconst { showStartingYear, startingYear } = attributes;\n\tconst currentYear = new Date().getFullYear().toString();\n\n\tlet displayDate;\n\n\tif ( showStartingYear && startingYear ) {\n\t\t\tdisplayDate = startingYear + '\u2013' + currentYear;\n\t} else {\n\t\tdisplayDate = currentYear;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title={ __( 'Settings', 'copyright-date-block' ) }>\n\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\tchecked={ !! showStartingYear }\n\t\t\t\t\t\tlabel={ __(\n\t\t\t\t\t\t\t'Show starting year',\n\t\t\t\t\t\t\t'copyright-date-block'\n\t\t\t\t\t\t) }\n\t\t\t\t\t\tonChange={ () =>\n\t\t\t\t\t\t\tsetAttributes( {\n\t\t\t\t\t\t\t\tshowStartingYear: ! showStartingYear,\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t}\n\t\t\t\t\t\/>\n\t\t\t\t\t{ showStartingYear && (\n\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\tlabel={ __(\n\t\t\t\t\t\t\t\t'Starting year',\n\t\t\t\t\t\t\t\t'copyright-date-block'\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\tvalue={ startingYear || '' }\n\t\t\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\t\t\tsetAttributes( { startingYear: value } )\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\/>\n\t\t\t\t\t) }\n\t\t\t\t<\/PanelBody>\n\t\t\t<\/InspectorControls>\n\t\t\t<p { ...useBlockProps() }>\u00a9 { displayDate }<\/p>\n\t\t<\/>\n\t);\n}\n```\n\nSave the file and refresh the Editor. Confirm that the block content updates correctly when you make changes in the Settings panel.\n\n![A live look at the block content being updated by the new fields in the Setting Sidebar](https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-13.gif)\n\n### Updating render.php\n\nWhile the Editor looks great, the starting year functionality has yet to be added to the front end. Let's fix that by updating the `render.php` file.\n\nStart by adding a variable called `$display_date` and replicate what you did in the `Edit()` function above.\n\nThis variable should display the value of the `startingYear` attribute and the `$current_year` variable separated by an em dash, or just the `$current_year` is the `showStartingYear` attribute is `false`.\n\n<div class=\"callout callout-tip\">\n\t<p>Three variables are exposed in the <code>render.php<\/code>, which you can use to customize the block's output:<\/p>\n\t<ul>\n\t\t<li><code>$attributes<\/code> (array): The block attributes.<\/li>\n\t\t<li><code>$content<\/code> (string): The block default content.<\/li>\n\t\t<li><code>$block<\/code> (WP_Block): The block instance.<\/li>\n\t<\/ul>\n<\/div>\n\nThe code should look something like this.\n\n```php\nif ( ! empty( $attributes['startingYear'] ) && ! empty( $attributes['showStartingYear'] ) ) {\n\t$display_date = $attributes['startingYear'] . '\u2013' . $current_year;\n} else {\n\t$display_date = $current_year;\n}\n```\n\nNext, you just need to update the block content to use the `$display_date` instead of the `$current_year` variable.\n\nYour final `render.php` file should look like this.\n\n```php\n<?php\n$current_year = date( \"Y\" );\n\nif ( ! empty( $attributes['startingYear'] ) && ! empty( $attributes['showStartingYear'] ) ) {\n\t$display_date = $attributes['startingYear'] . '\u2013' . $current_year;\n} else {\n\t$display_date = $current_year;\n}\n?>\n<p <?php echo get_block_wrapper_attributes(); ?>>\n    \u00a9 <?php echo esc_html( $display_date ); ?>\n<\/p>\n```\n\nSave the file and confirm that the correct block content is now appearing on the front end of your site.\n\nYou have now successfully built a dynamically rendered custom block that utilizes block supports, core WordPress components, and custom attributes. In many situations, this is as far as you would need to go for a block displaying the copyright date with some additional functionality.\n\nIn the next section, however, you will add static rendering to the block. This exercise will illustrate how block data is stored in WordPress and provide a fallback should this plugin ever be inadvertently disabled.\n\n## Adding static rendering\n\nA block can utilize dynamic rendering, static rendering, or both. The block you have built so far is dynamically rendered. Its block markup and associated attributes are stored in the database, but its HTML output is not.\n\nStatically rendered blocks will always store the block markup, attributes, and output in the database. Blocks can also store static output in the database while being further enhanced dynamically on the front end, a combination of both methods.\n\nYou will see the following if you switch to the Code editor from within the Editor.\n\n```html\n<!-- wp:create-block\/copyright-date-block {\"showStartingYear\":true,\"startingYear\":\"2017\"} \/-->\n```\n\nCompare this to a statically rendered block like the Paragraph block.\n\n```html\n<!-- wp:paragraph -->\n<p>This is a test.<\/p>\n<!-- \/wp:paragraph -->\n```\n\nThe HTML of the paragraph is stored in post content and saved in the database.\n\nYou can learn more about dynamic and static rendering in the [Fundamentals documentation](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/static-dynamic-rendering\/). While most blocks are either dynamically or statically rendered, you can build a block that utilizes both methods.\n\n### Why add static rendering?\n\nWhen you add static rendering to a dynamically rendered block, the `render.php` file will still control the output on the front end, but the block's HTML content will be saved in the database. This means that the content will remain if the plugin is ever removed from the site. In the case of this Copyright Date Block, the content will revert to a Custom HTML block that you can easily convert to a Paragraph block.\n\n![An error message in the Editor when a block type no longer exists](https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-14.png)\n\nWhile not necessary in all situations, adding static rendering to a dynamically rendered block can provide a helpful fallback should the plugin ever be disabled unintentionally.\n\nAlso, consider a situation where the block markup is included in a block pattern or theme template. If a user installs that theme or uses the pattern without the Copyright Date Block installed, they will get a notice that the block is not available, but the content will still be displayed.\n\nAdding static rendering is also a good exploration of how block content is stored and rendered in WordPress.\n\n### Adding a save function\n\nStart by adding a new file named `save.js` to the `src\/` folder. In this file, add the following.\n\n```js\nimport { useBlockProps } from '@wordpress\/block-editor';\n\nexport default function save() {\n\treturn (\n\t\t<p { ...useBlockProps.save() }>\n\t\t\t{ 'Copyright Date Block \u2013 hello from the saved content!' }\n\t\t<\/p>\n\t);\n}\n```\n\nThis should look similar to the original `edit.js` file, and you can refer to the [block wrapper](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/block-wrapper\/#the-save-components-markup) documentation for additional information.\n\nNext, in the `index.js` file, import this `save()` function and add a save property to the `registerBlockType()` function. Here's a simplified view of the updated file.\n\n```js\nimport save from '.\/save';\n\n...\n\nregisterBlockType( metadata.name, {\n\ticon: calendarIcon,\n\tedit: Edit,\n\tsave\n} );\n```\n\n<div class=\"callout callout-tip\">\n\tWhen defining properties of an object, if the property name and the variable name are the same, you can use shorthand property names. This is why the code above uses <code>save<\/code> instead of <code>save: save<\/code>.\n<\/div>\n\nSave both `save.js` and `index.js` files and refresh the Editor. It should look like this.\n\n![A block validation error message in the Editor](https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-15.png)\n\nDon't worry, the error is expected. If you open the inspector in your browser, you should see the following message.\n\n![A block validation error message in the console](https:\/\/developer.wordpress.org\/files\/2023\/12\/block-tutorial-16.png)\n\nThis block validation error occurs because the `save()` function returns block content, but no HTML is stored in the block markup since the previously saved block was dynamic. Remember that this is what the markup currently looks like.\n\n```html\n<!-- wp:create-block\/copyright-date-block {\"showStartingYear\":true,\"startingYear\":\"2017\"} \/-->\n```\n\nYou will see more of these errors as you update the `save()` function in subsequent steps. Just click \"Attempt Block Recovery\" and update the page.\n\nAfter preforming block recovery, open the Code editor and you will see the markup now looks like this.\n\n```html\n<!-- wp:create-block\/copyright-date-block {\"showStartingYear\":true,\"startingYear\":\"2017\"} -->\n<p class=\"wp-block-create-block-copyright-date-block\">Copyright Date Block \u2013 hello from the saved content!<\/p>\n<!-- \/wp:create-block\/copyright-date-block -->\n```\n\nYou will often encounter block validation errors when building a block with static rendering, and that's ok. The output of the `save()` function must match the HTML in the post content exactly, which may end up out of sync as you add functionality. So long as there are no validation errors when you're completely finished building the block, you will be all set.\n\n### Updating save.js\n\nNext, let's update the output of the `save()` function to display the correct content. Start by copying the same approach used in `edit.js`.\n\n1. Add the `attributes` parameter to the function\n2. Define the `showStartingYear` and `startingYear` variables\n3. Define a `currentYear` variable\n4. Define a `displayDate` variable depending on the values of `currentYear`, `showStartingYear`, and `startingYear`\n\nThe result should look like this.\n\n```js\nexport default function save( { attributes } ) {\n\tconst { showStartingYear, startingYear } = attributes;\n\tconst currentYear = new Date().getFullYear().toString();\n\n\tlet displayDate;\n\n\tif ( showStartingYear && startingYear ) {\n\t\tdisplayDate = startingYear + '\u2013' + currentYear;\n\t} else {\n\t\tdisplayDate = currentYear;\n\t}\n\n\treturn (\n\t\t<p { ...useBlockProps.save() }>\u00a9 { displayDate }<\/p>\n\t);\n}\n```\n\nSave the file and refresh the Editor. Click \"Attempt Block Recovery\" and update the page. Check the Code editor, and the block markup should now look something like this.\n\n```html\n<!-- wp:create-block\/copyright-date-block {\"showStartingYear\":true,\"startingYear\":\"2017\"} -->\n<p class=\"wp-block-create-block-copyright-date-block\">\u00a9 2017\u20132023<\/p>\n<!-- \/wp:create-block\/copyright-date-block -->\n```\n\nAt this point, it might look like you're done. The block content is now saved as HTML in the database and the output on the front end is dynamically rendered. However, there are still a few things that need to be addressed.\n\nConsider the situation where the user added the block to a page in 2023 and then went back to edit the page in 2024. The front end will update as expected, but in the Editor, there will be a block validation error. The `save()` function knows that it's 2024, but the block content saved in the database still says 2023.\n\nLet's fix this in the next section.\n\n### Handling dynamic content in statically rendered blocks\n\nGenerally, you want to avoid dynamic content in statically rendered blocks. This is part of the reason why the term \"dynamic\" is used when referring to dynamic rendering.\n\nThat said, in this tutorial, you are combining both rendering methods, and you just need a bit more code to avoid any block validation errors when the year changes.\n\nThe root of the issue is that the `currentYear` variable is set dynamically in the `save()` function. Instead, this should be a static variable within the function, which can be solved with an additional attribute.\n\n#### Adding a new attribute\n\nOpen the `block.json` file and add a new attribute called `fallbackCurrentYear` with the type `string`. The `attributes` section of the file should now look like this.\n\n```json\n\"attributes\": {\n    \"fallbackCurrentYear\": {\n\t\t\"type\": \"string\"\n    },\n    \"showStartingYear\": {\n\t\t\"type\": \"boolean\"\n    },\n    \"startingYear\": {\n\t\t\"type\": \"string\"\n\t}\n},\n```\n\nNext, open the `save.js` file and use the new `fallbackCurrentYear` attribute in place of `currentYear`. Your updated `save()` function should look like this.\n\n```js\nexport default function save( { attributes } ) {\n\tconst { fallbackCurrentYear, showStartingYear, startingYear } = attributes;\n\n\tlet displayDate;\n\n\tif ( showStartingYear && startingYear ) {\n\t\tdisplayDate = startingYear + '\u2013' + fallbackCurrentYear;\n\t} else {\n\t\tdisplayDate = fallbackCurrentYear;\n\t}\n\n\treturn (\n\t\t<p { ...useBlockProps.save() }>\u00a9 { displayDate }<\/p>\n\t);\n}\n```\n\nNow, what happens if the `fallbackCurrentYear` is undefined?\n\nBefore the `currentYear` was defined within the function, so the `save()` function always had content to return, even if `showStartingYear` and `startingYear` were undefined.\n\nInstead of returning just the copyright symbol, let's add a condition that if `fallbackCurrentYear` is not set, return `null`. It's generally better to save no HTML in the database than incomplete data.\n\nThe final `save()` function should look like this.\n\n```js\nexport default function save( { attributes } ) {\n\tconst { fallbackCurrentYear, showStartingYear, startingYear } = attributes;\n\n\tif ( ! fallbackCurrentYear ) {\n\t\treturn null;\n\t}\n\n\tlet displayDate;\n\n\tif ( showStartingYear && startingYear ) {\n\t\tdisplayDate = startingYear + '\u2013' + fallbackCurrentYear;\n\t} else {\n\t\tdisplayDate = fallbackCurrentYear;\n\t}\n\n\treturn (\n\t\t<p { ...useBlockProps.save() }>\u00a9 { displayDate }<\/p>\n\t);\n}\n```\n\nSave both the `block.json` and `save.js` files; you won't need to make any more changes.\n\n#### Setting the attribute in edit.js\n\nThe `save()` function now uses the new `fallbackCurrentYear`, so it needs to be set somewhere. Let's use the `Edit()` function.\n\nOpen the `edit.js` file and start by defining the `fallbackCurrentYear` variable at the top of the `Edit()` functional alongside the other attributes. Next, review what's happening in the function.\n\nWhen the block loads in the Editor, the `currentYear` variable is defined. The function then uses this variable to set the content of the block.\n\nNow, let's set the `fallbackCurrentYear` attribute to the `currentYear` when the block loads if the attribute is not already set.\n\n```js\nif ( currentYear !== fallbackCurrentYear ) {\n\tsetAttributes( { fallbackCurrentYear: currentYear } );\n}\n```\n\nThis will work but can be improved by ensuring this code only runs once when the block is initialized. To do so, you can use the [`useEffect`](https:\/\/react.dev\/reference\/react\/useEffect) React hook. Refer to the React documentation for more information about how to use this hook.\n\nFirst, import `useEffect` with the following code.\n\n```js\nimport { useEffect } from 'react';\n```\n\nThen wrap the `setAttribute()` code above in a `useEffect` and place this code after the `currentYear` definition in the `Edit()` function. The result should look like this.\n\n```js\nexport default function Edit( { attributes, setAttributes } ) {\n\tconst { fallbackCurrentYear, showStartingYear, startingYear } = attributes;\n\n\t\/\/ Get the current year and make sure it's a string.\n\tconst currentYear = new Date().getFullYear().toString();\n\n\t\/\/ When the block loads, set the fallbackCurrentYear attribute to the\n\t\/\/ current year if it's not already set.\n\tuseEffect( () => {\n\t\tif ( currentYear !== fallbackCurrentYear ) {\n\t\t\tsetAttributes( { fallbackCurrentYear: currentYear } );\n\t\t}\n\t}, [ currentYear, fallbackCurrentYear, setAttributes ] );\n\n\t...\n```\n\nWhen the block is initialized in the Editor, the `fallbackCurrentYear` attribute will be immediately set. This value will then be available to the `save()` function, and the correct block content will be displayed without block validation errors.\n\nThe one caveat is when the year changes. If a Copyright Date Block was added to a page in 2023 and then edited in 2024, the `fallbackCurrentYear` attribute will no longer equal the `currentYear`, and the attribute will be automatically updated to `2024`. This will update the HTML returned by the `save()` function.\n\nYou will not get any block validation errors, but the Editor will detect that changes have been made to the page and prompt you to update.\n\n#### Optimizing render.php\n\nThe final step is to optimize the `render.php` file. If the `currentYear` and the `fallbackCurrentYear` attribute are the same, then there is no need to dynamically create the block content. It is already saved in the database and is available in the  `render.php` file via the `$content` variable.\n\nTherefore, update the file to render the generated content if `currentYear` and `fallbackCurrentYear` do not match.\n\n```php\n$current_year = date( \"Y\" );\n\n\/\/ Determine which content to display.\nif ( isset( $attributes['fallbackCurrentYear'] ) && $attributes['fallbackCurrentYear'] === $current_year ) {\n\n\t\/\/ The current year is the same as the fallback, so use the block content saved in the database (by the save.js function).\n\t$block_content = $content;\n} else {\n\n\t\/\/ The current year is different from the fallback, so render the updated block content.\n\tif ( ! empty( $attributes['startingYear'] ) && ! empty( $attributes['showStartingYear'] ) ) {\n\t\t$display_date = $attributes['startingYear'] . '\u2013' . $current_year;\n\t} else {\n\t\t$display_date = $current_year;\n\t}\n\n\t$block_content = '<p ' . get_block_wrapper_attributes() . '>\u00a9 ' . esc_html( $display_date ) . '<\/p>';\n}\n\necho wp_kses_post( $block_content );\n```\n\nThat's it! You now have a block that utilizes both dynamic and static rendering.\n\n## Wrapping up\n\nCongratulations on completing this tutorial and building your very own Copyright Date Block. Throughout this journey, you have gained a solid foundation in WordPress block development and are now ready to start building your own blocks.\n\nFor final reference, the complete code for this tutorial is available in the [Block Development Examples](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/copyright-date-block-09aac3) repository on GitHub.\n\nNow, whether you're now looking to refine your skills, tackle more advanced projects, or stay updated with the latest WordPress trends, the following resources will help you improve your block development skills:\n\n- [Block Development Environment](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/devenv\/)\n- [Fundamentals of Block Development](https:\/\/developer.wordpress.org\/block-editor\/getting-started\/fundamentals\/)\n- [WordPress Developer Blog](https:\/\/developer.wordpress.org\/news\/)\n- [Block Development Examples](https:\/\/github.com\/WordPress\/block-development-examples) | GitHub repository\n\nRemember, every expert was once a beginner. Keep learning, experimenting, and, most importantly, have fun building with WordPress.\n"
    },
    {
        "path": "\/markdown\/getting-started\/glossary.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Glossary<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Attribute sources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>An object describing the attributes shape of a block. The keys can be named as most appropriate to describe the state of a block type. The value for each key is a function which describes the strategy by which the attribute value should be extracted from the content of a saved post's content. When processed, a new object is created, taking the form of the keys defined in the attribute sources, where each value is the result of the attribute source function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Attributes<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The object representation of the current state of a block in post content. When loading a saved post, this is determined by the attribute sources for the block type. These values can change over time during an editing session when the user modifies a block, and are used when determining how to serialize the block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The abstract term used to describe units of markup that, composed together, form the content or layout of a webpage. The idea combines concepts of what in WordPress today we achieve with shortcodes, custom HTML, and embed discovery into a single consistent API and user experience.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block Styles<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The CSS styles that are part of the block, either via its stylesheet or via the block markup itself. For example, a class attached to the block markup is considered block styles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Compare to &lt;a href=\"#global-styles\">Global Styles&lt;\/a>. In contraposition to Global Styles, block styles are sometimes referred to as &lt;a href=\"#local-styles\">Local Styles&lt;\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Learn more about <a href=\"\/docs\/explanations\/architecture\/styles.md#block-styles\">Block Styles<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block Supports<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>An API for blocks to declare what features they support. By declaring support for a feature, the API would add additional &lt;a href=\"#attributes\">attributes&lt;\/a> to the block and matching UI controls for most of the existing block supports.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See &lt;a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-supports\/\">Block Supports reference documentation&lt;\/a> for a deep dive into the API.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block Theme<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A theme built in block forward way that allows Full Site Editing to work. The core of a block theme are its block templates and block template parts. To date, block theme templates have been HTML files of block markup that map to templates from the standard WordPress template hierarchy.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block categories<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>These are not a WordPress taxonomy, but instead used internally to sort blocks in the Block Library.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block ~Inserter~ Library<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Primary interface for selecting from the available blocks, triggered by plus icon buttons on Blocks or in the top-left of the editor interface.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block name<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A unique identifier for a block type, consisting of a plugin-specific namespace and a short label describing the block's intent. e.g. &lt;code>core\/image&lt;\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block Templates<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A template is a pre-defined arrangement of blocks, possibly with predefined attributes or placeholder content. You can provide a template for a post type, to give users a starting point when creating a new piece of content, or inside a custom block with the &lt;code>InnerBlocks&lt;\/code> component. At their core, templates are simply HTML files of block markup that map to templates from the standard WordPress template hierarchy, for example index, single or archive. This helps control the front-end defaults of a site that are not edited via the Page Editor or the Post Editor. See the &lt;a href=\"..\/..\/developers\/block-api\/block-templates\/\">templates documentation&lt;\/a> for more information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block Template Parts<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Building on Block Templates, these parts help set structure for reusable items like a Footer or Header that one typically sees in a WordPress site. They are primarily site structure and are never to be mixed with the post content editor. With Full Site Editing and block based themes, users can create their own arbitrary Template Parts, save those in the database for their site, and re-use them throughout their site. Template parts are equivalent \u2013 in blocks \u2013 of theme template parts. They are generally defined by a theme first, carry some semantic meaning (could be swapped between themes such as a header), and can only be inserted in the site editor context (within \u201ctemplates\u201d).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block type<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In contrast with the blocks composing a particular post, a block type describes the blueprint by which any block of that type should behave. So while there may be many images within a post, each behaves consistent with a unified image block type definition.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Classic block<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block which embeds the TinyMCE editor as a block, TinyMCE was the base of the previous core editor. Older content created prior to the block editor will be loaded in to a single Classic block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Dynamic block<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A type of block where the content of which may change and cannot be determined at the time of saving a post, instead calculated any time the post is shown on the front of a site. These blocks may save fallback content or no content at all in their JavaScript implementation, instead deferring to a PHP block implementation for runtime rendering.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Full Site Editing<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This refers to a collection of features that ultimately allows users to edit their entire website using blocks as the starting point. This feature set includes everything from block patterns to global styles to templates to design tools for blocks (and more). First released in WordPress 5.9.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Global Styles<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The CSS styles generated by WordPress and enqueued as an embedded stylesheet in the front end of the site. The stylesheet ID is <code>global-styles-inline-css<\/code>. The contents of this stylesheet come from the default <code>theme.json<\/code> of WordPress, the theme's <code>theme.json<\/code>, and the styles provided by the user via the global styles sidebar in the site editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See <a href=\"\/docs\/reference-guides\/theme-json-reference.md\">theme.json reference docs<\/a>&lt;\/a>, the <a href=\"\/docs\/how-to-guides\/themes\/global-settings-and-styles.md\">how to guide<\/a>, and an introduction to <a href=\"\/docs\/explanations\/architecture\/styles.md\">styles in the block editor<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Compare to &lt;a href=\"#block-styles\">block styles&lt;\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Inspector<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Deprecated term. See &lt;a href=\"#settings-sidebar\">Settings Sidebar.&lt;\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Local Styles<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>See &lt;a href=\"#block-styles\">Block Styles&lt;\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Navigation Block<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block that allows you to edit a site's navigation menu, both in terms of structure and design.&lt;\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Patterns<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Patterns are predefined layouts of blocks that can be inserted as starter content that are meant to be changed by the user every time. Once inserted, they exist as a local save and are not global.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Post settings<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A sidebar region containing metadata fields for the post, including scheduling, visibility, terms, and featured image.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Query Block<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block that replicates the classic WP_Query and allows for further customization with additional functionality.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Reusable block<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block that is saved and then can be shared as a reusable, repeatable piece of content.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">RichText<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A common component enabling rich content editing including bold, italics, hyperlinks, etc.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Serialization<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The process of converting a block's attributes object into HTML markup, which occurs each time a block is edited.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Settings Sidebar<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The panel on the right that contains the document and block settings. The sidebar is toggled using the Settings gear icon. Block settings are shown when a block is selected, otherwise document settings are shown.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Site Editor<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The cohesive experience that allows you to directly edit and navigate between various templates, template parts, styling options, and more.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Static block<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A type of block where the content of which is known at the time of saving a post. A static block will be saved with HTML markup directly in post content.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Template Editing Mode<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A scaled down direct editing experience allowing you to edit\/change\/create the template a post\/page uses.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Theme Blocks<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Blocks that accomplish everything possible in traditional templates using template tags (ex: Post Author Block). A full list can be found <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\/22724\">here<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">TinyMCE<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>&lt;a href=\"https:\/\/www.tinymce.com\/\">TinyMCE&lt;\/a> is a web-based JavaScript WYSIWYG (What You See Is What You Get) editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Toolbar<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A set of button controls. In the context of a block, usually referring to the toolbar of block controls shown above the selected block.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Glossary\n\n## Attribute sources\n\nAn object describing the attributes shape of a block. The keys can be named as most appropriate to describe the state of a block type. The value for each key is a function which describes the strategy by which the attribute value should be extracted from the content of a saved post's content. When processed, a new object is created, taking the form of the keys defined in the attribute sources, where each value is the result of the attribute source function.\n\n## Attributes\n\nThe object representation of the current state of a block in post content. When loading a saved post, this is determined by the attribute sources for the block type. These values can change over time during an editing session when the user modifies a block, and are used when determining how to serialize the block.\n\n## Block\n\nThe abstract term used to describe units of markup that, composed together, form the content or layout of a webpage. The idea combines concepts of what in WordPress today we achieve with shortcodes, custom HTML, and embed discovery into a single consistent API and user experience.\n\n## Block Styles\n\nThe CSS styles that are part of the block, either via its stylesheet or via the block markup itself. For example, a class attached to the block markup is considered block styles.\n\nCompare to <a href=\"#global-styles\">Global Styles<\/a>. In contraposition to Global Styles, block styles are sometimes referred to as <a href=\"#local-styles\">Local Styles<\/a>.\n\nLearn more about [Block Styles](\/docs\/explanations\/architecture\/styles.md#block-styles).\n\n## Block Supports\n\nAn API for blocks to declare what features they support. By declaring support for a feature, the API would add additional <a href=\"#attributes\">attributes<\/a> to the block and matching UI controls for most of the existing block supports.\n\nSee <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-supports\/\">Block Supports reference documentation<\/a> for a deep dive into the API.\n\n## Block Theme\n\nA theme built in block forward way that allows Full Site Editing to work. The core of a block theme are its block templates and block template parts. To date, block theme templates have been HTML files of block markup that map to templates from the standard WordPress template hierarchy.\n\n## Block categories\n\nThese are not a WordPress taxonomy, but instead used internally to sort blocks in the Block Library.\n\n## Block ~Inserter~ Library\n\nPrimary interface for selecting from the available blocks, triggered by plus icon buttons on Blocks or in the top-left of the editor interface.\n\n## Block name\n\nA unique identifier for a block type, consisting of a plugin-specific namespace and a short label describing the block's intent. e.g. <code>core\/image<\/code>\n\n## Block Templates\n\nA template is a pre-defined arrangement of blocks, possibly with predefined attributes or placeholder content. You can provide a template for a post type, to give users a starting point when creating a new piece of content, or inside a custom block with the <code>InnerBlocks<\/code> component. At their core, templates are simply HTML files of block markup that map to templates from the standard WordPress template hierarchy, for example index, single or archive. This helps control the front-end defaults of a site that are not edited via the Page Editor or the Post Editor. See the <a href=\"..\/..\/developers\/block-api\/block-templates\/\">templates documentation<\/a> for more information.\n\n## Block Template Parts\n\nBuilding on Block Templates, these parts help set structure for reusable items like a Footer or Header that one typically sees in a WordPress site. They are primarily site structure and are never to be mixed with the post content editor. With Full Site Editing and block based themes, users can create their own arbitrary Template Parts, save those in the database for their site, and re-use them throughout their site. Template parts are equivalent \u2013 in blocks \u2013 of theme template parts. They are generally defined by a theme first, carry some semantic meaning (could be swapped between themes such as a header), and can only be inserted in the site editor context (within \u201ctemplates\u201d).\n\n## Block type\n\nIn contrast with the blocks composing a particular post, a block type describes the blueprint by which any block of that type should behave. So while there may be many images within a post, each behaves consistent with a unified image block type definition.\n\n## Classic block\n\nA block which embeds the TinyMCE editor as a block, TinyMCE was the base of the previous core editor. Older content created prior to the block editor will be loaded in to a single Classic block.\n\n## Dynamic block\n\nA type of block where the content of which may change and cannot be determined at the time of saving a post, instead calculated any time the post is shown on the front of a site. These blocks may save fallback content or no content at all in their JavaScript implementation, instead deferring to a PHP block implementation for runtime rendering.\n\n## Full Site Editing\n\nThis refers to a collection of features that ultimately allows users to edit their entire website using blocks as the starting point. This feature set includes everything from block patterns to global styles to templates to design tools for blocks (and more). First released in WordPress 5.9.\n\n## Global Styles\n\nThe CSS styles generated by WordPress and enqueued as an embedded stylesheet in the front end of the site. The stylesheet ID is `global-styles-inline-css`. The contents of this stylesheet come from the default `theme.json` of WordPress, the theme's `theme.json`, and the styles provided by the user via the global styles sidebar in the site editor.\n\nSee [theme.json reference docs](\/docs\/reference-guides\/theme-json-reference.md)<\/a>, the [how to guide](\/docs\/how-to-guides\/themes\/global-settings-and-styles.md), and an introduction to [styles in the block editor](\/docs\/explanations\/architecture\/styles.md).\n\nCompare to <a href=\"#block-styles\">block styles<\/a>.\n\n## Inspector\n\nDeprecated term. See <a href=\"#settings-sidebar\">Settings Sidebar.<\/a>\n\n## Local Styles\n\nSee <a href=\"#block-styles\">Block Styles<\/a>.\n\n## Navigation Block\n\nA block that allows you to edit a site's navigation menu, both in terms of structure and design.<\/a>\n\n## Patterns\n\nPatterns are predefined layouts of blocks that can be inserted as starter content that are meant to be changed by the user every time. Once inserted, they exist as a local save and are not global.\n\n## Post settings\n\nA sidebar region containing metadata fields for the post, including scheduling, visibility, terms, and featured image.\n\n## Query Block\n\nA block that replicates the classic WP_Query and allows for further customization with additional functionality.\n\n## Reusable block\n\nA block that is saved and then can be shared as a reusable, repeatable piece of content.\n\n## RichText\n\nA common component enabling rich content editing including bold, italics, hyperlinks, etc.\n\n## Serialization\n\nThe process of converting a block's attributes object into HTML markup, which occurs each time a block is edited.\n\n## Settings Sidebar\n\nThe panel on the right that contains the document and block settings. The sidebar is toggled using the Settings gear icon. Block settings are shown when a block is selected, otherwise document settings are shown.\n\n## Site Editor\n\nThe cohesive experience that allows you to directly edit and navigate between various templates, template parts, styling options, and more.\n\n## Static block\n\nA type of block where the content of which is known at the time of saving a post. A static block will be saved with HTML markup directly in post content.\n\n## Template Editing Mode\n\nA scaled down direct editing experience allowing you to edit\/change\/create the template a post\/page uses.\n\n## Theme Blocks\n\nBlocks that accomplish everything possible in traditional templates using template tags (ex: Post Author Block). A full list can be found [here](https:\/\/github.com\/WordPress\/gutenberg\/issues\/22724).\n\n## TinyMCE\n\n<a href=\"https:\/\/www.tinymce.com\/\">TinyMCE<\/a> is a web-based JavaScript WYSIWYG (What You See Is What You Get) editor.\n\n## Toolbar\n\nA set of button controls. In the context of a block, usually referring to the toolbar of block controls shown above the selected block.\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">How-to Guides<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The new editor is highly flexible, like most of WordPress. You can build custom blocks, modify the editor's appearance, add special plugins, and much more.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Creating blocks<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The editor is about blocks, and the main extensibility API is the Block API. It allows you to create your own static blocks, <a href=\"\/docs\/how-to-guides\/block-tutorial\/creating-dynamic-blocks.md\">Dynamic Blocks<\/a> ( rendered on the server ) and also blocks capable of saving data to Post Meta for more structured content.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you want to learn more about block creation, see the <a href=\"\/docs\/getting-started\/devenv\/get-started-with-create-block.md\">Create a Block tutorial<\/a> for the best place to start.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Extending blocks<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It is also possible to modify the behavior of existing blocks or even remove them completely using filters.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Learn more in the <a href=\"\/docs\/reference-guides\/filters\/block-filters.md\">Block Filters<\/a> section.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Specifically for <code>Query Loop<\/code> block, besides the available filters, there are more ways to extend it and create bespoke versions of it. Learn more in the <a href=\"\/docs\/how-to-guides\/block-tutorial\/extending-the-query-loop-block.md\">Extending the Query Loop block<\/a> section.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Extending the Editor UI<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Extending the editor UI can be accomplished with the <code>registerPlugin<\/code> API, allowing you to define all your plugin's UI elements in one place.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Refer to the <a href=\"\/packages\/plugins\/README.md\">Plugins<\/a> and <a href=\"\/packages\/edit-post\/README.md\">Edit Post<\/a> section for more information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can also filter certain aspects of the editor; this is documented on the <a href=\"\/docs\/reference-guides\/filters\/editor-filters.md\">Editor Filters<\/a> page.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Meta boxes<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Porting PHP meta boxes to blocks or sidebar plugins is highly encouraged, learn how in the <a href=\"\/docs\/how-to-guides\/metabox.md\">meta box<\/a> and <a href=\"\/docs\/how-to-guides\/plugin-sidebar-0.md\">sidebar plugin<\/a> guides.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Theme support<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>By default, blocks provide their styles to enable basic support for blocks in themes without any change. Themes can add\/override these styles, or rely on defaults.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are some advanced block features which require opt-in support in the theme. See <a href=\"\/docs\/how-to-guides\/themes\/theme-support.md\">theme support<\/a> and <a href=\"\/docs\/reference-guides\/filters\/global-styles-filters.md\">how to filter global styles<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Autocomplete<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Autocompleters within blocks may be extended and overridden. Learn more about the <a href=\"\/docs\/reference-guides\/filters\/autocomplete-filters.md\">autocomplete<\/a> filters.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block parsing and serialization<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Posts in the editor move through a couple of different stages between being stored in <code>post_content<\/code> and appearing in the editor. Since the blocks themselves are data structures that live in memory it takes a parsing and serialization step to transform out from and into the stored format in the database.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Customizing the parser is an advanced topic that you can learn more about in the <a href=\"\/docs\/reference-guides\/filters\/parser-filters.md\">Extending the Parser<\/a> section.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# How-to Guides\n\nThe new editor is highly flexible, like most of WordPress. You can build custom blocks, modify the editor's appearance, add special plugins, and much more.\n\n## Creating blocks\n\nThe editor is about blocks, and the main extensibility API is the Block API. It allows you to create your own static blocks, [Dynamic Blocks](\/docs\/how-to-guides\/block-tutorial\/creating-dynamic-blocks.md) ( rendered on the server ) and also blocks capable of saving data to Post Meta for more structured content.\n\nIf you want to learn more about block creation, see the [Create a Block tutorial](\/docs\/getting-started\/devenv\/get-started-with-create-block.md) for the best place to start.\n\n## Extending blocks\n\nIt is also possible to modify the behavior of existing blocks or even remove them completely using filters.\n\nLearn more in the [Block Filters](\/docs\/reference-guides\/filters\/block-filters.md) section.\n\nSpecifically for `Query Loop` block, besides the available filters, there are more ways to extend it and create bespoke versions of it. Learn more in the [Extending the Query Loop block](\/docs\/how-to-guides\/block-tutorial\/extending-the-query-loop-block.md) section.\n\n## Extending the Editor UI\n\nExtending the editor UI can be accomplished with the `registerPlugin` API, allowing you to define all your plugin's UI elements in one place.\n\nRefer to the [Plugins](\/packages\/plugins\/README.md) and [Edit Post](\/packages\/edit-post\/README.md) section for more information.\n\nYou can also filter certain aspects of the editor; this is documented on the [Editor Filters](\/docs\/reference-guides\/filters\/editor-filters.md) page.\n\n## Meta boxes\n\nPorting PHP meta boxes to blocks or sidebar plugins is highly encouraged, learn how in the [meta box](\/docs\/how-to-guides\/metabox.md) and [sidebar plugin](\/docs\/how-to-guides\/plugin-sidebar-0.md) guides.\n\n## Theme support\n\nBy default, blocks provide their styles to enable basic support for blocks in themes without any change. Themes can add\/override these styles, or rely on defaults.\n\nThere are some advanced block features which require opt-in support in the theme. See [theme support](\/docs\/how-to-guides\/themes\/theme-support.md) and [how to filter global styles](\/docs\/reference-guides\/filters\/global-styles-filters.md).\n\n## Autocomplete\n\nAutocompleters within blocks may be extended and overridden. Learn more about the [autocomplete](\/docs\/reference-guides\/filters\/autocomplete-filters.md) filters.\n\n## Block parsing and serialization\n\nPosts in the editor move through a couple of different stages between being stored in `post_content` and appearing in the editor. Since the blocks themselves are data structures that live in memory it takes a parsing and serialization step to transform out from and into the stored format in the database.\n\nCustomizing the parser is an advanced topic that you can learn more about in the [Extending the Parser](\/docs\/reference-guides\/filters\/parser-filters.md) section.\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/accessibility.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Accessibility<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Accessibility documentation for developers working on the Gutenberg Project.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For more information on accessibility and WordPress see the <a href=\"https:\/\/make.wordpress.org\/accessibility\/handbook\/\">Make WordPress Accessibility Handbook<\/a> and the <a href=\"https:\/\/make.wordpress.org\/accessibility\/\">Accessibility Team section<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Landmark regions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It is a best practice to include ALL content on the page in landmarks, so that screen reader users who rely on them to navigate from section to section do not lose track of content.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For setting up navigation between different regions, see the <a href=\"\/packages\/components\/src\/higher-order\/navigate-regions\/README.md\">navigateRegions package<\/a> for additional documentation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Read more regarding landmark design from W3C:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/www.w3.org\/WAI\/ARIA\/apg\/practices\/landmark-regions\/#x4-2-general-principles-of-landmark-design\">General Principles of Landmark Design<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/www.w3.org\/WAI\/ARIA\/apg\/example-index\/landmarks\/\">ARIA Landmarks Examples<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/www.w3.org\/WAI\/ARIA\/apg\/practices\/landmark-regions\/#x4-1-html-sectioning-elements\">HTML5 elements that by default define ARIA landmarks<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Accessibility\n\nAccessibility documentation for developers working on the Gutenberg Project.\n\nFor more information on accessibility and WordPress see the [Make WordPress Accessibility Handbook](https:\/\/make.wordpress.org\/accessibility\/handbook\/) and the [Accessibility Team section](https:\/\/make.wordpress.org\/accessibility\/).\n\n## Landmark regions\n\nIt is a best practice to include ALL content on the page in landmarks, so that screen reader users who rely on them to navigate from section to section do not lose track of content.\n\nFor setting up navigation between different regions, see the [navigateRegions package](\/packages\/components\/src\/higher-order\/navigate-regions\/README.md) for additional documentation.\n\nRead more regarding landmark design from W3C:\n\n-   [General Principles of Landmark Design](https:\/\/www.w3.org\/WAI\/ARIA\/apg\/practices\/landmark-regions\/#x4-2-general-principles-of-landmark-design)\n-   [ARIA Landmarks Examples](https:\/\/www.w3.org\/WAI\/ARIA\/apg\/example-index\/landmarks\/)\n-   [HTML5 elements that by default define ARIA landmarks](https:\/\/www.w3.org\/WAI\/ARIA\/apg\/practices\/landmark-regions\/#x4-1-html-sectioning-elements)\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/platform\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Development Platform<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Gutenberg Project is not only building a better editor for WordPress, but also creating a platform to build upon. This platform consists of a set of JavaScript packages and tools that you can use in your web application. <a href=\"https:\/\/www.npmjs.com\/org\/wordpress\">View the list of packages available on npm<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">UI components<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"\/packages\/components\/README.md\">WordPress Components package<\/a> contains a set of UI components you can use in your project. See the <a href=\"https:\/\/wordpress.github.io\/gutenberg\/\">WordPress Storybook site<\/a> for an interactive guide to the available components and settings.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here is a quick example, how to use components in your project.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Install the dependency:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm install --save @wordpress\/components\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Usage in React:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { Button } from '@wordpress\/components';\n\nfunction MyApp() {\n\treturn <button>Hello Button<\/button>;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Many components include CSS to add style, you will need to include for the components to appear correctly. The component stylesheet can be found in <code>node_modules\/@wordpress\/components\/build-style\/style.css<\/code>, you can link directly or copy and include it in your project.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Development scripts<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"\/packages\/scripts\/README.md\"><code>@wordpress\/scripts<\/code> package<\/a> is a collection of reusable scripts for JavaScript development \u2014 includes scripts for building, linting, and testing \u2014 all with no additional configuration files.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here is a quick example, on how to use <code>wp-scripts<\/code> tool in your project.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Install the dependency:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm install --save-dev @wordpress\/scripts\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can then add a scripts section to your package.json file, for example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\t\"scripts\": {\n\t\t\"build\": \"wp-scripts build\",\n\t\t\"format\": \"wp-scripts format\",\n\t\t\"lint:js\": \"wp-scripts lint-js\",\n\t\t\"start\": \"wp-scripts start\"\n\t}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can then use <code>npm run build<\/code> to build your project with all the default webpack settings already configured, likewise for formatting and linting. The <code>start<\/code> command is used for development mode. See the <a href=\"\/packages\/scripts\/README.md\"><code>@wordpress\/scripts<\/code> package<\/a> for full documentation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For more info, see the <a href=\"\/docs\/how-to-guides\/javascript\/js-build-setup.md\">Getting Started with JavaScript tutorial<\/a> in the Block Editor Handbook.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block Editor<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/developer.wordpress.org\/block-editor\/packages\/packages-block-editor\/\"><code>@wordpress\/block-editor<\/code> package<\/a> allows you to create and use standalone block editors.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can learn more by reading the <a href=\"\/docs\/how-to-guides\/platform\/custom-block-editor.md\">tutorial \"Building a custom block editor\"<\/a>.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Development Platform\n\nThe Gutenberg Project is not only building a better editor for WordPress, but also creating a platform to build upon. This platform consists of a set of JavaScript packages and tools that you can use in your web application. [View the list of packages available on npm](https:\/\/www.npmjs.com\/org\/wordpress).\n\n## UI components\n\nThe [WordPress Components package](\/packages\/components\/README.md) contains a set of UI components you can use in your project. See the [WordPress Storybook site](https:\/\/wordpress.github.io\/gutenberg\/) for an interactive guide to the available components and settings.\n\nHere is a quick example, how to use components in your project.\n\nInstall the dependency:\n\n```bash\nnpm install --save @wordpress\/components\n```\n\nUsage in React:\n\n```jsx\nimport { Button } from '@wordpress\/components';\n\nfunction MyApp() {\n\treturn <Button>Hello Button<\/Button>;\n}\n```\n\nMany components include CSS to add style, you will need to include for the components to appear correctly. The component stylesheet can be found in `node_modules\/@wordpress\/components\/build-style\/style.css`, you can link directly or copy and include it in your project.\n\n## Development scripts\n\nThe [`@wordpress\/scripts` package](\/packages\/scripts\/README.md) is a collection of reusable scripts for JavaScript development \u2014 includes scripts for building, linting, and testing \u2014 all with no additional configuration files.\n\nHere is a quick example, on how to use `wp-scripts` tool in your project.\n\nInstall the dependency:\n\n```bash\nnpm install --save-dev @wordpress\/scripts\n```\n\nYou can then add a scripts section to your package.json file, for example:\n\n```json\n\t\"scripts\": {\n\t\t\"build\": \"wp-scripts build\",\n\t\t\"format\": \"wp-scripts format\",\n\t\t\"lint:js\": \"wp-scripts lint-js\",\n\t\t\"start\": \"wp-scripts start\"\n\t}\n```\n\nYou can then use `npm run build` to build your project with all the default webpack settings already configured, likewise for formatting and linting. The `start` command is used for development mode. See the [`@wordpress\/scripts` package](\/packages\/scripts\/README.md) for full documentation.\n\nFor more info, see the [Getting Started with JavaScript tutorial](\/docs\/how-to-guides\/javascript\/js-build-setup.md) in the Block Editor Handbook.\n\n## Block Editor\n\nThe [`@wordpress\/block-editor` package](https:\/\/developer.wordpress.org\/block-editor\/packages\/packages-block-editor\/) allows you to create and use standalone block editors.\n\nYou can learn more by reading the [tutorial \"Building a custom block editor\"](\/docs\/how-to-guides\/platform\/custom-block-editor.md).\n\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/platform\/custom-block-editor.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Building a custom block editor<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The WordPress block editor is a powerful tool that allows you to create and format content in various ways. It is powered, in part, by the <a href=\"\/packages\/block-editor\/README.md\"><code>@wordpress\/block-editor<\/code><\/a> package, which is a JavaScript library that provides the core functionality of the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This package can also be used to create custom block editors for virtually any other web application. This means that you can use the same blocks and block editing experience outside of WordPress.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/07\/custom-block-editor.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">The Standalone Editor instance populated with example Blocks within a custom WordPress admin page.<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>This flexibility and interoperability makes blocks a powerful tool for building and managing content across multiple applications. It also makes it simpler for developers to create content editors that work best for their users.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This guide covers the basics of creating your first custom block editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introduction<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>With its many packages and components, the Gutenberg codebase can be daunting at first. But at its core, it's all about managing and editing blocks. So if you want to work on the editor, it's essential to understand how block editing works at a fundamental level.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This guide will walk you through building a fully functioning, custom block editor \"instance\" within WordPress. Along the way, we'll introduce you to the key packages and components, so you can see how the block editor works under the hood.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>By the end of this article, you will have a solid understanding of the block editor's inner workings and be well on your way to creating your own block editor instances.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\n\tThe code used throughout this guide is available for download in the <a href=\"https:\/\/github.com\/getdave\/standalone-block-editor\">accompanying WordPress plugin<\/a>. The demo code in this plugin as an essential resource.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Code syntax<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The code snippets in this guide use JSX syntax. However, you could use plain JavaScript if you prefer. However, once familiar with JSX, many developers find it easier to read and write, so most code examples in the Block Editor Handbook use this syntax.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">What you're going to be building<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Throughout this guide, you will create an (almost) fully functioning block editor instance. The result will look something like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/07\/custom-block-editor.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">The Standalone Editor instance populated with example Blocks within a custom WordPress admin page<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>While it looks similar, this editor will not be the same <em>Block Editor<\/em> you are familiar with when creating posts and pages in WordPress. Instead, it will be an entirely custom instance that will live within a custom WordPress admin page called \"Block Editor.\"<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The editor will have the following features:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Ability to add and edit all Core blocks.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Familiar visual styles and main\/sidebar layout.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>Basic<\/em> block persistence between page reloads.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Plugin setup and organization<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The custom editor is going to be built as a WordPress plugin. To keep things simple, the plugin will be named <code>Standalone Block Editor Demo<\/code> because that is what it does.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The plugin file structure will look like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/wordpress.org\/gutenberg\/files\/2020\/03\/repo-files.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Screenshot showing file structure of the Plugin at https:\/\/github.com\/getdave\/standalone-block-editor.<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Here is a brief summary of what's going on:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>plugin.php<\/code> \u2013 Standard plugin \"entry\" file with comment meta data, which requires <code>init.php<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>init.php<\/code> - Handles the initialization of the main plugin logic.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>src\/<\/code> (directory) - This is where the JavaScript and CSS source files will live. These files are <em>not<\/em> directly enqueued by the plugin.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>webpack.config.js<\/code> - A custom Webpack config extending the defaults provided by the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-scripts\/\"><code>@wordpress\/scripts<\/code><\/a> npm package to allow for custom CSS styles (via Sass).<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The only item not shown above is the <code>build\/<\/code> directory, which is where the <em>compiled<\/em> JS and CSS files are outputted by <code>@wordpress\/scripts<\/code>. These files are enqueued by the plugin separately.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n\tThroughout this guide, filename references will be placed in a comment at the top of each code snippet so you can follow along.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>With the basic file structure in place, let's look at what packages will be needed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The \"Core\" of the editor<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>While the WordPress Editor is comprised of many moving parts, at its core is the <a href=\"\/packages\/block-editor\/README.md\"><code>@wordpress\/block-editor<\/code><\/a> package, which is best summarized by its own <code>README<\/code> file:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>This module allows you to create and use standalone block editors.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Perfect, this is the main package you will use to create the custom block editor instance. But first, you need to create a home for the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Creating the custom \"Block Editor\" page<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let's begin by creating a custom page within WordPress admin that will house the custom block editor instance.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n\tIf you're already comfortable with the process of creating custom admin pages in WordPress, you might want to <a href=\"#registering-and-rendering-our-custom-block-editor\">skip ahead<\/a>.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Registering the page<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To do this, you need to <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/add_menu_page\/\">register a custom admin page<\/a> using the standard WordPress <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/add_menu_page\/\"><code>add_menu_page()<\/code><\/a> helper:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ File: init.php\n\nadd_menu_page(\n    'Standalone Block Editor',         \/\/ Visible page name\n    'Block Editor',                    \/\/ Menu label\n    'edit_posts',                      \/\/ Required capability\n    'getdavesbe',                      \/\/ Hook\/slug of page\n    'getdave_sbe_render_block_editor', \/\/ Function to render the page\n    'dashicons-welcome-widgets-menus'  \/\/ Custom icon\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The <code>getdave_sbe_render_block_editor<\/code> function will be used to render the contents of the admin page. As a reminder, the source code for each step is available in the <a href=\"https:\/\/github.com\/getdave\/standalone-block-editor\">accompanying plugin<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Adding the target HTML<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Since the block editor is a React-powered application, you need to output some HTML into the custom page where JavaScript can render the block editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let's use the <code>getdave_sbe_render_block_editor<\/code> function referenced in the step above.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ File: init.php\n\nfunction getdave_sbe_render_block_editor() {\n\t?>\n\t<div<br>\t\tid=\"getdave-sbe-block-editor\"\n\t\tclass=\"getdave-sbe-block-editor\"\n\t>\n\t\tLoading Editor...\n\t\n\t}\n<\/div<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The function outputs some basic placeholder HTML. Note the <code>id<\/code> attribute <code>getdave-sbe-block-editor<\/code>, which will be used shortly.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Enqueuing JavaScript and CSS<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>With the target HTML in place, you can now enqueue some JavaScript and CSS so that they will run on the custom admin page.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To do this, let's hook into <a href=\"https:\/\/developer.wordpress.org\/reference\/hooks\/admin_enqueue_scripts\/\"><code>admin_enqueue_scripts<\/code><\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First, you must ensure the custom code is only run on the custom admin page. So, at the top of the callback function, exit early if the page doesn't match the page's identifier:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ File: init.php\n\nfunction getdave_sbe_block_editor_init( $hook ) {\n\n    \/\/ Exit if not the correct page.\n\tif ( 'toplevel_page_getdavesbe' !== $hook ) {\n\t\treturn;\n    }\n}\n\nadd_action( 'admin_enqueue_scripts', 'getdave_sbe_block_editor_init' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>With this in place, you can then safely register the main JavaScript file using the standard WordPress <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_enqueue_script\/\"><code>wp_enqueue_script()<\/code><\/a> function:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ File: init.php\n\nwp_enqueue_script( $script_handle, $script_url, $script_asset&#91;'dependencies'], $script_asset&#91;'version'] );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>To save time and space, the <code>$script_<\/code> variables assignment has been omitted. You can <a href=\"https:\/\/github.com\/getdave\/standalone-block-editor\/blob\/974a59dcbc539a0595e8fa34670e75ec541853ab\/init.php#L19\">review these here<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note the third argument for script dependencies, <code>$script_asset['dependencies']<\/code>. These dependencies are<br>dynamically generated using <a href=\"https:\/\/developer.wordpress.org\/block-editor\/packages\/packages-dependency-extraction-webpack-plugin\/\">@wordpress\/dependency-extraction-webpack-plugin<\/a> which will<br><a href=\"https:\/\/developer.wordpress.org\/block-editor\/packages\/packages-scripts\/#default-webpack-config\">ensure that<\/a> WordPress provided scripts are not included in the built<br>bundle.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You also need to register both your custom CSS styles and the WordPress default formatting library to take advantage of some nice default styling:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ File: init.php\n\n\/\/ Enqueue default editor styles.\nwp_enqueue_style( 'wp-format-library' );\n\n\/\/ Enqueue custom styles.\nwp_enqueue_style(\n    'getdave-sbe-styles',                       \/\/ Handle\n    plugins_url( 'build\/index.css', __FILE__ ), \/\/ Block editor CSS\n    array( 'wp-edit-blocks' ),                  \/\/ Dependency to include the CSS after it\n    filemtime( __DIR__ . '\/build\/index.css' )\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Inlining the editor settings<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Looking at the <code>@wordpress\/block-editor<\/code> package, you can see that it accepts a <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/4c472c3443513d070a50ba1e96f3a476861447b3\/packages\/block-editor#SETTINGS_DEFAULTS\">settings object<\/a> to configure the default settings for the editor. These are available on the server side, so you need to expose them for use within JavaScript.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To do this, let's <a href=\"https:\/\/github.com\/getdave\/standalone-block-editor\/blob\/974a59dcbc539a0595e8fa34670e75ec541853ab\/init.php#L48\">inline the settings object as JSON<\/a> assigned to the global <code>window.getdaveSbeSettings<\/code> object:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ File: init.php\n\n\/\/ Get custom editor settings.\n$settings = getdave_sbe_get_block_editor_settings();\n\n\/\/ Inline all settings.\nwp_add_inline_script( $script_handle, 'window.getdaveSbeSettings = ' . wp_json_encode( $settings ) . ';' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Registering and rendering the custom block editor<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>With the PHP above in place to create the admin page, you\u2019re now finally ready to use JavaScript to render a block editor into the page\u2019s HTML.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Begin by opening the main <code>src\/index.js<\/code> file. Then pull in the required JavaScript packages and import the CSS styles. Note that using Sass requires <a href=\"https:\/\/github.com\/getdave\/standalone-block-editor\/blob\/974a59dcbc539a0595e8fa34670e75ec541853ab\/webpack.config.js#L13\">extending<\/a> the default <code>@wordpress\/scripts<\/code> Webpack config.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ File: src\/index.js\n\n\/\/ External dependencies.\nimport { createRoot } from 'react-dom';\n\n\/\/ WordPress dependencies.\nimport domReady from '@wordpress\/dom-ready';\nimport { registerCoreBlocks } from '@wordpress\/block-library';\n\n\/\/ Internal dependencies.\nimport Editor from '.\/editor';\nimport '.\/styles.scss';\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Next, once the DOM is ready you will need to run a function which:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Grabs the editor settings from <code>window.getdaveSbeSettings<\/code> (previously inlined from PHP).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Registers all the Core WordPress blocks using <code>registerCoreBlocks<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Renders an <code>&lt;Editor><\/code> component into the waiting <code>&lt;div><\/code> on the custom admin page.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>domReady( function () {\n\tconst root = createRoot( document.getElementById( 'getdave-sbe-block-editor' ) );\n\tconst settings = window.getdaveSbeSettings || {};\n\tregisterCoreBlocks();\n\troot.render(\n\t\t<editor settings=\"{\" }=\"\">\n\t);\n} );\n<\/editor><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n\tIt is possible to render the editor from PHP without creating an unnecessary JS global. Check out the <a href=\"https:\/\/href.li\/?https:\/\/github.com\/WordPress\/gutenberg\/blob\/c6821d7e64a54eb322583a35daedc6c192ece850\/lib\/edit-site-page.php#L135\">Edit Site<\/a> package in the Gutenberg plugin for an example of this.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Reviewing the <code>&lt;Editor><\/code> component<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let's take a closer look at the <code>&lt;Editor><\/code> component that was used in the code above and lives in <code>src\/editor.js<\/code> of the <a href=\"https:\/\/github.com\/getdave\/standalone-block-editor\">companion plugin<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Despite its name, this is not the actual core of the block editor. Rather, it is a <em>wrapper<\/em> component that will contain the components that form the custom editor's main body.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Dependencies<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The first thing to do inside <code>&lt;Editor><\/code> is to pull in some dependencies.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ File: src\/editor.js\n\nimport Notices from 'components\/notices';\nimport Header from 'components\/header';\nimport Sidebar from 'components\/sidebar';\nimport BlockEditor from 'components\/block-editor';\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The most important of these are the internal components <code>BlockEditor<\/code> and <code>Sidebar<\/code>, which will be covered shortly.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The remaining components consist mostly of static elements that form the editor's layout and surrounding user interface (UI). These elements include the header and notice areas, among others.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Editor render<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>With these components available, you can define the <code>&lt;Editor><\/code> component.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ File: src\/editor.js\n\nfunction Editor( { settings } ) {\n\treturn (\n\t\t<dropzoneprovider>\n\t\t\t<div classname=\"getdavesbe-block-editor-layout\">\n\t\t\t\t<notices>\n\t\t\t\t<header>\n\t\t\t\t<sidebar>\n\t\t\t\t<blockeditor settings=\"{\" }=\"\">\n\t\t\t<\/blockeditor><\/sidebar><\/header><\/notices><\/div>\n\t\t<\/dropzoneprovider>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In this process, the core of the editor's layout is being scaffolded, along with a few specialized <a href=\"https:\/\/reactjs.org\/docs\/context.html#contextprovider\">context providers<\/a> that make specific functionality available throughout the component hierarchy.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let's examine these in more detail:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>&lt;DropZoneProvider><\/code> \u2013 Enables the use of <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/e38dbe958c04d8089695eb686d4f5caff2707505\/packages\/components\/src\/drop-zone\">dropzones for drag and drop functionality<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;Notices><\/code> \u2013 Provides a \"snack bar\" Notice that will be rendered if any messages are dispatched to the <code>core\/notices<\/code> store<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;Header><\/code> \u2013 Renders the static title \"Standalone Block Editor\" at the top of the editor UI<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;BlockEditor><\/code> \u2013 The custom block editor component<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Keyboard navigation<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>With this basic component structure in place, the only remaining thing left to do<br>is wrap everything in the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/e38dbe958c04d8089695eb686d4f5caff2707505\/packages\/components\/src\/higher-order\/navigate-regions\"><code>navigateRegions<\/code> HOC<\/a> to provide keyboard navigation between the different \"regions\" in the layout.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ File: src\/editor.js\n\nexport default navigateRegions( Editor );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The custom <code>&lt;BlockEditor><\/code><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now the core layouts and components are in place. It's time to explore the custom implementation of the block editor itself.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The component for this is called <code>&lt;BlockEditor><\/code>, and this is where the magic happens.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Opening <code>src\/components\/block-editor\/index.js<\/code> reveals that it's the most complex component encountered thus far. A lot going on, so start by focusing on what is being rendered by the <code>&lt;BlockEditor><\/code> component:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ File: src\/components\/block-editor\/index.js\n\nreturn (\n\t<div classname=\"getdavesbe-block-editor\">\n\t\t<blockeditorprovider<br>\t\t\tvalue={ blocks }\n\t\t\tonInput={ updateBlocks }\n\t\t\tonChange={ persistBlocks }\n\t\t\tsettings={ settings }\n\t\t>\n\t\t\t<sidebar.inspectorfill>\n\t\t\t\t<blockinspector>\n\t\t\t<\/blockinspector><\/sidebar.inspectorfill>\n\t\t\t<blockcanvas height=\"400px\">\n\t\t\n\t<\/blockcanvas><\/blockeditorprovider<br><\/div>\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The key components are <code>&lt;BlockEditorProvider><\/code> and <code>&lt;BlockList><\/code>. Let's examine these.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Understanding the <code>&lt;BlockEditorProvider><\/code> component<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/e38dbe958c04d8089695eb686d4f5caff2707505\/packages\/block-editor\/src\/components\/provider\"><code>&lt;BlockEditorProvider><\/code><\/a> is one of the most important components in the hierarchy. It establishes a new block editing context for a new block editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As a result, it is <em>fundamental<\/em> to the entire goal of this project.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The children of <code>&lt;BlockEditorProvider><\/code> comprise the UI for the block editor. These components then have access to data (via <code>Context<\/code>), enabling them to <em>render<\/em> and <em>manage<\/em> the blocks and their behaviors within the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ File: src\/components\/block-editor\/index.js\n\n<blockeditorprovider<br>\tvalue={ blocks }           \/\/ Array of block objects\n\tonInput={ updateBlocks }   \/\/ Handler to manage Block updates\n\tonChange={ persistBlocks } \/\/ Handler to manage Block updates\/persistence\n\tsettings={ settings }      \/\/ Editor \"settings\" object\n\/>\n<\/blockeditorprovider<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\"><code>BlockEditor<\/code> props<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You can see that <code>&lt;BlockEditorProvider><\/code> accepts an array of (parsed) block objects as its <code>value<\/code> prop and, when there's a change detected within the editor, calls the <code>onChange<\/code> and\/or <code>onInput<\/code> handler prop (passing the new Blocks as an argument).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Internally it does this by subscribing to the provided <code>registry<\/code> (via the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/e38dbe958c04d8089695eb686d4f5caff2707505\/packages\/block-editor\/src\/components\/provider\/index.js#L158\"><code>withRegistryProvider<\/code> HOC<\/a>), listening to block change events, determining whether the block changing was persistent, and then calling the appropriate <code>onChange|Input<\/code> handler accordingly.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For the purposes of this simple project, these features allow you to:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Store the array of current blocks in state as <code>blocks<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Update the <code>blocks<\/code> state in memory on <code>onInput<\/code> by calling the hook setter<br><code>updateBlocks(blocks)<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Handle basic persistence of blocks into <code>localStorage<\/code> using <code>onChange<\/code>. This is <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/block-editor\/src\/components\/provider#onchange\">fired when block updates are considered \"committed\"<\/a>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>It's also worth recalling that the component accepts a <code>settings<\/code> property. This is where you will add the editor settings inlined earlier as JSON within <code>init.php<\/code>. You can use these settings to configure features such as custom colors, available image sizes, and <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/4c472c3443513d070a50ba1e96f3a476861447b3\/packages\/block-editor#SETTINGS_DEFAULTS\">much more<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Understanding the <code>&lt;BlockList><\/code> component<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Alongside <code>&lt;BlockEditorProvider><\/code> the next most interesting component is <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/e38dbe958c04d8089695eb686d4f5caff2707505\/packages\/block-editor\/src\/components\/block-list\/index.js\"><code>&lt;BlockList><\/code><\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is one of the most important components as it's role is to <strong>render a list of blocks into the editor<\/strong>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It does this in part thanks to being placed as a child of <code>&lt;BlockEditorProvider><\/code>, which affords it full access to all information about the state of the current blocks in the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">How does <code>BlockList<\/code> work?<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Under the hood, <code>&lt;BlockList><\/code> relies on several other lower-level components in order to render the list of blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The hierarchy of these components can be <em>approximated<\/em> as follows:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Pseudo code for example purposes only.\n\n<blocklist>\n\t\/* renders a list of blocks from the rootClientId. *\/\n\t<blocklistblock>\n\t\t\/* renders a single block from the BlockList. *\/\n\t\t<blockedit>\n\t\t\t\/* renders the standard editable area of a block. *\/\n\t\t\t<component> \/* renders the block UI as defined by its `edit()` implementation.\n\t\t\t*\/\n\t\t<\/component><\/blockedit>\n\t<\/blocklistblock>\n<\/blocklist>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Here is roughly how this works together to render the list of blocks:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>&lt;BlockList><\/code> loops over all the block <code>clientIds<\/code> and<br>renders each via <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/e38dbe958c04d8089695eb686d4f5caff2707505\/packages\/block-editor\/src\/components\/block-list\/block.js\"><code>&lt;BlockListBlock \/><\/code><\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;BlockListBlock \/><\/code>, in turn, renders the individual block<br>using its own subcomponent <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/def076809d25e2ad680beda8b9205ab9dea45a0f\/packages\/block-editor\/src\/components\/block-edit\/index.js\"><code>&lt;BlockEdit><\/code><\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Finally, the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/def076809d25e2ad680beda8b9205ab9dea45a0f\/packages\/block-editor\/src\/components\/block-edit\/edit.js\">block itself<\/a> is rendered using the <code>Component<\/code> placeholder component.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The <code>@wordpress\/block-editor<\/code> package components are among the most complex and involved. Understanding them is crucial if you want to grasp how the editor functions at a fundamental level. Studying these components is strongly advised.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Reviewing the sidebar<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Also within the render of the <code>&lt;BlockEditor><\/code>, is the <code>&lt;Sidebar><\/code> component.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ File: src\/components\/block-editor\/index.js\n\nreturn (\n    <div classname=\"getdavesbe-block-editor\">\n        <blockeditorprovider>\n            <sidebar.inspectorfill> \/* &lt;-- SIDEBAR *\/\n                <blockinspector>\n            <\/blockinspector><\/sidebar.inspectorfill>\n            <blockcanvas height=\"400px\">\n        <\/blockcanvas><\/blockeditorprovider>\n    <\/div>\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This is used, in part, to display advanced block settings via the <code>&lt;BlockInspector><\/code> component.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><sidebar.inspectorfill>\n\t<blockinspector>\n<\/blockinspector><\/sidebar.inspectorfill>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>However, the keen-eyed readers amongst you will have already noted the presence of a <code>&lt;Sidebar><\/code> component within the <code>&lt;Editor><\/code> (<code>src\/editor.js<\/code>) component's<br>layout:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ File: src\/editor.js\n<notices>\n<header>\n<sidebar> \/\/ &lt;-- What's this?\n<blockeditor settings=\"{\" }=\"\">\n\n<\/blockeditor><\/sidebar><\/header><\/notices><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Opening the <code>src\/components\/sidebar\/index.js<\/code> file, you can see that this is, in fact, the component rendered within <code>&lt;Editor><\/code> above. However, the implementation utilises<br>Slot\/Fill to expose a <code>Fill<\/code> (<code>&lt;Sidebar.InspectorFill><\/code>), which is subsequently imported and rendered inside of the <code>&lt;BlockEditor><\/code> component (see above).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With this in place, you then can render <code>&lt;BlockInspector \/><\/code> as a child of the <code>Sidebar.InspectorFill<\/code>. This has the result of allowing you to keep <code>&lt;BlockInspector><\/code> within the React context of <code>&lt;BlockEditorProvider><\/code> whilst allowing it to be rendered into the DOM in a separate location (i.e. in the <code>&lt;Sidebar><\/code>).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This might seem overly complex, but it is required in order for <code>&lt;BlockInspector><\/code> to have access to information about the current block. Without Slot\/Fill, this setup would be extremely difficult to achieve.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And with that you have covered the render of you custom <code>&lt;BlockEditor><\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"callout callout-tip\">\n<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/def076809d25e2ad680beda8b9205ab9dea45a0f\/packages\/block-editor\/src\/components\/block-inspector\/index.js\"><code>&lt;BlockInspector&gt;<\/code><\/a>\nitself actually renders a <code>Slot<\/code> for <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/block-editor\/src\/components\/inspector-controls\"><code>&lt;InspectorControls&gt;<\/code><\/a>. This is what allows you <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/def076809d25e2ad680beda8b9205ab9dea45a0f\/packages\/block-library\/src\/paragraph\/edit.js#L127\">render<\/a> a <code>&lt;InspectorControls>&gt;<\/code> component inside\nthe <code>edit()<\/code> definition for your block and have\nit display within the editor's sidebar. Exploring this component in more detail is recommended.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block Persistence<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You have come a long way on your journey to create a custom block editor. But there is one major area left to touch upon - block persistence. In other words, having your<br>blocks saved and available <em>between<\/em> page refreshes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2023\/07\/custom-block-editor-persistance.gif\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Screencapture showing blocks being restored between page refreshes.<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>As this is only an <em>experiment<\/em>, this guide has opted to utilize the browser's <code>localStorage<\/code> API to handle saving block data. In a real-world scenario, you would likely choose a more reliable and robust system (e.g. a database).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That said, let's take a closer look at how to handle save blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Storing blocks in state<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Looking at the <code>src\/components\/block-editor\/index.js<\/code> file, you will notice that some state has been created to store the blocks as an array:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ File: src\/components\/block-editor\/index.js\n\nconst &#91; blocks, updateBlocks ] = useState( &#91;] );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>As mentioned earlier, <code>blocks<\/code> is passed to the \"controlled\" component <code>&lt;BlockEditorProvider><\/code> as its <code>value<\/code> prop. This \"hydrates\" it with an initial set of blocks. Similarly, the <code>updateBlocks<\/code> setter is hooked up to the <code>onInput<\/code> callback on <code>&lt;BlockEditorProvider><\/code>, which ensures that the block state is kept in sync with changes made to blocks within the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Saving block data<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you now turn your attention to the <code>onChange<\/code> handler, you will notice it is hooked up to a function <code>persistBlocks()<\/code> which is defined as follows:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ File: src\/components\/block-editor\/index.js\n\nfunction persistBlocks( newBlocks ) {\n\tupdateBlocks( newBlocks );\n\twindow.localStorage.setItem( 'getdavesbeBlocks', serialize( newBlocks ) );\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This function accepts an array of \"committed\" block changes and calls the state setter <code>updateBlocks<\/code>. It also stores the blocks within LocalStorage under the key <code>getdavesbeBlocks<\/code>. In order to achieve this, the block data is serialized into <a href=\"https:\/\/developer.wordpress.org\/block-editor\/principles\/key-concepts\/#blocks\">Gutenberg \"Block Grammar\"<\/a> format, meaning it can be safely stored as a string.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you open DeveloperTools and inspect the LocalStorage you will see serialized block data stored and updated as changes occur within the editor. Below is an example of the format:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n<h2>An experiment with a standalone Block Editor in the WordPress admin<\/h2>\n\n\n\n<p>This is an experiment to discover how easy (or otherwise) it is to create a standalone instance of the Block Editor in the WordPress admin.<\/p>\n\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Retrieving previous block data<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Having persistence in place is all well and good, but it's only useful if that data is retrieved and <em>restored<\/em> within the editor upon each full page reload.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Accessing data is a side effect, so you must use the <code>useEffect<\/code> hook to handle this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ File: src\/components\/block-editor\/index.js\n\nuseEffect( () => {\n\tconst storedBlocks = window.localStorage.getItem( 'getdavesbeBlocks' );\n\n\tif ( storedBlocks &amp;&amp; storedBlocks.length ) {\n\t\tupdateBlocks( () => parse( storedBlocks ) );\n\t\tcreateInfoNotice( 'Blocks loaded', {\n\t\t\ttype: 'snackbar',\n\t\t\tisDismissible: true,\n\t\t} );\n\t}\n}, &#91;] );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This handler:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Grabs the serialized block data from local storage.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Converts the serialized blocks back to JavaScript objects using the <code>parse()<\/code> utility.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Calls the state setter <code>updateBlocks<\/code> causing the <code>blocks<\/code> value to be updated in state to reflect the blocks retrieved from LocalStorage.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>As a result of these operations, the controlled <code>&lt;BlockEditorProvider><\/code> component is updated with the blocks restored from LocalStorage, causing the editor to show these blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally, you will want to generate a notice - which will display in the <code>&lt;Notice><\/code> component as a \"snackbar\" notice - to indicate that the blocks have been restored.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Wrapping up<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Congratulations for completing this guide. You should now have a better understanding of how the block editor works under the hood.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The full code for the custom block editor you have just built is <a href=\"https:\/\/github.com\/getdave\/standalone-block-editor\">available on GitHub<\/a>. Download and try it out for yourself. Experiment, then and take things even further.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Building a custom block editor\n\nThe WordPress block editor is a powerful tool that allows you to create and format content in various ways. It is powered, in part, by the [`@wordpress\/block-editor`](\/packages\/block-editor\/README.md) package, which is a JavaScript library that provides the core functionality of the editor.\n\nThis package can also be used to create custom block editors for virtually any other web application. This means that you can use the same blocks and block editing experience outside of WordPress.\n\n![alt text](https:\/\/developer.wordpress.org\/files\/2023\/07\/custom-block-editor.png 'The Standalone Editor instance populated with example Blocks within a custom WordPress admin page.')\n\nThis flexibility and interoperability makes blocks a powerful tool for building and managing content across multiple applications. It also makes it simpler for developers to create content editors that work best for their users.\n\nThis guide covers the basics of creating your first custom block editor.\n\n## Introduction\n\nWith its many packages and components, the Gutenberg codebase can be daunting at first. But at its core, it's all about managing and editing blocks. So if you want to work on the editor, it's essential to understand how block editing works at a fundamental level.\n\nThis guide will walk you through building a fully functioning, custom block editor \"instance\" within WordPress. Along the way, we'll introduce you to the key packages and components, so you can see how the block editor works under the hood.\n\nBy the end of this article, you will have a solid understanding of the block editor's inner workings and be well on your way to creating your own block editor instances.\n\n<div class=\"callout callout-tip\">\n\tThe code used throughout this guide is available for download in the <a href=\"https:\/\/github.com\/getdave\/standalone-block-editor\">accompanying WordPress plugin<\/a>. The demo code in this plugin as an essential resource.\n<\/div>\n\n## Code syntax\n\nThe code snippets in this guide use JSX syntax. However, you could use plain JavaScript if you prefer. However, once familiar with JSX, many developers find it easier to read and write, so most code examples in the Block Editor Handbook use this syntax.\n\n## What you're going to be building\n\nThroughout this guide, you will create an (almost) fully functioning block editor instance. The result will look something like this:\n\n![The Standalone Editor instance populated with example Blocks within a custom WordPress admin page](https:\/\/developer.wordpress.org\/files\/2023\/07\/custom-block-editor.png)\n\nWhile it looks similar, this editor will not be the same _Block Editor_ you are familiar with when creating posts and pages in WordPress. Instead, it will be an entirely custom instance that will live within a custom WordPress admin page called \"Block Editor.\"\n\nThe editor will have the following features:\n\n-   Ability to add and edit all Core blocks.\n-   Familiar visual styles and main\/sidebar layout.\n-   _Basic_ block persistence between page reloads.\n\n## Plugin setup and organization\n\nThe custom editor is going to be built as a WordPress plugin. To keep things simple, the plugin will be named `Standalone Block Editor Demo` because that is what it does.\n\nThe plugin file structure will look like this:\n\n![alt text](https:\/\/wordpress.org\/gutenberg\/files\/2020\/03\/repo-files.png 'Screenshot showing file structure of the Plugin at https:\/\/github.com\/getdave\/standalone-block-editor.')\n\nHere is a brief summary of what's going on:\n\n-   `plugin.php` \u2013 Standard plugin \"entry\" file with comment meta data, which requires `init.php`.\n-   `init.php` - Handles the initialization of the main plugin logic.\n-   `src\/` (directory) - This is where the JavaScript and CSS source files will live. These files are _not_ directly enqueued by the plugin.\n-   `webpack.config.js` - A custom Webpack config extending the defaults provided by the [`@wordpress\/scripts`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-scripts\/) npm package to allow for custom CSS styles (via Sass).\n\nThe only item not shown above is the `build\/` directory, which is where the _compiled_ JS and CSS files are outputted by `@wordpress\/scripts`. These files are enqueued by the plugin separately.\n\n<div class=\"callout callout-info\">\n\tThroughout this guide, filename references will be placed in a comment at the top of each code snippet so you can follow along.\n<\/div>\n\nWith the basic file structure in place, let's look at what packages will be needed.\n\n## The \"Core\" of the editor\n\nWhile the WordPress Editor is comprised of many moving parts, at its core is the [`@wordpress\/block-editor`](\/packages\/block-editor\/README.md) package, which is best summarized by its own `README` file:\n\n> This module allows you to create and use standalone block editors.\n\nPerfect, this is the main package you will use to create the custom block editor instance. But first, you need to create a home for the editor.\n\n## Creating the custom \"Block Editor\" page\n\nLet's begin by creating a custom page within WordPress admin that will house the custom block editor instance.\n\n<div class=\"callout callout-info\">\n\tIf you're already comfortable with the process of creating custom admin pages in WordPress, you might want to <a href=\"#registering-and-rendering-our-custom-block-editor\">skip ahead<\/a>.\n<\/div>\n\n### Registering the page\n\nTo do this, you need to [register a custom admin page](https:\/\/developer.wordpress.org\/reference\/functions\/add_menu_page\/) using the standard WordPress [`add_menu_page()`](https:\/\/developer.wordpress.org\/reference\/functions\/add_menu_page\/) helper:\n\n```php\n\/\/ File: init.php\n\nadd_menu_page(\n    'Standalone Block Editor',         \/\/ Visible page name\n    'Block Editor',                    \/\/ Menu label\n    'edit_posts',                      \/\/ Required capability\n    'getdavesbe',                      \/\/ Hook\/slug of page\n    'getdave_sbe_render_block_editor', \/\/ Function to render the page\n    'dashicons-welcome-widgets-menus'  \/\/ Custom icon\n);\n```\n\nThe `getdave_sbe_render_block_editor` function will be used to render the contents of the admin page. As a reminder, the source code for each step is available in the [accompanying plugin](https:\/\/github.com\/getdave\/standalone-block-editor).\n\n### Adding the target HTML\n\nSince the block editor is a React-powered application, you need to output some HTML into the custom page where JavaScript can render the block editor.\n\nLet's use the `getdave_sbe_render_block_editor` function referenced in the step above.\n\n```php\n\/\/ File: init.php\n\nfunction getdave_sbe_render_block_editor() {\n\t?>\n\t<div\n\t\tid=\"getdave-sbe-block-editor\"\n\t\tclass=\"getdave-sbe-block-editor\"\n\t>\n\t\tLoading Editor...\n\t<\/div>\n\t<?php\n}\n```\n\nThe function outputs some basic placeholder HTML. Note the `id` attribute `getdave-sbe-block-editor`, which will be used shortly.\n\n### Enqueuing JavaScript and CSS\n\nWith the target HTML in place, you can now enqueue some JavaScript and CSS so that they will run on the custom admin page.\n\nTo do this, let's hook into [`admin_enqueue_scripts`](https:\/\/developer.wordpress.org\/reference\/hooks\/admin_enqueue_scripts\/).\n\nFirst, you must ensure the custom code is only run on the custom admin page. So, at the top of the callback function, exit early if the page doesn't match the page's identifier:\n\n```php\n\/\/ File: init.php\n\nfunction getdave_sbe_block_editor_init( $hook ) {\n\n    \/\/ Exit if not the correct page.\n\tif ( 'toplevel_page_getdavesbe' !== $hook ) {\n\t\treturn;\n    }\n}\n\nadd_action( 'admin_enqueue_scripts', 'getdave_sbe_block_editor_init' );\n```\n\nWith this in place, you can then safely register the main JavaScript file using the standard WordPress [`wp_enqueue_script()`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_enqueue_script\/) function:\n\n```php\n\/\/ File: init.php\n\nwp_enqueue_script( $script_handle, $script_url, $script_asset['dependencies'], $script_asset['version'] );\n```\n\nTo save time and space, the `$script_` variables assignment has been omitted. You can [review these here](https:\/\/github.com\/getdave\/standalone-block-editor\/blob\/974a59dcbc539a0595e8fa34670e75ec541853ab\/init.php#L19).\n\nNote the third argument for script dependencies, `$script_asset['dependencies']`. These dependencies are\ndynamically generated using [@wordpress\/dependency-extraction-webpack-plugin](https:\/\/developer.wordpress.org\/block-editor\/packages\/packages-dependency-extraction-webpack-plugin\/) which will\n[ensure that](https:\/\/developer.wordpress.org\/block-editor\/packages\/packages-scripts\/#default-webpack-config) WordPress provided scripts are not included in the built\nbundle.\n\nYou also need to register both your custom CSS styles and the WordPress default formatting library to take advantage of some nice default styling:\n\n```php\n\/\/ File: init.php\n\n\/\/ Enqueue default editor styles.\nwp_enqueue_style( 'wp-format-library' );\n\n\/\/ Enqueue custom styles.\nwp_enqueue_style(\n    'getdave-sbe-styles',                       \/\/ Handle\n    plugins_url( 'build\/index.css', __FILE__ ), \/\/ Block editor CSS\n    array( 'wp-edit-blocks' ),                  \/\/ Dependency to include the CSS after it\n    filemtime( __DIR__ . '\/build\/index.css' )\n);\n```\n\n### Inlining the editor settings\n\nLooking at the `@wordpress\/block-editor` package, you can see that it accepts a [settings object](https:\/\/github.com\/WordPress\/gutenberg\/tree\/4c472c3443513d070a50ba1e96f3a476861447b3\/packages\/block-editor#SETTINGS_DEFAULTS) to configure the default settings for the editor. These are available on the server side, so you need to expose them for use within JavaScript.\n\nTo do this, let's [inline the settings object as JSON](https:\/\/github.com\/getdave\/standalone-block-editor\/blob\/974a59dcbc539a0595e8fa34670e75ec541853ab\/init.php#L48) assigned to the global `window.getdaveSbeSettings` object:\n\n```php\n\/\/ File: init.php\n\n\/\/ Get custom editor settings.\n$settings = getdave_sbe_get_block_editor_settings();\n\n\/\/ Inline all settings.\nwp_add_inline_script( $script_handle, 'window.getdaveSbeSettings = ' . wp_json_encode( $settings ) . ';' );\n```\n\n## Registering and rendering the custom block editor\n\nWith the PHP above in place to create the admin page, you\u2019re now finally ready to use JavaScript to render a block editor into the page\u2019s HTML.\n\nBegin by opening the main `src\/index.js` file. Then pull in the required JavaScript packages and import the CSS styles. Note that using Sass requires [extending](https:\/\/github.com\/getdave\/standalone-block-editor\/blob\/974a59dcbc539a0595e8fa34670e75ec541853ab\/webpack.config.js#L13) the default `@wordpress\/scripts` Webpack config.\n\n```js\n\/\/ File: src\/index.js\n\n\/\/ External dependencies.\nimport { createRoot } from 'react-dom';\n\n\/\/ WordPress dependencies.\nimport domReady from '@wordpress\/dom-ready';\nimport { registerCoreBlocks } from '@wordpress\/block-library';\n\n\/\/ Internal dependencies.\nimport Editor from '.\/editor';\nimport '.\/styles.scss';\n```\n\nNext, once the DOM is ready you will need to run a function which:\n\n- Grabs the editor settings from `window.getdaveSbeSettings` (previously inlined from PHP).\n- Registers all the Core WordPress blocks using `registerCoreBlocks`.\n- Renders an `<Editor>` component into the waiting `<div>` on the custom admin page.\n\n```jsx\ndomReady( function () {\n\tconst root = createRoot( document.getElementById( 'getdave-sbe-block-editor' ) );\n\tconst settings = window.getdaveSbeSettings || {};\n\tregisterCoreBlocks();\n\troot.render(\n\t\t<Editor settings={ settings } \/>\n\t);\n} );\n```\n\n<div class=\"callout callout-info\">\n\tIt is possible to render the editor from PHP without creating an unnecessary JS global. Check out the <a href=\"https:\/\/href.li\/?https:\/\/github.com\/WordPress\/gutenberg\/blob\/c6821d7e64a54eb322583a35daedc6c192ece850\/lib\/edit-site-page.php#L135\">Edit Site<\/a> package in the Gutenberg plugin for an example of this.\n<\/div>\n\n## Reviewing the `<Editor>` component\n\nLet's take a closer look at the `<Editor>` component that was used in the code above and lives in `src\/editor.js` of the [companion plugin](https:\/\/github.com\/getdave\/standalone-block-editor).\n\nDespite its name, this is not the actual core of the block editor. Rather, it is a _wrapper_ component that will contain the components that form the custom editor's main body.\n\n### Dependencies\n\nThe first thing to do inside `<Editor>` is to pull in some dependencies.\n\n```jsx\n\/\/ File: src\/editor.js\n\nimport Notices from 'components\/notices';\nimport Header from 'components\/header';\nimport Sidebar from 'components\/sidebar';\nimport BlockEditor from 'components\/block-editor';\n```\n\nThe most important of these are the internal components `BlockEditor` and `Sidebar`, which will be covered shortly.\n\nThe remaining components consist mostly of static elements that form the editor's layout and surrounding user interface (UI). These elements include the header and notice areas, among others.\n\n### Editor render\n\nWith these components available, you can define the `<Editor>` component.\n\n```jsx\n\/\/ File: src\/editor.js\n\nfunction Editor( { settings } ) {\n\treturn (\n\t\t<DropZoneProvider>\n\t\t\t<div className=\"getdavesbe-block-editor-layout\">\n\t\t\t\t<Notices \/>\n\t\t\t\t<Header \/>\n\t\t\t\t<Sidebar \/>\n\t\t\t\t<BlockEditor settings={ settings } \/>\n\t\t\t<\/div>\n\t\t<\/DropZoneProvider>\n\t);\n}\n```\n\nIn this process, the core of the editor's layout is being scaffolded, along with a few specialized [context providers](https:\/\/reactjs.org\/docs\/context.html#contextprovider) that make specific functionality available throughout the component hierarchy.\n\nLet's examine these in more detail:\n\n-   `<DropZoneProvider>` \u2013 Enables the use of [dropzones for drag and drop functionality](https:\/\/github.com\/WordPress\/gutenberg\/tree\/e38dbe958c04d8089695eb686d4f5caff2707505\/packages\/components\/src\/drop-zone)\n-   `<Notices>` \u2013 Provides a \"snack bar\" Notice that will be rendered if any messages are dispatched to the `core\/notices` store\n-   `<Header>` \u2013 Renders the static title \"Standalone Block Editor\" at the top of the editor UI\n-   `<BlockEditor>` \u2013 The custom block editor component\n\n### Keyboard navigation\n\nWith this basic component structure in place, the only remaining thing left to do\nis wrap everything in the [`navigateRegions` HOC](https:\/\/github.com\/WordPress\/gutenberg\/tree\/e38dbe958c04d8089695eb686d4f5caff2707505\/packages\/components\/src\/higher-order\/navigate-regions) to provide keyboard navigation between the different \"regions\" in the layout.\n\n```jsx\n\/\/ File: src\/editor.js\n\nexport default navigateRegions( Editor );\n```\n\n## The custom `<BlockEditor>`\n\nNow the core layouts and components are in place. It's time to explore the custom implementation of the block editor itself.\n\nThe component for this is called `<BlockEditor>`, and this is where the magic happens.\n\nOpening `src\/components\/block-editor\/index.js` reveals that it's the most complex component encountered thus far. A lot going on, so start by focusing on what is being rendered by the `<BlockEditor>` component:\n\n```js\n\/\/ File: src\/components\/block-editor\/index.js\n\nreturn (\n\t<div className=\"getdavesbe-block-editor\">\n\t\t<BlockEditorProvider\n\t\t\tvalue={ blocks }\n\t\t\tonInput={ updateBlocks }\n\t\t\tonChange={ persistBlocks }\n\t\t\tsettings={ settings }\n\t\t>\n\t\t\t<Sidebar.InspectorFill>\n\t\t\t\t<BlockInspector \/>\n\t\t\t<\/Sidebar.InspectorFill>\n\t\t\t<BlockCanvas height=\"400px\" \/>\n\t\t<\/BlockEditorProvider>\n\t<\/div>\n);\n```\n\nThe key components are `<BlockEditorProvider>` and `<BlockList>`. Let's examine these.\n\n### Understanding the `<BlockEditorProvider>` component\n\n[`<BlockEditorProvider>`](https:\/\/github.com\/WordPress\/gutenberg\/tree\/e38dbe958c04d8089695eb686d4f5caff2707505\/packages\/block-editor\/src\/components\/provider) is one of the most important components in the hierarchy. It establishes a new block editing context for a new block editor.\n\nAs a result, it is _fundamental_ to the entire goal of this project.\n\nThe children of `<BlockEditorProvider>` comprise the UI for the block editor. These components then have access to data (via `Context`), enabling them to _render_ and _manage_ the blocks and their behaviors within the editor.\n\n```jsx\n\/\/ File: src\/components\/block-editor\/index.js\n\n<BlockEditorProvider\n\tvalue={ blocks }           \/\/ Array of block objects\n\tonInput={ updateBlocks }   \/\/ Handler to manage Block updates\n\tonChange={ persistBlocks } \/\/ Handler to manage Block updates\/persistence\n\tsettings={ settings }      \/\/ Editor \"settings\" object\n\/>\n```\n\n#### `BlockEditor` props\n\nYou can see that `<BlockEditorProvider>` accepts an array of (parsed) block objects as its `value` prop and, when there's a change detected within the editor, calls the `onChange` and\/or `onInput` handler prop (passing the new Blocks as an argument).\n\nInternally it does this by subscribing to the provided `registry` (via the [`withRegistryProvider` HOC](https:\/\/github.com\/WordPress\/gutenberg\/blob\/e38dbe958c04d8089695eb686d4f5caff2707505\/packages\/block-editor\/src\/components\/provider\/index.js#L158)), listening to block change events, determining whether the block changing was persistent, and then calling the appropriate `onChange|Input` handler accordingly.\n\nFor the purposes of this simple project, these features allow you to:\n\n-   Store the array of current blocks in state as `blocks`.\n-   Update the `blocks` state in memory on `onInput` by calling the hook setter\n    `updateBlocks(blocks)`.\n-   Handle basic persistence of blocks into `localStorage` using `onChange`. This is [fired when block updates are considered \"committed\"](https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/block-editor\/src\/components\/provider#onchange).\n\nIt's also worth recalling that the component accepts a `settings` property. This is where you will add the editor settings inlined earlier as JSON within `init.php`. You can use these settings to configure features such as custom colors, available image sizes, and [much more](https:\/\/github.com\/WordPress\/gutenberg\/tree\/4c472c3443513d070a50ba1e96f3a476861447b3\/packages\/block-editor#SETTINGS_DEFAULTS).\n\n### Understanding the `<BlockList>` component\n\nAlongside `<BlockEditorProvider>` the next most interesting component is [`<BlockList>`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/e38dbe958c04d8089695eb686d4f5caff2707505\/packages\/block-editor\/src\/components\/block-list\/index.js).\n\nThis is one of the most important components as it's role is to **render a list of blocks into the editor**.\n\nIt does this in part thanks to being placed as a child of `<BlockEditorProvider>`, which affords it full access to all information about the state of the current blocks in the editor.\n\n#### How does `BlockList` work?\n\nUnder the hood, `<BlockList>` relies on several other lower-level components in order to render the list of blocks.\n\nThe hierarchy of these components can be _approximated_ as follows:\n\n```jsx\n\/\/ Pseudo code for example purposes only.\n\n<BlockList>\n\t\/* renders a list of blocks from the rootClientId. *\/\n\t<BlockListBlock>\n\t\t\/* renders a single block from the BlockList. *\/\n\t\t<BlockEdit>\n\t\t\t\/* renders the standard editable area of a block. *\/\n\t\t\t<Component \/> \/* renders the block UI as defined by its `edit()` implementation.\n\t\t\t*\/\n\t\t<\/BlockEdit>\n\t<\/BlockListBlock>\n<\/BlockList>\n```\n\nHere is roughly how this works together to render the list of blocks:\n\n-   `<BlockList>` loops over all the block `clientIds` and\n    renders each via [`<BlockListBlock \/>`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/e38dbe958c04d8089695eb686d4f5caff2707505\/packages\/block-editor\/src\/components\/block-list\/block.js).\n-   `<BlockListBlock \/>`, in turn, renders the individual block\n    using its own subcomponent [`<BlockEdit>`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/def076809d25e2ad680beda8b9205ab9dea45a0f\/packages\/block-editor\/src\/components\/block-edit\/index.js).\n-   Finally, the [block itself](https:\/\/github.com\/WordPress\/gutenberg\/blob\/def076809d25e2ad680beda8b9205ab9dea45a0f\/packages\/block-editor\/src\/components\/block-edit\/edit.js) is rendered using the `Component` placeholder component.\n\nThe `@wordpress\/block-editor` package components are among the most complex and involved. Understanding them is crucial if you want to grasp how the editor functions at a fundamental level. Studying these components is strongly advised.\n\n## Reviewing the sidebar\n\nAlso within the render of the `<BlockEditor>`, is the `<Sidebar>` component.\n\n```jsx\n\/\/ File: src\/components\/block-editor\/index.js\n\nreturn (\n    <div className=\"getdavesbe-block-editor\">\n        <BlockEditorProvider>\n            <Sidebar.InspectorFill> \/* <-- SIDEBAR *\/\n                <BlockInspector \/>\n            <\/Sidebar.InspectorFill>\n            <BlockCanvas height=\"400px\" \/>\n        <\/BlockEditorProvider>\n    <\/div>\n);\n```\n\nThis is used, in part, to display advanced block settings via the `<BlockInspector>` component.\n\n```jsx\n<Sidebar.InspectorFill>\n\t<BlockInspector \/>\n<\/Sidebar.InspectorFill>\n```\n\nHowever, the keen-eyed readers amongst you will have already noted the presence of a `<Sidebar>` component within the `<Editor>` (`src\/editor.js`) component's\nlayout:\n\n```jsx\n\/\/ File: src\/editor.js\n<Notices \/>\n<Header \/>\n<Sidebar \/> \/\/ <-- What's this?\n<BlockEditor settings={ settings } \/>\n\n```\n\nOpening the `src\/components\/sidebar\/index.js` file, you can see that this is, in fact, the component rendered within `<Editor>` above. However, the implementation utilises\nSlot\/Fill to expose a `Fill` (`<Sidebar.InspectorFill>`), which is subsequently imported and rendered inside of the `<BlockEditor>` component (see above).\n\nWith this in place, you then can render `<BlockInspector \/>` as a child of the `Sidebar.InspectorFill`. This has the result of allowing you to keep `<BlockInspector>` within the React context of `<BlockEditorProvider>` whilst allowing it to be rendered into the DOM in a separate location (i.e. in the `<Sidebar>`).\n\nThis might seem overly complex, but it is required in order for `<BlockInspector>` to have access to information about the current block. Without Slot\/Fill, this setup would be extremely difficult to achieve.\n\nAnd with that you have covered the render of you custom `<BlockEditor>`.\n\n<div class=\"callout callout-tip\">\n<a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/def076809d25e2ad680beda8b9205ab9dea45a0f\/packages\/block-editor\/src\/components\/block-inspector\/index.js\"><code>&lt;BlockInspector&gt;<\/code><\/a>\nitself actually renders a <code>Slot<\/code> for <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/block-editor\/src\/components\/inspector-controls\"><code>&lt;InspectorControls&gt;<\/code><\/a>. This is what allows you <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/def076809d25e2ad680beda8b9205ab9dea45a0f\/packages\/block-library\/src\/paragraph\/edit.js#L127\">render<\/a> a <code>&lt;InspectorControls>&gt;<\/code> component inside\nthe <code>edit()<\/code> definition for your block and have\nit display within the editor's sidebar. Exploring this component in more detail is recommended.\n<\/div>\n\n## Block Persistence\n\nYou have come a long way on your journey to create a custom block editor. But there is one major area left to touch upon - block persistence. In other words, having your\nblocks saved and available _between_ page refreshes.\n\n![alt text](https:\/\/developer.wordpress.org\/files\/2023\/07\/custom-block-editor-persistance.gif 'Screencapture showing blocks being restored between page refreshes.')\n\nAs this is only an _experiment_, this guide has opted to utilize the browser's `localStorage` API to handle saving block data. In a real-world scenario, you would likely choose a more reliable and robust system (e.g. a database).\n\nThat said, let's take a closer look at how to handle save blocks.\n\n### Storing blocks in state\n\nLooking at the `src\/components\/block-editor\/index.js` file, you will notice that some state has been created to store the blocks as an array:\n\n```jsx\n\/\/ File: src\/components\/block-editor\/index.js\n\nconst [ blocks, updateBlocks ] = useState( [] );\n```\n\nAs mentioned earlier, `blocks` is passed to the \"controlled\" component `<BlockEditorProvider>` as its `value` prop. This \"hydrates\" it with an initial set of blocks. Similarly, the `updateBlocks` setter is hooked up to the `onInput` callback on `<BlockEditorProvider>`, which ensures that the block state is kept in sync with changes made to blocks within the editor.\n\n### Saving block data\n\nIf you now turn your attention to the `onChange` handler, you will notice it is hooked up to a function `persistBlocks()` which is defined as follows:\n\n```js\n\/\/ File: src\/components\/block-editor\/index.js\n\nfunction persistBlocks( newBlocks ) {\n\tupdateBlocks( newBlocks );\n\twindow.localStorage.setItem( 'getdavesbeBlocks', serialize( newBlocks ) );\n}\n```\n\nThis function accepts an array of \"committed\" block changes and calls the state setter `updateBlocks`. It also stores the blocks within LocalStorage under the key `getdavesbeBlocks`. In order to achieve this, the block data is serialized into [Gutenberg \"Block Grammar\"](https:\/\/developer.wordpress.org\/block-editor\/principles\/key-concepts\/#blocks) format, meaning it can be safely stored as a string.\n\nIf you open DeveloperTools and inspect the LocalStorage you will see serialized block data stored and updated as changes occur within the editor. Below is an example of the format:\n\n```\n<!-- wp:heading -->\n<h2>An experiment with a standalone Block Editor in the WordPress admin<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is an experiment to discover how easy (or otherwise) it is to create a standalone instance of the Block Editor in the WordPress admin.<\/p>\n<!-- \/wp:paragraph -->\n```\n\n### Retrieving previous block data\n\nHaving persistence in place is all well and good, but it's only useful if that data is retrieved and _restored_ within the editor upon each full page reload.\n\nAccessing data is a side effect, so you must use the `useEffect` hook to handle this.\n\n```jsx\n\/\/ File: src\/components\/block-editor\/index.js\n\nuseEffect( () => {\n\tconst storedBlocks = window.localStorage.getItem( 'getdavesbeBlocks' );\n\n\tif ( storedBlocks && storedBlocks.length ) {\n\t\tupdateBlocks( () => parse( storedBlocks ) );\n\t\tcreateInfoNotice( 'Blocks loaded', {\n\t\t\ttype: 'snackbar',\n\t\t\tisDismissible: true,\n\t\t} );\n\t}\n}, [] );\n```\n\nThis handler:\n\n-   Grabs the serialized block data from local storage.\n-   Converts the serialized blocks back to JavaScript objects using the `parse()` utility.\n-   Calls the state setter `updateBlocks` causing the `blocks` value to be updated in state to reflect the blocks retrieved from LocalStorage.\n\nAs a result of these operations, the controlled `<BlockEditorProvider>` component is updated with the blocks restored from LocalStorage, causing the editor to show these blocks.\n\nFinally, you will want to generate a notice - which will display in the `<Notice>` component as a \"snackbar\" notice - to indicate that the blocks have been restored.\n\n## Wrapping up\n\nCongratulations for completing this guide. You should now have a better understanding of how the block editor works under the hood. \n\nThe full code for the custom block editor you have just built is [available on GitHub](https:\/\/github.com\/getdave\/standalone-block-editor). Download and try it out for yourself. Experiment, then and take things even further.\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/propagating-updates.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Propagating updates for block types<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This resource seeks to offer direction for those needing to provide updates to content, whether in a template for a theme, pattern, or a block over an entire site. Since each content type allows or disallows certain kind of synchronization, it's important to know what's possible before creating to make maintenance easier in the future.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Recommendations on managing updates<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Establish early what content you expect to require updates<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>At a high level, it\u2019s important to recognize that not every piece of content can be updated across the entire site and that the method of creation greatly impacts what\u2019s possible. As a result, it\u2019s critical to spend time ahead of creation determining what you expect to need updates and to put that content in the appropriate format. This will make a huge difference in terms of future maintenance.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Embrace theme design at the block level<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Block theme design requires a mindset shift from the previous approach of designing large sections of a theme and controlling them via updates. While a holistic view of a design is still important when creating a custom theme project, blocks require that themers approach design on a more atomic level. This means starting from the block itself, typically through theme.json customizations. <strong>The goal is that each individual \"atom\" (i.e., block) can be moved around, edited, deleted, and put back together without the entire design falling apart.<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The more that you approach design at the block level, the less need there is to propagate updates to things like patterns and templates across the entire site. If the atomic pieces are in place, their layout should not matter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Content types (and how to properly update them)<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Blocks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>How to manage block updates depends on the nature of the block itself. If the block depends on external data, then making it dynamic from start with the <code>render_callback<\/code> function is often a better choice as it provides more control. If the block's structure is expected to change over time, then starting with the static block that uses <code>save()<\/code> method defining a default output is the recommended approach. Over time, it's possible to go hybrid and include also the <code>render_callback<\/code> that can use the output from <code>save<\/code> as a fallback while processing an alternate output. Keep in mind that that flexibility and controls comes at the cost of additional processing during rendering. Another option is using static blocks that rely on managing updates with <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-deprecation\/\">block deprecations<\/a>. This will require you to manually update exist blocks.  Depending on your needs and comfortability, either approach can work. <strong>To get started on creating blocks and save time, <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/\">you can use the Create Block tool<\/a>.<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Patterns<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>For content that you want updated later on, do not use patterns and instead rely on reusable blocks or template parts.<\/strong> Patterns cannot be updated after you insert one into your site. For context, you can think of Patterns as more like sample\/example\/starter content. While Patterns exposed in the Inserter might evolve over time, those changes won't be automatically applied to any current usage of the pattern. Once inserted, patterns become completely detached from the original pattern unlike Reusable block or Template Part block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If needed, one potential workaround for patterns with custom styles is to add a class name to the wrapping block for a pattern. For example, the following adds a themeslug-special class to a Group block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n<div class=\"wp-block-group themeslug-special\">\n\t\n<\/div>\n\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>It is not fool-proof because users can modify the class via the editor UI.  However, because this setting is under the \"Advanced\" panel it is likely to stay intact in most instances. This gives theme authors some CSS control for some pattern types, allowing them to update existing uses. However, it does not prevent users from making massive alterations that cannot be updated.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Synced Patterns<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As the name suggests, these patterns are inherently synced across your site. Keep in mind that there are currently limitations with relying on synced patterns to handle certain updates since content, HTML structure, and styles will all stay in sync when updates happen. If you require more nuance than that, this is a key element to factor in and a dynamic block might be a better approach.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Template parts and templates<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Because block themes allow users to directly edit templates and template parts, how changes are managed need to be adjusted in light of the greater access given to users. For context, when templates or template parts are changed by the user, the updated templates from the theme update don\u2019t show for the user. Only new users of the theme or users who have not yet edited a template are experiencing the updated template. If users haven\u2019t modified the files then the changes you make on the file system will be reflected on the user\u2019s sites \u2013 you just need to update the files and they\u2019ll get the changes. However if they have made changes to their templates then the only way you can update their templates is to:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Revert all their changes<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Update the templates and template parts in the database<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Generally speaking, if a user has made changes to templates then it\u2019s recommended to leave the templates as is, unless agreed upon with the user (ie in an agency setting).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>One thing to be mindful of when updating templates is inserting references to new or different template parts.  For example, the templates\/page.html template could insert a parts\/header.html part in version 1.0 but change that reference to parts\/header-alt.html in version 2.0.  Some developers may see this as a \"workaround\" in instances where users modified the original header.html.  However, this is likely to break a user's customized design since the page.html template would no longer reference the correct part unless they also modified and saved the page template.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Likewise, it is generally poor practice to delete template parts in theme updates.  In this scenario, users could create custom top-level templates that include a call to the part and expect it to continue existing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Resources<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/wordpress.org\/documentation\/article\/comparing-patterns-template-parts-and-reusable-blocks\/\">Comparing Patterns, Template Parts, and Reusable Blocks<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-deprecation\/\">Block deprecation<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/\">Create Block tool<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Propagating updates for block types\n\nThis resource seeks to offer direction for those needing to provide updates to content, whether in a template for a theme, pattern, or a block over an entire site. Since each content type allows or disallows certain kind of synchronization, it's important to know what's possible before creating to make maintenance easier in the future.\n\n## Recommendations on managing updates\n\n### Establish early what content you expect to require updates\n\nAt a high level, it\u2019s important to recognize that not every piece of content can be updated across the entire site and that the method of creation greatly impacts what\u2019s possible. As a result, it\u2019s critical to spend time ahead of creation determining what you expect to need updates and to put that content in the appropriate format. This will make a huge difference in terms of future maintenance.\n\n### Embrace theme design at the block level\n\nBlock theme design requires a mindset shift from the previous approach of designing large sections of a theme and controlling them via updates. While a holistic view of a design is still important when creating a custom theme project, blocks require that themers approach design on a more atomic level. This means starting from the block itself, typically through theme.json customizations. **The goal is that each individual \"atom\" (i.e., block) can be moved around, edited, deleted, and put back together without the entire design falling apart.**\n\nThe more that you approach design at the block level, the less need there is to propagate updates to things like patterns and templates across the entire site. If the atomic pieces are in place, their layout should not matter.\n\n## Content types (and how to properly update them)\n\n### Blocks\n\nHow to manage block updates depends on the nature of the block itself. If the block depends on external data, then making it dynamic from start with the `render_callback` function is often a better choice as it provides more control. If the block's structure is expected to change over time, then starting with the static block that uses `save()` method defining a default output is the recommended approach. Over time, it's possible to go hybrid and include also the `render_callback` that can use the output from `save` as a fallback while processing an alternate output. Keep in mind that that flexibility and controls comes at the cost of additional processing during rendering. Another option is using static blocks that rely on managing updates with [block deprecations](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-deprecation\/). This will require you to manually update exist blocks.  Depending on your needs and comfortability, either approach can work. **To get started on creating blocks and save time, [you can use the Create Block tool](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/).**\n\n### Patterns\n\n**For content that you want updated later on, do not use patterns and instead rely on reusable blocks or template parts.** Patterns cannot be updated after you insert one into your site. For context, you can think of Patterns as more like sample\/example\/starter content. While Patterns exposed in the Inserter might evolve over time, those changes won't be automatically applied to any current usage of the pattern. Once inserted, patterns become completely detached from the original pattern unlike Reusable block or Template Part block.\n\nIf needed, one potential workaround for patterns with custom styles is to add a class name to the wrapping block for a pattern. For example, the following adds a themeslug-special class to a Group block:\n\n```\n<!-- wp:group {\"className\":\"themeslug-special\"} -->\n<div class=\"wp-block-group themeslug-special\">\n\t<!-- Nested pattern blocks -->\n<\/div>\n<!-- \/wp:group -->\n```\n\nIt is not fool-proof because users can modify the class via the editor UI.  However, because this setting is under the \"Advanced\" panel it is likely to stay intact in most instances. This gives theme authors some CSS control for some pattern types, allowing them to update existing uses. However, it does not prevent users from making massive alterations that cannot be updated.\n\n### Synced Patterns\n\nAs the name suggests, these patterns are inherently synced across your site. Keep in mind that there are currently limitations with relying on synced patterns to handle certain updates since content, HTML structure, and styles will all stay in sync when updates happen. If you require more nuance than that, this is a key element to factor in and a dynamic block might be a better approach.\n\n### Template parts and templates\n\nBecause block themes allow users to directly edit templates and template parts, how changes are managed need to be adjusted in light of the greater access given to users. For context, when templates or template parts are changed by the user, the updated templates from the theme update don\u2019t show for the user. Only new users of the theme or users who have not yet edited a template are experiencing the updated template. If users haven\u2019t modified the files then the changes you make on the file system will be reflected on the user\u2019s sites \u2013 you just need to update the files and they\u2019ll get the changes. However if they have made changes to their templates then the only way you can update their templates is to:\n\n- Revert all their changes\n- Update the templates and template parts in the database\n\nGenerally speaking, if a user has made changes to templates then it\u2019s recommended to leave the templates as is, unless agreed upon with the user (ie in an agency setting).\n\nOne thing to be mindful of when updating templates is inserting references to new or different template parts.  For example, the templates\/page.html template could insert a parts\/header.html part in version 1.0 but change that reference to parts\/header-alt.html in version 2.0.  Some developers may see this as a \"workaround\" in instances where users modified the original header.html.  However, this is likely to break a user's customized design since the page.html template would no longer reference the correct part unless they also modified and saved the page template.\n\nLikewise, it is generally poor practice to delete template parts in theme updates.  In this scenario, users could create custom top-level templates that include a call to the part and expect it to continue existing.\n\n### Resources\n\n- [Comparing Patterns, Template Parts, and Reusable Blocks](https:\/\/wordpress.org\/documentation\/article\/comparing-patterns-template-parts-and-reusable-blocks\/)\n- [Block deprecation](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-deprecation\/)\n- [Create Block tool](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-create-block\/)\n\n\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/thunks.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Thunks in Core-Data<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/github.com\/WordPress\/gutenberg\/pull\/27276\">Gutenberg 11.6<\/a> added support for <em>thunks<\/em>. You can think of thunks as functions that can be dispatched:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ actions.js\nexport const myThunkAction = () => ( { select, dispatch } ) => {\n\treturn \"I'm a thunk! I can be dispatched, use selectors, and even dispatch other actions.\";\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Why are thunks useful?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Thunks <a href=\"https:\/\/jsnajdr.wordpress.com\/2021\/10\/04\/motivation-for-thunks\/\">expand the meaning of what a Redux action is<\/a>. Before thunks, actions were purely functional and could only return and yield data. Common use cases such as interacting with the store or requesting API data from an action required using a separate <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-data\/#controls\">control<\/a>. You would often see code like:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export function* saveRecordAction( id ) {\n\tconst record = yield controls.select( 'current-store', 'getRecord', id );\n\tyield { type: 'BEFORE_SAVE', id, record };\n\tconst results = yield controls.fetch({ url: 'https:\/\/...', method: 'POST', data: record });\n\tyield { type: 'AFTER_SAVE', id, results };\n\treturn results;\n}\n\nconst controls = {\n\tselect: \/\/ ...,\n\tfetch: \/\/ ...,\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Side effects like store operations and fetch functions would be implemented outside of the action. Thunks provide an alternative to this approach. They allow you to use side effects inline, like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export const saveRecordAction = ( id ) => async ({ select, dispatch }) => {\n\tconst record = select( 'current-store', 'getRecord', id );\n\tdispatch({ type: 'BEFORE_SAVE', id, record });\n\tconst response = await fetch({ url: 'https:\/\/...', method: 'POST', data: record });\n\tconst results = await response.json();\n\tdispatch({ type: 'AFTER_SAVE', id, results });\n\treturn results;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This removes the need to implement separate controls.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Thunks have access to the store helpers<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let's take a look at an example from Gutenberg core. Prior to thunks, the <code>toggleFeature<\/code> action from the <code>@wordpress\/interface<\/code> package was implemented like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export function* toggleFeature( scope, featureName ) {\n\tconst currentValue = yield controls.select(\n\t\tinterfaceStoreName,\n\t\t'isFeatureActive',\n\t\tscope,\n\t\tfeatureName\n\t);\n\n\tyield controls.dispatch(\n\t\tinterfaceStoreName,\n\t\t'setFeatureValue',\n\t\tscope,\n\t\tfeatureName,\n\t\t! currentValue\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Controls were the only way to <code>dispatch<\/code> actions and <code>select<\/code> data from the store.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With thunks, there is a cleaner way. This is how <code>toggleFeature<\/code> is implemented now:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>export function toggleFeature( scope, featureName ) {\n\treturn function ( { select, dispatch } ) {\n\t\tconst currentValue = select.isFeatureActive( scope, featureName );\n\t\tdispatch.setFeatureValue( scope, featureName, ! currentValue );\n\t};\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Thanks to the <code>select<\/code> and <code>dispatch<\/code> arguments, thunks may use the store directly without the need for generators and controls.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Thunks can be async<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Imagine a simple React app that allows you to set the temperature on a thermostat. It only has one input and one button. Clicking the button dispatches a <code>saveTemperatureToAPI<\/code> action with the value from the input.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If we used controls to save the temperature, the store definition would look like below:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const store = wp.data.createReduxStore( 'my-store', {\n    actions: {\n        saveTemperatureToAPI: function*( temperature ) {\n            const result = yield { type: 'FETCH_JSON', url: 'https:\/\/...', method: 'POST', data: { temperature } };\n            return result;\n        }\n    },\n    controls: {\n        async FETCH_JSON( action ) {\n            const response = await window.fetch( action.url, {\n                method: action.method,\n                body: JSON.stringify( action.data ),\n            } );\n            return response.json();\n        }\n    },\n    \/\/ reducers, selectors, ...\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>While the code is reasonably straightforward, there is a level of indirection. The <code>saveTemperatureToAPI<\/code> action does not talk directly to the API, but has to go through the <code>FETCH_JSON<\/code> control.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let's see how this indirection can be removed with thunks:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const store = wp.data.createReduxStore( 'my-store', {\n    actions: {\n        saveTemperatureToAPI: ( temperature ) => async () => {\n            const response = await window.fetch( 'https:\/\/...', {\n                method: 'POST',\n                body: JSON.stringify( { temperature } ),\n            } );\n            return await response.json();\n        }\n    },\n    \/\/ reducers, selectors, ...\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>That's pretty cool! What's even better is that resolvers are supported as well:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const store = wp.data.createReduxStore( 'my-store', {\n    \/\/ ...\n    selectors: {\n        getTemperature: ( state ) => state.temperature\n    },\n    resolvers: {\n        getTemperature: () => async ( { dispatch } ) => {\n            const response = await window.fetch( 'https:\/\/...' );\n            const result = await response.json();\n            dispatch.receiveCurrentTemperature( result.temperature );\n        }\n    },\n    \/\/ ...\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Support for thunks is included by default in every data store, just like the (now legacy) support for<br>generators and controls.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Thunks API<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A thunk receives a single object argument with the following keys:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">select<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>An object containing the store\u2019s selectors pre-bound to state, which means you don't need to provide the state, only the additional arguments. <code>select<\/code> triggers the related resolvers, if any, but does not wait for them to finish. It just returns the current value even if it's null.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If a selector is part of the public API, it's available as a method on the select object:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const thunk = () => ( { select } ) => {\n    \/\/ select is an object of the store\u2019s selectors, pre-bound to current state:\n    const temperature = select.getTemperature();\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Since not all selectors are exposed on the store, <code>select<\/code> doubles as a function that supports passing a selector as an argument:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const thunk = () => ( { select } ) => {\n    \/\/ select supports private selectors:\n    const doubleTemperature = select( ( temperature ) => temperature * 2 );\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">resolveSelect<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><code>resolveSelect<\/code> is the same as <code>select<\/code>, except it returns a promise that resolves with the value provided by the related resolver.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const thunk = () => ( { resolveSelect } ) => {\n    const temperature = await resolveSelect.getTemperature();\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">dispatch<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>An object containing the store\u2019s actions<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If an action is part of the public API, it's available as a method on the <code>dispatch<\/code> object:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const thunk = () => ( { dispatch } ) => {\n    \/\/ dispatch is an object of the store\u2019s actions:\n    const temperature = await dispatch.retrieveTemperature();\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Since not all actions are exposed on the store, <code>dispatch<\/code> doubles as a function that supports passing a Redux action as an argument:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const thunk = () => async ( { dispatch } ) => {\n\t\/\/ dispatch is also a function accepting inline actions:\n\tdispatch({ type: 'SET_TEMPERATURE', temperature: result.value });\n\n\t\/\/ thunks are interchangeable with actions\n\tdispatch( updateTemperature( 100 ) );\n\n\t\/\/ Thunks may be async, too. When they are, dispatch returns a promise\n\tawait dispatch( ( ) => window.fetch( \/* ... *\/ ) );\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">registry<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A registry provides access to other stores through its <code>dispatch<\/code>, <code>select<\/code>, and <code>resolveSelect<\/code> methods.<br>These are very similar to the ones described above, with a slight twist. Calling <code>registry.select( storeName )<\/code> returns a function returning an object of selectors from <code>storeName<\/code>. This comes handy when you need to interact with another store. For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const thunk = () => ( { registry } ) => {\n  const error = registry.select( 'core' ).getLastEntitySaveError( 'root', 'menu', menuId );\n  \/* ... *\/\n}\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# Thunks in Core-Data\n\n[Gutenberg 11.6](https:\/\/github.com\/WordPress\/gutenberg\/pull\/27276) added support for _thunks_. You can think of thunks as functions that can be dispatched:\n\n```js\n\/\/ actions.js\nexport const myThunkAction = () => ( { select, dispatch } ) => {\n\treturn \"I'm a thunk! I can be dispatched, use selectors, and even dispatch other actions.\";\n};\n```\n\n## Why are thunks useful?\n\nThunks [expand the meaning of what a Redux action is](https:\/\/jsnajdr.wordpress.com\/2021\/10\/04\/motivation-for-thunks\/). Before thunks, actions were purely functional and could only return and yield data. Common use cases such as interacting with the store or requesting API data from an action required using a separate [control](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-data\/#controls). You would often see code like:\n\n```js\nexport function* saveRecordAction( id ) {\n\tconst record = yield controls.select( 'current-store', 'getRecord', id );\n\tyield { type: 'BEFORE_SAVE', id, record };\n\tconst results = yield controls.fetch({ url: 'https:\/\/...', method: 'POST', data: record });\n\tyield { type: 'AFTER_SAVE', id, results };\n\treturn results;\n}\n\nconst controls = {\n\tselect: \/\/ ...,\n\tfetch: \/\/ ...,\n};\n```\n\nSide effects like store operations and fetch functions would be implemented outside of the action. Thunks provide an alternative to this approach. They allow you to use side effects inline, like this:\n\n```js\nexport const saveRecordAction = ( id ) => async ({ select, dispatch }) => {\n\tconst record = select( 'current-store', 'getRecord', id );\n\tdispatch({ type: 'BEFORE_SAVE', id, record });\n\tconst response = await fetch({ url: 'https:\/\/...', method: 'POST', data: record });\n\tconst results = await response.json();\n\tdispatch({ type: 'AFTER_SAVE', id, results });\n\treturn results;\n}\n```\n\nThis removes the need to implement separate controls.\n\n### Thunks have access to the store helpers\n\nLet's take a look at an example from Gutenberg core. Prior to thunks, the `toggleFeature` action from the `@wordpress\/interface` package was implemented like this:\n\n```js\nexport function* toggleFeature( scope, featureName ) {\n\tconst currentValue = yield controls.select(\n\t\tinterfaceStoreName,\n\t\t'isFeatureActive',\n\t\tscope,\n\t\tfeatureName\n\t);\n\n\tyield controls.dispatch(\n\t\tinterfaceStoreName,\n\t\t'setFeatureValue',\n\t\tscope,\n\t\tfeatureName,\n\t\t! currentValue\n\t);\n}\n```\n\nControls were the only way to `dispatch` actions and `select` data from the store.\n\nWith thunks, there is a cleaner way. This is how `toggleFeature` is implemented now:\n\n```js\nexport function toggleFeature( scope, featureName ) {\n\treturn function ( { select, dispatch } ) {\n\t\tconst currentValue = select.isFeatureActive( scope, featureName );\n\t\tdispatch.setFeatureValue( scope, featureName, ! currentValue );\n\t};\n}\n```\n\nThanks to the `select` and `dispatch` arguments, thunks may use the store directly without the need for generators and controls.\n\n### Thunks can be async\n\nImagine a simple React app that allows you to set the temperature on a thermostat. It only has one input and one button. Clicking the button dispatches a `saveTemperatureToAPI` action with the value from the input.\n\nIf we used controls to save the temperature, the store definition would look like below:\n\n```js\nconst store = wp.data.createReduxStore( 'my-store', {\n    actions: {\n        saveTemperatureToAPI: function*( temperature ) {\n            const result = yield { type: 'FETCH_JSON', url: 'https:\/\/...', method: 'POST', data: { temperature } };\n            return result;\n        }\n    },\n    controls: {\n        async FETCH_JSON( action ) {\n            const response = await window.fetch( action.url, {\n                method: action.method,\n                body: JSON.stringify( action.data ),\n            } );\n            return response.json();\n        }\n    },\n    \/\/ reducers, selectors, ...\n} );\n```\n\nWhile the code is reasonably straightforward, there is a level of indirection. The `saveTemperatureToAPI` action does not talk directly to the API, but has to go through the `FETCH_JSON` control.\n\nLet's see how this indirection can be removed with thunks:\n\n```js\nconst store = wp.data.createReduxStore( 'my-store', {\n    actions: {\n        saveTemperatureToAPI: ( temperature ) => async () => {\n            const response = await window.fetch( 'https:\/\/...', {\n                method: 'POST',\n                body: JSON.stringify( { temperature } ),\n            } );\n            return await response.json();\n        }\n    },\n    \/\/ reducers, selectors, ...\n} );\n```\n\nThat's pretty cool! What's even better is that resolvers are supported as well:\n\n```js\nconst store = wp.data.createReduxStore( 'my-store', {\n    \/\/ ...\n    selectors: {\n        getTemperature: ( state ) => state.temperature\n    },\n    resolvers: {\n        getTemperature: () => async ( { dispatch } ) => {\n            const response = await window.fetch( 'https:\/\/...' );\n            const result = await response.json();\n            dispatch.receiveCurrentTemperature( result.temperature );\n        }\n    },\n    \/\/ ...\n} );\n```\n\nSupport for thunks is included by default in every data store, just like the (now legacy) support for\ngenerators and controls.\n\n## Thunks API\n\nA thunk receives a single object argument with the following keys:\n\n### select\n\nAn object containing the store\u2019s selectors pre-bound to state, which means you don't need to provide the state, only the additional arguments. `select` triggers the related resolvers, if any, but does not wait for them to finish. It just returns the current value even if it's null.\n\n\nIf a selector is part of the public API, it's available as a method on the select object:\n\n```js\nconst thunk = () => ( { select } ) => {\n    \/\/ select is an object of the store\u2019s selectors, pre-bound to current state:\n    const temperature = select.getTemperature();\n}\n```\n\nSince not all selectors are exposed on the store, `select` doubles as a function that supports passing a selector as an argument:\n\n```js\nconst thunk = () => ( { select } ) => {\n    \/\/ select supports private selectors:\n    const doubleTemperature = select( ( temperature ) => temperature * 2 );\n}\n```\n\n### resolveSelect\n\n`resolveSelect` is the same as `select`, except it returns a promise that resolves with the value provided by the related resolver.\n\n```js\nconst thunk = () => ( { resolveSelect } ) => {\n    const temperature = await resolveSelect.getTemperature();\n}\n```\n\n### dispatch\n\nAn object containing the store\u2019s actions\n\nIf an action is part of the public API, it's available as a method on the `dispatch` object:\n\n```js\nconst thunk = () => ( { dispatch } ) => {\n    \/\/ dispatch is an object of the store\u2019s actions:\n    const temperature = await dispatch.retrieveTemperature();\n}\n```\n\nSince not all actions are exposed on the store, `dispatch` doubles as a function that supports passing a Redux action as an argument:\n\n```js\nconst thunk = () => async ( { dispatch } ) => {\n\t\/\/ dispatch is also a function accepting inline actions:\n\tdispatch({ type: 'SET_TEMPERATURE', temperature: result.value });\n\n\t\/\/ thunks are interchangeable with actions\n\tdispatch( updateTemperature( 100 ) );\n\n\t\/\/ Thunks may be async, too. When they are, dispatch returns a promise\n\tawait dispatch( ( ) => window.fetch( \/* ... *\/ ) );\n}\n```\n\n### registry\n\nA registry provides access to other stores through its `dispatch`, `select`, and `resolveSelect` methods.\nThese are very similar to the ones described above, with a slight twist. Calling `registry.select( storeName )` returns a function returning an object of selectors from `storeName`. This comes handy when you need to interact with another store. For example:\n\n```js\nconst thunk = () => ( { registry } ) => {\n  const error = registry.select( 'core' ).getLastEntitySaveError( 'root', 'menu', menuId );\n  \/* ... *\/\n}\n```\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/block-tutorial\/applying-styles-with-stylesheets.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Use styles and stylesheets<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Overview<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block typically inserts markup (HTML) into post content that you want to style in some way. This guide walks through a few different ways you can use CSS with the block editor and how to work with styles and stylesheets.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Before you start<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You will need a basic block and WordPress development environment to implement the examples shown in this guide. See the <a href=\"\/docs\/getting-started\/quick-start-guide.md\">Quick Start Guide<\/a> or <a href=\"\/docs\/getting-started\/tutorial.md\">block tutorial<\/a> to get set up.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Methods to add style<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The following are different methods you can use to add style to your block, either in the editor or when saved.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Method 1: Inline style<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The first method shows adding the style inline. This transforms the defined style into a property on the element inserted.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>useBlockProps<\/code> React hook is used to set and apply properties on the block's wrapper element. The following example shows how:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerBlockType } from '@wordpress\/blocks';\nimport { useBlockProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'gutenberg-examples\/example-02-stylesheets', {\n\tedit() {\n\t\tconst greenBackground = {\n\t\t\tbackgroundColor: '#090',\n\t\t\tcolor: '#fff',\n\t\t\tpadding: '20px',\n\t\t};\n\n\t\tconst blockProps = useBlockProps( { style: greenBackground } );\n\n\t\treturn (\n\t\t\t<p {=\"\" ...blockprops=\"\" }=\"\">Hello World (from the editor, in green).<\/p>\n\t\t);\n\t},\n\tsave() {\n\t\tconst redBackground = {\n\t\t\tbackgroundColor: '#900',\n\t\t\tcolor: '#fff',\n\t\t\tpadding: '20px',\n\t\t};\n\n\t\tconst blockProps = useBlockProps.save( { style: redBackground } );\n\n\t\treturn (\n\t\t\t<p {=\"\" ...blockprops=\"\" }=\"\">Hello World (from the frontend, in red).<\/p>\n\t\t);\n\t},\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Method 2: Block classname<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The inline style works well for a small amount of CSS to apply. If you have much more than the above you will likely find that it is easier to manage with them in a separate stylesheet file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>useBlockProps<\/code> hooks includes the classname for the block automatically, it generates a name for each block using the block's name prefixed with <code>wp-block-<\/code>, replacing the <code>\/<\/code> namespace separator with a single <code>-<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example the block name: <code>gutenberg-examples\/example-02-stylesheets<\/code> would get the classname: <code>wp-block-gutenberg-examples-example-02-stylesheets<\/code>. It might be a bit long but best to avoid conflicts with other blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerBlockType } from '@wordpress\/blocks';\nimport { useBlockProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'gutenberg-examples\/example-02-stylesheets', {\n\tedit() {\n\t\tconst blockProps = useBlockProps();\n\n\t\treturn (\n\t\t\t<p {=\"\" ...blockprops=\"\" }=\"\">Hello World (from the editor, in green).<\/p>\n\t\t);\n\t},\n\tsave() {\n\t\tconst blockProps = useBlockProps.save();\n\n\t\treturn (\n\t\t\t<p {=\"\" ...blockprops=\"\" }=\"\">Hello World (from the frontend, in red).<\/p>\n\t\t);\n\t},\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Build or add dependency<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order to include the blockEditor as a dependency, make sure to run the build step, or update the asset php file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Build the scripts and update the asset file which is used to keep track of dependencies and the build version.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run build\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Enqueue stylesheets<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Like scripts, you can enqueue your block's styles using the <code>block.json<\/code> file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Use the <code>editorStyle<\/code> property to a CSS file you want to load in the editor view only, use the <code>style<\/code> property for a CSS file you want to load both in the editor view and on the frontend when the block is used, and use the <code>viewStyle<\/code> property for a CSS file you want to load only on the frontend when the block is used.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It is worth noting that, if the editor content is iframed, both the <code>style<\/code> and <code>editorStyle<\/code> will load in the iframe. <code>editorStyle<\/code> will also load outside the iframe, so it can be used for editor content as well as UI.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"apiVersion\": 3,\n\t\"name\": \"gutenberg-examples\/example-02-stylesheets\",\n\t\"title\": \"Example: Stylesheets\",\n\t\"icon\": \"universal-access-alt\",\n\t\"category\": \"layout\",\n\t\"editorScript\": \"file:.\/block.js\",\n\t\"editorStyle\": \"file:.\/editor.css\",\n\t\"style\": \"file:.\/style.css\"\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>So in your plugin directory, create an <code>editor.css<\/code> file to load in editor view:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/* green background *\/\n.wp-block-gutenberg-examples-example-02-stylesheets {\n\tbackground: #090;\n\tcolor: white;\n\tpadding: 20px;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>And a <code>style.css<\/code> file to load on the frontend:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/* red background *\/\n.wp-block-gutenberg-examples-example-02-stylesheets {\n\tbackground: #900;\n\tcolor: white;\n\tpadding: 20px;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The files will automatically be enqueued when specified in the block.json.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:<\/strong> If you have multiple files to include, you can use standard <code>wp_enqueue_style<\/code> functions like any other plugin or theme. You will want to use the following hooks for the block editor:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>enqueue_block_editor_assets<\/code> - to load only in editor view<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>enqueue_block_assets<\/code> - loads both on frontend and editor view<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This guide showed a couple of different ways to apply styles to your block, by either inline or in its own style sheet. Both of these methods use the <code>useBlockProps<\/code> hook, see the <a href=\"\/docs\/reference-guides\/block-api\/block-edit-save.md#block-wrapper-props\">block wrapper reference documentation<\/a> for additional details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See the complete <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/stylesheets-79a4c3\">stylesheets-79a4c3<\/a> code in the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\">block-development-examples repository<\/a>.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Use styles and stylesheets\n\n## Overview\n\nA block typically inserts markup (HTML) into post content that you want to style in some way. This guide walks through a few different ways you can use CSS with the block editor and how to work with styles and stylesheets.\n\n## Before you start\n\nYou will need a basic block and WordPress development environment to implement the examples shown in this guide. See the [Quick Start Guide](\/docs\/getting-started\/quick-start-guide.md) or [block tutorial](\/docs\/getting-started\/tutorial.md) to get set up.\n\n## Methods to add style\n\nThe following are different methods you can use to add style to your block, either in the editor or when saved.\n\n## Method 1: Inline style\n\nThe first method shows adding the style inline. This transforms the defined style into a property on the element inserted.\n\nThe `useBlockProps` React hook is used to set and apply properties on the block's wrapper element. The following example shows how:\n\n```jsx\nimport { registerBlockType } from '@wordpress\/blocks';\nimport { useBlockProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'gutenberg-examples\/example-02-stylesheets', {\n\tedit() {\n\t\tconst greenBackground = {\n\t\t\tbackgroundColor: '#090',\n\t\t\tcolor: '#fff',\n\t\t\tpadding: '20px',\n\t\t};\n\n\t\tconst blockProps = useBlockProps( { style: greenBackground } );\n\n\t\treturn (\n\t\t\t<p { ...blockProps }>Hello World (from the editor, in green).<\/p>\n\t\t);\n\t},\n\tsave() {\n\t\tconst redBackground = {\n\t\t\tbackgroundColor: '#900',\n\t\t\tcolor: '#fff',\n\t\t\tpadding: '20px',\n\t\t};\n\n\t\tconst blockProps = useBlockProps.save( { style: redBackground } );\n\n\t\treturn (\n\t\t\t<p { ...blockProps }>Hello World (from the frontend, in red).<\/p>\n\t\t);\n\t},\n} );\n```\n\n## Method 2: Block classname\n\nThe inline style works well for a small amount of CSS to apply. If you have much more than the above you will likely find that it is easier to manage with them in a separate stylesheet file.\n\nThe `useBlockProps` hooks includes the classname for the block automatically, it generates a name for each block using the block's name prefixed with `wp-block-`, replacing the `\/` namespace separator with a single `-`.\n\nFor example the block name: `gutenberg-examples\/example-02-stylesheets` would get the classname: `wp-block-gutenberg-examples-example-02-stylesheets`. It might be a bit long but best to avoid conflicts with other blocks.\n\n```jsx\nimport { registerBlockType } from '@wordpress\/blocks';\nimport { useBlockProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'gutenberg-examples\/example-02-stylesheets', {\n\tedit() {\n\t\tconst blockProps = useBlockProps();\n\n\t\treturn (\n\t\t\t<p { ...blockProps }>Hello World (from the editor, in green).<\/p>\n\t\t);\n\t},\n\tsave() {\n\t\tconst blockProps = useBlockProps.save();\n\n\t\treturn (\n\t\t\t<p { ...blockProps }>Hello World (from the frontend, in red).<\/p>\n\t\t);\n\t},\n} );\n```\n\n### Build or add dependency\n\nIn order to include the blockEditor as a dependency, make sure to run the build step, or update the asset php file.\n\nBuild the scripts and update the asset file which is used to keep track of dependencies and the build version.\n```bash\nnpm run build\n```\n\n### Enqueue stylesheets\n\nLike scripts, you can enqueue your block's styles using the `block.json` file.\n\nUse the `editorStyle` property to a CSS file you want to load in the editor view only, use the `style` property for a CSS file you want to load both in the editor view and on the frontend when the block is used, and use the `viewStyle` property for a CSS file you want to load only on the frontend when the block is used.\n\nIt is worth noting that, if the editor content is iframed, both the `style` and `editorStyle` will load in the iframe. `editorStyle` will also load outside the iframe, so it can be used for editor content as well as UI.\n\nFor example:\n\n```json\n{\n\t\"apiVersion\": 3,\n\t\"name\": \"gutenberg-examples\/example-02-stylesheets\",\n\t\"title\": \"Example: Stylesheets\",\n\t\"icon\": \"universal-access-alt\",\n\t\"category\": \"layout\",\n\t\"editorScript\": \"file:.\/block.js\",\n\t\"editorStyle\": \"file:.\/editor.css\",\n\t\"style\": \"file:.\/style.css\"\n}\n```\n\nSo in your plugin directory, create an `editor.css` file to load in editor view:\n\n```css\n\/* green background *\/\n.wp-block-gutenberg-examples-example-02-stylesheets {\n\tbackground: #090;\n\tcolor: white;\n\tpadding: 20px;\n}\n```\n\nAnd a `style.css` file to load on the frontend:\n\n```css\n\/* red background *\/\n.wp-block-gutenberg-examples-example-02-stylesheets {\n\tbackground: #900;\n\tcolor: white;\n\tpadding: 20px;\n}\n```\n\nThe files will automatically be enqueued when specified in the block.json.\n\n**Note:** If you have multiple files to include, you can use standard `wp_enqueue_style` functions like any other plugin or theme. You will want to use the following hooks for the block editor:\n\n-   `enqueue_block_editor_assets` - to load only in editor view\n-   `enqueue_block_assets` - loads both on frontend and editor view\n\n## Conclusion\n\nThis guide showed a couple of different ways to apply styles to your block, by either inline or in its own style sheet. Both of these methods use the `useBlockProps` hook, see the [block wrapper reference documentation](\/docs\/reference-guides\/block-api\/block-edit-save.md#block-wrapper-props) for additional details.\n\nSee the complete [stylesheets-79a4c3](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/stylesheets-79a4c3) code in the [block-development-examples repository](https:\/\/github.com\/WordPress\/block-development-examples).\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/block-tutorial\/creating-dynamic-blocks.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Creating dynamic blocks<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Dynamic blocks are blocks that build their structure and content on the fly when the block is rendered on the front end.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are two primary uses for dynamic blocks:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Blocks where content should change even if a post has not been updated. One example from WordPress itself is the Latest Posts block. This block will update everywhere it is used when a new post is published.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Blocks where updates to the code (HTML, CSS, JS) should be immediately shown on the front end of the website. For example, if you update the structure of a block by adding a new class, adding an HTML element, or changing the layout in any other way, using a dynamic block ensures those changes are applied immediately on all occurrences of that block across the site. (If a dynamic block is not used then when block code is updated Gutenberg's <a href=\"\/docs\/reference-guides\/block-api\/block-edit-save.md#validation\">validation process<\/a> generally applies, causing users to see the validation message, \"This block appears to have been modified externally\").<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>For many dynamic blocks, the <code>save<\/code> callback function should be returned as <code>null<\/code>, which tells the editor to save only the <a href=\"\/docs\/reference-guides\/block-api\/block-attributes.md\">block attributes<\/a> to the database. These attributes are then passed into the server-side rendering callback, so you can decide how to display the block on the front end of your site. When you return <code>null<\/code>, the editor will skip the block markup validation process, avoiding issues with frequently-changing markup.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you are using <a href=\"\/docs\/how-to-guides\/block-tutorial\/nested-blocks-inner-blocks.md\">InnerBlocks<\/a> in a dynamic block you will need to save the <code>InnerBlocks<\/code> in the <code>save<\/code> callback function using <code>&lt;InnerBlocks.Content\/><\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can also save an HTML representation of the block. If you provide a server-side rendering callback, this HTML will be replaced with the output of your callback, but will be rendered if your block is deactivated or your render callback is removed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Block attributes can be used for any content or setting you want to save for that block. In the first example above, with the latest posts block, the number of latest posts you want to show could be saved as an attribute. Or in the second example, attributes can be used for each piece of content you want to show in the front end - such as heading text, paragraph text, an image, a URL, etc.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following code example shows how to create a dynamic block that shows only the last post as a link.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerBlockType } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\nimport { useBlockProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'gutenberg-examples\/example-dynamic', {\n\tapiVersion: 3,\n\ttitle: 'Example: last post',\n\ticon: 'megaphone',\n\tcategory: 'widgets',\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\t\tconst posts = useSelect( ( select ) => {\n\t\t\treturn select( 'core' ).getEntityRecords( 'postType', 'post' );\n\t\t}, &#91;] );\n\n\t\treturn (\n\t\t\t<div {=\"\" ...blockprops=\"\" }=\"\">\n\t\t\t\t{ ! posts &amp;&amp; 'Loading' }\n\t\t\t\t{ posts &amp;&amp; posts.length === 0 &amp;&amp; 'No Posts' }\n\t\t\t\t{ posts &amp;&amp; posts.length > 0 &amp;&amp; (\n\t\t\t\t\t<a 0=\"\" href=\"{\" posts&#91;=\"\" ].link=\"\" }=\"\">\n\t\t\t\t\t\t{ posts&#91; 0 ].title.rendered }\n\t\t\t\t\t<\/a>\n\t\t\t\t) }\n\t\t\t<\/div>\n\t\t);\n\t},\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Because it is a dynamic block it doesn't need to override the default <code>save<\/code> implementation on the client. Instead, it needs a server component. The contents in the front of your site depend on the function called by the <code>render_callback<\/code> property of <code>register_block_type<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n\/**\n * Plugin Name: Gutenberg examples dynamic\n *\/\n\nfunction gutenberg_examples_dynamic_render_callback( $block_attributes, $content ) {\n\t$recent_posts = wp_get_recent_posts( array(\n\t\t'numberposts' => 1,\n\t\t'post_status' => 'publish',\n\t) );\n\tif ( count( $recent_posts ) === 0 ) {\n\t\treturn 'No posts';\n\t}\n\t$post = $recent_posts&#91; 0 ];\n\t$post_id = $post&#91;'ID'];\n\treturn sprintf(\n\t\t'<a class=\"wp-block-my-plugin-latest-post\" href=\"%1$s\">%2$s<\/a>',\n\t\tesc_url( get_permalink( $post_id ) ),\n\t\tesc_html( get_the_title( $post_id ) )\n\t);\n}\n\nfunction gutenberg_examples_dynamic() {\n\t\/\/ automatically load dependencies and version\n\t$asset_file = include( plugin_dir_path( __FILE__ ) . 'build\/index.asset.php');\n\n\twp_register_script(\n\t\t'gutenberg-examples-dynamic',\n\t\tplugins_url( 'build\/block.js', __FILE__ ),\n\t\t$asset_file&#91;'dependencies'],\n\t\t$asset_file&#91;'version']\n\t);\n\n\tregister_block_type( 'gutenberg-examples\/example-dynamic', array(\n\t\t'api_version' => 3,\n\t\t'editor_script' => 'gutenberg-examples-dynamic',\n\t\t'render_callback' => 'gutenberg_examples_dynamic_render_callback'\n\t) );\n\n}\nadd_action( 'init', 'gutenberg_examples_dynamic' );\n\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>There are a few things to notice:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The <code>edit<\/code> function still shows a representation of the block in the editor's context (this could be very different from the rendered version, it's up to the block's author)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The built-in <code>save<\/code> function just returns <code>null<\/code> because the rendering is performed server-side.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The server-side rendering is a function taking the block and the block inner content as arguments, and returning the markup (quite similar to shortcodes)<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Note :<\/strong> For common customization settings including color, border, spacing customization and more, we will see on the <a href=\"\/docs\/how-to-guides\/block-tutorial\/block-supports-in-dynamic-blocks.md\">next chapter<\/a> how you can rely on block supports to provide such functionality in an efficient way.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Live rendering in the block editor<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Gutenberg 2.8 added the <a href=\"\/packages\/server-side-render\/README.md\"><code>&lt;ServerSideRender><\/code><\/a> block which enables rendering to take place on the server using PHP rather than in JavaScript.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Server-side render is meant as a fallback; client-side rendering in JavaScript is always preferred (client rendering is faster and allows better editor manipulation).<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerBlockType } from '@wordpress\/blocks';\nimport ServerSideRender from '@wordpress\/server-side-render';\nimport { useBlockProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'gutenberg-examples\/example-dynamic', {\n\tapiVersion: 3,\n\ttitle: 'Example: last post',\n\ticon: 'megaphone',\n\tcategory: 'widgets',\n\n\tedit: function ( props ) {\n\t\tconst blockProps = useBlockProps();\n\t\treturn (\n\t\t\t<div {=\"\" ...blockprops=\"\" }=\"\">\n\t\t\t\t<serversiderender<br>\t\t\t\t\tblock=\"gutenberg-examples\/example-dynamic\"\n\t\t\t\t\tattributes={ props.attributes }\n\t\t\t\t\/>\n\t\t\t<\/serversiderender<br><\/div>\n\t\t);\n\t},\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note that this code uses the <code>wp-server-side-render<\/code> package but not <code>wp-data<\/code>. Make sure to update the dependencies in the PHP code. You can use wp-scripts to automatically build dependencies (see the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/basic-esnext-a2ab62\">block-development-examples repo<\/a> for PHP code setup).<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Creating dynamic blocks\n\nDynamic blocks are blocks that build their structure and content on the fly when the block is rendered on the front end.\n\nThere are two primary uses for dynamic blocks:\n\n1. Blocks where content should change even if a post has not been updated. One example from WordPress itself is the Latest Posts block. This block will update everywhere it is used when a new post is published.\n2. Blocks where updates to the code (HTML, CSS, JS) should be immediately shown on the front end of the website. For example, if you update the structure of a block by adding a new class, adding an HTML element, or changing the layout in any other way, using a dynamic block ensures those changes are applied immediately on all occurrences of that block across the site. (If a dynamic block is not used then when block code is updated Gutenberg's [validation process](\/docs\/reference-guides\/block-api\/block-edit-save.md#validation) generally applies, causing users to see the validation message, \"This block appears to have been modified externally\").\n\nFor many dynamic blocks, the `save` callback function should be returned as `null`, which tells the editor to save only the [block attributes](\/docs\/reference-guides\/block-api\/block-attributes.md) to the database. These attributes are then passed into the server-side rendering callback, so you can decide how to display the block on the front end of your site. When you return `null`, the editor will skip the block markup validation process, avoiding issues with frequently-changing markup.\n\nIf you are using [InnerBlocks](\/docs\/how-to-guides\/block-tutorial\/nested-blocks-inner-blocks.md) in a dynamic block you will need to save the `InnerBlocks` in the `save` callback function using `<InnerBlocks.Content\/>`\n\nYou can also save an HTML representation of the block. If you provide a server-side rendering callback, this HTML will be replaced with the output of your callback, but will be rendered if your block is deactivated or your render callback is removed.\n\nBlock attributes can be used for any content or setting you want to save for that block. In the first example above, with the latest posts block, the number of latest posts you want to show could be saved as an attribute. Or in the second example, attributes can be used for each piece of content you want to show in the front end - such as heading text, paragraph text, an image, a URL, etc.\n\nThe following code example shows how to create a dynamic block that shows only the last post as a link.\n\n\n\n```jsx\nimport { registerBlockType } from '@wordpress\/blocks';\nimport { useSelect } from '@wordpress\/data';\nimport { useBlockProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'gutenberg-examples\/example-dynamic', {\n\tapiVersion: 3,\n\ttitle: 'Example: last post',\n\ticon: 'megaphone',\n\tcategory: 'widgets',\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\t\tconst posts = useSelect( ( select ) => {\n\t\t\treturn select( 'core' ).getEntityRecords( 'postType', 'post' );\n\t\t}, [] );\n\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t{ ! posts && 'Loading' }\n\t\t\t\t{ posts && posts.length === 0 && 'No Posts' }\n\t\t\t\t{ posts && posts.length > 0 && (\n\t\t\t\t\t<a href={ posts[ 0 ].link }>\n\t\t\t\t\t\t{ posts[ 0 ].title.rendered }\n\t\t\t\t\t<\/a>\n\t\t\t\t) }\n\t\t\t<\/div>\n\t\t);\n\t},\n} );\n```\n\n\n\nBecause it is a dynamic block it doesn't need to override the default `save` implementation on the client. Instead, it needs a server component. The contents in the front of your site depend on the function called by the `render_callback` property of `register_block_type`.\n\n```php\n<?php\n\n\/**\n * Plugin Name: Gutenberg examples dynamic\n *\/\n\nfunction gutenberg_examples_dynamic_render_callback( $block_attributes, $content ) {\n\t$recent_posts = wp_get_recent_posts( array(\n\t\t'numberposts' => 1,\n\t\t'post_status' => 'publish',\n\t) );\n\tif ( count( $recent_posts ) === 0 ) {\n\t\treturn 'No posts';\n\t}\n\t$post = $recent_posts[ 0 ];\n\t$post_id = $post['ID'];\n\treturn sprintf(\n\t\t'<a class=\"wp-block-my-plugin-latest-post\" href=\"%1$s\">%2$s<\/a>',\n\t\tesc_url( get_permalink( $post_id ) ),\n\t\tesc_html( get_the_title( $post_id ) )\n\t);\n}\n\nfunction gutenberg_examples_dynamic() {\n\t\/\/ automatically load dependencies and version\n\t$asset_file = include( plugin_dir_path( __FILE__ ) . 'build\/index.asset.php');\n\n\twp_register_script(\n\t\t'gutenberg-examples-dynamic',\n\t\tplugins_url( 'build\/block.js', __FILE__ ),\n\t\t$asset_file['dependencies'],\n\t\t$asset_file['version']\n\t);\n\n\tregister_block_type( 'gutenberg-examples\/example-dynamic', array(\n\t\t'api_version' => 3,\n\t\t'editor_script' => 'gutenberg-examples-dynamic',\n\t\t'render_callback' => 'gutenberg_examples_dynamic_render_callback'\n\t) );\n\n}\nadd_action( 'init', 'gutenberg_examples_dynamic' );\n\n```\n\nThere are a few things to notice:\n\n-   The `edit` function still shows a representation of the block in the editor's context (this could be very different from the rendered version, it's up to the block's author)\n-   The built-in `save` function just returns `null` because the rendering is performed server-side.\n-   The server-side rendering is a function taking the block and the block inner content as arguments, and returning the markup (quite similar to shortcodes)\n\n**Note :** For common customization settings including color, border, spacing customization and more, we will see on the [next chapter](\/docs\/how-to-guides\/block-tutorial\/block-supports-in-dynamic-blocks.md) how you can rely on block supports to provide such functionality in an efficient way.\n\n## Live rendering in the block editor\n\nGutenberg 2.8 added the [`<ServerSideRender>`](\/packages\/server-side-render\/README.md) block which enables rendering to take place on the server using PHP rather than in JavaScript.\n\n_Server-side render is meant as a fallback; client-side rendering in JavaScript is always preferred (client rendering is faster and allows better editor manipulation)._\n\n\n\n```jsx\nimport { registerBlockType } from '@wordpress\/blocks';\nimport ServerSideRender from '@wordpress\/server-side-render';\nimport { useBlockProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'gutenberg-examples\/example-dynamic', {\n\tapiVersion: 3,\n\ttitle: 'Example: last post',\n\ticon: 'megaphone',\n\tcategory: 'widgets',\n\n\tedit: function ( props ) {\n\t\tconst blockProps = useBlockProps();\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<ServerSideRender\n\t\t\t\t\tblock=\"gutenberg-examples\/example-dynamic\"\n\t\t\t\t\tattributes={ props.attributes }\n\t\t\t\t\/>\n\t\t\t<\/div>\n\t\t);\n\t},\n} );\n```\n\n\n\nNote that this code uses the `wp-server-side-render` package but not `wp-data`. Make sure to update the dependencies in the PHP code. You can use wp-scripts to automatically build dependencies (see the [block-development-examples repo](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/basic-esnext-a2ab62) for PHP code setup).\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/block-tutorial\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Blocks<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The purpose of this tutorial is to step through the fundamentals of creating a new block type. Beginning with the simplest possible example, each new section will incrementally build upon the last to include more of the common functionality you could expect to need when implementing your\u00a0own block types.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To follow along with this tutorial, you can download the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\">accompanying WordPress plugin<\/a> which includes all of the examples for you to try on your own site. At each step along the way, experiment by modifying the examples with your own ideas, and observe the effects they have on the block's behavior.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>To find the latest version of the .zip file go to the repo's <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/releases\">releases page<\/a> and look in the latest release under 'Assets'.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Code snippets are provided in two formats \"JSX\" and \"Plain\". JSX refers to JavaScript code that uses JSX syntax which requires a build step. Plain refers to \"classic\" JavaScript that does not require building. You can change between them using tabs found above each code example. Using JSX, does require you to run <a href=\"\/docs\/how-to-guides\/javascript\/js-build-setup\/\">the JavaScript build step<\/a> to compile your code to a browser compatible format.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note that it is not required to use JSX to create blocks or extend the editor, you can use classic JavaScript. However, once familiar with JSX and the build step, many developers tend to find it is easier to read and write, thus most code examples you'll find use the JSX syntax.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Blocks\n\nThe purpose of this tutorial is to step through the fundamentals of creating a new block type. Beginning with the simplest possible example, each new section will incrementally build upon the last to include more of the common functionality you could expect to need when implementing your\u00a0own block types.\n\nTo follow along with this tutorial, you can download the [accompanying WordPress plugin](https:\/\/github.com\/WordPress\/block-development-examples) which includes all of the examples for you to try on your own site. At each step along the way, experiment by modifying the examples with your own ideas, and observe the effects they have on the block's behavior.\n\n> To find the latest version of the .zip file go to the repo's [releases page](https:\/\/github.com\/WordPress\/block-development-examples\/releases) and look in the latest release under 'Assets'.\n\nCode snippets are provided in two formats \"JSX\" and \"Plain\". JSX refers to JavaScript code that uses JSX syntax which requires a build step. Plain refers to \"classic\" JavaScript that does not require building. You can change between them using tabs found above each code example. Using JSX, does require you to run [the JavaScript build step](\/docs\/how-to-guides\/javascript\/js-build-setup\/) to compile your code to a browser compatible format.\n\nNote that it is not required to use JSX to create blocks or extend the editor, you can use classic JavaScript. However, once familiar with JSX and the build step, many developers tend to find it is easier to read and write, thus most code examples you'll find use the JSX syntax.\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/block-tutorial\/nested-blocks-inner-blocks.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Nested Blocks: Using InnerBlocks<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You can create a single block that nests other blocks using the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/block-editor\/src\/components\/inner-blocks\/README.md\">InnerBlocks<\/a> component. This is used in the Columns block, Social Links block, or any block you want to contain other blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note: A single block can only contain one <code>InnerBlocks<\/code> component.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here is the basic InnerBlocks usage.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerBlockType } from '@wordpress\/blocks';\nimport { InnerBlocks, useBlockProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'gutenberg-examples\/example-06', {\n\t\/\/ ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\n\t\treturn (\n\t\t\t<div {=\"\" ...blockprops=\"\" }=\"\">\n\t\t\t\t<innerblocks>\n\t\t\t<\/innerblocks><\/div>\n\t\t);\n\t},\n\n\tsave: () => {\n\t\tconst blockProps = useBlockProps.save();\n\n\t\treturn (\n\t\t\t<div {=\"\" ...blockprops=\"\" }=\"\">\n\t\t\t\t<innerblocks.content>\n\t\t\t<\/innerblocks.content><\/div>\n\t\t);\n\t},\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Allowed blocks<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Using the <code>allowedBlocks<\/code> prop, you can further limit, in addition to the <code>allowedBlocks<\/code> field in <code>block.json<\/code>, which blocks can be inserted as direct descendants of this block. It is useful to determine the list of allowed blocks dynamically, individually for each block. For example, determined by a block attribute:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const { allowedBlocks } = attributes;\n\/\/...\n<innerblocks allowedblocks=\"{\" }=\"\">;\n<\/innerblocks><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If the list of allowed blocks is always the same, prefer the <a href=\"#defining-a-children-block-relationship\"><code>allowedBlocks<\/code> block setting<\/a> instead.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Orientation<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>By default, <code>InnerBlocks<\/code> expects its blocks to be shown in a vertical list. A valid use-case is to style inner blocks to appear horizontally, for instance by adding CSS flex or grid properties to the inner blocks wrapper. When blocks are styled in such a way, the <code>orientation<\/code> prop can be set to indicate that a horizontal layout is being used:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><innerblocks orientation=\"horizontal\">\n<\/innerblocks><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Specifying this prop does not affect the layout of the inner blocks, but results in the block mover icons in the child blocks being displayed horizontally, and also ensures that drag and drop works correctly.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Default block<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>By default <code>InnerBlocks<\/code> opens a list of permitted blocks via <code>allowedBlocks<\/code> when the block appender is clicked. You can modify the default block and its attributes that are inserted when the initial block appender is clicked by using the <code>defaultBlock<\/code> property. For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><innerblocks defaultblock=\"{&#91;'core\/paragraph',\" {placeholder:=\"\" directinsert=\"\">\n<\/innerblocks><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>By default this behavior is disabled until the <code>directInsert<\/code> prop is set to <code>true<\/code>. This allows you to specify conditions for when the default block should or should not be inserted.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Template<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Use the template property to define a set of blocks that prefill the InnerBlocks component when inserted. You can set attributes on the blocks to define their use. The example below shows a book review template using InnerBlocks component and setting placeholders values to show the block usage.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const MY_TEMPLATE = &#91;\n\t&#91; 'core\/image', {} ],\n\t&#91; 'core\/heading', { placeholder: 'Book Title' } ],\n\t&#91; 'core\/paragraph', { placeholder: 'Summary' } ],\n];\n\n\/\/...\n\n\tedit: () => {\n\t\treturn (\n\t\t\t<innerblocks<br>\t\t\t\ttemplate={ MY_TEMPLATE }\n\t\t\t\ttemplateLock=\"all\"\n\t\t\t\/>\n\t\t);\n\t},\n<\/innerblocks<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Use the <code>templateLock<\/code> property to lock down the template. Using <code>all<\/code> locks the template completely so no changes can be made. Using <code>insert<\/code> prevents additional blocks from being inserted, but existing blocks can be reordered. See <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/block-editor\/src\/components\/inner-blocks\/README.md#templatelock\">templateLock documentation<\/a> for additional information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Post template<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Unrelated to <code>InnerBlocks<\/code> but worth mentioning here, you can create a <a href=\"https:\/\/developer.wordpress.org\/block-editor\/developers\/block-api\/block-templates\/\">post template<\/a> by post type, that preloads the block editor with a set of blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>InnerBlocks<\/code> template is for the component in the single block that you created, the rest of the post can include any blocks the user likes. Using a post template, can lock the entire post to just the template you define.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_action( 'init', function() {\n\t$post_type_object = get_post_type_object( 'post' );\n\t$post_type_object->template = array(\n\t\tarray( 'core\/image' ),\n\t\tarray( 'core\/heading' )\n\t);\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Using parent, ancestor and children relationships in blocks<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A common pattern for using InnerBlocks is to create a custom block that will only be available if its parent block is inserted. This allows builders to establish a relationship between blocks, while limiting a nested block's discoverability. There are three relationships that builders can use: <code>parent<\/code>, <code>ancestor<\/code> and <code>allowedBlocks<\/code>. The differences are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>If you assign a <code>parent<\/code> then you\u2019re stating that the nested block can only be used and inserted as a <strong>direct descendant of the parent<\/strong>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If you assign an <code>ancestor<\/code> then you\u2019re stating that the nested block can only be used and inserted as a <strong>descendent of the parent<\/strong>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If you assign the <code>allowedBlocks<\/code> then you\u2019re stating a relationship in the opposite direction, i.e., which blocks can be used and inserted as <strong>direct descendants of this block<\/strong>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The key difference between <code>parent<\/code> and <code>ancestor<\/code> is <code>parent<\/code> has finer specificity, while an <code>ancestor<\/code> has greater flexibility in its nested hierarchy.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Defining parent block relationship<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>An example of this is the Column block, which is assigned the <code>parent<\/code> block setting. This allows the Column block to only be available as a nested direct descendant in its parent Columns block. Otherwise, the Column block will not be available as an option within the block inserter. See <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/block-library\/src\/column\">Column code for reference<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When defining a direct descendent block, use the <code>parent<\/code> block setting to define which block is the parent. This prevents the nested block from showing in the inserter outside of the InnerBlock it is defined for.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"title\": \"Column\",\n\t\"name\": \"core\/column\",\n\t\"parent\": &#91; \"core\/columns\" ],\n\t\/\/ ...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Defining an ancestor block relationship<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>An example of this is the Comment Author Name block, which is assigned the <code>ancestor<\/code> block setting. This allows the Comment Author Name block to only be available as a nested descendant in its ancestral Comment Template block. Otherwise, the Comment Author Name block will not be available as an option within the block inserter. See <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/block-library\/src\/comment-author-name\">Comment Author Name code for reference<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>ancestor<\/code> relationship allows the Comment Author Name block to be anywhere in the hierarchical tree, and not <em>just<\/em> a direct child of the parent Comment Template block, while still limiting its availability within the block inserter to only be visible an an option to insert if the Comment Template block is available.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When defining a descendent block, use the <code>ancestor<\/code> block setting. This prevents the nested block from showing in the inserter outside of the InnerBlock it is defined for.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"title\": \"Comment Author Name\",\n\t\"name\": \"core\/comment-author-name\",\n\t\"ancestor\": &#91; \"core\/comment-template\" ],\n\t\/\/ ...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Defining a children block relationship<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>An example of this is the Navigation block, which is assigned the <code>allowedBlocks<\/code> block setting. This makes only a certain subset of block types to be available as direct descendants of the Navigation block. See <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/block-library\/src\/navigation\">Navigation code for reference<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>allowedBlocks<\/code> setting can be extended by builders of custom blocks. The custom block can hook into the <code>blocks.registerBlockType<\/code> filter and add itself to the available children of the Navigation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When defining a set of possible descendant blocks, use the <code>allowedBlocks<\/code> block setting. This limits what blocks are showing in the inserter when inserting a new child block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"title\": \"Navigation\",\n\t\"name\": \"core\/navigation\",\n\t\"allowedBlocks\": &#91; \"core\/navigation-link\", \"core\/search\", \"core\/social-links\", \"core\/page-list\", \"core\/spacer\" ],\n\t\/\/ ...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Using a React hook<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You can use a react hook called <code>useInnerBlocksProps<\/code> instead of the <code>InnerBlocks<\/code> component. This hook allows you to take more control over the markup of inner blocks areas.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>useInnerBlocksProps<\/code> is exported from the <code>@wordpress\/block-editor<\/code> package same as the <code>InnerBlocks<\/code> component itself and supports everything the component does. It also works like the <code>useBlockProps<\/code> hook.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here is the basic <code>useInnerBlocksProps<\/code> hook usage.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerBlockType } from '@wordpress\/blocks';\nimport { useBlockProps, useInnerBlocksProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'gutenberg-examples\/example-06', {\n\t\/\/ ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\t\tconst innerBlocksProps = useInnerBlocksProps();\n\n\t\treturn (\n\t\t\t<div {=\"\" ...blockprops=\"\" }=\"\">\n\t\t\t\t<div {...innerblocksprops}=\"\">\n\t\t\t<\/div>\n\t\t);\n\t},\n\n\tsave: () => {\n\t\tconst blockProps = useBlockProps.save();\n\t\tconst innerBlocksProps = useInnerBlocksProps.save();\n\n\t\treturn (\n\t\t\t<div {=\"\" ...blockprops=\"\" }=\"\">\n\t\t\t\t<div {...innerblocksprops}=\"\">\n\t\t\t<\/div>\n\t\t);\n\t},\n} );\n<\/div><\/div><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This hook can also pass objects returned from the <code>useBlockProps<\/code> hook to the <code>useInnerBlocksProps<\/code> hook. This reduces the number of elements we need to create.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerBlockType } from '@wordpress\/blocks';\nimport { useBlockProps, useInnerBlocksProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'gutenberg-examples\/example-06', {\n\t\/\/ ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\t\tconst innerBlocksProps = useInnerBlocksProps( blockProps );\n\n\t\treturn (\n\t\t\t<div {...innerblocksprops}=\"\">\n\t\t);\n\t},\n\n\tsave: () => {\n\t\tconst blockProps = useBlockProps.save();\n\t\tconst innerBlocksProps = useInnerBlocksProps.save( blockProps );\n\n\t\treturn (\n\t\t\t<div {...innerblocksprops}=\"\">\n\t\t);\n\t},\n} );\n<\/div><\/div><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The above code will render to the following markup in the editor:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><div>\n\t\n<\/div>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Another benefit to using the hook approach is using the returned value, which is just an object, and deconstruct to get the react children from the object. This property contains the actual child inner blocks thus we can place elements on the same level as our inner blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerBlockType } from '@wordpress\/blocks';\nimport { useBlockProps, useInnerBlocksProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'gutenberg-examples\/example-06', {\n\t\/\/ ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\t\tconst { children, ...innerBlocksProps } = useInnerBlocksProps( blockProps );\n\n\t\treturn (\n\t\t\t<div {...innerblocksprops}=\"\">\n    \t\t\t{ children }\n\t\t\t\t\n\t\t\t<\/div>\n\t\t);\n\t},\n\n\t\/\/ ...\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><div>\n\t\n\t\n<\/div>\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# Nested Blocks: Using InnerBlocks\n\nYou can create a single block that nests other blocks using the [InnerBlocks](https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/block-editor\/src\/components\/inner-blocks\/README.md) component. This is used in the Columns block, Social Links block, or any block you want to contain other blocks.\n\nNote: A single block can only contain one `InnerBlocks` component.\n\nHere is the basic InnerBlocks usage.\n\n\n```js\nimport { registerBlockType } from '@wordpress\/blocks';\nimport { InnerBlocks, useBlockProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'gutenberg-examples\/example-06', {\n\t\/\/ ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<InnerBlocks \/>\n\t\t\t<\/div>\n\t\t);\n\t},\n\n\tsave: () => {\n\t\tconst blockProps = useBlockProps.save();\n\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<InnerBlocks.Content \/>\n\t\t\t<\/div>\n\t\t);\n\t},\n} );\n```\n\n## Allowed blocks\n\nUsing the `allowedBlocks` prop, you can further limit, in addition to the `allowedBlocks` field in `block.json`, which blocks can be inserted as direct descendants of this block. It is useful to determine the list of allowed blocks dynamically, individually for each block. For example, determined by a block attribute:\n\n```js\nconst { allowedBlocks } = attributes;\n\/\/...\n<InnerBlocks allowedBlocks={ allowedBlocks } \/>;\n```\n\nIf the list of allowed blocks is always the same, prefer the [`allowedBlocks` block setting](#defining-a-children-block-relationship) instead.\n\n## Orientation\n\nBy default, `InnerBlocks` expects its blocks to be shown in a vertical list. A valid use-case is to style inner blocks to appear horizontally, for instance by adding CSS flex or grid properties to the inner blocks wrapper. When blocks are styled in such a way, the `orientation` prop can be set to indicate that a horizontal layout is being used:\n\n```js\n<InnerBlocks orientation=\"horizontal\" \/>\n```\n\nSpecifying this prop does not affect the layout of the inner blocks, but results in the block mover icons in the child blocks being displayed horizontally, and also ensures that drag and drop works correctly.\n\n## Default block\n\nBy default `InnerBlocks` opens a list of permitted blocks via `allowedBlocks` when the block appender is clicked. You can modify the default block and its attributes that are inserted when the initial block appender is clicked by using the `defaultBlock` property. For example:\n\n```js\n<InnerBlocks defaultBlock={['core\/paragraph', {placeholder: \"Lorem ipsum...\"}]} directInsert \/>\n```\n\nBy default this behavior is disabled until the `directInsert` prop is set to `true`. This allows you to specify conditions for when the default block should or should not be inserted.\n\n## Template\n\nUse the template property to define a set of blocks that prefill the InnerBlocks component when inserted. You can set attributes on the blocks to define their use. The example below shows a book review template using InnerBlocks component and setting placeholders values to show the block usage.\n\n\n```js\nconst MY_TEMPLATE = [\n\t[ 'core\/image', {} ],\n\t[ 'core\/heading', { placeholder: 'Book Title' } ],\n\t[ 'core\/paragraph', { placeholder: 'Summary' } ],\n];\n\n\/\/...\n\n\tedit: () => {\n\t\treturn (\n\t\t\t<InnerBlocks\n\t\t\t\ttemplate={ MY_TEMPLATE }\n\t\t\t\ttemplateLock=\"all\"\n\t\t\t\/>\n\t\t);\n\t},\n```\n\n\nUse the `templateLock` property to lock down the template. Using `all` locks the template completely so no changes can be made. Using `insert` prevents additional blocks from being inserted, but existing blocks can be reordered. See [templateLock documentation](https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/block-editor\/src\/components\/inner-blocks\/README.md#templatelock) for additional information.\n\n### Post template\n\nUnrelated to `InnerBlocks` but worth mentioning here, you can create a [post template](https:\/\/developer.wordpress.org\/block-editor\/developers\/block-api\/block-templates\/) by post type, that preloads the block editor with a set of blocks.\n\nThe `InnerBlocks` template is for the component in the single block that you created, the rest of the post can include any blocks the user likes. Using a post template, can lock the entire post to just the template you define.\n\n```php\nadd_action( 'init', function() {\n\t$post_type_object = get_post_type_object( 'post' );\n\t$post_type_object->template = array(\n\t\tarray( 'core\/image' ),\n\t\tarray( 'core\/heading' )\n\t);\n} );\n```\n\n## Using parent, ancestor and children relationships in blocks\n\nA common pattern for using InnerBlocks is to create a custom block that will only be available if its parent block is inserted. This allows builders to establish a relationship between blocks, while limiting a nested block's discoverability. There are three relationships that builders can use: `parent`, `ancestor` and `allowedBlocks`. The differences are:\n\n- If you assign a `parent` then you\u2019re stating that the nested block can only be used and inserted as a __direct descendant of the parent__.\n- If you assign an `ancestor` then you\u2019re stating that the nested block can only be used and inserted as a __descendent of the parent__.\n- If you assign the `allowedBlocks` then you\u2019re stating a relationship in the opposite direction, i.e., which blocks can be used and inserted as __direct descendants of this block__.\n\nThe key difference between `parent` and `ancestor` is `parent` has finer specificity, while an `ancestor` has greater flexibility in its nested hierarchy.\n\n### Defining parent block relationship\n\nAn example of this is the Column block, which is assigned the `parent` block setting. This allows the Column block to only be available as a nested direct descendant in its parent Columns block. Otherwise, the Column block will not be available as an option within the block inserter. See [Column code for reference](https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/block-library\/src\/column).\n\nWhen defining a direct descendent block, use the `parent` block setting to define which block is the parent. This prevents the nested block from showing in the inserter outside of the InnerBlock it is defined for.\n\n```json\n{\n\t\"title\": \"Column\",\n\t\"name\": \"core\/column\",\n\t\"parent\": [ \"core\/columns\" ],\n\t\/\/ ...\n}\n```\n\n### Defining an ancestor block relationship\n\nAn example of this is the Comment Author Name block, which is assigned the `ancestor` block setting. This allows the Comment Author Name block to only be available as a nested descendant in its ancestral Comment Template block. Otherwise, the Comment Author Name block will not be available as an option within the block inserter. See [Comment Author Name code for reference](https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/block-library\/src\/comment-author-name).\n\nThe `ancestor` relationship allows the Comment Author Name block to be anywhere in the hierarchical tree, and not _just_ a direct child of the parent Comment Template block, while still limiting its availability within the block inserter to only be visible an an option to insert if the Comment Template block is available.\n\nWhen defining a descendent block, use the `ancestor` block setting. This prevents the nested block from showing in the inserter outside of the InnerBlock it is defined for.\n\n```json\n{\n\t\"title\": \"Comment Author Name\",\n\t\"name\": \"core\/comment-author-name\",\n\t\"ancestor\": [ \"core\/comment-template\" ],\n\t\/\/ ...\n}\n```\n\n### Defining a children block relationship\n\nAn example of this is the Navigation block, which is assigned the `allowedBlocks` block setting. This makes only a certain subset of block types to be available as direct descendants of the Navigation block. See [Navigation code for reference](https:\/\/github.com\/WordPress\/gutenberg\/tree\/HEAD\/packages\/block-library\/src\/navigation).\n\nThe `allowedBlocks` setting can be extended by builders of custom blocks. The custom block can hook into the `blocks.registerBlockType` filter and add itself to the available children of the Navigation.\n\nWhen defining a set of possible descendant blocks, use the `allowedBlocks` block setting. This limits what blocks are showing in the inserter when inserting a new child block.\n\n```json\n{\n\t\"title\": \"Navigation\",\n\t\"name\": \"core\/navigation\",\n\t\"allowedBlocks\": [ \"core\/navigation-link\", \"core\/search\", \"core\/social-links\", \"core\/page-list\", \"core\/spacer\" ],\n\t\/\/ ...\n}\n```\n\n## Using a React hook\n\nYou can use a react hook called `useInnerBlocksProps` instead of the `InnerBlocks` component. This hook allows you to take more control over the markup of inner blocks areas.\n\nThe `useInnerBlocksProps` is exported from the `@wordpress\/block-editor` package same as the `InnerBlocks` component itself and supports everything the component does. It also works like the `useBlockProps` hook.\n\nHere is the basic `useInnerBlocksProps` hook usage.\n\n\n\n```js\nimport { registerBlockType } from '@wordpress\/blocks';\nimport { useBlockProps, useInnerBlocksProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'gutenberg-examples\/example-06', {\n\t\/\/ ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\t\tconst innerBlocksProps = useInnerBlocksProps();\n\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<div {...innerBlocksProps} \/>\n\t\t\t<\/div>\n\t\t);\n\t},\n\n\tsave: () => {\n\t\tconst blockProps = useBlockProps.save();\n\t\tconst innerBlocksProps = useInnerBlocksProps.save();\n\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<div {...innerBlocksProps} \/>\n\t\t\t<\/div>\n\t\t);\n\t},\n} );\n```\n\nThis hook can also pass objects returned from the `useBlockProps` hook to the `useInnerBlocksProps` hook. This reduces the number of elements we need to create.\n\n\n\n```js\nimport { registerBlockType } from '@wordpress\/blocks';\nimport { useBlockProps, useInnerBlocksProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'gutenberg-examples\/example-06', {\n\t\/\/ ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\t\tconst innerBlocksProps = useInnerBlocksProps( blockProps );\n\n\t\treturn (\n\t\t\t<div {...innerBlocksProps} \/>\n\t\t);\n\t},\n\n\tsave: () => {\n\t\tconst blockProps = useBlockProps.save();\n\t\tconst innerBlocksProps = useInnerBlocksProps.save( blockProps );\n\n\t\treturn (\n\t\t\t<div {...innerBlocksProps} \/>\n\t\t);\n\t},\n} );\n```\n\n\nThe above code will render to the following markup in the editor:\n\n```html\n<div>\n\t<!-- Inner Blocks get inserted here -->\n<\/div>\n```\n\nAnother benefit to using the hook approach is using the returned value, which is just an object, and deconstruct to get the react children from the object. This property contains the actual child inner blocks thus we can place elements on the same level as our inner blocks.\n\n\n```js\nimport { registerBlockType } from '@wordpress\/blocks';\nimport { useBlockProps, useInnerBlocksProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'gutenberg-examples\/example-06', {\n\t\/\/ ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\t\tconst { children, ...innerBlocksProps } = useInnerBlocksProps( blockProps );\n\n\t\treturn (\n\t\t\t<div {...innerBlocksProps}>\n    \t\t\t{ children }\n\t\t\t\t<!-- Insert any arbitrary html here at the same level as the children -->\n\t\t\t<\/div>\n\t\t);\n\t},\n\n\t\/\/ ...\n} );\n```\n\n\n```html\n<div>\n\t<!-- Inner Blocks get inserted here -->\n\t<!-- The custom html gets rendered on the same level -->\n<\/div>\n```\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/block-tutorial\/extending-the-query-loop-block.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Extending the Query Loop block<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Query Loop block is a powerful tool that allows users to cycle through a determined list of posts and display a certain set of blocks that will inherit the context of each of the posts in the list. For example, it can be set to cycle through all the posts of a certain category and for each of those posts display their featured image. And much more, of course!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But precisely because the Query Loop block is so powerful and allows for great customization, it can also be daunting. Most users wouldn't want to be presented with the full capabilities of the Query Loop block, as most users wouldn't be familiar with the concept of a \u201cquery\u201d and its associated technical terms. Instead, most users will likely appreciate a pre-set version of the block, with fewer settings to adjust and clearer naming. The Post List variation offered by default is a good example of this practice: the user will be using the Query Loop block without being exposed to its technicalities, and will also be more likely to discover and understand the purpose of the block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the same manner, a lot of extenders might need a way to present bespoke versions of the block, with their own presets, additional settings and without customization options which are irrelevant to their use-case (often, for example, their custom post type). The Query Loop block offers very powerful ways to create such variations.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Extending the block with variations<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>By registering your own block variation with some specific Query Loop block settings, you can have finer control over how it is presented, while still being able to use the full capabilities which the Query Loop block offers underneath. If you are not familiar with block variations, learn more about them <a href=\"\/docs\/reference-guides\/block-api\/block-variations.md\">here<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With the block variations API you can provide the default settings that make the most sense for your use-case.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let's go on a journey, for example, of setting up a variation for a plugin which registers a <code>book<\/code> <a href=\"https:\/\/developer.wordpress.org\/plugins\/post-types\/\">custom post type<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Offer sensible defaults<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Your first step would be to create a variation which will be set up in such a way to provide a block variation which will display by default a list of books instead of blog posts. The full variation code will look something like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const MY_VARIATION_NAME = 'my-plugin\/books-list';\n\nregisterBlockVariation( 'core\/query', {\n\tname: MY_VARIATION_NAME,\n\ttitle: 'Books List',\n\tdescription: 'Displays a list of books',\n\tisActive: ( { namespace, query } ) => {\n\t\treturn (\n\t\t\tnamespace === MY_VARIATION_NAME\n\t\t\t&amp;&amp; query.postType === 'book'\n\t\t);\n\t},\n\ticon: \/** An SVG icon can go here*\/,\n\tattributes: {\n\t\tnamespace: MY_VARIATION_NAME,\n\t\tquery: {\n\t\t\tperPage: 6,\n\t\t\tpages: 0,\n\t\t\toffset: 0,\n\t\t\tpostType: 'book',\n\t\t\torder: 'desc',\n\t\t\torderBy: 'date',\n\t\t\tauthor: '',\n\t\t\tsearch: '',\n\t\t\texclude: &#91;],\n\t\t\tsticky: '',\n\t\t\tinherit: false,\n\t\t},\n\t},\n\tscope: &#91; 'inserter' ],\n\t}\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If that sounds like a lot, don't fret, let's go through each of the properties here and see why they are there and what they are doing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Essentially, you would start with something like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>registerBlockVariation( 'core\/query', {\n\tname: 'my-plugin\/books-list',\n\tattributes: {\n\t\tquery: {\n\t\t\t\/** ...more query settings if needed *\/\n\t\t\tpostType: 'book',\n\t\t},\n\t},\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In this way, the users won't have to choose the custom <code>postType<\/code> from the dropdown, and be already presented with the correct configuration. However, you might ask, how is a user going to find and insert this variation? Good question! To enable this, you should add:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\/** ...variation properties *\/\n\tscope: &#91; 'inserter' ],\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In this way, your block will show up just like any other block while the user is in the editor and searching for it. At this point you might also want to add a custom icon, title and description to your variation, just like so:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\/** ...variation properties *\/\n\ttitle: 'Books List',\n\tdescription: 'Displays a list of books',\n\ticon: \/* Your svg icon here *\/,\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>At this point, your custom variation will be virtually indistinguishable from a stand-alone block. Completely branded to your plugin, easy to discover and directly available to the user as a drop in.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Customize your variation layout<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Please note that the Query Loop block supports <code>'block'<\/code> as a string in the <code>scope<\/code> property. In theory, that's to allow the variation to be picked up after inserting the block itself. Read more about the Block Variation Picker <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/block-variation-picker\/README.md\">here<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>However, it is <strong>unadvisable<\/strong> to use this currently, this is due to the Query Loop setup with patterns and <code>scope: [ 'block' ]<\/code> variations, all of the selected pattern's attributes will be used except for <code>postType<\/code> and <code>inherit<\/code> query properties, which will likely lead to conflicts and non-functional variations.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To circumvent this, there two routes, the first one is to add your default <code>innerBlocks<\/code>, like so:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>innerBlocks: &#91;\n\t&#91;\n\t\t'core\/post-template',\n\t\t{},\n\t\t&#91; &#91; 'core\/post-title' ], &#91; 'core\/post-excerpt' ] ],\n\t],\n\t&#91; 'core\/query-pagination' ],\n\t&#91; 'core\/query-no-results' ],\n],\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>By having <code>innerBlocks<\/code> in your variation you essentially skip the setup phase of Query Loop block with suggested patterns and the block is inserted with these inner blocks as its starting content.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The other way would be to register patterns specific to your variation, which are going to be suggested in the setup, and replace flows of the block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The Query Loop block determines if there is an active variation of itself and if there are specific patterns available for this variation. If there are, these patterns are going to be the only ones suggested to the user, without including the default ones for the original Query Loop block. Otherwise, if there are no such patterns, the default ones are going to be suggested.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order for a pattern to be \u201cconnected\u201d with a Query Loop variation, you should add the name of your variation prefixed with the Query Loop name (e.g. <code>core\/query\/$variation_name<\/code>) to the pattern's <code>blockTypes<\/code> property. For more details about registering patterns <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-patterns\/\">see here<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you have not provided <code>innerBlocks<\/code> in your variation, there is also a way to suggest \u201cconnected\u201d variations when the user selects <code>Start blank<\/code> in the setup phase. This is handled in a similar fashion with \u201cconnected\u201d patterns, by checking if there is an active variation of Query Loop and if there are any connected variations to suggest.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order for a variation to be connected to another Query Loop variation we need to define the <code>scope<\/code> attribute with <code>['block']<\/code> as value and the <code>namespace<\/code> attribute defined as an array. This array should contain the names(<code>name<\/code> property) of any variations they want to be connected to.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, if we have a Query Loop variation exposed to the inserter(<code>scope: ['inserter']<\/code>) with the name <code>products<\/code>, we can connect a scoped <code>block<\/code> variation by setting its <code>namespace<\/code> attribute to <code>['products']<\/code>. If the user selects this variation after having clicked <code>Start blank<\/code>, the namespace attribute will be overridden by the main inserter variation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Making Gutenberg recognize your variation<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There is one slight problem you might have realized after implementing this variation: while it is transparent to the user as they are inserting it, Gutenberg will still recognize the variation as a Query Loop block at its core and so, after its insertion, it will show up as a Query Loop block in the tree view of the editor, for instance.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We need a way to tell the editor that this block is indeed your specific variation. This is what the <code>isActive<\/code> property is made for: it's a way to determine whether a certain variation is active based on the block's attributes. You could use it like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\/** ...variation properties *\/\n\tisActive: ( { namespace, query } ) => {\n\t\treturn (\n\t\t\tnamespace === MY_VARIATION_NAME\n\t\t\t&amp;&amp; query.postType === 'book'\n\t\t);\n\t},\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You might be tempted to only compare the <code>postType<\/code> so that Gutenberg will recognize the block as your variation any time the <code>postType<\/code> matches <code>book<\/code>. This casts a net too wide, however, as other plugins might want to publish variations based on the <code>book<\/code> post type too, or we might just not want the variation to be recognized every time the user sets the type to <code>book<\/code> manually through the editor settings.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That's why the Query Loop block exposes a special attribute called <code>namespace<\/code>. It really doesn't do anything inside the block implementation, and it's used as an easy and consistent way for extenders to recognize and scope their own variation. In addition, <code>isActive<\/code> also accepts just an array of strings with the attributes to compare. Often, <code>namespace<\/code> would be sufficient, so you would use it like so:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\/** ...variation properties *\/\n\tattributes: {\n\t\t\/** ...variation attributes *\/\n\t\tnamespace: 'my-plugin\/books-list',\n\t},\n\tisActive: &#91; 'namespace' ],\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Like so, Gutenberg will know that it is your specific variation only in the case it matches your custom namespace! So convenient!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Extending the query<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Even with all of this, your custom post type might have unique requirements: it might support certain custom attributes that you might want to filter and query for, or some other query parameters might be irrelevant or even completely unsupported! We have build the Query Loop block with such use-cases in mind, so let's see how you can solve this problem.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Disabling irrelevant or unsupported query controls<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let's say you don't use at all the <code>sticky<\/code> attribute in your books, so that would be totally irrelevant to the customization of your block. In order to not confuse the users as to what a setting might do, and only exposing a clear UX to them, we want this control to be unavailable. Furthermore, let's say that you don't use the <code>author<\/code> field at all, which generally indicates the person who has added that post to the database, instead you use a custom <code>bookAuthor<\/code> field. As such, not only keeping the <code>author<\/code> filter would be confusing, it would outright \u201cbreak\u201d your query.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For this reason, the Query Loop block variations support a property called <code>allowedControls<\/code>, which accepts an array of keys of the controls we want to display on the inspector sidebar. By default, we accept all the controls, but as soon as we provide an array to this property, we want to specify only the controls which are going to be relevant for us!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As of Gutenberg version 14.2, the following controls are available:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>inherit<\/code> - Shows the toggle switch for allowing the query to be inherited directly from the template.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>postType<\/code> - Shows a dropdown of available post types.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>order<\/code> - Shows a dropdown to select the order of the query.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>sticky<\/code> - Shows a dropdown to select how to handle sticky posts.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>taxQuery<\/code> - Shows available taxonomies filters for the currently selected post type.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>author<\/code> - Shows an input field to filter the query by author.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>search<\/code> - Shows an input filed to filter the query by keywords.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>In our case, the property would look like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\/** ...variation properties *\/\n\tallowedControls: &#91; 'inherit', 'order', 'taxQuery', 'search' ],\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If you want to hide all the above available controls, you can set an empty array as a value of <code>allowedControls<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Notice that we have also disabled the <code>postType<\/code> control. When the user selects our variation, why show them a confusing dropdown to change the post type? On top of that it might break the block as we can implement custom controls, as we'll see shortly.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Adding additional controls<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Because our plugin uses custom attributes that we need to query, we want to add our own controls to allow the users to select those instead of the ones we have just disabled from the core inspector controls. We can do this via a <a href=\"https:\/\/reactjs.org\/docs\/higher-order-components.html\">React HOC<\/a> hooked into a <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/filters\/block-filters\/\">block filter<\/a>, like so:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { InspectorControls } from '@wordpress\/block-editor';\n\nexport const withBookQueryControls = ( BlockEdit ) => ( props ) => {\n\t\/\/ We only want to add these controls if it is our variation,\n\t\/\/ so here we can implement a custom logic to check for that, similar\n\t\/\/ to the `isActive` function described above.\n\t\/\/ The following assumes that you wrote a custom `isMyBooksVariation`\n\t\/\/ function to handle that.\n\treturn isMyBooksVariation( props ) ? (\n\t\t&lt;>\n\t\t\t<blockedit key=\"edit\" {=\"\" ...props=\"\" }=\"\">\n\t\t\t<inspectorcontrols>\n\t\t\t\t<bookauthorselector> { \/** Our custom component *\/ }\n\t\t\t<\/bookauthorselector><\/inspectorcontrols>\n\t\t\n\t) : (\n\t\t<blockedit key=\"edit\" {=\"\" ...props=\"\" }=\"\">\n\t);\n};\n\naddFilter( 'editor.BlockEdit', 'core\/query', withBookQueryControls );\n<\/blockedit><\/blockedit><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Of course, you'll be responsible for implementing the logic of your control (you might want to take a look at <a href=\"https:\/\/www.npmjs.com\/package\/@wordpress\/components\"><code>@wordpress\/components<\/code><\/a> to make your controls fit seamlessly within the Gutenberg UI). Any extra parameter you assign within the <code>query<\/code> object inside the blocks attributes can be used to create a custom query according to your needs, with a little extra effort.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Currently, you'll likely have to implement slightly different paths to make the query behave correctly both on the front-end side (i.e. on the end user's side) and to show the correct preview on the editor side.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\/** ...variation properties *\/\n\tattributes: {\n\t\t\/** ...variation attributes *\/\n\t\tquery: {\n\t\t\t\/** ...more query settings if needed *\/\n\t\t\tpostType: 'book',\n\t\t\t\/** Our custom query parameter *\/\n\t\t\tbookAuthor: 'J. R. R. Tolkien'\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Making your custom query work on the front-end side<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Query Loop block functions mainly through the Post Template block which receives the attributes and builds the query from there. Other first-class children of the Query Loop block (such as the Pagination block) behave in the same way. They build their query and then expose the result via the filter <a href=\"https:\/\/developer.wordpress.org\/reference\/hooks\/query_loop_block_query_vars\/\"><code>query_loop_block_query_vars<\/code><\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can hook into that filter and modify your query accordingly. Just make sure you don't cause side-effects to other Query Loop blocks by at least checking that you apply the filter only to your variation!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>if( 'my-plugin\/books-list' === $block&#91; 'attrs' ]&#91; 'namespace' ] ) {\n\tadd_filter(\n\t\t'query_loop_block_query_vars',\n\t\tfunction( $query ) {\n\t\t\t\/** You can read your block custom query parameters here and build your query *\/\n\t\t},\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>(In the code above, we assume you have some way to access the block, for example within a <a href=\"https:\/\/developer.wordpress.org\/reference\/hooks\/pre_render_block\/\"><code>pre_render_block<\/code><\/a> filter, but the specific solution can be different depending on the use-case, so this is not a firm recommendation).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Making your custom query work on the editor side<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To finish up our custom variation, we might want the editor to react to changes in our custom query and display an appropriate preview accordingly. This is not required for a functioning block, but it enables a fully integrated user experience for the consumers of your block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The Query Loop block fetches its posts to show the preview using the <a href=\"https:\/\/developer.wordpress.org\/rest-api\/\">WordPress REST API<\/a>. Any extra parameter added to the <code>query<\/code> object will be passed as a query argument to the API. This means that these extra parameters should be either supported by the REST API, or be handled by custom filters such as the <a href=\"https:\/\/developer.wordpress.org\/reference\/hooks\/rest_this-post_type_query\/\"><code>rest_{$this->post_type}_query<\/code><\/a> filter which allows you to hook into any API request for your custom post type. Like so:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_filter(\n\t'rest_book_query',\n\tfunction( $args, $request ) {\n\t\t\/** We can access our custom parameters from here *\/\n\t\t$book_author = $request->get_param( 'bookAuthor' );\n\t\t\/** ...your custom query logic *\/\n\t}\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>And, just like that, you'll have created a fully functional variation of the Query Loop block!<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Extending the Query Loop block\n\nThe Query Loop block is a powerful tool that allows users to cycle through a determined list of posts and display a certain set of blocks that will inherit the context of each of the posts in the list. For example, it can be set to cycle through all the posts of a certain category and for each of those posts display their featured image. And much more, of course!\n\nBut precisely because the Query Loop block is so powerful and allows for great customization, it can also be daunting. Most users wouldn't want to be presented with the full capabilities of the Query Loop block, as most users wouldn't be familiar with the concept of a \u201cquery\u201d and its associated technical terms. Instead, most users will likely appreciate a pre-set version of the block, with fewer settings to adjust and clearer naming. The Post List variation offered by default is a good example of this practice: the user will be using the Query Loop block without being exposed to its technicalities, and will also be more likely to discover and understand the purpose of the block.\n\nIn the same manner, a lot of extenders might need a way to present bespoke versions of the block, with their own presets, additional settings and without customization options which are irrelevant to their use-case (often, for example, their custom post type). The Query Loop block offers very powerful ways to create such variations.\n\n## Extending the block with variations\n\nBy registering your own block variation with some specific Query Loop block settings, you can have finer control over how it is presented, while still being able to use the full capabilities which the Query Loop block offers underneath. If you are not familiar with block variations, learn more about them [here](\/docs\/reference-guides\/block-api\/block-variations.md).\n\nWith the block variations API you can provide the default settings that make the most sense for your use-case.\n\nLet's go on a journey, for example, of setting up a variation for a plugin which registers a `book` [custom post type](https:\/\/developer.wordpress.org\/plugins\/post-types\/).\n\n### Offer sensible defaults\n\nYour first step would be to create a variation which will be set up in such a way to provide a block variation which will display by default a list of books instead of blog posts. The full variation code will look something like this:\n\n```js\nconst MY_VARIATION_NAME = 'my-plugin\/books-list';\n\nregisterBlockVariation( 'core\/query', {\n\tname: MY_VARIATION_NAME,\n\ttitle: 'Books List',\n\tdescription: 'Displays a list of books',\n\tisActive: ( { namespace, query } ) => {\n\t\treturn (\n\t\t\tnamespace === MY_VARIATION_NAME\n\t\t\t&& query.postType === 'book'\n\t\t);\n\t},\n\ticon: \/** An SVG icon can go here*\/,\n\tattributes: {\n\t\tnamespace: MY_VARIATION_NAME,\n\t\tquery: {\n\t\t\tperPage: 6,\n\t\t\tpages: 0,\n\t\t\toffset: 0,\n\t\t\tpostType: 'book',\n\t\t\torder: 'desc',\n\t\t\torderBy: 'date',\n\t\t\tauthor: '',\n\t\t\tsearch: '',\n\t\t\texclude: [],\n\t\t\tsticky: '',\n\t\t\tinherit: false,\n\t\t},\n\t},\n\tscope: [ 'inserter' ],\n\t}\n);\n```\n\nIf that sounds like a lot, don't fret, let's go through each of the properties here and see why they are there and what they are doing.\n\nEssentially, you would start with something like this:\n\n```js\nregisterBlockVariation( 'core\/query', {\n\tname: 'my-plugin\/books-list',\n\tattributes: {\n\t\tquery: {\n\t\t\t\/** ...more query settings if needed *\/\n\t\t\tpostType: 'book',\n\t\t},\n\t},\n} );\n```\n\nIn this way, the users won't have to choose the custom `postType` from the dropdown, and be already presented with the correct configuration. However, you might ask, how is a user going to find and insert this variation? Good question! To enable this, you should add:\n\n```js\n{\n\t\/** ...variation properties *\/\n\tscope: [ 'inserter' ],\n}\n```\n\nIn this way, your block will show up just like any other block while the user is in the editor and searching for it. At this point you might also want to add a custom icon, title and description to your variation, just like so:\n\n```js\n{\n\t\/** ...variation properties *\/\n\ttitle: 'Books List',\n\tdescription: 'Displays a list of books',\n\ticon: \/* Your svg icon here *\/,\n}\n```\n\nAt this point, your custom variation will be virtually indistinguishable from a stand-alone block. Completely branded to your plugin, easy to discover and directly available to the user as a drop in.\n\n### Customize your variation layout\n\nPlease note that the Query Loop block supports `'block'` as a string in the `scope` property. In theory, that's to allow the variation to be picked up after inserting the block itself. Read more about the Block Variation Picker [here](https:\/\/github.com\/WordPress\/gutenberg\/blob\/HEAD\/packages\/block-editor\/src\/components\/block-variation-picker\/README.md).\n\nHowever, it is **unadvisable** to use this currently, this is due to the Query Loop setup with patterns and `scope: [ 'block' ]` variations, all of the selected pattern's attributes will be used except for `postType` and `inherit` query properties, which will likely lead to conflicts and non-functional variations.\n\nTo circumvent this, there two routes, the first one is to add your default `innerBlocks`, like so:\n\n```js\ninnerBlocks: [\n\t[\n\t\t'core\/post-template',\n\t\t{},\n\t\t[ [ 'core\/post-title' ], [ 'core\/post-excerpt' ] ],\n\t],\n\t[ 'core\/query-pagination' ],\n\t[ 'core\/query-no-results' ],\n],\n```\n\nBy having `innerBlocks` in your variation you essentially skip the setup phase of Query Loop block with suggested patterns and the block is inserted with these inner blocks as its starting content.\n\nThe other way would be to register patterns specific to your variation, which are going to be suggested in the setup, and replace flows of the block.\n\nThe Query Loop block determines if there is an active variation of itself and if there are specific patterns available for this variation. If there are, these patterns are going to be the only ones suggested to the user, without including the default ones for the original Query Loop block. Otherwise, if there are no such patterns, the default ones are going to be suggested.\n\nIn order for a pattern to be \u201cconnected\u201d with a Query Loop variation, you should add the name of your variation prefixed with the Query Loop name (e.g. `core\/query\/$variation_name`) to the pattern's `blockTypes` property. For more details about registering patterns [see here](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-patterns\/).\n\nIf you have not provided `innerBlocks` in your variation, there is also a way to suggest \u201cconnected\u201d variations when the user selects `Start blank` in the setup phase. This is handled in a similar fashion with \u201cconnected\u201d patterns, by checking if there is an active variation of Query Loop and if there are any connected variations to suggest.\n\nIn order for a variation to be connected to another Query Loop variation we need to define the `scope` attribute with `['block']` as value and the `namespace` attribute defined as an array. This array should contain the names(`name` property) of any variations they want to be connected to.\n\nFor example, if we have a Query Loop variation exposed to the inserter(`scope: ['inserter']`) with the name `products`, we can connect a scoped `block` variation by setting its `namespace` attribute to `['products']`. If the user selects this variation after having clicked `Start blank`, the namespace attribute will be overridden by the main inserter variation.\n\n### Making Gutenberg recognize your variation\n\nThere is one slight problem you might have realized after implementing this variation: while it is transparent to the user as they are inserting it, Gutenberg will still recognize the variation as a Query Loop block at its core and so, after its insertion, it will show up as a Query Loop block in the tree view of the editor, for instance.\n\nWe need a way to tell the editor that this block is indeed your specific variation. This is what the `isActive` property is made for: it's a way to determine whether a certain variation is active based on the block's attributes. You could use it like this:\n\n```js\n{\n\t\/** ...variation properties *\/\n\tisActive: ( { namespace, query } ) => {\n\t\treturn (\n\t\t\tnamespace === MY_VARIATION_NAME\n\t\t\t&& query.postType === 'book'\n\t\t);\n\t},\n}\n```\n\nYou might be tempted to only compare the `postType` so that Gutenberg will recognize the block as your variation any time the `postType` matches `book`. This casts a net too wide, however, as other plugins might want to publish variations based on the `book` post type too, or we might just not want the variation to be recognized every time the user sets the type to `book` manually through the editor settings.\n\nThat's why the Query Loop block exposes a special attribute called `namespace`. It really doesn't do anything inside the block implementation, and it's used as an easy and consistent way for extenders to recognize and scope their own variation. In addition, `isActive` also accepts just an array of strings with the attributes to compare. Often, `namespace` would be sufficient, so you would use it like so:\n\n```js\n{\n\t\/** ...variation properties *\/\n\tattributes: {\n\t\t\/** ...variation attributes *\/\n\t\tnamespace: 'my-plugin\/books-list',\n\t},\n\tisActive: [ 'namespace' ],\n}\n```\n\nLike so, Gutenberg will know that it is your specific variation only in the case it matches your custom namespace! So convenient!\n\n## Extending the query\n\nEven with all of this, your custom post type might have unique requirements: it might support certain custom attributes that you might want to filter and query for, or some other query parameters might be irrelevant or even completely unsupported! We have build the Query Loop block with such use-cases in mind, so let's see how you can solve this problem.\n\n### Disabling irrelevant or unsupported query controls\n\nLet's say you don't use at all the `sticky` attribute in your books, so that would be totally irrelevant to the customization of your block. In order to not confuse the users as to what a setting might do, and only exposing a clear UX to them, we want this control to be unavailable. Furthermore, let's say that you don't use the `author` field at all, which generally indicates the person who has added that post to the database, instead you use a custom `bookAuthor` field. As such, not only keeping the `author` filter would be confusing, it would outright \u201cbreak\u201d your query.\n\nFor this reason, the Query Loop block variations support a property called `allowedControls`, which accepts an array of keys of the controls we want to display on the inspector sidebar. By default, we accept all the controls, but as soon as we provide an array to this property, we want to specify only the controls which are going to be relevant for us!\n\nAs of Gutenberg version 14.2, the following controls are available:\n\n-   `inherit` - Shows the toggle switch for allowing the query to be inherited directly from the template.\n-   `postType` - Shows a dropdown of available post types.\n-   `order` - Shows a dropdown to select the order of the query.\n-   `sticky` - Shows a dropdown to select how to handle sticky posts.\n-   `taxQuery` - Shows available taxonomies filters for the currently selected post type.\n-   `author` - Shows an input field to filter the query by author.\n-   `search` - Shows an input filed to filter the query by keywords.\n\nIn our case, the property would look like this:\n\n```js\n{\n\t\/** ...variation properties *\/\n\tallowedControls: [ 'inherit', 'order', 'taxQuery', 'search' ],\n}\n```\n\nIf you want to hide all the above available controls, you can set an empty array as a value of `allowedControls`.\n\nNotice that we have also disabled the `postType` control. When the user selects our variation, why show them a confusing dropdown to change the post type? On top of that it might break the block as we can implement custom controls, as we'll see shortly.\n\n### Adding additional controls\n\nBecause our plugin uses custom attributes that we need to query, we want to add our own controls to allow the users to select those instead of the ones we have just disabled from the core inspector controls. We can do this via a [React HOC](https:\/\/reactjs.org\/docs\/higher-order-components.html) hooked into a [block filter](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/filters\/block-filters\/), like so:\n\n```jsx\nimport { InspectorControls } from '@wordpress\/block-editor';\n\nexport const withBookQueryControls = ( BlockEdit ) => ( props ) => {\n\t\/\/ We only want to add these controls if it is our variation,\n\t\/\/ so here we can implement a custom logic to check for that, similar\n\t\/\/ to the `isActive` function described above.\n\t\/\/ The following assumes that you wrote a custom `isMyBooksVariation`\n\t\/\/ function to handle that.\n\treturn isMyBooksVariation( props ) ? (\n\t\t<>\n\t\t\t<BlockEdit key=\"edit\" { ...props } \/>\n\t\t\t<InspectorControls>\n\t\t\t\t<BookAuthorSelector \/> { \/** Our custom component *\/ }\n\t\t\t<\/InspectorControls>\n\t\t<\/>\n\t) : (\n\t\t<BlockEdit key=\"edit\" { ...props } \/>\n\t);\n};\n\naddFilter( 'editor.BlockEdit', 'core\/query', withBookQueryControls );\n```\n\nOf course, you'll be responsible for implementing the logic of your control (you might want to take a look at [`@wordpress\/components`](https:\/\/www.npmjs.com\/package\/@wordpress\/components) to make your controls fit seamlessly within the Gutenberg UI). Any extra parameter you assign within the `query` object inside the blocks attributes can be used to create a custom query according to your needs, with a little extra effort.\n\nCurrently, you'll likely have to implement slightly different paths to make the query behave correctly both on the front-end side (i.e. on the end user's side) and to show the correct preview on the editor side.\n\n```js\n{\n\t\/** ...variation properties *\/\n\tattributes: {\n\t\t\/** ...variation attributes *\/\n\t\tquery: {\n\t\t\t\/** ...more query settings if needed *\/\n\t\t\tpostType: 'book',\n\t\t\t\/** Our custom query parameter *\/\n\t\t\tbookAuthor: 'J. R. R. Tolkien'\n\t\t}\n\t}\n}\n```\n\n### Making your custom query work on the front-end side\n\nThe Query Loop block functions mainly through the Post Template block which receives the attributes and builds the query from there. Other first-class children of the Query Loop block (such as the Pagination block) behave in the same way. They build their query and then expose the result via the filter [`query_loop_block_query_vars`](https:\/\/developer.wordpress.org\/reference\/hooks\/query_loop_block_query_vars\/).\n\nYou can hook into that filter and modify your query accordingly. Just make sure you don't cause side-effects to other Query Loop blocks by at least checking that you apply the filter only to your variation!\n\n```php\nif( 'my-plugin\/books-list' === $block[ 'attrs' ][ 'namespace' ] ) {\n\tadd_filter(\n\t\t'query_loop_block_query_vars',\n\t\tfunction( $query ) {\n\t\t\t\/** You can read your block custom query parameters here and build your query *\/\n\t\t},\n\t);\n}\n```\n\n(In the code above, we assume you have some way to access the block, for example within a [`pre_render_block`](https:\/\/developer.wordpress.org\/reference\/hooks\/pre_render_block\/) filter, but the specific solution can be different depending on the use-case, so this is not a firm recommendation).\n\n### Making your custom query work on the editor side\n\nTo finish up our custom variation, we might want the editor to react to changes in our custom query and display an appropriate preview accordingly. This is not required for a functioning block, but it enables a fully integrated user experience for the consumers of your block.\n\nThe Query Loop block fetches its posts to show the preview using the [WordPress REST API](https:\/\/developer.wordpress.org\/rest-api\/). Any extra parameter added to the `query` object will be passed as a query argument to the API. This means that these extra parameters should be either supported by the REST API, or be handled by custom filters such as the [`rest_{$this->post_type}_query`](https:\/\/developer.wordpress.org\/reference\/hooks\/rest_this-post_type_query\/) filter which allows you to hook into any API request for your custom post type. Like so:\n\n```php\nadd_filter(\n\t'rest_book_query',\n\tfunction( $args, $request ) {\n\t\t\/** We can access our custom parameters from here *\/\n\t\t$book_author = $request->get_param( 'bookAuthor' );\n\t\t\/** ...your custom query logic *\/\n\t}\n);\n```\n\nAnd, just like that, you'll have created a fully functional variation of the Query Loop block!\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/notices\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Notices<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Notices are informational UI displayed near the top of admin pages. WordPress core, themes, and plugins all use notices to indicate the result of an action, or to draw the user's attention to necessary information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the classic editor, notices hooked onto the <code>admin_notices<\/code> action can render whatever HTML they'd like. In the block editor, notices are restricted to a more formal API.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Notices in the Classic Editor<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In the classic editor, here's an example of the \"Post draft updated\" notice:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/notices\/classic-editor-notice.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Post draft updated in the classic editor<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Producing an equivalent \"Post draft updated\" notice would require code like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * Hook into the 'admin_notices' action to render\n * a generic HTML notice.\n *\/\nfunction myguten_admin_notice() {\n\t$screen = get_current_screen();\n\t\/\/ Only render this notice in the post editor.\n\tif ( ! $screen || 'post' !== $screen->base ) {\n\t\treturn;\n\t}\n\t\/\/ Render the notice's HTML.\n\t\/\/ Each notice should be wrapped in a <div>\n\t\/\/ with a 'notice' class.\n\techo '<div class=\"notice notice-success is-dismissible\"><p>';\n\techo sprintf( __( 'Post draft updated. <a href=\"%s\" target=\"_blank\">Preview post<\/a>' ), get_preview_post_link() );\n\techo '<\/p><\/div>';\n};\nadd_action( 'admin_notices', 'myguten_admin_notice' );\n<\/div><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Importantly, the <code>admin_notices<\/code> hook allows a developer to render whatever HTML they'd like. One advantage is that the developer has a great amount of flexibility. The key disadvantage is that arbitrary HTML makes future iterations on notices more difficult, if not possible, because the iterations need to accommodate for arbitrary HTML. This is why the block editor has a formal API.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Notices in the Block Editor<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In the block editor, here's an example of the \"Post published\" notice:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/notices\/block-editor-notice.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Post published in the block editor<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Producing an equivalent \"Post published\" notice would require code like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>( function ( wp ) {\n\twp.data.dispatch( 'core\/notices' ).createNotice(\n\t\t'success', \/\/ Can be one of: success, info, warning, error.\n\t\t'Post published.', \/\/ Text string to display.\n\t\t{\n\t\t\tisDismissible: true, \/\/ Whether the user can dismiss the notice.\n\t\t\t\/\/ Any actions the user can perform.\n\t\t\tactions: &#91;\n\t\t\t\t{\n\t\t\t\t\turl: '#',\n\t\t\t\t\tlabel: 'View post',\n\t\t\t\t},\n\t\t\t],\n\t\t}\n\t);\n} )( window.wp );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You'll want to use this <em>Notices Data API<\/em> when producing a notice from within the JavaScript application lifecycle.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To better understand the specific code example above:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>wp<\/code> is WordPress global window variable.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.data<\/code> is an object provided by the block editor for accessing the block editor data store.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>wp.data.dispatch('core\/notices')<\/code> accesses functionality registered to the block editor data store by the Notices package.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>createNotice()<\/code> is a function offered by the Notices package to register a new notice. The block editor reads from the notice data store in order to know which notices to display.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Check out the <a href=\"\/docs\/how-to-guides\/javascript\/loading-javascript.md\"><em>Loading JavaScript<\/em><\/a> tutorial for a primer on how to load your custom JavaScript into the block editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Learn more<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The block editor offers a complete API for generating notices. The official documentation is a great place to review what's possible.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For a full list of the available actions and selectors, refer to the <a href=\"\/docs\/reference-guides\/data\/data-core-notices.md\">Notices Data Handbook<\/a> page.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Notices\n\nNotices are informational UI displayed near the top of admin pages. WordPress core, themes, and plugins all use notices to indicate the result of an action, or to draw the user's attention to necessary information.\n\nIn the classic editor, notices hooked onto the `admin_notices` action can render whatever HTML they'd like. In the block editor, notices are restricted to a more formal API.\n\n## Notices in the Classic Editor\n\nIn the classic editor, here's an example of the \"Post draft updated\" notice:\n\n![Post draft updated in the classic editor](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/notices\/classic-editor-notice.png)\n\nProducing an equivalent \"Post draft updated\" notice would require code like this:\n\n```php\n\/**\n * Hook into the 'admin_notices' action to render\n * a generic HTML notice.\n *\/\nfunction myguten_admin_notice() {\n\t$screen = get_current_screen();\n\t\/\/ Only render this notice in the post editor.\n\tif ( ! $screen || 'post' !== $screen->base ) {\n\t\treturn;\n\t}\n\t\/\/ Render the notice's HTML.\n\t\/\/ Each notice should be wrapped in a <div>\n\t\/\/ with a 'notice' class.\n\techo '<div class=\"notice notice-success is-dismissible\"><p>';\n\techo sprintf( __( 'Post draft updated. <a href=\"%s\" target=\"_blank\">Preview post<\/a>' ), get_preview_post_link() );\n\techo '<\/p><\/div>';\n};\nadd_action( 'admin_notices', 'myguten_admin_notice' );\n```\n\nImportantly, the `admin_notices` hook allows a developer to render whatever HTML they'd like. One advantage is that the developer has a great amount of flexibility. The key disadvantage is that arbitrary HTML makes future iterations on notices more difficult, if not possible, because the iterations need to accommodate for arbitrary HTML. This is why the block editor has a formal API.\n\n## Notices in the Block Editor\n\nIn the block editor, here's an example of the \"Post published\" notice:\n\n![Post published in the block editor](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/notices\/block-editor-notice.png)\n\nProducing an equivalent \"Post published\" notice would require code like this:\n\n```js\n( function ( wp ) {\n\twp.data.dispatch( 'core\/notices' ).createNotice(\n\t\t'success', \/\/ Can be one of: success, info, warning, error.\n\t\t'Post published.', \/\/ Text string to display.\n\t\t{\n\t\t\tisDismissible: true, \/\/ Whether the user can dismiss the notice.\n\t\t\t\/\/ Any actions the user can perform.\n\t\t\tactions: [\n\t\t\t\t{\n\t\t\t\t\turl: '#',\n\t\t\t\t\tlabel: 'View post',\n\t\t\t\t},\n\t\t\t],\n\t\t}\n\t);\n} )( window.wp );\n```\n\nYou'll want to use this _Notices Data API_ when producing a notice from within the JavaScript application lifecycle.\n\nTo better understand the specific code example above:\n\n-   `wp` is WordPress global window variable.\n-   `wp.data` is an object provided by the block editor for accessing the block editor data store.\n-   `wp.data.dispatch('core\/notices')` accesses functionality registered to the block editor data store by the Notices package.\n-   `createNotice()` is a function offered by the Notices package to register a new notice. The block editor reads from the notice data store in order to know which notices to display.\n\nCheck out the [_Loading JavaScript_](\/docs\/how-to-guides\/javascript\/loading-javascript.md) tutorial for a primer on how to load your custom JavaScript into the block editor.\n\n## Learn more\n\nThe block editor offers a complete API for generating notices. The official documentation is a great place to review what's possible.\n\nFor a full list of the available actions and selectors, refer to the [Notices Data Handbook](\/docs\/reference-guides\/data\/data-core-notices.md) page.\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/curating-the-editor-experience\/block-locking.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Block Locking API<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Block Locking API allows you to restrict actions on specific blocks within the Editor. This API can be used to prevent users from moving, removing, or editing certain blocks, ensuring layout consistency and content integrity.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Lock the ability to move or remove specific blocks<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Users can lock and unlock blocks via the Editor. The locking UI has options for preventing blocks from being moved within the content canvas or removed:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/Locking%20interface.png?raw=true\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Image of locking interface<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Keep in mind that you can apply locking options to blocks nested inside of a containing block by turning on the \"Apply to all blocks inside\" option. However, you cannot mass lock blocks otherwise.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Lock the ability to edit certain blocks<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Alongside the ability to lock moving or removing blocks, the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/pull\/44739\">Navigation Block<\/a> and <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/pull\/39950\">Reusable block<\/a> have an additional capability: lock the ability to edit the contents of the block. This locks the ability to make changes to any blocks inside of either block type.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Apply block locking to patterns or templates<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When building patterns or templates, theme authors can use these same UI tools to set the default locked state of blocks. For example, a theme author could lock various pieces of a header. Keep in mind that by default, users with editing access can unlock these blocks. <a href=\"https:\/\/gist.github.com\/annezazu\/acee30f8b6e8995e1b1a52796e6ef805\">Here\u2019s an example of a pattern<\/a> with various blocks locked in different ways and here\u2019s more context on <a href=\"https:\/\/make.wordpress.org\/core\/2022\/02\/09\/core-editor-improvement-curated-experiences-with-locking-apis-theme-json\/\">creating a template with locked blocks<\/a>. You can build these patterns in the Editor itself, including adding locking options, before following the <a href=\"\/docs\/reference-guides\/block-api\/block-patterns.md\">documentation to register them<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Apply content-only editing in patterns or templates<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This functionality was introduced in WordPress 6.1. In contrast to block locking, which disables the ability to move or remove blocks, content-only editing is both designed for use at the pattern or template level and hides all design tools, while still allowing for the ability to edit the content of the blocks. This provides a great way to simplify the interface for users and preserve a design. When this option is added, the following changes occur:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Non-content child blocks (containers, spacers, columns, etc) are hidden from list view, un-clickable on the canvas, and entirely un-editable.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The Inspector will display a list of all child 'content' blocks. Clicking a block in this list reveals its settings panel.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The main List View only shows content blocks, all at the same level regardless of actual nesting.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Children blocks within the overall content locked container are automatically move \/ remove locked.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Additional child blocks cannot be inserted, further preserving the design and layout.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>There is a link in the block toolbar to \u2018Modify\u2019 that a user can toggle on\/off to have access to the broader design tools. Currently, it's not possibly to programmatically remove this option.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This option can be applied to Columns, Cover, and Group blocks as well as third-party blocks that have the templateLock attribute in its block.json. To adopt this functionality, you need to use <code>\"templateLock\":\"contentOnly\"<\/code>. <a href=\"https:\/\/gist.github.com\/annezazu\/d62acd2514cea558be6cea97fe28ff3c\">Here's an example of a pattern<\/a> with this functionality in place. For more information, please <a href=\"\/docs\/reference-guides\/block-api\/block-templates.md#locking\">review the relevant documentation<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note: There is no UI in place to manage content locking and it must be managed at the code level.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Change permissions to control locking ability<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Agencies and plugin authors can offer an even more curated experience by limiting which users have <a href=\"https:\/\/make.wordpress.org\/core\/2022\/05\/05\/block-locking-settings-in-wordpress-6-0\/\">permission to lock and unlock blocks<\/a>. By default, anyone who is an administrator will have access to lock and unlock blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Developers can add a filter to the <a href=\"https:\/\/developer.wordpress.org\/reference\/hooks\/block_editor_settings_all\/\">block_editor_settings_all<\/a> hook to configure permissions around locking blocks.  The hook passes two parameters to the callback function:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>$settings<\/code> - An array of configurable settings for the Editor.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>$context<\/code> - An instance of WP_Block_Editor_Context, an object that contains information about the current Editor.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Specifically, developers can alter the <code>$settings['canLockBlocks']<\/code> value by setting it to <code>true<\/code> or <code>false<\/code>, typically by running through one or more conditional checks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following example disables block locking permissions for all users when editing a page:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_filter( 'block_editor_settings_all', function( $settings, $context ) {\n\tif ( $context->post &amp;&amp; 'page' === $context->post->post_type ) {\n\t\t$settings&#91;'canLockBlocks'] = false;\n\t}\n\n\treturn $settings;\n}, 10, 2 );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Another common use case may be to only allow users who can edit the visual design of the site (theme editing) to lock or unlock blocks. Now, the best option would be to test against the <code>edit_theme_options<\/code> capability, as shown in the following code snippet:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_filter( 'block_editor_settings_all', function( $settings ) {\n\t$settings&#91;'canLockBlocks'] = current_user_can( 'edit_theme_options' );\n\n\treturn $settings;\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Developers may use any type of conditional check to determine who can lock\/unlock blocks. This is merely a small sampling of what is possible via the filter hook.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Block Locking API\n\nThe Block Locking API allows you to restrict actions on specific blocks within the Editor. This API can be used to prevent users from moving, removing, or editing certain blocks, ensuring layout consistency and content integrity.\n\n## Lock the ability to move or remove specific blocks\n\nUsers can lock and unlock blocks via the Editor. The locking UI has options for preventing blocks from being moved within the content canvas or removed:\n\n![Image of locking interface](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/Locking%20interface.png?raw=true)\n\nKeep in mind that you can apply locking options to blocks nested inside of a containing block by turning on the \"Apply to all blocks inside\" option. However, you cannot mass lock blocks otherwise.\n\n## Lock the ability to edit certain blocks\n\nAlongside the ability to lock moving or removing blocks, the [Navigation Block](https:\/\/github.com\/WordPress\/gutenberg\/pull\/44739) and [Reusable block](https:\/\/github.com\/WordPress\/gutenberg\/pull\/39950) have an additional capability: lock the ability to edit the contents of the block. This locks the ability to make changes to any blocks inside of either block type. \n\n## Apply block locking to patterns or templates\n\nWhen building patterns or templates, theme authors can use these same UI tools to set the default locked state of blocks. For example, a theme author could lock various pieces of a header. Keep in mind that by default, users with editing access can unlock these blocks. [Here\u2019s an example of a pattern](https:\/\/gist.github.com\/annezazu\/acee30f8b6e8995e1b1a52796e6ef805) with various blocks locked in different ways and here\u2019s more context on [creating a template with locked blocks](https:\/\/make.wordpress.org\/core\/2022\/02\/09\/core-editor-improvement-curated-experiences-with-locking-apis-theme-json\/). You can build these patterns in the Editor itself, including adding locking options, before following the [documentation to register them](\/docs\/reference-guides\/block-api\/block-patterns.md).\n\n## Apply content-only editing in patterns or templates\n\nThis functionality was introduced in WordPress 6.1. In contrast to block locking, which disables the ability to move or remove blocks, content-only editing is both designed for use at the pattern or template level and hides all design tools, while still allowing for the ability to edit the content of the blocks. This provides a great way to simplify the interface for users and preserve a design. When this option is added, the following changes occur:  \n\n- Non-content child blocks (containers, spacers, columns, etc) are hidden from list view, un-clickable on the canvas, and entirely un-editable.\n- The Inspector will display a list of all child 'content' blocks. Clicking a block in this list reveals its settings panel. \n- The main List View only shows content blocks, all at the same level regardless of actual nesting.\n- Children blocks within the overall content locked container are automatically move \/ remove locked.\n- Additional child blocks cannot be inserted, further preserving the design and layout.\n- There is a link in the block toolbar to \u2018Modify\u2019 that a user can toggle on\/off to have access to the broader design tools. Currently, it's not possibly to programmatically remove this option.\n\nThis option can be applied to Columns, Cover, and Group blocks as well as third-party blocks that have the templateLock attribute in its block.json. To adopt this functionality, you need to use `\"templateLock\":\"contentOnly\"`. [Here's an example of a pattern](https:\/\/gist.github.com\/annezazu\/d62acd2514cea558be6cea97fe28ff3c) with this functionality in place. For more information, please [review the relevant documentation](\/docs\/reference-guides\/block-api\/block-templates.md#locking). \n\nNote: There is no UI in place to manage content locking and it must be managed at the code level. \n\n## Change permissions to control locking ability\n\nAgencies and plugin authors can offer an even more curated experience by limiting which users have [permission to lock and unlock blocks](https:\/\/make.wordpress.org\/core\/2022\/05\/05\/block-locking-settings-in-wordpress-6-0\/). By default, anyone who is an administrator will have access to lock and unlock blocks. \n\nDevelopers can add a filter to the [block_editor_settings_all](https:\/\/developer.wordpress.org\/reference\/hooks\/block_editor_settings_all\/) hook to configure permissions around locking blocks.  The hook passes two parameters to the callback function:\n\n- `$settings` - An array of configurable settings for the Editor.\n- `$context` - An instance of WP_Block_Editor_Context, an object that contains information about the current Editor.\n\nSpecifically, developers can alter the `$settings['canLockBlocks']` value by setting it to `true` or `false`, typically by running through one or more conditional checks. \n\nThe following example disables block locking permissions for all users when editing a page:\n\n```php\nadd_filter( 'block_editor_settings_all', function( $settings, $context ) {\n\tif ( $context->post && 'page' === $context->post->post_type ) {\n\t\t$settings['canLockBlocks'] = false;\n\t}\n\n\treturn $settings;\n}, 10, 2 );\n```\n\nAnother common use case may be to only allow users who can edit the visual design of the site (theme editing) to lock or unlock blocks. Now, the best option would be to test against the `edit_theme_options` capability, as shown in the following code snippet:\n\n```php\nadd_filter( 'block_editor_settings_all', function( $settings ) {\n\t$settings['canLockBlocks'] = current_user_can( 'edit_theme_options' );\n\n\treturn $settings;\n} );\n```\n\nDevelopers may use any type of conditional check to determine who can lock\/unlock blocks. This is merely a small sampling of what is possible via the filter hook."
    },
    {
        "path": "\/markdown\/how-to-guides\/curating-the-editor-experience\/patterns.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Patterns<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Block <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-patterns\/\">patterns<\/a> are one of the best ways to provide users with unique and curated editing experiences.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Prioritize starter patterns for any post type<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When a user creates new content, regardless of post type, they are met with an empty canvas. However, that experience can be improved thanks to the option to have patterns from a specific type prioritized upon creation of a new piece of content. The modal appears each time the user creates a new item when there are patterns on their website that declare support for the <code>core\/post-content<\/code> block types. By default, WordPress does not include any of these patterns, so the modal will not appear without at least two of these post content patterns being added.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To opt into this, include <code>core\/post-content<\/code> in the Block Types for your pattern. From there, you can control which post types the pattern should show up for via the Post Types option. Here's an example of a pattern that would appear when creating a new post.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code> \/**\n  * Title: New Event Announcement\n  * Slug: twentytwentytwo\/new-event-announcement\n  * Block Types: core\/post-content\n  * Post Types: post\n  * Categories: featured, text\n  *\/\n?>\n\n\n<h2>Details<\/h2>\n\n\n\n<h2>Directions<\/h2>\n\n\n\n<h2>RSVP<\/h2>\n\n\n\n<p>To RSVP, please join the #fse-outreach-experiment in Make Slack. <\/p>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link wp-element-button\">Learn more<\/a><\/div>\n<\/div>\n\n\n\n<div class=\"wp-block-cover alignfull\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-primary-background-color has-background-dim-80 has-background-dim\"><div class=\"wp-block-cover__inner-container\">\n<p class=\"has-text-align-center has-large-font-size\">We hope to see you there!<\/p>\n<\/div><\/div>\n\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Read more about this functionality in the <a href=\"https:\/\/make.wordpress.org\/core\/2022\/05\/03\/page-creation-patterns-in-wordpress-6-0\/\">Page creation patterns in WordPress 6.0 dev note<\/a> and <a href=\"https:\/\/make.wordpress.org\/core\/2022\/10\/10\/miscellaneous-editor-changes-for-wordpress-6-1\/#start-content-patterns-for-all-post-types\">note that WordPress 6.1 brought this functionality to all post types<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Prioritize starter patterns for template creation<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In the same way patterns can be prioritized for new posts or pages, the same experience can be added to the template creation process. When patterns declare support for the 'templateTypes' property, the patterns will appear anytime a template that matches the designation is created, along with the options to start from a blank state or use the current fallback of the template. By default, WordPress does not include any of these patterns.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To opt into this, a pattern needs to specify a property called <code>templateTypes<\/code>, which is an array containing the templates where the patterns can be used as the full content. Here's an example of a pattern that would appear when creating a 404 template:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>register_block_pattern(\n  'wp-my-theme\/404-template-pattern',\n  array(\n      'title'         => __( '404 Only template pattern', 'wp-my-theme' ),\n      'templateTypes' => array( '404' ),\n      'content'       => '<p class=\"has-text-align-center has-x-large-font-size\">404 pattern<\/p>',\n  )\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Read more about this functionality in the <a href=\"https:\/\/make.wordpress.org\/core\/2023\/07\/18\/miscellaneous-editor-changes-in-wordpress-6-3\/#patterns-on-the-create-a-new-template-modal\">Patterns on the create a new template modal in the WordPress 6.3 dev note<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Lock patterns<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As mentioned in the prior section on Locking APIs, aspects of patterns themselves can be locked so that the important aspects of the design can be preserved. <a href=\"https:\/\/gist.github.com\/annezazu\/acee30f8b6e8995e1b1a52796e6ef805\">Here\u2019s an example of a pattern<\/a> with various blocks locked in different ways. You can build these patterns in the editor itself, including adding locking options, before <a href=\"\/docs\/reference-guides\/block-api\/block-patterns.md\">following the documentation to register them<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Prioritize specific patterns from the Pattern Directory<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>With WordPress 6.0 themes can register patterns from <a href=\"https:\/\/wordpress.org\/patterns\/\">Pattern Directory<\/a> through theme.json. To accomplish this, themes should use the new patterns top level key in theme.json. Within this field, themes can list patterns to register from the Pattern Directory. The patterns field is an array of pattern slugs from the Pattern Directory. Pattern slugs can be extracted by the url in a single pattern view at the Pattern Directory. Example: This url https:\/\/wordpress.org\/patterns\/pattern\/partner-logos the slug is partner-logos.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n    \"version\": 2,\n    \"patterns\": &#91; \"short-text-surrounded-by-round-images\", \"partner-logos\" ]\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note that this field requires using <a href=\"\/docs\/reference-guides\/theme-json-reference\/theme-json-living.md\">version 2 of theme.json<\/a>. The content creator will then find the respective Pattern in the inserter \u201cPatterns\u201d tab in the categories that match the categories from the Pattern Directory.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Additional resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/news\/2023\/04\/13\/using-template-patterns-to-build-multiple-homepage-designs\/\">Using template patterns to build multiple homepage designs<\/a> (WordPress Developer Blog)<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Patterns\n\nBlock [patterns](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-patterns\/) are one of the best ways to provide users with unique and curated editing experiences. \n\n## Prioritize starter patterns for any post type\n\nWhen a user creates new content, regardless of post type, they are met with an empty canvas. However, that experience can be improved thanks to the option to have patterns from a specific type prioritized upon creation of a new piece of content. The modal appears each time the user creates a new item when there are patterns on their website that declare support for the `core\/post-content` block types. By default, WordPress does not include any of these patterns, so the modal will not appear without at least two of these post content patterns being added. \n\nTo opt into this, include `core\/post-content` in the Block Types for your pattern. From there, you can control which post types the pattern should show up for via the Post Types option. Here's an example of a pattern that would appear when creating a new post. \n\n```php\n<?php\n \/**\n  * Title: New Event Announcement\n  * Slug: twentytwentytwo\/new-event-announcement\n  * Block Types: core\/post-content\n  * Post Types: post\n  * Categories: featured, text\n  *\/\n?>\n\n<!-- wp:heading {\"lock\":{\"move\":false,\"remove\":true}} -->\n<h2>Details<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"lock\":{\"move\":false,\"remove\":true}} -->\n<h2>Directions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"lock\":{\"move\":false,\"remove\":true}} -->\n<h2>RSVP<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph {\"lock\":{\"move\":true,\"remove\":true}} -->\n<p>To RSVP, please join the #fse-outreach-experiment in Make Slack. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:buttons -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"lock\":{\"move\":true,\"remove\":false}} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link wp-element-button\">Learn more<\/a><\/div>\n<!-- \/wp:button --><\/div>\n<!-- \/wp:buttons -->\n\n<!-- wp:cover {\"useFeaturedImage\":true,\"dimRatio\":80,\"overlayColor\":\"primary\",\"contentPosition\":\"center center\",\"align\":\"full\"} -->\n<div class=\"wp-block-cover alignfull\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-primary-background-color has-background-dim-80 has-background-dim\"><\/span><div class=\"wp-block-cover__inner-container\"><!-- wp:paragraph {\"align\":\"center\",\"placeholder\":\"Write title\u0101\u0080\u00a6\",\"fontSize\":\"large\"} -->\n<p class=\"has-text-align-center has-large-font-size\">We hope to see you there!<\/p>\n<!-- \/wp:paragraph --><\/div><\/div>\n<!-- \/wp:cover -->\n```\n\nRead more about this functionality in the [Page creation patterns in WordPress 6.0 dev note](https:\/\/make.wordpress.org\/core\/2022\/05\/03\/page-creation-patterns-in-wordpress-6-0\/) and [note that WordPress 6.1 brought this functionality to all post types](https:\/\/make.wordpress.org\/core\/2022\/10\/10\/miscellaneous-editor-changes-for-wordpress-6-1\/#start-content-patterns-for-all-post-types).  \n\n## Prioritize starter patterns for template creation\n\nIn the same way patterns can be prioritized for new posts or pages, the same experience can be added to the template creation process. When patterns declare support for the 'templateTypes' property, the patterns will appear anytime a template that matches the designation is created, along with the options to start from a blank state or use the current fallback of the template. By default, WordPress does not include any of these patterns. \n\nTo opt into this, a pattern needs to specify a property called `templateTypes`, which is an array containing the templates where the patterns can be used as the full content. Here's an example of a pattern that would appear when creating a 404 template:\n\n```php\nregister_block_pattern(\n  'wp-my-theme\/404-template-pattern',\n  array(\n      'title'         => __( '404 Only template pattern', 'wp-my-theme' ),\n      'templateTypes' => array( '404' ),\n      'content'       => '<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"x-large\"} --><p class=\"has-text-align-center has-x-large-font-size\">404 pattern<\/p><!-- \/wp:paragraph -->',\n  )\n);\n```\n\nRead more about this functionality in the [Patterns on the create a new template modal in the WordPress 6.3 dev note](https:\/\/make.wordpress.org\/core\/2023\/07\/18\/miscellaneous-editor-changes-in-wordpress-6-3\/#patterns-on-the-create-a-new-template-modal).\n\n## Lock patterns\n\nAs mentioned in the prior section on Locking APIs, aspects of patterns themselves can be locked so that the important aspects of the design can be preserved. [Here\u2019s an example of a pattern](https:\/\/gist.github.com\/annezazu\/acee30f8b6e8995e1b1a52796e6ef805) with various blocks locked in different ways. You can build these patterns in the editor itself, including adding locking options, before [following the documentation to register them](\/docs\/reference-guides\/block-api\/block-patterns.md). \n\n## Prioritize specific patterns from the Pattern Directory\n\nWith WordPress 6.0 themes can register patterns from [Pattern Directory](https:\/\/wordpress.org\/patterns\/) through theme.json. To accomplish this, themes should use the new patterns top level key in theme.json. Within this field, themes can list patterns to register from the Pattern Directory. The patterns field is an array of pattern slugs from the Pattern Directory. Pattern slugs can be extracted by the url in a single pattern view at the Pattern Directory. Example: This url https:\/\/wordpress.org\/patterns\/pattern\/partner-logos the slug is partner-logos.\n\n```json\n{\n    \"version\": 2,\n    \"patterns\": [ \"short-text-surrounded-by-round-images\", \"partner-logos\" ]\n}\n```\n\nNote that this field requires using [version 2 of theme.json](\/docs\/reference-guides\/theme-json-reference\/theme-json-living.md). The content creator will then find the respective Pattern in the inserter \u201cPatterns\u201d tab in the categories that match the categories from the Pattern Directory.\n\n## Additional resources\n\n- [Using template patterns to build multiple homepage designs](https:\/\/developer.wordpress.org\/news\/2023\/04\/13\/using-template-patterns-to-build-multiple-homepage-designs\/) (WordPress Developer Blog)"
    },
    {
        "path": "\/markdown\/how-to-guides\/curating-the-editor-experience\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Curating the Editor Experience<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Curating the editing experience in WordPress is important because it allows you to streamline the editing process, ensuring consistency and alignment with the site's style and branding guidelines. It also makes it easier for users to create and manage content effectively without accidental modifications or layout changes. This leads to a more efficient and personalized experience.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The purpose of this guide is to offer various ways you can lock down and curate the experience of using WordPress, especially with the introduction of more design tools and the Site Editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this section, you will learn:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/curating-the-editor-experience\/block-locking\"><strong>Block locking<\/strong><\/a>: how to restrict user interactions with specific blocks in the Editor for better content control<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/curating-the-editor-experience\/patterns\"><strong>Patterns<\/strong><\/a>: about creating and implementing predefined block layouts to ensure design and content uniformity<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/curating-the-editor-experience\/theme-json\"><strong>theme.json<\/strong><\/a>:\u00a0to configure global styles and settings for your theme using the theme.json file<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/curating-the-editor-experience\/filters-and-hooks\"><strong>Filters and hooks<\/strong><\/a>: about the essential filters and hooks used to modify the Editor<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/curating-the-editor-experience\/disable-editor-functionality\"><strong>Disabling Editor functionality<\/strong><\/a>: about additional ways to selectively disable features or components in the Editor to streamline the user experience<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Combining approaches<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Remember that the approaches provided in the documentation above can be combined as you see fit. For example, you can provide custom patterns to use when creating a new page while also limiting the amount of customization that can be done to aspects of them, like only allowing specific preset colors to be used for the background of a Cover block or locking down what blocks can be deleted.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When considering the approaches to take, think about the specific ways you might want to both open up the experience and curate it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Additional resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/wordpress.tv\/2022\/05\/24\/nick-diego-builder-basics-working-with-templates-in-full-site-editing-part-3\/\">Builder Basics \u2013 Working with Templates in Full Site Editing (Part 3)<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/make.wordpress.org\/core\/2022\/02\/09\/core-editor-improvement-curated-experiences-with-locking-apis-theme-json\/\">Core Editor Improvement: Curated experiences with locking APIs &amp; theme.json<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/wordpress.tv\/2022\/07\/22\/nick-diego-curating-the-editor-experience\/\">Learn WordPress session on Curating the Editor Experience<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Curating the Editor Experience\n\nCurating the editing experience in WordPress is important because it allows you to streamline the editing process, ensuring consistency and alignment with the site's style and branding guidelines. It also makes it easier for users to create and manage content effectively without accidental modifications or layout changes. This leads to a more efficient and personalized experience.\n\nThe purpose of this guide is to offer various ways you can lock down and curate the experience of using WordPress, especially with the introduction of more design tools and the Site Editor. \n\nIn this section, you will learn:\n\n1. [**Block locking**](https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/curating-the-editor-experience\/block-locking): how to restrict user interactions with specific blocks in the Editor for better content control\n1. [**Patterns**](https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/curating-the-editor-experience\/patterns): about creating and implementing predefined block layouts to ensure design and content uniformity\n1. [**theme.json**](https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/curating-the-editor-experience\/theme-json):\u00a0to configure global styles and settings for your theme using the theme.json file\n1. [**Filters and hooks**](https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/curating-the-editor-experience\/filters-and-hooks): about the essential filters and hooks used to modify the Editor\n1. [**Disabling Editor functionality**](https:\/\/developer.wordpress.org\/block-editor\/how-to-guides\/curating-the-editor-experience\/disable-editor-functionality): about additional ways to selectively disable features or components in the Editor to streamline the user experience\n\n## Combining approaches\n\nRemember that the approaches provided in the documentation above can be combined as you see fit. For example, you can provide custom patterns to use when creating a new page while also limiting the amount of customization that can be done to aspects of them, like only allowing specific preset colors to be used for the background of a Cover block or locking down what blocks can be deleted. \n\nWhen considering the approaches to take, think about the specific ways you might want to both open up the experience and curate it. \n\n## Additional resources\n\n- [Builder Basics \u2013 Working with Templates in Full Site Editing (Part 3)](https:\/\/wordpress.tv\/2022\/05\/24\/nick-diego-builder-basics-working-with-templates-in-full-site-editing-part-3\/)\n- [Core Editor Improvement: Curated experiences with locking APIs & theme.json](https:\/\/make.wordpress.org\/core\/2022\/02\/09\/core-editor-improvement-curated-experiences-with-locking-apis-theme-json\/)\n- [Learn WordPress session on Curating the Editor Experience](https:\/\/wordpress.tv\/2022\/07\/22\/nick-diego-curating-the-editor-experience\/)\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/curating-the-editor-experience\/disable-editor-functionality.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Disable Editor functionality<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This page is dedicated to the many ways you can disable specific functionality in the Post Editor and Site Editor that are not covered in other areas of the curation documentation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Restrict block options<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There might be times when you don\u2019t want access to a block at all to be available for users. To control what\u2019s available in the inserter, you can take two approaches: <a href=\"\/docs\/reference-guides\/filters\/block-filters.md#using-an-allow-list\">an allow list<\/a> that disables all blocks except those on the list or a <a href=\"\/docs\/reference-guides\/filters\/block-filters.md#using-a-deny-list\">deny list that unregisters specific blocks<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Disable the Pattern Directory<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To fully remove patterns bundled with WordPress core from being accessed in the Inserter, the following can be added to your <code>functions.php<\/code> file:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function example_theme_support() {\n\tremove_theme_support( 'core-block-patterns' );\n}\nadd_action( 'after_setup_theme', 'example_theme_support' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Disable block variations<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Some Core blocks are actually <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-variations\/\">block variations<\/a>. A great example is the Row and Stack blocks, which are actually variations of the Group block. If you want to disable these \"blocks\", you actually need to disable the respective variations.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Block variations are registered using JavaScript and need to be disabled with JavaScript. The code below will disable the Row variation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.domReady( () => {\n\twp.blocks.unregisterBlockVariation( 'core\/group', 'group-row' );\n});\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Assuming the code was placed in a <code>disable-variations.js<\/code> file located in the root of your theme folder, you can enqueue this file in the theme's <code>functions.php<\/code> using the code below.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function example_disable_variations_script() {\n\twp_enqueue_script(\n\t\t'example-disable-variations-script',\n\t\tget_template_directory_uri() . '\/disable-variations.js',\n       \tarray( 'wp-dom-ready' ),\n\t\twp_get_theme()->get( 'Version' ),\n\t\ttrue\n\t);\n}\nadd_action( 'enqueue_block_editor_assets', 'example_disable_variations_script' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Disable block styles<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There are a few Core blocks that include their own <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-styles\/\">block styles<\/a>. An example is the Image block, which includes a block style for rounded images called \"Rounded\". You many not want your users to round images, or you might prefer to use the border-radius control instead of the block style. Either way, it's easy to disable any unwanted block styles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unlike block variations, you can register styles in either JavaScript or PHP. If a style was registered in JavaScript, it must be disabled with JavaScript. If registered using PHP, the style can be disabled with either. All Core block styles are registed in JavaScript.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So, you would use the following code to disable the \"Rounded\" block style for the Image block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.domReady( () => {\n\twp.blocks.unregisterBlockStyle( 'core\/image', 'rounded' );\n});\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This JavaScript should be enqueued much like the block variation example above. Refer to the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-styles\/\">block styles<\/a> documentation for how to register and unregister styles using PHP.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Disable access to the Template Editor<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Whether you\u2019re using theme.json in a Classic or Block theme, you can add the following to your <code>functions.php<\/code> file to remove access to the Template Editor that is available when editing posts or pages:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function example_theme_support() {\n\tremove_theme_support( 'block-templates');\n}\nadd_action( 'after_setup_theme', 'example_theme_support' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This prevents both the ability to create new block templates or edit them from within the Post Editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Disable access to the Code Editor<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Code Editor allows you to view the underlying block markup for a page or post. While this view is handy for experienced users, you can inadvertently break block markup by editing content. Add the following to your <code>functions.php<\/code> file to restrict access.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function example_restrict_code_editor_access( $settings, $context ) {\n    $settings&#91; 'codeEditingEnabled' ] = false;\n\n\treturn $settings;\n}\nadd_filter( 'block_editor_settings_all', 'example_restrict_code_editor_access', 10, 2 );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This code prevents all users from accessing the Code Editor. You could also add <a href=\"https:\/\/wordpress.org\/documentation\/article\/roles-and-capabilities\/\">capability<\/a> checks to disable access for specific users.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Disable Editor functionality\n\nThis page is dedicated to the many ways you can disable specific functionality in the Post Editor and Site Editor that are not covered in other areas of the curation documentation. \n\n## Restrict block options\n\nThere might be times when you don\u2019t want access to a block at all to be available for users. To control what\u2019s available in the inserter, you can take two approaches: [an allow list](\/docs\/reference-guides\/filters\/block-filters.md#using-an-allow-list) that disables all blocks except those on the list or a [deny list that unregisters specific blocks](\/docs\/reference-guides\/filters\/block-filters.md#using-a-deny-list). \n\n## Disable the Pattern Directory\n\nTo fully remove patterns bundled with WordPress core from being accessed in the Inserter, the following can be added to your `functions.php` file: \n\n```php\nfunction example_theme_support() {\n\tremove_theme_support( 'core-block-patterns' );\n}\nadd_action( 'after_setup_theme', 'example_theme_support' );\n```\n\n## Disable block variations\n\nSome Core blocks are actually [block variations](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-variations\/). A great example is the Row and Stack blocks, which are actually variations of the Group block. If you want to disable these \"blocks\", you actually need to disable the respective variations.\n\nBlock variations are registered using JavaScript and need to be disabled with JavaScript. The code below will disable the Row variation. \n\n```js\nwp.domReady( () => {\n\twp.blocks.unregisterBlockVariation( 'core\/group', 'group-row' );\n});\n```\n\nAssuming the code was placed in a `disable-variations.js` file located in the root of your theme folder, you can enqueue this file in the theme's `functions.php` using the code below.\n\n```php\nfunction example_disable_variations_script() {\n\twp_enqueue_script(\n\t\t'example-disable-variations-script',\n\t\tget_template_directory_uri() . '\/disable-variations.js',\n       \tarray( 'wp-dom-ready' ),\n\t\twp_get_theme()->get( 'Version' ),\n\t\ttrue\n\t);\n}\nadd_action( 'enqueue_block_editor_assets', 'example_disable_variations_script' );\n```\n\n## Disable block styles\n\nThere are a few Core blocks that include their own [block styles](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-styles\/). An example is the Image block, which includes a block style for rounded images called \"Rounded\". You many not want your users to round images, or you might prefer to use the border-radius control instead of the block style. Either way, it's easy to disable any unwanted block styles.\n\nUnlike block variations, you can register styles in either JavaScript or PHP. If a style was registered in JavaScript, it must be disabled with JavaScript. If registered using PHP, the style can be disabled with either. All Core block styles are registed in JavaScript.\n\nSo, you would use the following code to disable the \"Rounded\" block style for the Image block.\n\n```js\nwp.domReady( () => {\n\twp.blocks.unregisterBlockStyle( 'core\/image', 'rounded' );\n});\n```\n\nThis JavaScript should be enqueued much like the block variation example above. Refer to the [block styles](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-styles\/) documentation for how to register and unregister styles using PHP. \n\n## Disable access to the Template Editor\n\nWhether you\u2019re using theme.json in a Classic or Block theme, you can add the following to your `functions.php` file to remove access to the Template Editor that is available when editing posts or pages:\n\n```php\nfunction example_theme_support() {\n\tremove_theme_support( 'block-templates');\n}\nadd_action( 'after_setup_theme', 'example_theme_support' );\n```\n\nThis prevents both the ability to create new block templates or edit them from within the Post Editor. \n\n## Disable access to the Code Editor\n\nThe Code Editor allows you to view the underlying block markup for a page or post. While this view is handy for experienced users, you can inadvertently break block markup by editing content. Add the following to your `functions.php` file to restrict access.\n\n```php\nfunction example_restrict_code_editor_access( $settings, $context ) {\n    $settings[ 'codeEditingEnabled' ] = false;\n\n\treturn $settings;\n}\nadd_filter( 'block_editor_settings_all', 'example_restrict_code_editor_access', 10, 2 );\n```\n\nThis code prevents all users from accessing the Code Editor. You could also add [capability](https:\/\/wordpress.org\/documentation\/article\/roles-and-capabilities\/) checks to disable access for specific users."
    },
    {
        "path": "\/markdown\/how-to-guides\/curating-the-editor-experience\/theme-json.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">theme.json<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A theme's theme.json file is one of the best ways to curate the Editor experience and will likely be the first tool you use before reaching for more sophisticated solutions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Providing default controls\/options<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Since theme.json acts as a configuration tool, there are numerous ways to define at a granular level what options are available. This section will use duotone as an example since it showcases a feature that cuts across a few blocks and allows for varying levels of access.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Duotone with Core options and customization available for each image related block:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\"version\": 2,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"customDuotone\": true,\n\t\t\t\"duotone\": &#91;\n\t\t\t]\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Duotone with theme defined color options, Core options, and customization available for each image related block:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"duotone\": &#91;\n\t\t\t\t{\n\t\t\t\t\t\"colors\": &#91; \"#000000\", \"#ffffff\" ],\n\t\t\t\t\t\"slug\": \"foreground-and-background\",\n\t\t\t\t\t\"name\": \"Foreground and background\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"colors\": &#91; \"#000000\", \"#ff0200\" ],\n\t\t\t\t\t\"slug\": \"foreground-and-secondary\",\n\t\t\t\t\t\"name\": \"Foreground and secondary\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"colors\": &#91; \"#000000\", \"#7f5dee\" ],\n\t\t\t\t\t\"slug\": \"foreground-and-tertiary\",\n\t\t\t\t\t\"name\": \"Foreground and tertiary\"\n\t\t\t\t},\n\t\t\t]\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Duotone with defined default options and all customization available for the Post Featured Image block:<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"schema\": \"https:\/\/schemas.wp.org\/trunk\/theme.json\",\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"custom\": true,\n\t\t\t\"customDuotone\": true\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/post-featured-image\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"duotone\": &#91;\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"colors\": &#91; \"#282828\", \"#ff5837\" ],\n\t\t\t\t\t\t\t\"slug\": \"black-and-orange\",\n\t\t\t\t\t\t\t\"name\": \"Black and Orange\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"colors\": &#91; \"#282828\", \"#0288d1\" ],\n\t\t\t\t\t\t\t\"slug\": \"black-and-blue\", \n\t\t\t\t\t\t\t\"name\": \"Black and Blue\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"customDuotone\": true,\n\t\t\t\t\t\"custom\": true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><em>Duotone with only defined default options and core options available for the Post Featured Image block (no customization):<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"schema\": \"https:\/\/schemas.wp.org\/trunk\/theme.json\",\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"custom\": true,\n\t\t\t\"customDuotone\": true\n\t\t},\t\n\t\t\"blocks\": {\n\t\t\t\"core\/post-featured-image\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"duotone\": &#91;\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"colors\": &#91; \"#282828\", \"#ff5837\" ],\n\t\t\t\t\t\t\t\"slug\": \"black-and-orange\",\n\t\t\t\t\t\t\t\"name\": \"Black and Orange\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"colors\": &#91; \"#282828\", \"#0288d1\" ],\n\t\t\t\t\t\t\t\"slug\": \"black-and-blue\",\n\t\t\t\t\t\t\t\"name\": \"Black and Blue\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"customDuotone\": false,\n\t\t\t\t\t\"custom\": false\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Limiting interface options with theme.json<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Limit options on a per-block basis<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Beyond defining default values, using theme.json allows you to also remove options entirely and instead rely on what the theme has set in place. Below is a visual showing two extremes with the same paragraph block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/Locking%20comparison%20visual.png?raw=true\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Image of restricted interface<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Continuing the examples with duotone, this means you could allow full access to all Duotone functionality for Image blocks and only limit the Post Featured Image block like so:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"schema\": \"https:\/\/schemas.wp.org\/trunk\/theme.json\",\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"custom\": true,\n\t\t\t\"customDuotone\": true\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/image\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"duotone\": &#91;],\n\t\t\t\t\t\"customDuotone\": true,\n\t\t\t\t\t\"custom\": true\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"core\/post-featured-image\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"duotone\": &#91;],\n\t\t\t\t\t\"customDuotone\": false,\n\t\t\t\t\t\"custom\": false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can read more about how best to <a href=\"\/docs\/how-to-guides\/themes\/global-settings-and-styles.md\">turn on\/off options with theme.json here<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Disable inherit default layout<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To disable the \u201cInherit default layout\u201d setting for container blocks like the Group block, remove the following section:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\"layout\": {\n\t\"contentSize\": null,\n\t\"wideSize\": null\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Limit options globally<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When using theme.json in a block or classic theme, these settings will stop the default color and typography controls from being enabled globally, greatly limiting what\u2019s possible:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"$schema\": \"http:\/\/schemas.wp.org\/trunk\/theme.json\",\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"layout\": {\n\t\t\t\"contentSize\": \"750px\"\n\t\t},\n\t\t\"color\": {\n\t\t\t\"background\": false,\n\t\t\t\"custom\": false,\n\t\t\t\"customDuotone\": false,\n\t\t\t\"customGradient\": false,\n\t\t\t\"defaultGradients\": false,\n\t\t\t\"defaultPalette\": false,\n\t\t\t\"text\": false\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"customFontSize\": false,\n\t\t\t\"dropCap\": false,\n\t\t\t\"fontStyle\": false,\n\t\t\t\"fontWeight\": false,\n\t\t\t\"letterSpacing\": false,\n\t\t\t\"lineHeight\": false,\n\t\t\t\"textDecoration\": false,\n\t\t\t\"textTransform\": false\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>To enable something from the above, just set whatever value you want to change to <code>true<\/code> for more granularity.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# theme.json\n\nA theme's theme.json file is one of the best ways to curate the Editor experience and will likely be the first tool you use before reaching for more sophisticated solutions. \n\n## Providing default controls\/options\n\nSince theme.json acts as a configuration tool, there are numerous ways to define at a granular level what options are available. This section will use duotone as an example since it showcases a feature that cuts across a few blocks and allows for varying levels of access.   \n\n*Duotone with Core options and customization available for each image related block:*\n\n```json\n{\n\"version\": 2,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"customDuotone\": true,\n\t\t\t\"duotone\": [\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n*Duotone with theme defined color options, Core options, and customization available for each image related block:*\n\n```json\n{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"duotone\": [\n\t\t\t\t{\n\t\t\t\t\t\"colors\": [ \"#000000\", \"#ffffff\" ],\n\t\t\t\t\t\"slug\": \"foreground-and-background\",\n\t\t\t\t\t\"name\": \"Foreground and background\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"colors\": [ \"#000000\", \"#ff0200\" ],\n\t\t\t\t\t\"slug\": \"foreground-and-secondary\",\n\t\t\t\t\t\"name\": \"Foreground and secondary\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"colors\": [ \"#000000\", \"#7f5dee\" ],\n\t\t\t\t\t\"slug\": \"foreground-and-tertiary\",\n\t\t\t\t\t\"name\": \"Foreground and tertiary\"\n\t\t\t\t},\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n*Duotone with defined default options and all customization available for the Post Featured Image block:*\n\n```json\n{\n\t\"schema\": \"https:\/\/schemas.wp.org\/trunk\/theme.json\",\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"custom\": true,\n\t\t\t\"customDuotone\": true\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/post-featured-image\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"duotone\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"colors\": [ \"#282828\", \"#ff5837\" ],\n\t\t\t\t\t\t\t\"slug\": \"black-and-orange\",\n\t\t\t\t\t\t\t\"name\": \"Black and Orange\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"colors\": [ \"#282828\", \"#0288d1\" ],\n\t\t\t\t\t\t\t\"slug\": \"black-and-blue\", \n\t\t\t\t\t\t\t\"name\": \"Black and Blue\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"customDuotone\": true,\n\t\t\t\t\t\"custom\": true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n*Duotone with only defined default options and core options available for the Post Featured Image block (no customization):*\n\n```json\n{\n\t\"schema\": \"https:\/\/schemas.wp.org\/trunk\/theme.json\",\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"custom\": true,\n\t\t\t\"customDuotone\": true\n\t\t},\t\n\t\t\"blocks\": {\n\t\t\t\"core\/post-featured-image\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"duotone\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"colors\": [ \"#282828\", \"#ff5837\" ],\n\t\t\t\t\t\t\t\"slug\": \"black-and-orange\",\n\t\t\t\t\t\t\t\"name\": \"Black and Orange\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"colors\": [ \"#282828\", \"#0288d1\" ],\n\t\t\t\t\t\t\t\"slug\": \"black-and-blue\",\n\t\t\t\t\t\t\t\"name\": \"Black and Blue\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"customDuotone\": false,\n\t\t\t\t\t\"custom\": false\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t}\n}\n```\n\n## Limiting interface options with theme.json\n\n### Limit options on a per-block basis\n\nBeyond defining default values, using theme.json allows you to also remove options entirely and instead rely on what the theme has set in place. Below is a visual showing two extremes with the same paragraph block: \n\n![Image of restricted interface](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/Locking%20comparison%20visual.png?raw=true)\n\nContinuing the examples with duotone, this means you could allow full access to all Duotone functionality for Image blocks and only limit the Post Featured Image block like so:\n\n```json\n{\n\t\"schema\": \"https:\/\/schemas.wp.org\/trunk\/theme.json\",\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"custom\": true,\n\t\t\t\"customDuotone\": true\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/image\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"duotone\": [],\n\t\t\t\t\t\"customDuotone\": true,\n\t\t\t\t\t\"custom\": true\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"core\/post-featured-image\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"duotone\": [],\n\t\t\t\t\t\"customDuotone\": false,\n\t\t\t\t\t\"custom\": false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nYou can read more about how best to [turn on\/off options with theme.json here](\/docs\/how-to-guides\/themes\/global-settings-and-styles.md). \n\n### Disable inherit default layout\n\nTo disable the \u201cInherit default layout\u201d setting for container blocks like the Group block, remove the following section: \n\n```json\n\"layout\": {\n\t\"contentSize\": null,\n\t\"wideSize\": null\n},\n```\n\n### Limit options globally\n\nWhen using theme.json in a block or classic theme, these settings will stop the default color and typography controls from being enabled globally, greatly limiting what\u2019s possible:\n\n```json\n{\n\t\"$schema\": \"http:\/\/schemas.wp.org\/trunk\/theme.json\",\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"layout\": {\n\t\t\t\"contentSize\": \"750px\"\n\t\t},\n\t\t\"color\": {\n\t\t\t\"background\": false,\n\t\t\t\"custom\": false,\n\t\t\t\"customDuotone\": false,\n\t\t\t\"customGradient\": false,\n\t\t\t\"defaultGradients\": false,\n\t\t\t\"defaultPalette\": false,\n\t\t\t\"text\": false\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"customFontSize\": false,\n\t\t\t\"dropCap\": false,\n\t\t\t\"fontStyle\": false,\n\t\t\t\"fontWeight\": false,\n\t\t\t\"letterSpacing\": false,\n\t\t\t\"lineHeight\": false,\n\t\t\t\"textDecoration\": false,\n\t\t\t\"textTransform\": false\n\t\t}\n\t}\n}\n```\n\nTo enable something from the above, just set whatever value you want to change to `true` for more granularity."
    },
    {
        "path": "\/markdown\/how-to-guides\/curating-the-editor-experience\/filters-and-hooks.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Filters and hooks<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Editor provides numerous filters and hooks that allow you to modify the editing experience. Here are a few.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Server-side theme.json filters<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The theme.json file is a great way to control interface options, but it only allows for global or block-level modifications, which can be limiting in some scenarios.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For instance, in the previous section, color and typography controls were disabled globally using theme.json. But let's say you want to enable color settings for users who are Administrators.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To provide more flexibility, WordPress 6.1 introduced server-side filters allowing you to customize theme.json data at four different data layers.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/reference\/hooks\/wp_theme_json_data_default\/\"><code>wp_theme_json_data_default<\/code><\/a> - Hooks into the default data provided by WordPress<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/reference\/hooks\/wp_theme_json_data_blocks\/\"><code>wp_theme_json_data_blocks<\/code><\/a> - Hooks into the data provided by blocks.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/reference\/hooks\/wp_theme_json_data_theme\/\"><code>wp_theme_json_data_theme<\/code><\/a> - Hooks into the data provided by the current theme.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/reference\/hooks\/wp_theme_json_data_user\/\"><code>wp_theme_json_data_user<\/code><\/a> - Hooks into the data provided by the user.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>In the following example, the data from the current theme's theme.json file is updated using the <code>wp_theme_json_data_theme<\/code> filter. Color controls are restored if the current user is an Administrator.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Disable color controls for all users except Administrators.\nfunction example_filter_theme_json_data_theme( $theme_json ){\n    $is_administrator = current_user_can( 'edit_theme_options' );\n\n    if ( $is_administrator ) {\n        $new_data = array(\n            'version'  => 2,\n            'settings' => array(\n                'color' => array(\n                    'background'       => true,\n                    'custom'           => true,\n                    'customDuotone'    => true,\n                    'customGradient'   => true,\n                    'defaultGradients' => true,\n                    'defaultPalette'   => true,\n                    'text'             => true,\n                ),\n            ),\n        );\n    }\n\n\treturn $theme_json->update_with( $new_data );\n}\nadd_filter( 'wp_theme_json_data_theme', 'example_filter_theme_json_data_theme' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The filter receives an instance of the <code>WP_Theme_JSON_Data class<\/code> with the data for the respective layer. Then, you pass new data in a valid theme.json-like structure to the <code>update_with( $new_data )<\/code> method. A theme.json version number is required in <code>$new_data<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Client-side (Editor) filters<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>WordPress 6.2 introduced a new client-side filter allowing you to modify block-level <a href=\"\/docs\/reference-guides\/theme-json-reference\/theme-json-living.md#settings\">theme.json settings<\/a> before the Editor is rendered.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The filter is called <code>blockEditor.useSetting.before<\/code> and can be used in the JavaScript code as follows:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { addFilter } from '@wordpress\/hooks';\n\n\/**\n * Limit the Column block's spacing options to pixels.\n *\/\naddFilter(\n\t'blockEditor.useSetting.before',\n\t'example\/useSetting.before',\n\t( settingValue, settingName, clientId, blockName ) => {\n\t\tif ( blockName === 'core\/column' &amp;&amp; settingName === 'spacing.units' ) {\n\t\t\treturn &#91; 'px' ];\n\t\t}\n\t\treturn settingValue;\n\t}\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This example will restrict the available spacing units for the Column block to just pixels. As discussed above, a similar restriction could be applied using theme.json filters or directly in a theme\u2019s theme.json file using block-level settings.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>However, the <code>blockEditor.useSetting.before<\/code> filter is unique because it allows you to modify settings according to the block\u2019s location, neighboring blocks, the current user\u2019s role, and more. The possibilities for customization are extensive.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the following example, text color controls are disabled for the Heading block whenever the block is placed inside of a Media &amp; Text block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { select } from  '@wordpress\/data';\nimport { addFilter } from '@wordpress\/hooks';\n\n\/**\n * Disable text color controls on Heading blocks when placed inside of Media &amp; Text blocks.\n *\/\naddFilter(\n\t'blockEditor.useSetting.before',\n\t'example\/useSetting.before',\n\t( settingValue, settingName, clientId, blockName ) => {\n\t\tif ( blockName === 'core\/heading' ) {\n\t\t\tconst { getBlockParents, getBlockName } = select( 'core\/block-editor' );\n\t\t\tconst blockParents = getBlockParents( clientId, true );\n\t\t\tconst inMediaText = blockParents.some( ( ancestorId ) => getBlockName( ancestorId ) === 'core\/media-text' );\n\n\t\t\tif ( inMediaText &amp;&amp; settingName === 'color.text' ) {\n\t\t\t    return false;\n\t\t\t}\n\t\t}\n\n\t\treturn settingValue;\n\t}\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Additional resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/news\/2023\/07\/05\/how-to-modify-theme-json-data-using-server-side-filters\/\">How to modify theme.json data using server-side filters<\/a> (WordPress Developer Blog)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/developer.wordpress.org\/news\/2023\/05\/24\/curating-the-editor-experience-with-client-side-filters\/\">Curating the Editor experience with client-side filters<\/a> (WordPress Developer Blog)<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Filters and hooks\n\nThe Editor provides numerous filters and hooks that allow you to modify the editing experience. Here are a few.\n\n## Server-side theme.json filters\n\nThe theme.json file is a great way to control interface options, but it only allows for global or block-level modifications, which can be limiting in some scenarios.\n\nFor instance, in the previous section, color and typography controls were disabled globally using theme.json. But let's say you want to enable color settings for users who are Administrators. \n\nTo provide more flexibility, WordPress 6.1 introduced server-side filters allowing you to customize theme.json data at four different data layers.\n\n- [`wp_theme_json_data_default`](https:\/\/developer.wordpress.org\/reference\/hooks\/wp_theme_json_data_default\/) - Hooks into the default data provided by WordPress\n- [`wp_theme_json_data_blocks`](https:\/\/developer.wordpress.org\/reference\/hooks\/wp_theme_json_data_blocks\/) - Hooks into the data provided by blocks.\n- [`wp_theme_json_data_theme`](https:\/\/developer.wordpress.org\/reference\/hooks\/wp_theme_json_data_theme\/) - Hooks into the data provided by the current theme.\n- [`wp_theme_json_data_user`](https:\/\/developer.wordpress.org\/reference\/hooks\/wp_theme_json_data_user\/) - Hooks into the data provided by the user.\n\nIn the following example, the data from the current theme's theme.json file is updated using the `wp_theme_json_data_theme` filter. Color controls are restored if the current user is an Administrator.\n\n```php\n\/\/ Disable color controls for all users except Administrators.\nfunction example_filter_theme_json_data_theme( $theme_json ){\n    $is_administrator = current_user_can( 'edit_theme_options' );\n\n    if ( $is_administrator ) {\n        $new_data = array(\n            'version'  => 2,\n            'settings' => array(\n                'color' => array(\n                    'background'       => true,\n                    'custom'           => true,\n                    'customDuotone'    => true,\n                    'customGradient'   => true,\n                    'defaultGradients' => true,\n                    'defaultPalette'   => true,\n                    'text'             => true,\n                ),\n            ),\n        );\n    }\n\n\treturn $theme_json->update_with( $new_data );\n}\nadd_filter( 'wp_theme_json_data_theme', 'example_filter_theme_json_data_theme' );\n```\n\nThe filter receives an instance of the `WP_Theme_JSON_Data class` with the data for the respective layer. Then, you pass new data in a valid theme.json-like structure to the `update_with( $new_data )` method. A theme.json version number is required in `$new_data`. \n\n\n## Client-side (Editor) filters\n\nWordPress 6.2 introduced a new client-side filter allowing you to modify block-level [theme.json settings](\/docs\/reference-guides\/theme-json-reference\/theme-json-living.md#settings) before the Editor is rendered.\n\nThe filter is called `blockEditor.useSetting.before` and can be used in the JavaScript code as follows:\n\n```js\nimport { addFilter } from '@wordpress\/hooks';\n\n\/**\n * Limit the Column block's spacing options to pixels.\n *\/\naddFilter(\n\t'blockEditor.useSetting.before',\n\t'example\/useSetting.before',\n\t( settingValue, settingName, clientId, blockName ) => {\n\t\tif ( blockName === 'core\/column' && settingName === 'spacing.units' ) {\n\t\t\treturn [ 'px' ];\n\t\t}\n\t\treturn settingValue;\n\t}\n);\n```\n\nThis example will restrict the available spacing units for the Column block to just pixels. As discussed above, a similar restriction could be applied using theme.json filters or directly in a theme\u2019s theme.json file using block-level settings.\n\nHowever, the `blockEditor.useSetting.before` filter is unique because it allows you to modify settings according to the block\u2019s location, neighboring blocks, the current user\u2019s role, and more. The possibilities for customization are extensive.\n\nIn the following example, text color controls are disabled for the Heading block whenever the block is placed inside of a Media & Text block.\n\n```js\nimport { select } from  '@wordpress\/data';\nimport { addFilter } from '@wordpress\/hooks';\n\n\/**\n * Disable text color controls on Heading blocks when placed inside of Media & Text blocks.\n *\/\naddFilter(\n\t'blockEditor.useSetting.before',\n\t'example\/useSetting.before',\n\t( settingValue, settingName, clientId, blockName ) => {\n\t\tif ( blockName === 'core\/heading' ) {\n\t\t\tconst { getBlockParents, getBlockName } = select( 'core\/block-editor' );\n\t\t\tconst blockParents = getBlockParents( clientId, true );\n\t\t\tconst inMediaText = blockParents.some( ( ancestorId ) => getBlockName( ancestorId ) === 'core\/media-text' );\n\n\t\t\tif ( inMediaText && settingName === 'color.text' ) {\n\t\t\t    return false;\n\t\t\t}\n\t\t}\n\n\t\treturn settingValue;\n\t}\n);\n```\n\n## Additional resources\n\n- [How to modify theme.json data using server-side filters](https:\/\/developer.wordpress.org\/news\/2023\/07\/05\/how-to-modify-theme-json-data-using-server-side-filters\/) (WordPress Developer Blog)\n- [Curating the Editor experience with client-side filters](https:\/\/developer.wordpress.org\/news\/2023\/05\/24\/curating-the-editor-experience-with-client-side-filters\/) (WordPress Developer Blog)"
    },
    {
        "path": "\/markdown\/how-to-guides\/plugin-sidebar-0.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Plugin Sidebar<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Overview<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>How to add a sidebar to your plugin. A sidebar is the region to the far right of the editor. Your plugin can add an additional icon next to the InspectorControls (gear icon) that can be expanded.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/sidebar-up-and-running.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Example sidebar<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p><em>Note: this tutorial covers a custom sidebar, if you are looking to add controls to the sidebar see the <a href=\"\/docs\/getting-started\/fundamentals\/block-in-the-editor.md\">Block Toolbar and Settings Sidebar<\/a><\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Before you start<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The tutorial assumes you have an existing plugin setup and are ready to add PHP and JavaScript code. Please, refer to <a href=\"\/docs\/how-to-guides\/javascript\/README.md\">Getting started with JavaScript<\/a> tutorial for an introduction to WordPress plugins and how to use JavaScript to extend the block editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Step-by-step guide<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 1: Get a sidebar up and running<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The first step is to tell the editor that there is a new plugin that will have its own sidebar. Use the <a href=\"\/packages\/plugins\/README.md\">registerPlugin<\/a>, <a href=\"\/packages\/edit-post\/README.md#pluginsidebar\">PluginSidebar<\/a>, and <a href=\"\/packages\/element\/README.md\">createElement<\/a> utilities provided by the <code>@wordpress\/plugins<\/code>, <code>@wordpress\/edit-post<\/code>, and <code>react<\/code> packages, respectively.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Add the following code to a JavaScript file called <code>plugin-sidebar.js<\/code> and save it within your plugin's directory:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>( function ( wp, React ) {\n\tvar el = React.createElement;\n\tvar registerPlugin = wp.plugins.registerPlugin;\n\tvar PluginSidebar = wp.editPost.PluginSidebar;\n\n\tregisterPlugin( 'my-plugin-sidebar', {\n\t\trender: function () {\n\t\t\treturn el(\n\t\t\t\tPluginSidebar,\n\t\t\t\t{\n\t\t\t\t\tname: 'my-plugin-sidebar',\n\t\t\t\t\ticon: 'admin-post',\n\t\t\t\t\ttitle: 'My plugin sidebar',\n\t\t\t\t},\n\t\t\t\t'Meta field'\n\t\t\t);\n\t\t},\n\t} );\n} )( window.wp, window.React );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>For this code to work, those utilities need to be available in the browser, so you must specify <code>wp-plugins<\/code>, <code>wp-edit-post<\/code>, and <code>react<\/code> as dependencies of your script.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here is the PHP code to register your script and specify the dependencies:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n\/*\nPlugin Name: Sidebar plugin\n*\/\n\nfunction sidebar_plugin_register() {\n\twp_register_script(\n\t\t'plugin-sidebar-js',\n\t\tplugins_url( 'plugin-sidebar.js', __FILE__ ),\n\t\tarray( 'wp-plugins', 'wp-edit-post', 'react' )\n\t);\n}\nadd_action( 'init', 'sidebar_plugin_register' );\n\nfunction sidebar_plugin_script_enqueue() {\n\twp_enqueue_script( 'plugin-sidebar-js' );\n}\nadd_action( 'enqueue_block_editor_assets', 'sidebar_plugin_script_enqueue' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>After installing and activating this plugin, there is a new icon resembling a tack in the top-right of the editor. Upon clicking it, the plugin's sidebar will be opened:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/sidebar-up-and-running.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Sidebar Up and Running<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 2: Tweak the sidebar style and add controls<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>After the sidebar is up and running, the next step is to fill it up with the necessary components and basic styling.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To visualize and edit the meta field value you'll use an input component. The <code>@wordpress\/components<\/code> package contains many components available for you to reuse, and, specifically, the <a href=\"\/packages\/components\/src\/text-control\/README.md\">TextControl<\/a> is aimed at creating an input field:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>( function ( wp ) {\n\tvar el = React.createElement;\n\tvar registerPlugin = wp.plugins.registerPlugin;\n\tvar PluginSidebar = wp.editPost.PluginSidebar;\n\tvar TextControl = wp.components.TextControl;\n\n\tregisterPlugin( 'my-plugin-sidebar', {\n\t\trender: function () {\n\t\t\treturn el(\n\t\t\t\tPluginSidebar,\n\t\t\t\t{\n\t\t\t\t\tname: 'my-plugin-sidebar',\n\t\t\t\t\ticon: 'admin-post',\n\t\t\t\t\ttitle: 'My plugin sidebar',\n\t\t\t\t},\n\t\t\t\tel(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'plugin-sidebar-content' },\n\t\t\t\t\tel( TextControl, {\n\t\t\t\t\t\tlabel: 'Meta Block Field',\n\t\t\t\t\t\tvalue: 'Initial value',\n\t\t\t\t\t\tonChange: function ( content ) {\n\t\t\t\t\t\t\tconsole.log( 'content changed to ', content );\n\t\t\t\t\t\t},\n\t\t\t\t\t} )\n\t\t\t\t)\n\t\t\t);\n\t\t},\n\t} );\n} )( window.wp );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Update the <code>plugin-sidebar.js<\/code> with this new code. Notice that it uses a new utility called <code>wp.components<\/code> from the <code>@wordpress\/components<\/code> package. Be sure to add <code>wp-components<\/code> to the dependencies in the <code>wp_register_script<\/code> function in the PHP file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The code introduces:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>a CSS class <code>plugin-sidebar-content<\/code> to the <code>div<\/code> element to target styles,<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>a <code>TextControl<\/code> component instead of the plain <code>'Meta field'<\/code> text.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>With the new CSS class available you can add a little style. Create a new file in your plugin directory called <code>plugin-sidebar.css<\/code> with the following to give some padding:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>.plugin-sidebar-content {\n\tpadding: 16px;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Register the script and enqueue it to load with <code>enqueue_block_editor_assets<\/code> alongside the JavaScript file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After those changes, the PHP code will look like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\n\/*\nPlugin Name: Sidebar example\n*\/\n\nfunction sidebar_plugin_register() {\n\twp_register_script(\n\t\t'plugin-sidebar-js',\n\t\tplugins_url( 'plugin-sidebar.js', __FILE__ ),\n\t\tarray(\n\t\t\t'react',\n\t\t\t'wp-plugins',\n\t\t\t'wp-edit-post',\n\t\t\t'wp-components'\n\t\t)\n\t);\n\twp_register_style(\n\t\t'plugin-sidebar-css',\n\t\tplugins_url( 'plugin-sidebar.css', __FILE__ )\n\t);\n}\nadd_action( 'init', 'sidebar_plugin_register' );\n\nfunction sidebar_plugin_script_enqueue() {\n\twp_enqueue_script( 'plugin-sidebar-js' );\n\twp_enqueue_style( 'plugin-sidebar-css' );\n}\nadd_action( 'enqueue_block_editor_assets', 'sidebar_plugin_script_enqueue' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Reload the editor and open the sidebar:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/sidebar-style-and-controls.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Sidebar with style and controls<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>This code doesn't let users store or retrieve data just yet, so the next steps will focus on how to connect it to the meta block field.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 3: Register the meta field<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To work with fields in the <code>post_meta<\/code> table, use the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/register_post_meta\/\">register_post_meta<\/a>. function to create a new field called <code>sidebar_plugin_meta_block_field<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note: this field needs to be available to the REST API because that's how the block editor access data.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Add the PHP code in your plugins <code>init<\/code> callback function:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>register_post_meta( 'post', 'sidebar_plugin_meta_block_field', array(\n\t'show_in_rest' => true,\n\t'single' => true,\n\t'type' => 'string',\n) );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>To confirm, query the block editor store to see the field is loaded. After implementing, reload the editor page and open your browser's developer console. Use this JavaScript snippet in the console to confirm:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.data.select( 'core\/editor' ).getCurrentPost().meta;\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The function will return an object containing the registered meta field you registered.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If the code returns <code>undefined<\/code> make sure your post type supports <code>custom-fields<\/code>. Either when <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/register_post_type\/#supports\">registering the post<\/a> or with <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/add_post_type_support\/\">add_post_type_support function<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 4: Initialize the input control<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>With the field available in the editor store, it can now be surfaced to the UI. We extract the input control to a function to keep the code clean as we add functionality.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>( function ( wp ) {\n\tvar el = React.createElement;\n\tvar registerPlugin = wp.plugins.registerPlugin;\n\tvar PluginSidebar = wp.editPost.PluginSidebar;\n\tvar TextControl = wp.components.TextControl;\n\n\tvar MetaBlockField = function () {\n\t\treturn el( TextControl, {\n\t\t\tlabel: 'Meta Block Field',\n\t\t\tvalue: 'Initial value',\n\t\t\tonChange: function ( content ) {\n\t\t\t\tconsole.log( 'content changed to ', content );\n\t\t\t},\n\t\t} );\n\t};\n\n\tregisterPlugin( 'my-plugin-sidebar', {\n\t\trender: function () {\n\t\t\treturn el(\n\t\t\t\tPluginSidebar,\n\t\t\t\t{\n\t\t\t\t\tname: 'my-plugin-sidebar',\n\t\t\t\t\ticon: 'admin-post',\n\t\t\t\t\ttitle: 'My plugin sidebar',\n\t\t\t\t},\n\t\t\t\tel(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'plugin-sidebar-content' },\n\t\t\t\t\tel( MetaBlockField )\n\t\t\t\t)\n\t\t\t);\n\t\t},\n\t} );\n} )( window.wp );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>We want to initialize the value in the <code>MetaBlockField<\/code> component with the value of <code>sidebar_plugin_meta_block_field<\/code>, and keep it updated when that value changes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>useSelect<\/code> function is used to fetch data when the component loads and will update if the data changes. Here is the code update with <code>useSelect<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>( function ( wp ) {\n\tvar el = React.createElement;\n\tvar registerPlugin = wp.plugins.registerPlugin;\n\tvar PluginSidebar = wp.editPost.PluginSidebar;\n\tvar Text = wp.components.TextControl;\n\tvar useSelect = wp.data.useSelect;\n\n\tvar MetaBlockField = function () {\n\t\tvar metaFieldValue = useSelect( function ( select ) {\n\t\t\treturn select( 'core\/editor' ).getEditedPostAttribute(\n\t\t\t\t'meta'\n\t\t\t)&#91; 'sidebar_plugin_meta_block_field' ];\n\t\t}, &#91;] );\n\n\t\treturn el( Text, {\n\t\t\tlabel: 'Meta Block Field',\n\t\t\tvalue: metaFieldValue,\n\t\t\tonChange: function ( content ) {\n\t\t\t\tconsole.log( 'content has changed to ', content );\n\t\t\t},\n\t\t} );\n\t};\n\n\tregisterPlugin( 'my-plugin-sidebar', {\n\t\trender: function () {\n\t\t\treturn el(\n\t\t\t\tPluginSidebar,\n\t\t\t\t{\n\t\t\t\t\tname: 'my-plugin-sidebar',\n\t\t\t\t\ticon: 'admin-post',\n\t\t\t\t\ttitle: 'My plugin sidebar',\n\t\t\t\t},\n\t\t\t\tel(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'plugin-sidebar-content' },\n\t\t\t\t\tel( MetaBlockField )\n\t\t\t\t)\n\t\t\t);\n\t\t},\n\t} );\n} )( window.wp );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The <code>wp.data.useSelect<\/code> function is from the <code>@wordpress\/data<\/code> package, so <code>wp-data<\/code> needs to be added as a dependency in the <code>wp_register_script<\/code> function in PHP.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note: The <code>getEditedPostAttribute<\/code> call is used to retrieve the most recent values of the post, including user editions that haven't been yet saved.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Confirm it's working by updating the code, reloading, and opening the sidebar. The input's content is no longer <code>Initial value<\/code> but a void string. Users can't type values yet, but you can check that the component is updated if the value in the store changes. Open the browser's console, execute<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.data\n\t.dispatch( 'core\/editor' )\n\t.editPost( { meta: { sidebar_plugin_meta_block_field: 'hello world!' } } );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can observe the content changing in the input component.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 5: Update the meta field when the input's content changes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The last step is to update the meta field when the input content changes.<br>The <code>useDispatch<\/code> function takes a store name as its only argument and returns methods that you can use to update the store, in this case we'll use <code>editPost<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>( function ( wp ) {\n\tvar el = React.createElement;\n\tvar registerPlugin = wp.plugins.registerPlugin;\n\tvar PluginSidebar = wp.editPost.PluginSidebar;\n\tvar TextControl = wp.components.TextControl;\n\tvar useSelect = wp.data.useSelect;\n\tvar useDispatch = wp.data.useDispatch;\n\n\tvar MetaBlockField = function ( props ) {\n\t\tvar metaFieldValue = useSelect( function ( select ) {\n\t\t\treturn select( 'core\/editor' ).getEditedPostAttribute(\n\t\t\t\t'meta'\n\t\t\t)&#91; 'sidebar_plugin_meta_block_field' ];\n\t\t}, &#91;] );\n\n\t\tvar editPost = useDispatch( 'core\/editor' ).editPost;\n\n\t\treturn el( TextControl, {\n\t\t\tlabel: 'Meta Block Field',\n\t\t\tvalue: metaFieldValue,\n\t\t\tonChange: function ( content ) {\n\t\t\t\teditPost( {\n\t\t\t\t\tmeta: { sidebar_plugin_meta_block_field: content },\n\t\t\t\t} );\n\t\t\t},\n\t\t} );\n\t};\n\n\tregisterPlugin( 'my-plugin-sidebar', {\n\t\trender: function () {\n\t\t\treturn el(\n\t\t\t\tPluginSidebar,\n\t\t\t\t{\n\t\t\t\t\tname: 'my-plugin-sidebar',\n\t\t\t\t\ticon: 'admin-post',\n\t\t\t\t\ttitle: 'My plugin sidebar',\n\t\t\t\t},\n\t\t\t\tel(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'plugin-sidebar-content' },\n\t\t\t\t\tel( MetaBlockField )\n\t\t\t\t)\n\t\t\t);\n\t\t},\n\t} );\n} )( window.wp );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>After the update, when the user types, the input control calls <code>editPost<\/code> and updates the editor store on each keystroke.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Update the JavaScript, load the sidebar, and type in the input field. You can confirm it is saved by typing something in the input control and executing the JavaScript snippet in your browser's development console:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.data.select( 'core\/editor' ).getEditedPostAttribute( 'meta' )&#91;\n\t'sidebar_plugin_meta_block_field'\n];\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The message displayed should be what you typed in the input.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When saving a post, you can confirm it is stored properly in the database by reloading after a save and confirming the input control is initialized with the last value you typed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Additional resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Documentation for working with the <a href=\"\/packages\/data\/README.md\">@wordpress\/data package<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions used in this guide:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/packages\/data\/README.md#useselect\">useSelect<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/reference-guides\/data\/data-core-editor.md#geteditedpostattribute\">getEditedPostAttribute<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/packages\/data\/README.md#usedispatch\">useDispatch<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You now have a custom sidebar that you can use to update <code>post_meta<\/code> content.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A complete example is available, download the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/plugin-sidebar-9ee4a6\">plugin-sidebar example<\/a> from the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\">block-development-examples<\/a> repository.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Note<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you have enabled Custom Fields in the 'Panels' page of the Editor 'Preferences' (via the three dots in top right), a field with the same name as the TextControl, in this case <code>sidebar_plugin_meta_block_field<\/code>, will also appear in the custom fields panel at the bottom of the editor window. These two fields have access to the same meta property.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/plugin-sidebar-text-control-custom-field.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Text Control and Custom Field<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>On saving the post the value in the TextControl will be saved first and the value in the custom field will be saved second, so that is the one that ends up persisting in the database. So if you change the value in the TextControl it is still the one in the custom field that ends up getting saved.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This problem does not exist if Custom Fields is not enabled.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you need to have Custom Fields enabled and also have post meta in the sidebar there are two possible solutions:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Precede the name of the meta field with an underscore, so the name in the above example would be <code>_sidebar_plugin_meta_block_field<\/code>. This indicates that the post meta should be treated as private so it will not be visible in the Custom Fields section of a post. With this solution an error will be generated when you save the post unless you add an <code>auth_callback<\/code> property to the <code>args<\/code> array passed to <code>register_post_meta<\/code> with a function that ultimately returns <code>true<\/code>.  See the <code>args<\/code> documentation in the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/register_meta\/#parameters\">post_meta<\/a> page for more info.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>In the TextControl's <code>onChange<\/code> function, target the Value field textarea and set the value there to be the same as the value in the TextControl meta field. The value will then be identical in both places and so you can be assured that if the value is changed in the TextControl then it will still be saved to the database.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>return el( TextControl, {\n  label: 'Meta Block Field',\n  value: metaFieldValue,\n  onChange: function ( content ) {\n    editPost( {\n      meta: { sidebar_plugin_meta_block_field: content }\n    })\n    document.querySelector( {the-value-textarea} ).innerHTML = content;\n  },\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# Plugin Sidebar\n\n## Overview\n\nHow to add a sidebar to your plugin. A sidebar is the region to the far right of the editor. Your plugin can add an additional icon next to the InspectorControls (gear icon) that can be expanded.\n\n![Example sidebar](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/sidebar-up-and-running.png)\n\n_Note: this tutorial covers a custom sidebar, if you are looking to add controls to the sidebar see the [Block Toolbar and Settings Sidebar](\/docs\/getting-started\/fundamentals\/block-in-the-editor.md)_\n\n## Before you start\n\nThe tutorial assumes you have an existing plugin setup and are ready to add PHP and JavaScript code. Please, refer to [Getting started with JavaScript](\/docs\/how-to-guides\/javascript\/README.md) tutorial for an introduction to WordPress plugins and how to use JavaScript to extend the block editor.\n\n## Step-by-step guide\n\n### Step 1: Get a sidebar up and running\n\nThe first step is to tell the editor that there is a new plugin that will have its own sidebar. Use the [registerPlugin](\/packages\/plugins\/README.md), [PluginSidebar](\/packages\/edit-post\/README.md#pluginsidebar), and [createElement](\/packages\/element\/README.md) utilities provided by the `@wordpress\/plugins`, `@wordpress\/edit-post`, and `react` packages, respectively.\n\nAdd the following code to a JavaScript file called `plugin-sidebar.js` and save it within your plugin's directory:\n\n```js\n( function ( wp, React ) {\n\tvar el = React.createElement;\n\tvar registerPlugin = wp.plugins.registerPlugin;\n\tvar PluginSidebar = wp.editPost.PluginSidebar;\n\n\tregisterPlugin( 'my-plugin-sidebar', {\n\t\trender: function () {\n\t\t\treturn el(\n\t\t\t\tPluginSidebar,\n\t\t\t\t{\n\t\t\t\t\tname: 'my-plugin-sidebar',\n\t\t\t\t\ticon: 'admin-post',\n\t\t\t\t\ttitle: 'My plugin sidebar',\n\t\t\t\t},\n\t\t\t\t'Meta field'\n\t\t\t);\n\t\t},\n\t} );\n} )( window.wp, window.React );\n```\n\nFor this code to work, those utilities need to be available in the browser, so you must specify `wp-plugins`, `wp-edit-post`, and `react` as dependencies of your script.\n\nHere is the PHP code to register your script and specify the dependencies:\n\n```php\n<?php\n\n\/*\nPlugin Name: Sidebar plugin\n*\/\n\nfunction sidebar_plugin_register() {\n\twp_register_script(\n\t\t'plugin-sidebar-js',\n\t\tplugins_url( 'plugin-sidebar.js', __FILE__ ),\n\t\tarray( 'wp-plugins', 'wp-edit-post', 'react' )\n\t);\n}\nadd_action( 'init', 'sidebar_plugin_register' );\n\nfunction sidebar_plugin_script_enqueue() {\n\twp_enqueue_script( 'plugin-sidebar-js' );\n}\nadd_action( 'enqueue_block_editor_assets', 'sidebar_plugin_script_enqueue' );\n```\n\nAfter installing and activating this plugin, there is a new icon resembling a tack in the top-right of the editor. Upon clicking it, the plugin's sidebar will be opened:\n\n![Sidebar Up and Running](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/sidebar-up-and-running.png)\n\n### Step 2: Tweak the sidebar style and add controls\n\nAfter the sidebar is up and running, the next step is to fill it up with the necessary components and basic styling.\n\nTo visualize and edit the meta field value you'll use an input component. The `@wordpress\/components` package contains many components available for you to reuse, and, specifically, the [TextControl](\/packages\/components\/src\/text-control\/README.md) is aimed at creating an input field:\n\n```js\n( function ( wp ) {\n\tvar el = React.createElement;\n\tvar registerPlugin = wp.plugins.registerPlugin;\n\tvar PluginSidebar = wp.editPost.PluginSidebar;\n\tvar TextControl = wp.components.TextControl;\n\n\tregisterPlugin( 'my-plugin-sidebar', {\n\t\trender: function () {\n\t\t\treturn el(\n\t\t\t\tPluginSidebar,\n\t\t\t\t{\n\t\t\t\t\tname: 'my-plugin-sidebar',\n\t\t\t\t\ticon: 'admin-post',\n\t\t\t\t\ttitle: 'My plugin sidebar',\n\t\t\t\t},\n\t\t\t\tel(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'plugin-sidebar-content' },\n\t\t\t\t\tel( TextControl, {\n\t\t\t\t\t\tlabel: 'Meta Block Field',\n\t\t\t\t\t\tvalue: 'Initial value',\n\t\t\t\t\t\tonChange: function ( content ) {\n\t\t\t\t\t\t\tconsole.log( 'content changed to ', content );\n\t\t\t\t\t\t},\n\t\t\t\t\t} )\n\t\t\t\t)\n\t\t\t);\n\t\t},\n\t} );\n} )( window.wp );\n```\n\nUpdate the `plugin-sidebar.js` with this new code. Notice that it uses a new utility called `wp.components` from the `@wordpress\/components` package. Be sure to add `wp-components` to the dependencies in the `wp_register_script` function in the PHP file.\n\nThe code introduces:\n\n-   a CSS class `plugin-sidebar-content` to the `div` element to target styles,\n-   a `TextControl` component instead of the plain `'Meta field'` text.\n\nWith the new CSS class available you can add a little style. Create a new file in your plugin directory called `plugin-sidebar.css` with the following to give some padding:\n\n```css\n.plugin-sidebar-content {\n\tpadding: 16px;\n}\n```\n\nRegister the script and enqueue it to load with `enqueue_block_editor_assets` alongside the JavaScript file.\n\nAfter those changes, the PHP code will look like this:\n\n```php\n<?php\n\n\/*\nPlugin Name: Sidebar example\n*\/\n\nfunction sidebar_plugin_register() {\n\twp_register_script(\n\t\t'plugin-sidebar-js',\n\t\tplugins_url( 'plugin-sidebar.js', __FILE__ ),\n\t\tarray(\n\t\t\t'react',\n\t\t\t'wp-plugins',\n\t\t\t'wp-edit-post',\n\t\t\t'wp-components'\n\t\t)\n\t);\n\twp_register_style(\n\t\t'plugin-sidebar-css',\n\t\tplugins_url( 'plugin-sidebar.css', __FILE__ )\n\t);\n}\nadd_action( 'init', 'sidebar_plugin_register' );\n\nfunction sidebar_plugin_script_enqueue() {\n\twp_enqueue_script( 'plugin-sidebar-js' );\n\twp_enqueue_style( 'plugin-sidebar-css' );\n}\nadd_action( 'enqueue_block_editor_assets', 'sidebar_plugin_script_enqueue' );\n```\n\nReload the editor and open the sidebar:\n\n![Sidebar with style and controls](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/sidebar-style-and-controls.png)\n\nThis code doesn't let users store or retrieve data just yet, so the next steps will focus on how to connect it to the meta block field.\n\n### Step 3: Register the meta field\n\nTo work with fields in the `post_meta` table, use the [register_post_meta](https:\/\/developer.wordpress.org\/reference\/functions\/register_post_meta\/). function to create a new field called `sidebar_plugin_meta_block_field`.\n\nNote: this field needs to be available to the REST API because that's how the block editor access data.\n\nAdd the PHP code in your plugins `init` callback function:\n\n```php\nregister_post_meta( 'post', 'sidebar_plugin_meta_block_field', array(\n\t'show_in_rest' => true,\n\t'single' => true,\n\t'type' => 'string',\n) );\n```\n\nTo confirm, query the block editor store to see the field is loaded. After implementing, reload the editor page and open your browser's developer console. Use this JavaScript snippet in the console to confirm:\n\n```js\nwp.data.select( 'core\/editor' ).getCurrentPost().meta;\n```\n\nThe function will return an object containing the registered meta field you registered.\n\nIf the code returns `undefined` make sure your post type supports `custom-fields`. Either when [registering the post](https:\/\/developer.wordpress.org\/reference\/functions\/register_post_type\/#supports) or with [add_post_type_support function](https:\/\/developer.wordpress.org\/reference\/functions\/add_post_type_support\/).\n\n### Step 4: Initialize the input control\n\nWith the field available in the editor store, it can now be surfaced to the UI. We extract the input control to a function to keep the code clean as we add functionality.\n\n```js\n( function ( wp ) {\n\tvar el = React.createElement;\n\tvar registerPlugin = wp.plugins.registerPlugin;\n\tvar PluginSidebar = wp.editPost.PluginSidebar;\n\tvar TextControl = wp.components.TextControl;\n\n\tvar MetaBlockField = function () {\n\t\treturn el( TextControl, {\n\t\t\tlabel: 'Meta Block Field',\n\t\t\tvalue: 'Initial value',\n\t\t\tonChange: function ( content ) {\n\t\t\t\tconsole.log( 'content changed to ', content );\n\t\t\t},\n\t\t} );\n\t};\n\n\tregisterPlugin( 'my-plugin-sidebar', {\n\t\trender: function () {\n\t\t\treturn el(\n\t\t\t\tPluginSidebar,\n\t\t\t\t{\n\t\t\t\t\tname: 'my-plugin-sidebar',\n\t\t\t\t\ticon: 'admin-post',\n\t\t\t\t\ttitle: 'My plugin sidebar',\n\t\t\t\t},\n\t\t\t\tel(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'plugin-sidebar-content' },\n\t\t\t\t\tel( MetaBlockField )\n\t\t\t\t)\n\t\t\t);\n\t\t},\n\t} );\n} )( window.wp );\n```\n\nWe want to initialize the value in the `MetaBlockField` component with the value of `sidebar_plugin_meta_block_field`, and keep it updated when that value changes.\n\nThe `useSelect` function is used to fetch data when the component loads and will update if the data changes. Here is the code update with `useSelect`:\n\n```js\n( function ( wp ) {\n\tvar el = React.createElement;\n\tvar registerPlugin = wp.plugins.registerPlugin;\n\tvar PluginSidebar = wp.editPost.PluginSidebar;\n\tvar Text = wp.components.TextControl;\n\tvar useSelect = wp.data.useSelect;\n\n\tvar MetaBlockField = function () {\n\t\tvar metaFieldValue = useSelect( function ( select ) {\n\t\t\treturn select( 'core\/editor' ).getEditedPostAttribute(\n\t\t\t\t'meta'\n\t\t\t)[ 'sidebar_plugin_meta_block_field' ];\n\t\t}, [] );\n\n\t\treturn el( Text, {\n\t\t\tlabel: 'Meta Block Field',\n\t\t\tvalue: metaFieldValue,\n\t\t\tonChange: function ( content ) {\n\t\t\t\tconsole.log( 'content has changed to ', content );\n\t\t\t},\n\t\t} );\n\t};\n\n\tregisterPlugin( 'my-plugin-sidebar', {\n\t\trender: function () {\n\t\t\treturn el(\n\t\t\t\tPluginSidebar,\n\t\t\t\t{\n\t\t\t\t\tname: 'my-plugin-sidebar',\n\t\t\t\t\ticon: 'admin-post',\n\t\t\t\t\ttitle: 'My plugin sidebar',\n\t\t\t\t},\n\t\t\t\tel(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'plugin-sidebar-content' },\n\t\t\t\t\tel( MetaBlockField )\n\t\t\t\t)\n\t\t\t);\n\t\t},\n\t} );\n} )( window.wp );\n```\n\nThe `wp.data.useSelect` function is from the `@wordpress\/data` package, so `wp-data` needs to be added as a dependency in the `wp_register_script` function in PHP.\n\nNote: The `getEditedPostAttribute` call is used to retrieve the most recent values of the post, including user editions that haven't been yet saved.\n\nConfirm it's working by updating the code, reloading, and opening the sidebar. The input's content is no longer `Initial value` but a void string. Users can't type values yet, but you can check that the component is updated if the value in the store changes. Open the browser's console, execute\n\n```js\nwp.data\n\t.dispatch( 'core\/editor' )\n\t.editPost( { meta: { sidebar_plugin_meta_block_field: 'hello world!' } } );\n```\n\nYou can observe the content changing in the input component.\n\n### Step 5: Update the meta field when the input's content changes\n\nThe last step is to update the meta field when the input content changes.\nThe `useDispatch` function takes a store name as its only argument and returns methods that you can use to update the store, in this case we'll use `editPost`\n\n```js\n( function ( wp ) {\n\tvar el = React.createElement;\n\tvar registerPlugin = wp.plugins.registerPlugin;\n\tvar PluginSidebar = wp.editPost.PluginSidebar;\n\tvar TextControl = wp.components.TextControl;\n\tvar useSelect = wp.data.useSelect;\n\tvar useDispatch = wp.data.useDispatch;\n\n\tvar MetaBlockField = function ( props ) {\n\t\tvar metaFieldValue = useSelect( function ( select ) {\n\t\t\treturn select( 'core\/editor' ).getEditedPostAttribute(\n\t\t\t\t'meta'\n\t\t\t)[ 'sidebar_plugin_meta_block_field' ];\n\t\t}, [] );\n\n\t\tvar editPost = useDispatch( 'core\/editor' ).editPost;\n\n\t\treturn el( TextControl, {\n\t\t\tlabel: 'Meta Block Field',\n\t\t\tvalue: metaFieldValue,\n\t\t\tonChange: function ( content ) {\n\t\t\t\teditPost( {\n\t\t\t\t\tmeta: { sidebar_plugin_meta_block_field: content },\n\t\t\t\t} );\n\t\t\t},\n\t\t} );\n\t};\n\n\tregisterPlugin( 'my-plugin-sidebar', {\n\t\trender: function () {\n\t\t\treturn el(\n\t\t\t\tPluginSidebar,\n\t\t\t\t{\n\t\t\t\t\tname: 'my-plugin-sidebar',\n\t\t\t\t\ticon: 'admin-post',\n\t\t\t\t\ttitle: 'My plugin sidebar',\n\t\t\t\t},\n\t\t\t\tel(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'plugin-sidebar-content' },\n\t\t\t\t\tel( MetaBlockField )\n\t\t\t\t)\n\t\t\t);\n\t\t},\n\t} );\n} )( window.wp );\n```\n\nAfter the update, when the user types, the input control calls `editPost` and updates the editor store on each keystroke.\n\nUpdate the JavaScript, load the sidebar, and type in the input field. You can confirm it is saved by typing something in the input control and executing the JavaScript snippet in your browser's development console:\n\n```js\nwp.data.select( 'core\/editor' ).getEditedPostAttribute( 'meta' )[\n\t'sidebar_plugin_meta_block_field'\n];\n```\n\nThe message displayed should be what you typed in the input.\n\nWhen saving a post, you can confirm it is stored properly in the database by reloading after a save and confirming the input control is initialized with the last value you typed.\n\n## Additional resources\n\nDocumentation for working with the [@wordpress\/data package](\/packages\/data\/README.md).\n\nFunctions used in this guide:\n\n-   [useSelect](\/packages\/data\/README.md#useselect).\n-   [getEditedPostAttribute](\/docs\/reference-guides\/data\/data-core-editor.md#geteditedpostattribute)\n-   [useDispatch](\/packages\/data\/README.md#usedispatch)\n\n## Conclusion\n\nYou now have a custom sidebar that you can use to update `post_meta` content.\n\nA complete example is available, download the [plugin-sidebar example](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/plugin-sidebar-9ee4a6) from the [block-development-examples](https:\/\/github.com\/WordPress\/block-development-examples) repository.\n\n### Note\n\nIf you have enabled Custom Fields in the 'Panels' page of the Editor 'Preferences' (via the three dots in top right), a field with the same name as the TextControl, in this case `sidebar_plugin_meta_block_field`, will also appear in the custom fields panel at the bottom of the editor window. These two fields have access to the same meta property.\n\n![Text Control and Custom Field](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/assets\/plugin-sidebar-text-control-custom-field.png)\n\nOn saving the post the value in the TextControl will be saved first and the value in the custom field will be saved second, so that is the one that ends up persisting in the database. So if you change the value in the TextControl it is still the one in the custom field that ends up getting saved.\n\nThis problem does not exist if Custom Fields is not enabled.\n\nIf you need to have Custom Fields enabled and also have post meta in the sidebar there are two possible solutions:\n\n1. Precede the name of the meta field with an underscore, so the name in the above example would be `_sidebar_plugin_meta_block_field`. This indicates that the post meta should be treated as private so it will not be visible in the Custom Fields section of a post. With this solution an error will be generated when you save the post unless you add an `auth_callback` property to the `args` array passed to `register_post_meta` with a function that ultimately returns `true`.  See the `args` documentation in the [post_meta](https:\/\/developer.wordpress.org\/reference\/functions\/register_meta\/#parameters) page for more info.\n2. In the TextControl's `onChange` function, target the Value field textarea and set the value there to be the same as the value in the TextControl meta field. The value will then be identical in both places and so you can be assured that if the value is changed in the TextControl then it will still be saved to the database.\n\n```js\nreturn el( TextControl, {\n  label: 'Meta Block Field',\n  value: metaFieldValue,\n  onChange: function ( content ) {\n    editPost( {\n      meta: { sidebar_plugin_meta_block_field: content }\n    })\n    document.querySelector( {the-value-textarea} ).innerHTML = content;\n  },\n} );\n```\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/format-api.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Formatting Toolbar API<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Overview<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Format API makes it possible for developers to add custom buttons to the formatting toolbar and have them apply a <em>format<\/em> to a text selection. Bold is an example of a standard button in the formatting toolbar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2021\/12\/format-api-example.gif\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Format API Toolbar animated example<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>In WordPress lingo, a <em>format<\/em> is a <a href=\"https:\/\/www.w3.org\/TR\/html5\/textlevel-semantics.html#text-level-semantics-usage-summary\">HTML tag with text-level semantics<\/a> used to give some special meaning to a text selection. For example, in this tutorial, the button to be hooked into the format toolbar will wrap a particular text selection with the <code>&lt;samp><\/code> HTML tag.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Before you start<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This guide assumes you are already familiar with WordPress plugins and loading JavaScript with them, see the <a href=\"https:\/\/developer.wordpress.org\/plugins\/\">Plugin Handbook<\/a> or <a href=\"\/docs\/how-to-guides\/javascript\/README.md\">JavaScript Tutorial<\/a> to brush up.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You will need:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>WordPress development environment<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>A minimal plugin activated and setup ready to edit<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>JavaScript setup for building and enqueuing<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/format-api-f14b86\">complete format-api example<\/a> is available that you can use as a reference for your setup.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Step-by-step guide<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The guide will refer to <code>src\/index.js<\/code> as the JavaScript file where the changes are made. After each step, running <code>npm run build<\/code> creates <code>build\/index.js<\/code> that is then loaded on the post editor screen.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 1: Register a new format<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The first step is to register the new format, add <code>src\/index.js<\/code> with the following:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerFormatType } from '@wordpress\/rich-text';\n\nregisterFormatType( 'my-custom-format\/sample-output', {\n\ttitle: 'Sample output',\n\ttagName: 'samp',\n\tclassName: null,\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The list of available format types is maintained in the <code>core\/rich-text<\/code> store. You can query the store to check that your custom format is now available.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Run this code in your browser's console to confirm:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.data.select( 'core\/rich-text' ).getFormatTypes();\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>It'll return an array containing the format types, including your own.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 2: Add a button to the toolbar<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>With the format available, the next step is to add a button to the UI by registering a component for the edit property.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using the <code>RichTextToolbarButton<\/code> component, update <code>src\/index.js<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerFormatType } from '@wordpress\/rich-text';\nimport { RichTextToolbarButton } from '@wordpress\/block-editor';\n\nconst MyCustomButton = ( props ) => {\n\treturn (\n\t\t<richtexttoolbarbutton<br>\t\t\ticon=\"editor-code\"\n\t\t\ttitle=\"Sample output\"\n\t\t\tonClick={ () => {\n\t\t\t\tconsole.log( 'toggle format' );\n\t\t\t} }\n\t\t\/>\n\t);\n};\n\nregisterFormatType( 'my-custom-format\/sample-output', {\n\ttitle: 'Sample output',\n\ttagName: 'samp',\n\tclassName: null,\n\tedit: MyCustomButton,\n} );\n<\/richtexttoolbarbutton<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Let's check that everything is working as expected. Build and reload and then select any block containing text like for example the paragraph block. Confirm the new button was added to the format toolbar.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2021\/12\/format-api-toolbar.png\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Toolbar with custom button<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Click the button and check the console.log for the \"toggle format\" message.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you do not see the button or message, double check you are building and loading the JavScript properly; and check the console.log for any errors.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 3: Apply a format when clicked<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Next is to update the button to apply a format when clicked.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For our example, the <code>&lt;samp><\/code> tag format is binary - either a text selection has the tag or not, so we can use the <code>toggleFormat<\/code> method from the RichText package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Update <code>src\/index.js<\/code> changing the <code>onClick<\/code> action:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerFormatType, toggleFormat } from '@wordpress\/rich-text';\nimport { RichTextToolbarButton } from '@wordpress\/block-editor';\n\nconst MyCustomButton = ( { isActive, onChange, value } ) => {\n\treturn (\n\t\t<richtexttoolbarbutton<br>\t\t\ticon=\"editor-code\"\n\t\t\ttitle=\"Sample output\"\n\t\t\tonClick={ () => {\n\t\t\t\tonChange(\n\t\t\t\t\ttoggleFormat( value, {\n\t\t\t\t\t\ttype: 'my-custom-format\/sample-output',\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t} }\n\t\t\tisActive={ isActive }\n\t\t\/>\n\t);\n};\n\nregisterFormatType( 'my-custom-format\/sample-output', {\n\ttitle: 'Sample output',\n\ttagName: 'samp',\n\tclassName: null,\n\tedit: MyCustomButton,\n} );\n<\/richtexttoolbarbutton<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Confirm it is working: first build and reload, then make a text selection and click the button. Your browser will likely display that selection differently than the surrounding text.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can also confirm by switching to HTML view (Code editor <code>Ctrl+Shift+Alt+M<\/code>) and see the text selection wrapped with <code>&lt;samp><\/code> HTML tags.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Use the <code>className<\/code> option when registering to add your own custom class to the tag. You can use that class and custom CSS to target that element and style as you wish.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 4: Show the button only for specific blocks (Optional)<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>By default, the button is rendered on every rich text toolbar (image captions, buttons, paragraphs, etc). You can render the button only on blocks of a certain type by using <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-data\">the data API<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here is an example that only shows the button for Paragraph blocks:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerFormatType, toggleFormat } from '@wordpress\/rich-text';\nimport { RichTextToolbarButton } from '@wordpress\/block-editor';\nimport { useSelect } from '@wordpress\/data';\n\nfunction ConditionalButton( { isActive, onChange, value } ) {\n\tconst selectedBlock = useSelect( ( select ) => {\n\t\treturn select( 'core\/block-editor' ).getSelectedBlock();\n\t}, &#91;] );\n\n\tif ( selectedBlock &amp;&amp; selectedBlock.name !== 'core\/paragraph' ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<richtexttoolbarbutton<br>\t\t\ticon=\"editor-code\"\n\t\t\ttitle=\"Sample output\"\n\t\t\tonClick={ () => {\n\t\t\t\tonChange(\n\t\t\t\t\ttoggleFormat( value, {\n\t\t\t\t\t\ttype: 'my-custom-format\/sample-output',\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t} }\n\t\t\tisActive={ isActive }\n\t\t\/>\n\t);\n}\n\nregisterFormatType( 'my-custom-format\/sample-output', {\n\ttitle: 'Sample output',\n\ttagName: 'samp',\n\tclassName: null,\n\tedit: ConditionalButton,\n} );\n<\/richtexttoolbarbutton<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 5: Add a button outside of the dropdown (Optional)<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Using the <code>RichTextToolbarButton<\/code> component, the button is added to the default dropdown menu. You can add the button directly to the toolbar by using the <code>BlockControls<\/code> component.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerFormatType, toggleFormat } from '@wordpress\/rich-text';\nimport { BlockControls } from '@wordpress\/block-editor';\nimport { ToolbarGroup, ToolbarButton } from '@wordpress\/components';\n\nconst MyCustomButton = ( { isActive, onChange, value } ) => {\n\treturn (\n\t\t<blockcontrols>\n\t\t\t<toolbargroup>\n\t\t\t\t<toolbarbutton<br>\t\t\t\t\ticon=\"editor-code\"\n\t\t\t\t\ttitle=\"Sample output\"\n\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\tonChange(\n\t\t\t\t\t\t\ttoggleFormat( value, {\n\t\t\t\t\t\t\t\ttype: 'my-custom-format\/sample-output',\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t);\n\t\t\t\t\t} }\n\t\t\t\t\tisActive={ isActive }\n\t\t\t\t\/>\n\t\t\t<\/toolbarbutton<br><\/toolbargroup>\n\t\t<\/blockcontrols>\n\t);\n};\n\nregisterFormatType( 'my-custom-format\/sample-output', {\n\ttitle: 'Sample output',\n\ttagName: 'samp',\n\tclassName: null,\n\tedit: MyCustomButton,\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Troubleshooting<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you run into errors:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Double check that you run <code>npm run build<\/code> first.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Confirm no syntax errors or issues in build process.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Confirm the JavaScript is loading in the editor.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Check for any console error messages.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Additional resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Reference documentation used in this guide:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>RichText: <a href=\"\/packages\/rich-text\/README.md#registerformattype\"><code>registerFormatType<\/code><\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Components: <a href=\"\/packages\/block-editor\/src\/components\/rich-text#richtexttoolbarbutton\"><code>RichTextToolbarButton<\/code><\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>RichText: <a href=\"\/packages\/rich-text\/README.md#applyformat\"><code>applyFormat<\/code><\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>RichText: <a href=\"\/packages\/rich-text\/README.md#removeformat\"><code>removeFormat<\/code><\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>RichText: <a href=\"\/packages\/rich-text\/README.md#toggleformat\"><code>toggleFormat<\/code><\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The guide showed you how to add a button to the toolbar and have it apply a format to the selected text. Try it out and see what you can build with it in your next plugin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Download the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/format-api-f14b86\">format-api example<\/a> from the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\">block-development-examples<\/a> repository.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Formatting Toolbar API\n\n## Overview\n\nThe Format API makes it possible for developers to add custom buttons to the formatting toolbar and have them apply a _format_ to a text selection. Bold is an example of a standard button in the formatting toolbar.\n\n![Format API Toolbar animated example](https:\/\/developer.wordpress.org\/files\/2021\/12\/format-api-example.gif)\n\nIn WordPress lingo, a _format_ is a [HTML tag with text-level semantics](https:\/\/www.w3.org\/TR\/html5\/textlevel-semantics.html#text-level-semantics-usage-summary) used to give some special meaning to a text selection. For example, in this tutorial, the button to be hooked into the format toolbar will wrap a particular text selection with the `<samp>` HTML tag.\n\n## Before you start\n\nThis guide assumes you are already familiar with WordPress plugins and loading JavaScript with them, see the [Plugin Handbook](https:\/\/developer.wordpress.org\/plugins\/) or [JavaScript Tutorial](\/docs\/how-to-guides\/javascript\/README.md) to brush up.\n\nYou will need:\n\n-   WordPress development environment\n-   A minimal plugin activated and setup ready to edit\n-   JavaScript setup for building and enqueuing\n\nThe [complete format-api example](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/format-api-f14b86) is available that you can use as a reference for your setup.\n\n## Step-by-step guide\n\nThe guide will refer to `src\/index.js` as the JavaScript file where the changes are made. After each step, running `npm run build` creates `build\/index.js` that is then loaded on the post editor screen.\n\n### Step 1: Register a new format\n\nThe first step is to register the new format, add `src\/index.js` with the following:\n\n```js\nimport { registerFormatType } from '@wordpress\/rich-text';\n\nregisterFormatType( 'my-custom-format\/sample-output', {\n\ttitle: 'Sample output',\n\ttagName: 'samp',\n\tclassName: null,\n} );\n```\n\nThe list of available format types is maintained in the `core\/rich-text` store. You can query the store to check that your custom format is now available.\n\nRun this code in your browser's console to confirm:\n\n```js\nwp.data.select( 'core\/rich-text' ).getFormatTypes();\n```\n\nIt'll return an array containing the format types, including your own.\n\n### Step 2: Add a button to the toolbar\n\nWith the format available, the next step is to add a button to the UI by registering a component for the edit property.\n\nUsing the `RichTextToolbarButton` component, update `src\/index.js`:\n\n```js\nimport { registerFormatType } from '@wordpress\/rich-text';\nimport { RichTextToolbarButton } from '@wordpress\/block-editor';\n\nconst MyCustomButton = ( props ) => {\n\treturn (\n\t\t<RichTextToolbarButton\n\t\t\ticon=\"editor-code\"\n\t\t\ttitle=\"Sample output\"\n\t\t\tonClick={ () => {\n\t\t\t\tconsole.log( 'toggle format' );\n\t\t\t} }\n\t\t\/>\n\t);\n};\n\nregisterFormatType( 'my-custom-format\/sample-output', {\n\ttitle: 'Sample output',\n\ttagName: 'samp',\n\tclassName: null,\n\tedit: MyCustomButton,\n} );\n```\n\nLet's check that everything is working as expected. Build and reload and then select any block containing text like for example the paragraph block. Confirm the new button was added to the format toolbar.\n\n![Toolbar with custom button](https:\/\/developer.wordpress.org\/files\/2021\/12\/format-api-toolbar.png)\n\nClick the button and check the console.log for the \"toggle format\" message.\n\nIf you do not see the button or message, double check you are building and loading the JavScript properly; and check the console.log for any errors.\n\n### Step 3: Apply a format when clicked\n\nNext is to update the button to apply a format when clicked.\n\nFor our example, the `<samp>` tag format is binary - either a text selection has the tag or not, so we can use the `toggleFormat` method from the RichText package.\n\nUpdate `src\/index.js` changing the `onClick` action:\n\n```js\nimport { registerFormatType, toggleFormat } from '@wordpress\/rich-text';\nimport { RichTextToolbarButton } from '@wordpress\/block-editor';\n\nconst MyCustomButton = ( { isActive, onChange, value } ) => {\n\treturn (\n\t\t<RichTextToolbarButton\n\t\t\ticon=\"editor-code\"\n\t\t\ttitle=\"Sample output\"\n\t\t\tonClick={ () => {\n\t\t\t\tonChange(\n\t\t\t\t\ttoggleFormat( value, {\n\t\t\t\t\t\ttype: 'my-custom-format\/sample-output',\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t} }\n\t\t\tisActive={ isActive }\n\t\t\/>\n\t);\n};\n\nregisterFormatType( 'my-custom-format\/sample-output', {\n\ttitle: 'Sample output',\n\ttagName: 'samp',\n\tclassName: null,\n\tedit: MyCustomButton,\n} );\n```\n\nConfirm it is working: first build and reload, then make a text selection and click the button. Your browser will likely display that selection differently than the surrounding text.\n\nYou can also confirm by switching to HTML view (Code editor `Ctrl+Shift+Alt+M`) and see the text selection wrapped with `<samp>` HTML tags.\n\nUse the `className` option when registering to add your own custom class to the tag. You can use that class and custom CSS to target that element and style as you wish.\n\n### Step 4: Show the button only for specific blocks (Optional)\n\nBy default, the button is rendered on every rich text toolbar (image captions, buttons, paragraphs, etc). You can render the button only on blocks of a certain type by using [the data API](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-data).\n\nHere is an example that only shows the button for Paragraph blocks:\n\n```js\nimport { registerFormatType, toggleFormat } from '@wordpress\/rich-text';\nimport { RichTextToolbarButton } from '@wordpress\/block-editor';\nimport { useSelect } from '@wordpress\/data';\n\nfunction ConditionalButton( { isActive, onChange, value } ) {\n\tconst selectedBlock = useSelect( ( select ) => {\n\t\treturn select( 'core\/block-editor' ).getSelectedBlock();\n\t}, [] );\n\n\tif ( selectedBlock && selectedBlock.name !== 'core\/paragraph' ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<RichTextToolbarButton\n\t\t\ticon=\"editor-code\"\n\t\t\ttitle=\"Sample output\"\n\t\t\tonClick={ () => {\n\t\t\t\tonChange(\n\t\t\t\t\ttoggleFormat( value, {\n\t\t\t\t\t\ttype: 'my-custom-format\/sample-output',\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t} }\n\t\t\tisActive={ isActive }\n\t\t\/>\n\t);\n}\n\nregisterFormatType( 'my-custom-format\/sample-output', {\n\ttitle: 'Sample output',\n\ttagName: 'samp',\n\tclassName: null,\n\tedit: ConditionalButton,\n} );\n```\n\n### Step 5: Add a button outside of the dropdown (Optional)\n\nUsing the `RichTextToolbarButton` component, the button is added to the default dropdown menu. You can add the button directly to the toolbar by using the `BlockControls` component.\n\n```js\nimport { registerFormatType, toggleFormat } from '@wordpress\/rich-text';\nimport { BlockControls } from '@wordpress\/block-editor';\nimport { ToolbarGroup, ToolbarButton } from '@wordpress\/components';\n\nconst MyCustomButton = ( { isActive, onChange, value } ) => {\n\treturn (\n\t\t<BlockControls>\n\t\t\t<ToolbarGroup>\n\t\t\t\t<ToolbarButton\n\t\t\t\t\ticon=\"editor-code\"\n\t\t\t\t\ttitle=\"Sample output\"\n\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\tonChange(\n\t\t\t\t\t\t\ttoggleFormat( value, {\n\t\t\t\t\t\t\t\ttype: 'my-custom-format\/sample-output',\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t);\n\t\t\t\t\t} }\n\t\t\t\t\tisActive={ isActive }\n\t\t\t\t\/>\n\t\t\t<\/ToolbarGroup>\n\t\t<\/BlockControls>\n\t);\n};\n\nregisterFormatType( 'my-custom-format\/sample-output', {\n\ttitle: 'Sample output',\n\ttagName: 'samp',\n\tclassName: null,\n\tedit: MyCustomButton,\n} );\n```\n\n## Troubleshooting\n\nIf you run into errors:\n\n-   Double check that you run `npm run build` first.\n-   Confirm no syntax errors or issues in build process.\n-   Confirm the JavaScript is loading in the editor.\n-   Check for any console error messages.\n\n## Additional resources\n\nReference documentation used in this guide:\n\n-   RichText: [`registerFormatType`](\/packages\/rich-text\/README.md#registerformattype)\n-   Components: [`RichTextToolbarButton`](\/packages\/block-editor\/src\/components\/rich-text#richtexttoolbarbutton)\n-   RichText: [`applyFormat`](\/packages\/rich-text\/README.md#applyformat)\n-   RichText: [`removeFormat`](\/packages\/rich-text\/README.md#removeformat)\n-   RichText: [`toggleFormat`](\/packages\/rich-text\/README.md#toggleformat)\n\n## Conclusion\n\nThe guide showed you how to add a button to the toolbar and have it apply a format to the selected text. Try it out and see what you can build with it in your next plugin.\n\nDownload the [format-api example](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/format-api-f14b86) from the [block-development-examples](https:\/\/github.com\/WordPress\/block-development-examples) repository.\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/internationalization.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Internationalization<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">What is internationalization?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Internationalization is the process to provide multiple language support to software, in this case WordPress. Internationalization is often abbreviated as <strong>i18n<\/strong>, where 18 stands for the number of letters between the first <em>i<\/em> and the last <em>n<\/em>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Providing i18n support to your plugin and theme allows it to reach the largest possible audience, even without requiring you to provide the additional language translations. When you upload your software to WordPress.org, all JS and PHP files will automatically be parsed. Any detected translation strings are added to <a href=\"https:\/\/translate.wordpress.org\/\">translate.wordpress.org<\/a> to allow the community to translate, ensuring WordPress plugins and themes are available in as many languages as possible.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For PHP, WordPress has a long established process, see <a href=\"https:\/\/developer.wordpress.org\/plugins\/internationalization\/how-to-internationalize-your-plugin\/\">How to Internationalize Your Plugin<\/a>. The release of WordPress 5.0 brings a similar process for translation to JavaScript code.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">How to use i18n in JavaScript<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>WordPress 5.0 introduced the wp-i18n JavaScript package that provides the functions needed to add translatable strings as you would in PHP.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First, add <strong>wp-i18n<\/strong> as a dependency when registering your script:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * Plugin Name: Myguten Plugin\n * Text Domain: myguten\n *\/\nfunction myguten_block_init() {\n    wp_register_script(\n        'myguten-script',\n        plugins_url( 'block.js', __FILE__ ),\n        array( 'wp-blocks', 'react', 'wp-i18n', 'wp-block-editor' )\n    );\n\n    register_block_type( 'myguten\/simple', array(\n\t\t'api_version' => 3,\n        'editor_script' => 'myguten-script',\n    ) );\n}\nadd_action( 'init', 'myguten_block_init' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In your code, you can include the i18n functions. The most common function is <strong>__<\/strong> (a double underscore) which provides translation of a simple string. Here is a basic block example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { __ } from '@wordpress\/i18n';\nimport { registerBlockType } from '@wordpress\/blocks';\nimport { useBlockProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'myguten\/simple', {\n\tapiVersion: 3,\n\ttitle: __( 'Simple Block', 'myguten' ),\n\tcategory: 'widgets',\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps( { style: { color: 'red' } } );\n\n\t\treturn <p {=\"\" ...blockprops=\"\" }=\"\">{ __( 'Hello World', 'myguten' ) }<\/p>;\n\t},\n\n\tsave: () => {\n\t\tconst blockProps = useBlockProps.save( { style: { color: 'red' } } );\n\n\t\treturn <p {=\"\" ...blockprops=\"\" }=\"\">{ __( 'Hello World', 'myguten' ) }<\/p>;\n\t},\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the above example, the function will use the first argument for the string to be translated. The second argument is the text domain which must match the text domain slug specified by your plugin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Common functions available, these mirror their PHP counterparts are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>__( 'Hello World', 'my-text-domain' )<\/code> - Translate a certain string.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>_n( '%s Comment', '%s Comments', numberOfComments, 'my-text-domain' )<\/code> - Translate and retrieve the singular or plural form based on the supplied number.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>_x( 'Default', 'block style', 'my-text-domain' )<\/code> - Translate a certain string with some additional context.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:html -->\n<div class=\"callout callout-alert\">\n<strong>Note:<\/strong> Every string displayed to the user should be wrapped in an i18n function.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>After all strings in your code is wrapped, the final step is to tell WordPress your JavaScript contains translations, using the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_set_script_translations\/\">wp_set_script_translations()<\/a> function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\tfunction myguten_set_script_translations() {\n\t\twp_set_script_translations( 'myguten-script', 'myguten' );\n\t}\n\tadd_action( 'init', 'myguten_set_script_translations' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This is all you need to make your plugin JavaScript code translatable.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you set script translations for a handle WordPress will automatically figure out if a translations file exists on translate.wordpress.org, and if so ensure that it's loaded into <code>wp.i18n<\/code> before your script runs. With translate.wordpress.org, plugin authors also do not need to worry about setting up their own infrastructure for translations and can rely on a global community with dozens of active locales. Read more about <a href=\"https:\/\/make.wordpress.org\/meta\/handbook\/documentation\/translations\/\">WordPress Translations<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Provide your own translations<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You can create and ship your own translations with your plugin, if you have sufficient knowledge of the language(s) you can ensure the translations are available.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Create the translation file<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The translation files must be in the JED 1.x JSON format.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To create a JED translation file, first you need to extract the strings from the text. Typically, the language files all live in a directory called <code>languages<\/code> in your plugin. Using <a href=\"https:\/\/wp-cli.org\/\">WP-CLI<\/a>, you create a <code>.pot<\/code> file using the following command from within your plugin directory:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>mkdir languages\nwp i18n make-pot .\/ languages\/myguten.pot\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This will create the file <code>myguten.pot<\/code> which contains all the translatable strings from your project.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>msgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: Scratch Plugin\\n\"\n\"Report-Msgid-Bugs-To: https:\/\/wordpress.org\/support\/plugin\/scratch\\n\"\n\"Last-Translator: FULL NAME <email@address>\\n\"\n\"Language-Team: LANGUAGE <ll@li.org>\\n\"\n\"MIME-Version: 1.0\\n\"\n\"Content-Type: text\/plain; charset=UTF-8\\n\"\n\"Content-Transfer-Encoding: 8bit\\n\"\n\"POT-Creation-Date: 2019-03-08T11:26:56-08:00\\n\"\n\"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n\"\n\"X-Generator: WP-CLI 2.1.0\\n\"\n\"X-Domain: myguten\\n\"\n\n#. Plugin Name of the plugin\nmsgid \"Scratch Plugin\"\nmsgstr \"\"\n\n#: block.js:6\nmsgid \"Simple Block\"\nmsgstr \"\"\n\n#: block.js:13\n#: block.js:21\nmsgid \"Hello World\"\nmsgstr \"\"\n<\/ll@li.org><\/email@address><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Here, <code>msgid<\/code> is the string to be translated, and <code>msgstr<\/code> is the actual translation. In the POT file, <code>msgstr<\/code> will always be empty.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This POT file can then be used as the template for new translations. You should <strong>copy the file<\/strong> using the language code you are going to translate, this example will use the Esperanto (eo) language:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>cp myguten.pot myguten-eo.po\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>For this simple example, you can simply edit the <code>.po<\/code> file in your editor and add the translation to all the <code>msgstr<\/code> sets. For a larger, more complex set of translation, the <a href=\"https:\/\/glotpress.blog\/\">GlotPress<\/a> and <a href=\"https:\/\/poedit.net\/\">Poedit<\/a> tools exist to help.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You need also to add the <code>Language: eo<\/code> parameter. Here is full <code>myguten-eo.po<\/code> translated file<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Copyright (C) 2019\n# This file is distributed under the same license as the Scratch Plugin plugin.\nmsgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: Scratch Plugin\\n\"\n\"Report-Msgid-Bugs-To: https:\/\/wordpress.org\/support\/plugin\/scratch\\n\"\n\"Last-Translator: Marcus Kazmierczak <marcus@mkaz.com>\\n\"\n\"Language-Team: Esperanto <marcus@mkaz.com>\\n\"\n\"Language: eo\\n\"\n\"MIME-Version: 1.0\\n\"\n\"Content-Type: text\/plain; charset=UTF-8\\n\"\n\"Content-Transfer-Encoding: 8bit\\n\"\n\"POT-Creation-Date: 2019-02-18T07:20:46-08:00\\n\"\n\"PO-Revision-Date: 2019-02-18 08:16-0800\\n\"\n\"X-Generator: Poedit 2.2.1\\n\"\n\"X-Domain: myguten\\n\"\n\n#. Plugin Name of the plugin\nmsgid \"Scratch Plugin\"\nmsgstr \"Scratch kromprogrameto\"\n\n#: block.js:6\nmsgid \"Simple Block\"\nmsgstr \"Simpla bloko\"\n\n#: block.js:13 block.js:21\nmsgid \"Hello World\"\nmsgstr \"Saltuon mundo\"\n<\/marcus@mkaz.com><\/marcus@mkaz.com><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The last step to create the translation file is to convert the <code>myguten-eo.po<\/code> to the JSON format needed. For this, you can use WP-CLI's <a href=\"https:\/\/developer.wordpress.org\/cli\/commands\/i18n\/make-json\/\"><code>wp i18n make-json<\/code> command<\/a>, which requires WP-CLI v2.2.0 and later.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp i18n make-json myguten-eo.po --no-purge\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This will generate the JSON file <code>myguten-eo-[md5].json<\/code> with the contents:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"translation-revision-date\": \"2019-04-26T13:30:11-07:00\",\n\t\"generator\": \"WP-CLI\/2.2.0\",\n\t\"source\": \"block.js\",\n\t\"domain\": \"messages\",\n\t\"locale_data\": {\n\t\t\"messages\": {\n\t\t\t\"\": {\n\t\t\t\t\"domain\": \"messages\",\n\t\t\t\t\"lang\": \"eo\",\n\t\t\t\t\"plural-forms\": \"nplurals=2; plural=(n != 1);\"\n\t\t\t},\n\t\t\t\"Simple Block\": &#91; \"Simpla Bloko\" ],\n\t\t\t\"Hello World\": &#91; \"Salunton mondo\" ]\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Load the translation file<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The final part is to tell WordPress where it can look to find the translation file. The <code>wp_set_script_translations<\/code> function accepts an optional third argument that is the path it will first check for translations. For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\tfunction myguten_set_script_translations() {\n\t\twp_set_script_translations( 'myguten-script', 'myguten', plugin_dir_path( __FILE__ ) . 'languages' );\n\t}\n\tadd_action( 'init', 'myguten_set_script_translations' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>WordPress will check for a file in that path with the format <code>${domain}-${locale}-${handle}.json<\/code> as the source of translations. Alternatively, instead of the registered handle you can use the md5 hash of the relative path of the file, <code>${domain}-${locale} in the form of ${domain}-${locale}-${md5}.json.<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using <code>make-json<\/code> automatically names the file with the md5 hash, so it is ready as-is. You could rename the file to use the handle instead, in which case the file name would be <code>myguten-eo-myguten-script.json<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Test translations<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You will need to set your WordPress installation to Esperanto language. Go to Settings > General and change your site language to Esperanto.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With the language set, create a new post, add the block, and you will see the translations used.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Filtering translations<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The outputs of the translation functions (<code>__()<\/code>, <code>_x()<\/code>, <code>_n()<\/code>, and <code>_nx()<\/code>) are filterable, see <a href=\"\/docs\/reference-guides\/filters\/i18n-filters.md\">i18n Filters<\/a> for full information.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Internationalization\n\n## What is internationalization?\n\nInternationalization is the process to provide multiple language support to software, in this case WordPress. Internationalization is often abbreviated as **i18n**, where 18 stands for the number of letters between the first _i_ and the last _n_.\n\nProviding i18n support to your plugin and theme allows it to reach the largest possible audience, even without requiring you to provide the additional language translations. When you upload your software to WordPress.org, all JS and PHP files will automatically be parsed. Any detected translation strings are added to [translate.wordpress.org](https:\/\/translate.wordpress.org\/) to allow the community to translate, ensuring WordPress plugins and themes are available in as many languages as possible.\n\nFor PHP, WordPress has a long established process, see [How to Internationalize Your Plugin](https:\/\/developer.wordpress.org\/plugins\/internationalization\/how-to-internationalize-your-plugin\/). The release of WordPress 5.0 brings a similar process for translation to JavaScript code.\n\n## How to use i18n in JavaScript\n\nWordPress 5.0 introduced the wp-i18n JavaScript package that provides the functions needed to add translatable strings as you would in PHP.\n\nFirst, add **wp-i18n** as a dependency when registering your script:\n\n```php\n<?php\n\/**\n * Plugin Name: Myguten Plugin\n * Text Domain: myguten\n *\/\nfunction myguten_block_init() {\n    wp_register_script(\n        'myguten-script',\n        plugins_url( 'block.js', __FILE__ ),\n        array( 'wp-blocks', 'react', 'wp-i18n', 'wp-block-editor' )\n    );\n\n    register_block_type( 'myguten\/simple', array(\n\t\t'api_version' => 3,\n        'editor_script' => 'myguten-script',\n    ) );\n}\nadd_action( 'init', 'myguten_block_init' );\n```\n\nIn your code, you can include the i18n functions. The most common function is **\\_\\_** (a double underscore) which provides translation of a simple string. Here is a basic block example:\n\n```js\nimport { __ } from '@wordpress\/i18n';\nimport { registerBlockType } from '@wordpress\/blocks';\nimport { useBlockProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'myguten\/simple', {\n\tapiVersion: 3,\n\ttitle: __( 'Simple Block', 'myguten' ),\n\tcategory: 'widgets',\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps( { style: { color: 'red' } } );\n\n\t\treturn <p { ...blockProps }>{ __( 'Hello World', 'myguten' ) }<\/p>;\n\t},\n\n\tsave: () => {\n\t\tconst blockProps = useBlockProps.save( { style: { color: 'red' } } );\n\n\t\treturn <p { ...blockProps }>{ __( 'Hello World', 'myguten' ) }<\/p>;\n\t},\n} );\n```\n\nIn the above example, the function will use the first argument for the string to be translated. The second argument is the text domain which must match the text domain slug specified by your plugin.\n\nCommon functions available, these mirror their PHP counterparts are:\n\n-   `__( 'Hello World', 'my-text-domain' )` - Translate a certain string.\n-   `_n( '%s Comment', '%s Comments', numberOfComments, 'my-text-domain' )` - Translate and retrieve the singular or plural form based on the supplied number.\n-   `_x( 'Default', 'block style', 'my-text-domain' )` - Translate a certain string with some additional context.\n\n<div class=\"callout callout-alert\">\n<strong>Note:<\/strong> Every string displayed to the user should be wrapped in an i18n function.\n<\/div>\n\nAfter all strings in your code is wrapped, the final step is to tell WordPress your JavaScript contains translations, using the [wp_set_script_translations()](https:\/\/developer.wordpress.org\/reference\/functions\/wp_set_script_translations\/) function.\n\n```php\n<?php\n\tfunction myguten_set_script_translations() {\n\t\twp_set_script_translations( 'myguten-script', 'myguten' );\n\t}\n\tadd_action( 'init', 'myguten_set_script_translations' );\n```\n\nThis is all you need to make your plugin JavaScript code translatable.\n\nWhen you set script translations for a handle WordPress will automatically figure out if a translations file exists on translate.wordpress.org, and if so ensure that it's loaded into `wp.i18n` before your script runs. With translate.wordpress.org, plugin authors also do not need to worry about setting up their own infrastructure for translations and can rely on a global community with dozens of active locales. Read more about [WordPress Translations](https:\/\/make.wordpress.org\/meta\/handbook\/documentation\/translations\/).\n\n## Provide your own translations\n\nYou can create and ship your own translations with your plugin, if you have sufficient knowledge of the language(s) you can ensure the translations are available.\n\n### Create the translation file\n\nThe translation files must be in the JED 1.x JSON format.\n\nTo create a JED translation file, first you need to extract the strings from the text. Typically, the language files all live in a directory called `languages` in your plugin. Using [WP-CLI](https:\/\/wp-cli.org\/), you create a `.pot` file using the following command from within your plugin directory:\n\n```\nmkdir languages\nwp i18n make-pot .\/ languages\/myguten.pot\n```\n\nThis will create the file `myguten.pot` which contains all the translatable strings from your project.\n\n```\nmsgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: Scratch Plugin\\n\"\n\"Report-Msgid-Bugs-To: https:\/\/wordpress.org\/support\/plugin\/scratch\\n\"\n\"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n\"\n\"Language-Team: LANGUAGE <LL@li.org>\\n\"\n\"MIME-Version: 1.0\\n\"\n\"Content-Type: text\/plain; charset=UTF-8\\n\"\n\"Content-Transfer-Encoding: 8bit\\n\"\n\"POT-Creation-Date: 2019-03-08T11:26:56-08:00\\n\"\n\"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n\"\n\"X-Generator: WP-CLI 2.1.0\\n\"\n\"X-Domain: myguten\\n\"\n\n#. Plugin Name of the plugin\nmsgid \"Scratch Plugin\"\nmsgstr \"\"\n\n#: block.js:6\nmsgid \"Simple Block\"\nmsgstr \"\"\n\n#: block.js:13\n#: block.js:21\nmsgid \"Hello World\"\nmsgstr \"\"\n```\n\nHere, `msgid` is the string to be translated, and `msgstr` is the actual translation. In the POT file, `msgstr` will always be empty.\n\nThis POT file can then be used as the template for new translations. You should **copy the file** using the language code you are going to translate, this example will use the Esperanto (eo) language:\n\n```\ncp myguten.pot myguten-eo.po\n```\n\nFor this simple example, you can simply edit the `.po` file in your editor and add the translation to all the `msgstr` sets. For a larger, more complex set of translation, the [GlotPress](https:\/\/glotpress.blog\/) and [Poedit](https:\/\/poedit.net\/) tools exist to help.\n\nYou need also to add the `Language: eo` parameter. Here is full `myguten-eo.po` translated file\n\n```\n# Copyright (C) 2019\n# This file is distributed under the same license as the Scratch Plugin plugin.\nmsgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: Scratch Plugin\\n\"\n\"Report-Msgid-Bugs-To: https:\/\/wordpress.org\/support\/plugin\/scratch\\n\"\n\"Last-Translator: Marcus Kazmierczak <marcus@mkaz.com>\\n\"\n\"Language-Team: Esperanto <marcus@mkaz.com>\\n\"\n\"Language: eo\\n\"\n\"MIME-Version: 1.0\\n\"\n\"Content-Type: text\/plain; charset=UTF-8\\n\"\n\"Content-Transfer-Encoding: 8bit\\n\"\n\"POT-Creation-Date: 2019-02-18T07:20:46-08:00\\n\"\n\"PO-Revision-Date: 2019-02-18 08:16-0800\\n\"\n\"X-Generator: Poedit 2.2.1\\n\"\n\"X-Domain: myguten\\n\"\n\n#. Plugin Name of the plugin\nmsgid \"Scratch Plugin\"\nmsgstr \"Scratch kromprogrameto\"\n\n#: block.js:6\nmsgid \"Simple Block\"\nmsgstr \"Simpla bloko\"\n\n#: block.js:13 block.js:21\nmsgid \"Hello World\"\nmsgstr \"Saltuon mundo\"\n```\n\nThe last step to create the translation file is to convert the `myguten-eo.po` to the JSON format needed. For this, you can use WP-CLI's [`wp i18n make-json` command](https:\/\/developer.wordpress.org\/cli\/commands\/i18n\/make-json\/), which requires WP-CLI v2.2.0 and later.\n\n```\nwp i18n make-json myguten-eo.po --no-purge\n```\n\nThis will generate the JSON file `myguten-eo-[md5].json` with the contents:\n\n```json\n{\n\t\"translation-revision-date\": \"2019-04-26T13:30:11-07:00\",\n\t\"generator\": \"WP-CLI\/2.2.0\",\n\t\"source\": \"block.js\",\n\t\"domain\": \"messages\",\n\t\"locale_data\": {\n\t\t\"messages\": {\n\t\t\t\"\": {\n\t\t\t\t\"domain\": \"messages\",\n\t\t\t\t\"lang\": \"eo\",\n\t\t\t\t\"plural-forms\": \"nplurals=2; plural=(n != 1);\"\n\t\t\t},\n\t\t\t\"Simple Block\": [ \"Simpla Bloko\" ],\n\t\t\t\"Hello World\": [ \"Salunton mondo\" ]\n\t\t}\n\t}\n}\n```\n\n### Load the translation file\n\nThe final part is to tell WordPress where it can look to find the translation file. The `wp_set_script_translations` function accepts an optional third argument that is the path it will first check for translations. For example:\n\n```php\n<?php\n\tfunction myguten_set_script_translations() {\n\t\twp_set_script_translations( 'myguten-script', 'myguten', plugin_dir_path( __FILE__ ) . 'languages' );\n\t}\n\tadd_action( 'init', 'myguten_set_script_translations' );\n```\n\nWordPress will check for a file in that path with the format `${domain}-${locale}-${handle}.json` as the source of translations. Alternatively, instead of the registered handle you can use the md5 hash of the relative path of the file, `${domain}-${locale} in the form of ${domain}-${locale}-${md5}.json.`\n\nUsing `make-json` automatically names the file with the md5 hash, so it is ready as-is. You could rename the file to use the handle instead, in which case the file name would be `myguten-eo-myguten-script.json`.\n\n### Test translations\n\nYou will need to set your WordPress installation to Esperanto language. Go to Settings > General and change your site language to Esperanto.\n\nWith the language set, create a new post, add the block, and you will see the translations used.\n\n### Filtering translations\n\nThe outputs of the translation functions (`__()`, `_x()`, `_n()`, and `_nx()`) are filterable, see [i18n Filters](\/docs\/reference-guides\/filters\/i18n-filters.md) for full information.\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/enqueueing-assets-in-the-editor.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Enqueueing assets in the Editor<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This guide is designed to be the definitive reference for enqueueing assets (scripts and styles) in the Editor. The approaches outlined here represent the recommended practices but keep in mind that this resource will evolve as WordPress does. Updates are encouraged.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As of WordPress 6.3, the Post Editor is iframed if all registered blocks have a <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/\"><code>Block API version 3<\/code><\/a> or higher and no traditional metaboxes are registered. The Site Editor has always been iframed. This guide assumes you are looking to enqueue assets for the iframed Editor, but refer to the backward compatibility section below for additional considerations.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For more information about why the Editor is iframed, please revisit the post <a href=\"https:\/\/make.wordpress.org\/core\/2021\/06\/29\/blocks-in-an-iframed-template-editor\/\">Blocks in an iframed (template) editor<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The Editor versus Editor content<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Before enqueueing assets in the Editor, you must first identify what you are trying to target.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Do you want to add styling or JavaScript to the user-generated content (blocks) in the Editor? Or do you want to modify the Editor user interface (UI) components or interact with Editor APIs? This could include everything from creating custom block controls to registering block variations.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are different hooks to use depending on the answers to these questions, and if you are building a block or a theme, there are additional approaches to consider. Refer to the designated sections below.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Scenarios for enqueuing assets<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Editor scripts and styles<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Whenever you need to enqueue assets for the Editor itself (i.e. not the user-generated content), you should use the <a href=\"https:\/\/developer.wordpress.org\/reference\/hooks\/enqueue_block_editor_assets\/\"><code>enqueue_block_editor_assets<\/code><\/a> hook coupled with the standard <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_enqueue_script\/\"><code>wp_enqueue_script<\/code><\/a> and <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_enqueue_style\/\"><code>wp_enqueue_style<\/code><\/a> functions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Examples might be adding custom inspector or toolbar controls, registering block styles and variations in Javascript, registering Editor plugins, etc.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * Enqueue Editor assets.\n *\/\nfunction example_enqueue_editor_assets() {\n    wp_enqueue_script(\n        'example-editor-scripts',\n        plugins_url( 'editor-scripts.js', __FILE__ )\n    );\n    wp_enqueue_style(\n        'example-editor-styles',\n        plugins_url( 'editor-styles.css', __FILE__ ) \n    );\n}\nadd_action( 'enqueue_block_editor_assets', 'example_enqueue_editor_assets' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>While not the recommended approach, it's important to note that <code>enqueue_block_editor_assets<\/code> can be used to style Editor content for backward compatibility. See below for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Editor content scripts and styles<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As of WordPress 6.3, all assets added through the <a href=\"https:\/\/developer.wordpress.org\/reference\/hooks\/enqueue_block_assets\/\"><code>enqueue_block_assets<\/code><\/a> PHP action will also be enqueued in the iframed Editor. See <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/pull\/48286\">#48286<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is the primary method you should use to enqueue assets for user-generated content (blocks), and this hook fires both in the Editor and on the front end of your site. It should not be used to add assets intended for the Editor UI or to interact with Editor APIs. See below for a note on backward compatibility.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are instances where you may only want to add assets in the Editor and not on the front end. You can achieve this by using an <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/is_admin\/\"><code>is_admin()<\/code><\/a> check.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * Enqueue content assets but only in the Editor.\n *\/\nfunction example_enqueue_editor_content_assets() {\n    if ( is_admin() ) {\n        wp_enqueue_script(\n            'example-editor-content-scripts',\n            plugins_url( 'content-scripts.js', __FILE__ )\n        );\n        wp_enqueue_style(\n            'example-editor-content-styles',\n            plugins_url( 'content-styles.css', __FILE__ )\n        );\n    }\n}\nadd_action( 'enqueue_block_assets', 'example_enqueue_editor_content_assets' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can also use the hook <a href=\"https:\/\/developer.wordpress.org\/reference\/hooks\/block_editor_settings_all\/\"><code>block_editor_settings_all<\/code><\/a> to modify Editor settings directly. This method is a bit more complicated to implement but provides greater flexibility. It should only be used if <code>enqueue_block_assets<\/code> does not meet your needs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following example sets the default text color for all paragraphs to <code>green<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * Modify the Editor settings by adding custom styles.\n *\n * @param array  $editor_settings An array containing the current Editor settings.\n * @param string $editor_context  The context of the editor.\n *\n * @return array Modified editor settings with the added custom CSS style.\n *\/\nfunction example_modify_editor_settings( $editor_settings, $editor_context ) {\n    $editor_settings&#91;\"styles\"]&#91;] = array(\n        \"css\" => 'p { color: green }'\n    );\n\n    return $editor_settings;\n}\nadd_filter( 'block_editor_settings_all', 'example_modify_editor_settings', 10,2 );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>These styles are inlined in the <code>body<\/code> of the iframed Editor and prefixed by <code>.editor-styles-wrapper<\/code>. The resulting markup will look like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><style>.editor-styles-wrapper p { color: green; }<\/style>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Beginning in WordPress 6.3, you can also use this method of modifying Editor settings to change styles dynamically with JavaScript. See <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/pull\/52767#top\">#52767<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block scripts and styles<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When building a block, <code>block.json<\/code> is the recommended way to enqueue all scripts and styles that are specifically required for the block itself. You are able to enqueue assets for the Editor, the front end, or both. See the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/\">Block Metadata<\/a> article for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Theme scripts and styles<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you need to enqueue Editor JavaScript in a theme, you can use either <code>enqueue_block_assets<\/code> or <code>enqueue_block_editor_assets<\/code> as outlined above. Editor-specific stylesheets should almost always be added with <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/add_editor_style\/\"><code>add_editor_style()<\/code><\/a> or <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_enqueue_block_style\/\"><code>wp_enqueue_block_style()<\/code><\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>wp_enqueue_block_style()<\/code> function allows you to load per-block stylesheets in the Editor and on the front end. Coupled with <code>theme.json<\/code>, this is one of the best methods of styling blocks. See the WordPress Developer Blog article <a href=\"https:\/\/developer.wordpress.org\/news\/2022\/12\/leveraging-theme-json-and-per-block-styles-for-more-performant-themes\/\">Leveraging theme.json and per-block styles for more performant themes<\/a> for more details.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Backward compatibility and known issues<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As a general rule, when you enqueue assets in the iframed Editor, they will also be enqueued when the Editor is not iframed so long as you are using WordPress 6.3+. The opposite is not always true.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Suppose you are building a plugin or theme that requires backward compatibility to 6.2 or lower while maintaining compatibility with WordPress 6.3. In that case, you will not be able to use <code>enqueue_block_assets<\/code> since this hook does not enqueue assets in the content of the iframed Editor prior to 6.3.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As an alternative, you can use <code>enqueue_block_editor_assets<\/code> so long as the enqueued stylesheet contains at least one of the following selectors: <code>.editor-styles-wrapper<\/code>, <code>.wp-block<\/code>, or <code>.wp-block-*<\/code>. A warning message will be logged in the console, but the hook will apply the styles to the content of the Editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\u2019s also important to note that as of WordPress 6.3, assets enqueued by <code>enqueue_block_assets<\/code> are loaded both inside and outside Editor's iframe for backward compatibility. Depending on the script libraries that you are trying to enqueue, this might cause problems. An ongoing discussion about this approach is happening in the Gutenberg <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\/53590\">GitHub repository<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you experience issues using any of the methods outlined in this guide that have not been previously reported, please <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\/new\/choose\">submit an issue<\/a> on GitHub.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Enqueueing assets in the Editor\n\nThis guide is designed to be the definitive reference for enqueueing assets (scripts and styles) in the Editor. The approaches outlined here represent the recommended practices but keep in mind that this resource will evolve as WordPress does. Updates are encouraged.\n\nAs of WordPress 6.3, the Post Editor is iframed if all registered blocks have a [`Block API version 3`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/) or higher and no traditional metaboxes are registered. The Site Editor has always been iframed. This guide assumes you are looking to enqueue assets for the iframed Editor, but refer to the backward compatibility section below for additional considerations.\n\nFor more information about why the Editor is iframed, please revisit the post [Blocks in an iframed (template) editor](https:\/\/make.wordpress.org\/core\/2021\/06\/29\/blocks-in-an-iframed-template-editor\/).\n\n## The Editor versus Editor content\nBefore enqueueing assets in the Editor, you must first identify what you are trying to target.\n\nDo you want to add styling or JavaScript to the user-generated content (blocks) in the Editor? Or do you want to modify the Editor user interface (UI) components or interact with Editor APIs? This could include everything from creating custom block controls to registering block variations.\n\nThere are different hooks to use depending on the answers to these questions, and if you are building a block or a theme, there are additional approaches to consider. Refer to the designated sections below.\n\n## Scenarios for enqueuing assets\n### Editor scripts and styles\n\nWhenever you need to enqueue assets for the Editor itself (i.e. not the user-generated content), you should use the [`enqueue_block_editor_assets`](https:\/\/developer.wordpress.org\/reference\/hooks\/enqueue_block_editor_assets\/) hook coupled with the standard [`wp_enqueue_script`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_enqueue_script\/) and [`wp_enqueue_style`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_enqueue_style\/) functions.\n\nExamples might be adding custom inspector or toolbar controls, registering block styles and variations in Javascript, registering Editor plugins, etc.\n\n```php\n\/**\n * Enqueue Editor assets.\n *\/\nfunction example_enqueue_editor_assets() {\n    wp_enqueue_script(\n        'example-editor-scripts',\n        plugins_url( 'editor-scripts.js', __FILE__ )\n    );\n    wp_enqueue_style(\n        'example-editor-styles',\n        plugins_url( 'editor-styles.css', __FILE__ ) \n    );\n}\nadd_action( 'enqueue_block_editor_assets', 'example_enqueue_editor_assets' );\n```\n\nWhile not the recommended approach, it's important to note that `enqueue_block_editor_assets` can be used to style Editor content for backward compatibility. See below for more details.\n\n### Editor content scripts and styles\n\nAs of WordPress 6.3, all assets added through the [`enqueue_block_assets`](https:\/\/developer.wordpress.org\/reference\/hooks\/enqueue_block_assets\/) PHP action will also be enqueued in the iframed Editor. See [#48286](https:\/\/github.com\/WordPress\/gutenberg\/pull\/48286) for more details.\n\nThis is the primary method you should use to enqueue assets for user-generated content (blocks), and this hook fires both in the Editor and on the front end of your site. It should not be used to add assets intended for the Editor UI or to interact with Editor APIs. See below for a note on backward compatibility.\n\nThere are instances where you may only want to add assets in the Editor and not on the front end. You can achieve this by using an [`is_admin()`](https:\/\/developer.wordpress.org\/reference\/functions\/is_admin\/) check.\n\n```php\n\/**\n * Enqueue content assets but only in the Editor.\n *\/\nfunction example_enqueue_editor_content_assets() {\n    if ( is_admin() ) {\n        wp_enqueue_script(\n            'example-editor-content-scripts',\n            plugins_url( 'content-scripts.js', __FILE__ )\n        );\n        wp_enqueue_style(\n            'example-editor-content-styles',\n            plugins_url( 'content-styles.css', __FILE__ )\n        );\n    }\n}\nadd_action( 'enqueue_block_assets', 'example_enqueue_editor_content_assets' );\n```\n\nYou can also use the hook [`block_editor_settings_all`](https:\/\/developer.wordpress.org\/reference\/hooks\/block_editor_settings_all\/) to modify Editor settings directly. This method is a bit more complicated to implement but provides greater flexibility. It should only be used if `enqueue_block_assets` does not meet your needs.\n\nThe following example sets the default text color for all paragraphs to `green`.\n\n```php\n\/**\n * Modify the Editor settings by adding custom styles.\n *\n * @param array  $editor_settings An array containing the current Editor settings.\n * @param string $editor_context  The context of the editor.\n *\n * @return array Modified editor settings with the added custom CSS style.\n *\/\nfunction example_modify_editor_settings( $editor_settings, $editor_context ) {\n    $editor_settings[\"styles\"][] = array(\n        \"css\" => 'p { color: green }'\n    );\n\n    return $editor_settings;\n}\nadd_filter( 'block_editor_settings_all', 'example_modify_editor_settings', 10,2 );\n```\n\nThese styles are inlined in the `body` of the iframed Editor and prefixed by `.editor-styles-wrapper`. The resulting markup will look like this:\n\n```css\n<style>.editor-styles-wrapper p { color: green; }<\/style>\n```\n\nBeginning in WordPress 6.3, you can also use this method of modifying Editor settings to change styles dynamically with JavaScript. See [#52767](https:\/\/github.com\/WordPress\/gutenberg\/pull\/52767#top) for more details.\n\n### Block scripts and styles\n\nWhen building a block, `block.json` is the recommended way to enqueue all scripts and styles that are specifically required for the block itself. You are able to enqueue assets for the Editor, the front end, or both. See the [Block Metadata](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-metadata\/) article for more details.\n\n### Theme scripts and styles\n\nIf you need to enqueue Editor JavaScript in a theme, you can use either `enqueue_block_assets` or `enqueue_block_editor_assets` as outlined above. Editor-specific stylesheets should almost always be added with [`add_editor_style()`](https:\/\/developer.wordpress.org\/reference\/functions\/add_editor_style\/) or [`wp_enqueue_block_style()`](https:\/\/developer.wordpress.org\/reference\/functions\/wp_enqueue_block_style\/).\n\nThe `wp_enqueue_block_style()` function allows you to load per-block stylesheets in the Editor and on the front end. Coupled with `theme.json`, this is one of the best methods of styling blocks. See the WordPress Developer Blog article [Leveraging theme.json and per-block styles for more performant themes](https:\/\/developer.wordpress.org\/news\/2022\/12\/leveraging-theme-json-and-per-block-styles-for-more-performant-themes\/) for more details.\n\n## Backward compatibility and known issues\n\nAs a general rule, when you enqueue assets in the iframed Editor, they will also be enqueued when the Editor is not iframed so long as you are using WordPress 6.3+. The opposite is not always true.\n\nSuppose you are building a plugin or theme that requires backward compatibility to 6.2 or lower while maintaining compatibility with WordPress 6.3. In that case, you will not be able to use `enqueue_block_assets` since this hook does not enqueue assets in the content of the iframed Editor prior to 6.3.\n\nAs an alternative, you can use `enqueue_block_editor_assets` so long as the enqueued stylesheet contains at least one of the following selectors: `.editor-styles-wrapper`, `.wp-block`, or `.wp-block-*`. A warning message will be logged in the console, but the hook will apply the styles to the content of the Editor.\n\nIt\u2019s also important to note that as of WordPress 6.3, assets enqueued by `enqueue_block_assets` are loaded both inside and outside Editor's iframe for backward compatibility. Depending on the script libraries that you are trying to enqueue, this might cause problems. An ongoing discussion about this approach is happening in the Gutenberg [GitHub repository](https:\/\/github.com\/WordPress\/gutenberg\/issues\/53590).\n\nIf you experience issues using any of the methods outlined in this guide that have not been previously reported, please [submit an issue](https:\/\/github.com\/WordPress\/gutenberg\/issues\/new\/choose) on GitHub.\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/data-basics\/3-building-an-edit-form.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Building an edit form<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This part is about adding an <em>Edit<\/em> feature to our app. Here's a glimpse of what we're going to build:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/edit-form\/form-finished.png\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 1: Add an <em>Edit<\/em> button<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We can't have an <em>Edit<\/em> form without an <em>Edit<\/em> button, so let's start by adding one to our <code>PagesList<\/code> component:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { Button } from '@wordpress\/components';\nimport { decodeEntities } from '@wordpress\/html-entities';\n\nconst PageEditButton = () => (\n\t<button variant=\"primary\">\n\t\tEdit\n\t<\/button>\n)\n\nfunction PagesList( { hasResolved, pages } ) {\n\tif ( ! hasResolved ) {\n\t\treturn <spinner>;\n\t}\n\tif ( ! pages?.length ) {\n\t\treturn <div>No results<\/div>;\n\t}\n\n\treturn (\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table classname=\"wp-list-table widefat fixed striped table-view-list\">\t\t\t<thead>\t\t\t\t<tr>\t\t\t\t\t<td>Title<\/td>\t\t\t\t\t<td style=\"{{width:\" 120}}=\"\">Actions<\/td>\t\t\t\t<\/tr>\t\t\t<\/thead>\t\t\t<tbody>\t\t\t\t\t<tr key=\"{page.id}\">\t\t\t\t\t\t<td>{ decodeEntities( page.title.rendered ) }<\/td>\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<pageeditbutton pageid=\"{\" page.id=\"\" }=\"\">\n\t\t\t\t\t\t<\/pageeditbutton><\/td>\t\t\t\t\t<\/tr>\t\t\t<\/tbody>\t\t<\/table>\t\t\t\t{ pages?.map( ( page ) => (\t\t\t\t) ) }\n\t);\n}\n<\/spinner><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The only change in <code>PagesList<\/code> is the additional column labeled <em>Actions<\/em>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/edit-form\/edit-button.png\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 2: Display an <em>Edit<\/em> form<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Our button looks nice but doesn't do anything yet. To display an edit form, we need to have one first \u2013 let's create it:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { Button, TextControl } from '@wordpress\/components';\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\treturn (\n\t\t<div classname=\"my-gutenberg-form\">\n\t\t\t<textcontrol<br>\t\t\t\tvalue=''\n\t\t\t\tlabel='Page title:'\n\t\t\t\/>\n\t\t\t<div classname=\"form-buttons\">\n\t\t\t\t<button onclick=\"{\" onsavefinished=\"\" }=\"\" variant=\"primary\">\n\t\t\t\t\tSave\n\t\t\t\t<\/button>\n\t\t\t\t<button onclick=\"{\" oncancel=\"\" }=\"\" variant=\"tertiary\">\n\t\t\t\t\tCancel\n\t\t\t\t<\/button>\n\t\t\t<\/div>\n\t\t<\/textcontrol<br><\/div>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now let's make the button display the form we just created. As this tutorial is not focused on web design, we will wire the two together using a component that requires the least amount of code: <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/components\/modal\/\"><code>Modal<\/code><\/a>. Let's update <code>PageEditButton<\/code> accordingly:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { Button, Modal, TextControl } from '@wordpress\/components';\n\nfunction PageEditButton({ pageId }) {\n\tconst &#91; isOpen, setOpen ] = useState( false );\n\tconst openModal = () => setOpen( true );\n\tconst closeModal = () => setOpen( false );\n\treturn (\n\t\t&lt;>\n\t\t\t<button<br>\t\t\t\tonClick={ openModal }\n\t\t\t\tvariant=\"primary\"\n\t\t\t>\n\t\t\t\tEdit\n\t\t\t\n\t\t\t{ isOpen &amp;&amp; (\n\t\t\t\t<modal onrequestclose=\"{\" closemodal=\"\" }=\"\" title=\"Edit page\">\n\t\t\t\t\t<editpageform<br>\t\t\t\t\t\tpageId={pageId}\n\t\t\t\t\t\tonCancel={closeModal}\n\t\t\t\t\t\tonSaveFinished={closeModal}\n\t\t\t\t\t\/>\n\t\t\t\t<\/editpageform<br><\/modal>\n\t\t\t) }\n\t\t\n\t)\n}\n<\/button<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you click the <em>Edit<\/em> button now, you should see the following modal:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/edit-form\/form-scaffold.png\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Great! We now have a basic user interface to work with.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 3: Populate the form with page details<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We want the <code>EditPageForm<\/code> to display the title of the currently edited page. You may have noticed that it doesn't receive a <code>page<\/code> prop, only <code>pageId<\/code>. That's okay. Gutenberg Data allows us to easily access entity records from any component.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this case, we need to use the <a href=\"\/docs\/reference-guides\/data\/data-core\/#getentityrecord\"><code>getEntityRecord<\/code><\/a> selector. The list of records is already available thanks to the <code>getEntityRecords<\/code> call in <code>MyFirstApp<\/code>, so there won't even be any additional HTTP requests involved \u2013 we'll get the cached record right away.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here's how you can try it in your browser's dev tools:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.data.select( 'core' ).getEntityRecord( 'postType', 'page', 9 );  \/\/ Replace 9 with an actual page ID\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Let's update <code>EditPageForm<\/code> accordingly:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\tconst page = useSelect(\n\t\tselect => select( coreDataStore ).getEntityRecord( 'postType', 'page', pageId ),\n\t\t&#91;pageId]\n\t);\n\treturn (\n\t\t<div classname=\"my-gutenberg-form\">\n\t\t\t<textcontrol<br>\t\t\t\tlabel='Page title:'\n\t\t\t\tvalue={ page.title.rendered }\n\t\t\t\/>\n\t\t\t{ \/* ... *\/ }\n\t\t<\/textcontrol<br><\/div>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now it should look like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/edit-form\/form-populated.png\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 4: Making the Page title field editable<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There's one problem with our <em>Page title<\/em> field: you can't edit it. It receives a fixed <code>value<\/code> but doesn't update it when typing. We need an <code>onChange<\/code> handler.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You may have seen a pattern similar to this one in other React apps. It's known as a <a href=\"https:\/\/reactjs.org\/docs\/forms.html#controlled-components\">\"controlled component\"<\/a>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function VanillaReactForm({ initialTitle }) {\n\tconst &#91;title, setTitle] = useState( initialTitle );\n\treturn (\n\t\t<textcontrol<br>\t\t\tvalue={ title }\n\t\t\tonChange={ setTitle }\n\t\t\/>\n\t);\n}\n<\/textcontrol<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Updating entity records in Gutenberg Data is similar but instead of using <code>setTitle<\/code> to store in local (component level) state, we use the <code>editEntityRecord<\/code> action which stores the updates in the <em>Redux<\/em> state. Here's how you can try it out in your browser's dev tools:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ We need a valid page ID to call editEntityRecord, so let's get the first available one using getEntityRecords.\nconst pageId = wp.data.select( 'core' ).getEntityRecords( 'postType', 'page' )&#91;0].id;\n\n\/\/ Update the title\nwp.data.dispatch( 'core' ).editEntityRecord( 'postType', 'page', pageId, { title: 'updated title' } );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>At this point, you may ask <em>how<\/em> is <code>editEntityRecord<\/code> better than <code>useState<\/code>? The answer is that it offers a few features you wouldn't otherwise get.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Firstly, we can save the changes as easily as we retrieve the data and ensure that all caches will be correctly updated.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Secondly, the changes applied via <code>editEntityRecord<\/code> are easily undo-able via the <code>undo<\/code> and <code>redo<\/code> actions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Lastly, because the changes live in the <em>Redux<\/em> state, they are \"global\" and can be accessed by other components. For example, we could make the <code>PagesList<\/code> display the currently edited title.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To that last point, let's see what happens when we use <code>getEntityRecord<\/code> to access the entity record we just updated:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.data.select( 'core' ).getEntityRecord( 'postType', 'page', pageId ).title\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>It doesn't reflect the edits. What's going on?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Well, <code>&lt;PagesList \/><\/code> renders the data returned by <code>getEntityRecord()<\/code>. If <code>getEntityRecord()<\/code> reflected the updated title, then anything the user types in the <code>TextControl<\/code> would be immediately displayed inside <code>&lt;PagesList \/><\/code>, too. This is not what we want. The edits shouldn't leak outside the form until the user decides to save them.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Gutenberg Data solves this problem by making a distinction between <em>Entity Records<\/em> and <em>Edited Entity Records<\/em>. <em>Entity Records<\/em> reflect the data from the API and ignore any local edits, while <em>Edited Entity Records<\/em> also have all the local edits applied on top. Both co-exist in the Redux state at the same time.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let's see what happens if we call <code>getEditedEntityRecord<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.data.select( 'core' ).getEditedEntityRecord( 'postType', 'page', pageId ).title\n\/\/ \"updated title\"\n\nwp.data.select( 'core' ).getEntityRecord( 'postType', 'page', pageId ).title\n\/\/ { \"rendered\": \"<original, unchanged=\"\" title=\"\">\", \"raw\": \"...\" }\n<\/original,><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>As you can see, the <code>title<\/code> of an Entity Record is an object, but the <code>title<\/code> of an Edited Entity record is a string.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is no accident. Fields like <code>title<\/code>, <code>excerpt<\/code>, and <code>content<\/code> may contain <a href=\"https:\/\/developer.wordpress.org\/apis\/handbook\/shortcode\/\">shortcodes<\/a> or <a href=\"\/docs\/how-to-guides\/block-tutorial\/creating-dynamic-blocks.md\">dynamic blocks<\/a>, which means they can only be rendered on the server. For such fields, the REST API exposes both the <code>raw<\/code> markup <em>and<\/em> the <code>rendered<\/code> string. For example, in the block editor, <code>content.rendered<\/code> could used as a visual preview, and <code>content.raw<\/code> could be used to populate the code editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So why is the <code>content<\/code> of an Edited Entity Record a string? Since Javascript is not be able to properly render arbitrary block markup, it stores only the <code>raw<\/code> markup without the <code>rendered<\/code> part. And since that's a string, the entire field becomes a string.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We can now update <code>EditPageForm<\/code> accordingly. We can access the actions using the <a href=\"\/packages\/data\/README.md#usedispatch\"><code>useDispatch<\/code><\/a> hook similarly to how we use <code>useSelect<\/code> to access selectors:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useDispatch } from '@wordpress\/data';\n\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\tconst page = useSelect(\n\t\tselect => select( coreDataStore ).getEditedEntityRecord( 'postType', 'page', pageId ),\n\t\t&#91; pageId ]\n\t);\n\tconst { editEntityRecord } = useDispatch( coreDataStore );\n\tconst handleChange = ( title ) => editEntityRecord( 'postType', 'page', pageId, { title } );\n\n\treturn (\n\t\t<div classname=\"my-gutenberg-form\">\n\t\t\t<textcontrol<br>\t\t\t\tlabel=\"Page title:\"\n\t\t\t\tvalue={ page.title }\n\t\t\t\tonChange={ handleChange }\n\t\t\t\/>\n\t\t\t<div classname=\"form-buttons\">\n\t\t\t\t<button onclick=\"{\" onsavefinished=\"\" }=\"\" variant=\"primary\">\n\t\t\t\t\tSave\n\t\t\t\t<\/button>\n\t\t\t\t<button onclick=\"{\" oncancel=\"\" }=\"\" variant=\"tertiary\">\n\t\t\t\t\tCancel\n\t\t\t\t<\/button>\n\t\t\t<\/div>\n\t\t<\/textcontrol<br><\/div>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>We added an <code>onChange<\/code> handler to keep track of edits via the <code>editEntityRecord<\/code> action and then changed the selector to <code>getEditedEntityRecord<\/code> so that <code>page.title<\/code> always reflects the changes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is what it looks like now:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/edit-form\/form-editable.png\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 5: Saving the form data<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now that we can edit the page title let's also make sure we can save it. In Gutenberg data, we save changes to the WordPress REST API using the <code>saveEditedEntityRecord<\/code> action. It sends the request, processes the result, and updates the cached data in the Redux state.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here's an example you may try in your browser's dev tools:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Replace 9 with an actual page ID\nwp.data.dispatch( 'core' ).editEntityRecord( 'postType', 'page', 9, { title: 'updated title' } );\nwp.data.dispatch( 'core' ).saveEditedEntityRecord( 'postType', 'page', 9 );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The above snippet saved a new title. Unlike before, <code>getEntityRecord<\/code> now reflects the updated title:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Replace 9 with an actual page ID\nwp.data.select( 'core' ).getEntityRecord( 'postType', 'page', 9 ).title.rendered\n\/\/ \"updated title\"\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Entity records are updated to reflect any saved changes right after the REST API request is finished.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is how the <code>EditPageForm<\/code> looks like with a working <em>Save<\/em> button:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\t\/\/ ...\n\tconst { saveEditedEntityRecord } = useDispatch( coreDataStore );\n\tconst handleSave = () => saveEditedEntityRecord( 'postType', 'page', pageId );\n\n\treturn (\n\t\t<div classname=\"my-gutenberg-form\">\n\t\t\t{\/* ... *\/}\n\t\t\t<div classname=\"form-buttons\">\n\t\t\t\t<button onclick=\"{\" handlesave=\"\" }=\"\" variant=\"primary\">\n\t\t\t\t\tSave\n\t\t\t\t<\/button>\n\t\t\t\t{\/* ... *\/}\n\t\t\t<\/div>\n\t\t<\/div>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>It works, but there's still one thing to fix: the form modal doesn't automatically close because we never call <code>onSaveFinished<\/code>. Lucky for us, <code>saveEditedEntityRecord<\/code> returns a promise that resolves once the save operation is finished. Let's take advantage of it in <code>EditPageForm<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\t\/\/ ...\n\tconst handleSave = async () => {\n\t\tawait saveEditedEntityRecord( 'postType', 'page', pageId );\n\t\tonSaveFinished();\n\t};\n\t\/\/ ...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 6: Handle errors<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We optimistically assumed that a <em>save<\/em> operation would always succeed. Unfortunately, it may fail in many ways:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The website can be down<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The update may be invalid<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The page could have been deleted by someone else in the meantime<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>To tell the user when any of these happens, we have to make two adjustments. We don't want to close the form modal when the update fails. The promise returned by <code>saveEditedEntityRecord<\/code> is resolved with an updated record only if the update actually worked. When something goes wrong, it resolves with an empty value. Let's use it to keep the modal open:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function EditPageForm( { pageId, onSaveFinished } ) {\n\t\/\/ ...\n\tconst handleSave = async () => {\n\t\tconst updatedRecord = await saveEditedEntityRecord( 'postType', 'page', pageId );\n\t\tif ( updatedRecord ) {\n\t\t\tonSaveFinished();\n\t\t}\n\t};\n\t\/\/ ...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Great! Now, let's display an error message. The failure details can be grabbed using the <code>getLastEntitySaveError<\/code> selector:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Replace 9 with an actual page ID\nwp.data.select( 'core' ).getLastEntitySaveError( 'postType', 'page', 9 )\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Here's how we can use it in <code>EditPageForm<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function EditPageForm( { pageId, onSaveFinished } ) {\n\t\/\/ ...\n    const { lastError, page } = useSelect(\n        select => ({\n\t\t\tpage: select( coreDataStore ).getEditedEntityRecord( 'postType', 'page', pageId ),\n\t\t\tlastError: select( coreDataStore ).getLastEntitySaveError( 'postType', 'page', pageId )\n\t\t}),\n        &#91; pageId ]\n\t)\n\t\/\/ ...\n\treturn (\n\t\t<div classname=\"my-gutenberg-form\">\n\t\t\t{\/* ... *\/}\n\t\t\t{ lastError ? (\n\t\t\t\t<div classname=\"form-error\">\n\t\t\t\t\tError: { lastError.message }\n\t\t\t\t<\/div>\n\t\t\t) : false }\n\t\t\t{\/* ... *\/}\n\t\t<\/div>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Great! <code>EditPageForm<\/code> is now fully aware of errors.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let's see that error message in action. We'll trigger an invalid update and let it fail. The post title is hard to break, so let's set a <code>date<\/code> property to <code>-1<\/code> instead \u2013 that's a guaranteed validation error:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\t\/\/ ...\n\tconst handleChange = ( title ) => editEntityRecord( 'postType', 'page', pageId, { title, date: -1 } );\n\t\/\/ ...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Once you refresh the page, open the form, change the title, and hit save, you should see the following error message:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/edit-form\/form-error.png\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Fantastic! We can now <strong>restore the previous version of <code>handleChange<\/code><\/strong> and move on to the next step.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 7: Status indicator<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There is one last problem with our form: no visual feedback. We can\u2019t be quite sure whether the <em>Save<\/em> button worked until either the form disappears or an error message shows.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We're going to clear it up and communicate two states to the user: <em>Saving<\/em> and <em>No changes detected<\/em>. The relevant selectors are <code>isSavingEntityRecord<\/code> and <code>hasEditsForEntityRecord<\/code>. Unlike <code>getEntityRecord<\/code>, they never issue any HTTP requests but only return the current entity record state.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let's use them in <code>EditPageForm<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function EditPageForm( { pageId, onSaveFinished } ) {\n\t\/\/ ...\n\tconst { isSaving, hasEdits, \/* ... *\/ } = useSelect(\n\t\tselect => ({\n\t\t\tisSaving: select( coreDataStore ).isSavingEntityRecord( 'postType', 'page', pageId ),\n\t\t\thasEdits: select( coreDataStore ).hasEditsForEntityRecord( 'postType', 'page', pageId ),\n\t\t\t\/\/ ...\n\t\t}),\n\t\t&#91; pageId ]\n\t)\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>We can now use <code>isSaving<\/code> and <code>hasEdits<\/code> to display a spinner when saving is in progress and grey out the save button when there are no edits:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function EditPageForm( { pageId, onSaveFinished } ) {\n\t\/\/ ...\n\treturn (\n\t\t\/\/ ...\n\t\t<div classname=\"form-buttons\">\n\t\t\t<button onclick=\"{\" handlesave=\"\" }=\"\" variant=\"primary\" disabled=\"{\" !=\"\" hasedits=\"\" ||=\"\" issaving=\"\">\n\t\t\t\t{ isSaving ? (\n\t\t\t\t\t&lt;>\n\t\t\t\t\t\t<spinner>\n\t\t\t\t\t\tSaving\n\t\t\t\t\t\n\t\t\t\t) : 'Save' }\n\t\t\t<\/spinner><\/button>\n\t\t\t<button<br>\t\t\t\tonClick={ onCancel }\n\t\t\t\tvariant=\"tertiary\"\n\t\t\t\tdisabled={ isSaving }\n\t\t\t>\n\t\t\t\tCancel\n\t\t\t\n\t\t<\/button<br><\/div>\n\t\t\/\/ ...\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note that we disable the <em>save<\/em> button when there are no edits and when the page is currently being saved. This is to prevent the user from accidentally pressing the button twice.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Also, interrupting a <em>save<\/em> in progress is not supported by <code>@wordpress\/data<\/code> so we also conditionally disabled the <em>cancel<\/em> button.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here's what it looks like in action:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/edit-form\/form-inactive.png\"><br><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/edit-form\/form-spinner.png\"><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Wiring it all together<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>All the pieces are in place, great! Here\u2019s everything we built in this chapter in one place:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useDispatch } from '@wordpress\/data';\nimport { Button, Modal, TextControl } from '@wordpress\/components';\n\nfunction PageEditButton( { pageId } ) {\n\tconst &#91; isOpen, setOpen ] = useState( false );\n\tconst openModal = () => setOpen( true );\n\tconst closeModal = () => setOpen( false );\n\treturn (\n\t\t&lt;>\n\t\t\t<button onclick=\"{\" openmodal=\"\" }=\"\" variant=\"primary\">\n\t\t\t\tEdit\n\t\t\t<\/button>\n\t\t\t{ isOpen &amp;&amp; (\n\t\t\t\t<modal onrequestclose=\"{\" closemodal=\"\" }=\"\" title=\"Edit page\">\n\t\t\t\t\t<editpageform<br>\t\t\t\t\t\tpageId={ pageId }\n\t\t\t\t\t\tonCancel={ closeModal }\n\t\t\t\t\t\tonSaveFinished={ closeModal }\n\t\t\t\t\t\/>\n\t\t\t\t<\/editpageform<br><\/modal>\n\t\t\t) }\n\t\t\n\t);\n}\n\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\tconst { page, lastError, isSaving, hasEdits } = useSelect(\n\t\t( select ) => ( {\n\t\t\tpage: select( coreDataStore ).getEditedEntityRecord( 'postType', 'page', pageId ),\n\t\t\tlastError: select( coreDataStore ).getLastEntitySaveError( 'postType', 'page', pageId ),\n\t\t\tisSaving: select( coreDataStore ).isSavingEntityRecord( 'postType', 'page', pageId ),\n\t\t\thasEdits: select( coreDataStore ).hasEditsForEntityRecord( 'postType', 'page', pageId ),\n\t\t} ),\n\t\t&#91; pageId ]\n\t);\n\n\tconst { saveEditedEntityRecord, editEntityRecord } = useDispatch( coreDataStore );\n\tconst handleSave = async () => {\n\t\tconst savedRecord = await saveEditedEntityRecord( 'postType', 'page', pageId );\n\t\tif ( savedRecord ) {\n\t\t\tonSaveFinished();\n\t\t}\n\t};\n\tconst handleChange = ( title ) =>  editEntityRecord( 'postType', 'page', page.id, { title } );\n\n\treturn (\n\t\t<div classname=\"my-gutenberg-form\">\n\t\t\t<textcontrol<br>\t\t\t\tlabel=\"Page title:\"\n\t\t\t\tvalue={ page.title }\n\t\t\t\tonChange={ handleChange }\n\t\t\t\/>\n\t\t\t{ lastError ? (\n\t\t\t\t<div classname=\"form-error\">Error: { lastError.message }<\/div>\n\t\t\t) : (\n\t\t\t\tfalse\n\t\t\t) }\n\t\t\t<div classname=\"form-buttons\">\n\t\t\t\t<button<br>\t\t\t\t\tonClick={ handleSave }\n\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\tdisabled={ ! hasEdits || isSaving }\n\t\t\t\t>\n\t\t\t\t\t{ isSaving ? (\n\t\t\t\t\t\t&lt;>\n\t\t\t\t\t\t\t<spinner>\n\t\t\t\t\t\t\tSaving\n\t\t\t\t\t\t\n\t\t\t\t\t) : 'Save' }\n\t\t\t\t\n\t\t\t\t<button<br>\t\t\t\t\tonClick={ onCancel }\n\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\tdisabled={ isSaving }\n\t\t\t\t>\n\t\t\t\t\tCancel\n\t\t\t\t\n\t\t\t<\/button<br><\/spinner><\/button<br><\/div>\n\t\t<\/textcontrol<br><\/div>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">What's next?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Previous part:<\/strong> <a href=\"\/docs\/how-to-guides\/data-basics\/2-building-a-list-of-pages.md\">Building a list of pages<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Next part:<\/strong> Building a <em>New Page<\/em> form (coming soon)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>(optional) Review the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/data-basics-59c8f8\">finished app<\/a> in the block-development-examples repository<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Building an edit form\n\nThis part is about adding an *Edit* feature to our app. Here's a glimpse of what we're going to build:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/edit-form\/form-finished.png)\n\n### Step 1: Add an _Edit_ button\n\nWe can't have an *Edit* form without an *Edit* button, so let's start by adding one to our `PagesList` component:\n\n```js\nimport { Button } from '@wordpress\/components';\nimport { decodeEntities } from '@wordpress\/html-entities';\n\nconst PageEditButton = () => (\n\t<Button variant=\"primary\">\n\t\tEdit\n\t<\/Button>\n)\n\nfunction PagesList( { hasResolved, pages } ) {\n\tif ( ! hasResolved ) {\n\t\treturn <Spinner \/>;\n\t}\n\tif ( ! pages?.length ) {\n\t\treturn <div>No results<\/div>;\n\t}\n\n\treturn (\n\t\t<table className=\"wp-list-table widefat fixed striped table-view-list\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Title<\/td>\n\t\t\t\t\t<td style={{width: 120}}>Actions<\/td>\n\t\t\t\t<\/tr>\n\t\t\t<\/thead>\n\t\t\t<tbody>\n\t\t\t\t{ pages?.map( ( page ) => (\n\t\t\t\t\t<tr key={page.id}>\n\t\t\t\t\t\t<td>{ decodeEntities( page.title.rendered ) }<\/td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<PageEditButton pageId={ page.id } \/>\n\t\t\t\t\t\t<\/td>\n\t\t\t\t\t<\/tr>\n\t\t\t\t) ) }\n\t\t\t<\/tbody>\n\t\t<\/table>\n\t);\n}\n```\n\nThe only change in `PagesList` is the additional column labeled _Actions_:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/edit-form\/edit-button.png)\n\n### Step 2: Display an _Edit_ form\n\nOur button looks nice but doesn't do anything yet. To display an edit form, we need to have one first \u2013 let's create it:\n\n```js\nimport { Button, TextControl } from '@wordpress\/components';\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\treturn (\n\t\t<div className=\"my-gutenberg-form\">\n\t\t\t<TextControl\n\t\t\t\tvalue=''\n\t\t\t\tlabel='Page title:'\n\t\t\t\/>\n\t\t\t<div className=\"form-buttons\">\n\t\t\t\t<Button onClick={ onSaveFinished } variant=\"primary\">\n\t\t\t\t\tSave\n\t\t\t\t<\/Button>\n\t\t\t\t<Button onClick={ onCancel } variant=\"tertiary\">\n\t\t\t\t\tCancel\n\t\t\t\t<\/Button>\n\t\t\t<\/div>\n\t\t<\/div>\n\t);\n}\n```\n\nNow let's make the button display the form we just created. As this tutorial is not focused on web design, we will wire the two together using a component that requires the least amount of code: [`Modal`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/components\/modal\/). Let's update `PageEditButton` accordingly:\n\n```js\nimport { Button, Modal, TextControl } from '@wordpress\/components';\n\nfunction PageEditButton({ pageId }) {\n\tconst [ isOpen, setOpen ] = useState( false );\n\tconst openModal = () => setOpen( true );\n\tconst closeModal = () => setOpen( false );\n\treturn (\n\t\t<>\n\t\t\t<Button\n\t\t\t\tonClick={ openModal }\n\t\t\t\tvariant=\"primary\"\n\t\t\t>\n\t\t\t\tEdit\n\t\t\t<\/Button>\n\t\t\t{ isOpen && (\n\t\t\t\t<Modal onRequestClose={ closeModal } title=\"Edit page\">\n\t\t\t\t\t<EditPageForm\n\t\t\t\t\t\tpageId={pageId}\n\t\t\t\t\t\tonCancel={closeModal}\n\t\t\t\t\t\tonSaveFinished={closeModal}\n\t\t\t\t\t\/>\n\t\t\t\t<\/Modal>\n\t\t\t) }\n\t\t<\/>\n\t)\n}\n```\n\nWhen you click the *Edit* button now, you should see the following modal:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/edit-form\/form-scaffold.png)\n\nGreat! We now have a basic user interface to work with.\n\n### Step 3: Populate the form with page details\n\nWe want the `EditPageForm` to display the title of the currently edited page. You may have noticed that it doesn't receive a `page` prop, only `pageId`. That's okay. Gutenberg Data allows us to easily access entity records from any component.\n\nIn this case, we need to use the [`getEntityRecord`](\/docs\/reference-guides\/data\/data-core\/#getentityrecord) selector. The list of records is already available thanks to the `getEntityRecords` call in `MyFirstApp`, so there won't even be any additional HTTP requests involved \u2013 we'll get the cached record right away.\n\nHere's how you can try it in your browser's dev tools:\n\n```js\nwp.data.select( 'core' ).getEntityRecord( 'postType', 'page', 9 );  \/\/ Replace 9 with an actual page ID\n```\n\nLet's update `EditPageForm` accordingly:\n\n```js\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\tconst page = useSelect(\n\t\tselect => select( coreDataStore ).getEntityRecord( 'postType', 'page', pageId ),\n\t\t[pageId]\n\t);\n\treturn (\n\t\t<div className=\"my-gutenberg-form\">\n\t\t\t<TextControl\n\t\t\t\tlabel='Page title:'\n\t\t\t\tvalue={ page.title.rendered }\n\t\t\t\/>\n\t\t\t{ \/* ... *\/ }\n\t\t<\/div>\n\t);\n}\n```\n\nNow it should look like this:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/edit-form\/form-populated.png)\n\n### Step 4: Making the Page title field editable\n\nThere's one problem with our _Page title_ field: you can't edit it. It receives a fixed `value` but doesn't update it when typing. We need an `onChange` handler.\n\n\nYou may have seen a pattern similar to this one in other React apps. It's known as a [\"controlled component\"](https:\/\/reactjs.org\/docs\/forms.html#controlled-components):\n\n```js\nfunction VanillaReactForm({ initialTitle }) {\n\tconst [title, setTitle] = useState( initialTitle );\n\treturn (\n\t\t<TextControl\n\t\t\tvalue={ title }\n\t\t\tonChange={ setTitle }\n\t\t\/>\n\t);\n}\n```\n\nUpdating entity records in Gutenberg Data is similar but instead of using `setTitle` to store in local (component level) state, we use the `editEntityRecord` action which stores the updates in the _Redux_ state. Here's how you can try it out in your browser's dev tools:\n\n```js\n\/\/ We need a valid page ID to call editEntityRecord, so let's get the first available one using getEntityRecords.\nconst pageId = wp.data.select( 'core' ).getEntityRecords( 'postType', 'page' )[0].id;\n\n\/\/ Update the title\nwp.data.dispatch( 'core' ).editEntityRecord( 'postType', 'page', pageId, { title: 'updated title' } );\n```\n\nAt this point, you may ask _how_ is `editEntityRecord` better than `useState`? The answer is that it offers a few features you wouldn't otherwise get.\n\nFirstly, we can save the changes as easily as we retrieve the data and ensure that all caches will be correctly updated.\n\nSecondly, the changes applied via `editEntityRecord` are easily undo-able via the `undo` and `redo` actions.\n\nLastly, because the changes live in the _Redux_ state, they are \"global\" and can be accessed by other components. For example, we could make the `PagesList` display the currently edited title.\n\nTo that last point, let's see what happens when we use `getEntityRecord` to access the entity record we just updated:\n\n```js\nwp.data.select( 'core' ).getEntityRecord( 'postType', 'page', pageId ).title\n```\n\nIt doesn't reflect the edits. What's going on?\n\nWell, `<PagesList \/>` renders the data returned by `getEntityRecord()`. If `getEntityRecord()` reflected the updated title, then anything the user types in the `TextControl` would be immediately displayed inside `<PagesList \/>`, too. This is not what we want. The edits shouldn't leak outside the form until the user decides to save them.\n\nGutenberg Data solves this problem by making a distinction between *Entity Records* and *Edited Entity Records*. *Entity Records* reflect the data from the API and ignore any local edits, while *Edited Entity Records* also have all the local edits applied on top. Both co-exist in the Redux state at the same time.\n\nLet's see what happens if we call `getEditedEntityRecord`:\n\n```js\nwp.data.select( 'core' ).getEditedEntityRecord( 'postType', 'page', pageId ).title\n\/\/ \"updated title\"\n\nwp.data.select( 'core' ).getEntityRecord( 'postType', 'page', pageId ).title\n\/\/ { \"rendered\": \"<original, unchanged title>\", \"raw\": \"...\" }\n```\n\nAs you can see, the `title` of an Entity Record is an object, but the `title` of an Edited Entity record is a string.\n\nThis is no accident. Fields like `title`, `excerpt`, and `content` may contain [shortcodes](https:\/\/developer.wordpress.org\/apis\/handbook\/shortcode\/) or [dynamic blocks](\/docs\/how-to-guides\/block-tutorial\/creating-dynamic-blocks.md), which means they can only be rendered on the server. For such fields, the REST API exposes both the `raw` markup _and_ the `rendered` string. For example, in the block editor, `content.rendered` could used as a visual preview, and `content.raw` could be used to populate the code editor.\n\nSo why is the `content` of an Edited Entity Record a string? Since Javascript is not be able to properly render arbitrary block markup, it stores only the `raw` markup without the `rendered` part. And since that's a string, the entire field becomes a string.\n\nWe can now update `EditPageForm` accordingly. We can access the actions using the [`useDispatch`](\/packages\/data\/README.md#usedispatch) hook similarly to how we use `useSelect` to access selectors:\n\n```js\nimport { useDispatch } from '@wordpress\/data';\n\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\tconst page = useSelect(\n\t\tselect => select( coreDataStore ).getEditedEntityRecord( 'postType', 'page', pageId ),\n\t\t[ pageId ]\n\t);\n\tconst { editEntityRecord } = useDispatch( coreDataStore );\n\tconst handleChange = ( title ) => editEntityRecord( 'postType', 'page', pageId, { title } );\n\n\treturn (\n\t\t<div className=\"my-gutenberg-form\">\n\t\t\t<TextControl\n\t\t\t\tlabel=\"Page title:\"\n\t\t\t\tvalue={ page.title }\n\t\t\t\tonChange={ handleChange }\n\t\t\t\/>\n\t\t\t<div className=\"form-buttons\">\n\t\t\t\t<Button onClick={ onSaveFinished } variant=\"primary\">\n\t\t\t\t\tSave\n\t\t\t\t<\/Button>\n\t\t\t\t<Button onClick={ onCancel } variant=\"tertiary\">\n\t\t\t\t\tCancel\n\t\t\t\t<\/Button>\n\t\t\t<\/div>\n\t\t<\/div>\n\t);\n}\n```\n\nWe added an `onChange` handler to keep track of edits via the `editEntityRecord` action and then changed the selector to `getEditedEntityRecord` so that `page.title` always reflects the changes.\n\nThis is what it looks like now:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/edit-form\/form-editable.png)\n\n### Step 5: Saving the form data\n\nNow that we can edit the page title let's also make sure we can save it. In Gutenberg data, we save changes to the WordPress REST API using the `saveEditedEntityRecord` action. It sends the request, processes the result, and updates the cached data in the Redux state.\n\nHere's an example you may try in your browser's dev tools:\n\n```js\n\/\/ Replace 9 with an actual page ID\nwp.data.dispatch( 'core' ).editEntityRecord( 'postType', 'page', 9, { title: 'updated title' } );\nwp.data.dispatch( 'core' ).saveEditedEntityRecord( 'postType', 'page', 9 );\n```\n\nThe above snippet saved a new title. Unlike before, `getEntityRecord` now reflects the updated title:\n\n```js\n\/\/ Replace 9 with an actual page ID\nwp.data.select( 'core' ).getEntityRecord( 'postType', 'page', 9 ).title.rendered\n\/\/ \"updated title\"\n```\n\nEntity records are updated to reflect any saved changes right after the REST API request is finished.\n\nThis is how the `EditPageForm` looks like with a working *Save* button:\n\n```js\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\t\/\/ ...\n\tconst { saveEditedEntityRecord } = useDispatch( coreDataStore );\n\tconst handleSave = () => saveEditedEntityRecord( 'postType', 'page', pageId );\n\n\treturn (\n\t\t<div className=\"my-gutenberg-form\">\n\t\t\t{\/* ... *\/}\n\t\t\t<div className=\"form-buttons\">\n\t\t\t\t<Button onClick={ handleSave } variant=\"primary\">\n\t\t\t\t\tSave\n\t\t\t\t<\/Button>\n\t\t\t\t{\/* ... *\/}\n\t\t\t<\/div>\n\t\t<\/div>\n\t);\n}\n```\n\nIt works, but there's still one thing to fix: the form modal doesn't automatically close because we never call `onSaveFinished`. Lucky for us, `saveEditedEntityRecord` returns a promise that resolves once the save operation is finished. Let's take advantage of it in `EditPageForm`:\n\n```js\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\t\/\/ ...\n\tconst handleSave = async () => {\n\t\tawait saveEditedEntityRecord( 'postType', 'page', pageId );\n\t\tonSaveFinished();\n\t};\n\t\/\/ ...\n}\n```\n\n### Step 6: Handle errors\n\nWe optimistically assumed that a *save* operation would always succeed. Unfortunately, it may fail in many ways:\n\n* The website can be down\n* The update may be invalid\n* The page could have been deleted by someone else in the meantime\n\nTo tell the user when any of these happens, we have to make two adjustments. We don't want to close the form modal when the update fails. The promise returned by `saveEditedEntityRecord` is resolved with an updated record only if the update actually worked. When something goes wrong, it resolves with an empty value. Let's use it to keep the modal open:\n\n```js\nfunction EditPageForm( { pageId, onSaveFinished } ) {\n\t\/\/ ...\n\tconst handleSave = async () => {\n\t\tconst updatedRecord = await saveEditedEntityRecord( 'postType', 'page', pageId );\n\t\tif ( updatedRecord ) {\n\t\t\tonSaveFinished();\n\t\t}\n\t};\n\t\/\/ ...\n}\n```\n\nGreat! Now, let's display an error message. The failure details can be grabbed using the `getLastEntitySaveError` selector:\n\n```js\n\/\/ Replace 9 with an actual page ID\nwp.data.select( 'core' ).getLastEntitySaveError( 'postType', 'page', 9 )\n```\n\nHere's how we can use it in `EditPageForm`:\n\n```js\nfunction EditPageForm( { pageId, onSaveFinished } ) {\n\t\/\/ ...\n    const { lastError, page } = useSelect(\n        select => ({\n\t\t\tpage: select( coreDataStore ).getEditedEntityRecord( 'postType', 'page', pageId ),\n\t\t\tlastError: select( coreDataStore ).getLastEntitySaveError( 'postType', 'page', pageId )\n\t\t}),\n        [ pageId ]\n\t)\n\t\/\/ ...\n\treturn (\n\t\t<div className=\"my-gutenberg-form\">\n\t\t\t{\/* ... *\/}\n\t\t\t{ lastError ? (\n\t\t\t\t<div className=\"form-error\">\n\t\t\t\t\tError: { lastError.message }\n\t\t\t\t<\/div>\n\t\t\t) : false }\n\t\t\t{\/* ... *\/}\n\t\t<\/div>\n\t);\n}\n```\n\nGreat! `EditPageForm` is now fully aware of errors.\n\nLet's see that error message in action. We'll trigger an invalid update and let it fail. The post title is hard to break, so let's set a `date` property to `-1` instead \u2013 that's a guaranteed validation error:\n\n```js\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\t\/\/ ...\n\tconst handleChange = ( title ) => editEntityRecord( 'postType', 'page', pageId, { title, date: -1 } );\n\t\/\/ ...\n}\n```\n\nOnce you refresh the page, open the form, change the title, and hit save, you should see the following error message:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/edit-form\/form-error.png)\n\nFantastic! We can now **restore the previous version of `handleChange`** and move on to the next step.\n\n### Step 7: Status indicator\n\nThere is one last problem with our form: no visual feedback. We can\u2019t be quite sure whether the *Save* button worked until either the form disappears or an error message shows.\n\nWe're going to clear it up and communicate two states to the user: _Saving_ and _No changes detected_. The relevant selectors are `isSavingEntityRecord` and `hasEditsForEntityRecord`. Unlike `getEntityRecord`, they never issue any HTTP requests but only return the current entity record state.\n\nLet's use them in `EditPageForm`:\n\n```js\nfunction EditPageForm( { pageId, onSaveFinished } ) {\n\t\/\/ ...\n\tconst { isSaving, hasEdits, \/* ... *\/ } = useSelect(\n\t\tselect => ({\n\t\t\tisSaving: select( coreDataStore ).isSavingEntityRecord( 'postType', 'page', pageId ),\n\t\t\thasEdits: select( coreDataStore ).hasEditsForEntityRecord( 'postType', 'page', pageId ),\n\t\t\t\/\/ ...\n\t\t}),\n\t\t[ pageId ]\n\t)\n}\n```\n\nWe can now use `isSaving` and `hasEdits` to display a spinner when saving is in progress and grey out the save button when there are no edits:\n\n```js\nfunction EditPageForm( { pageId, onSaveFinished } ) {\n\t\/\/ ...\n\treturn (\n\t\t\/\/ ...\n\t\t<div className=\"form-buttons\">\n\t\t\t<Button onClick={ handleSave } variant=\"primary\" disabled={ ! hasEdits || isSaving }>\n\t\t\t\t{ isSaving ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Spinner\/>\n\t\t\t\t\t\tSaving\n\t\t\t\t\t<\/>\n\t\t\t\t) : 'Save' }\n\t\t\t<\/Button>\n\t\t\t<Button\n\t\t\t\tonClick={ onCancel }\n\t\t\t\tvariant=\"tertiary\"\n\t\t\t\tdisabled={ isSaving }\n\t\t\t>\n\t\t\t\tCancel\n\t\t\t<\/Button>\n\t\t<\/div>\n\t\t\/\/ ...\n\t);\n}\n```\n\nNote that we disable the _save_ button when there are no edits and when the page is currently being saved. This is to prevent the user from accidentally pressing the button twice.\n\nAlso, interrupting a *save* in progress is not supported by `@wordpress\/data` so we also conditionally disabled the _cancel_ button.\n\nHere's what it looks like in action:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/edit-form\/form-inactive.png)\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/edit-form\/form-spinner.png)\n\n### Wiring it all together\n\nAll the pieces are in place, great! Here\u2019s everything we built in this chapter in one place:\n\n```js\nimport { useDispatch } from '@wordpress\/data';\nimport { Button, Modal, TextControl } from '@wordpress\/components';\n\nfunction PageEditButton( { pageId } ) {\n\tconst [ isOpen, setOpen ] = useState( false );\n\tconst openModal = () => setOpen( true );\n\tconst closeModal = () => setOpen( false );\n\treturn (\n\t\t<>\n\t\t\t<Button onClick={ openModal } variant=\"primary\">\n\t\t\t\tEdit\n\t\t\t<\/Button>\n\t\t\t{ isOpen && (\n\t\t\t\t<Modal onRequestClose={ closeModal } title=\"Edit page\">\n\t\t\t\t\t<EditPageForm\n\t\t\t\t\t\tpageId={ pageId }\n\t\t\t\t\t\tonCancel={ closeModal }\n\t\t\t\t\t\tonSaveFinished={ closeModal }\n\t\t\t\t\t\/>\n\t\t\t\t<\/Modal>\n\t\t\t) }\n\t\t<\/>\n\t);\n}\n\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\tconst { page, lastError, isSaving, hasEdits } = useSelect(\n\t\t( select ) => ( {\n\t\t\tpage: select( coreDataStore ).getEditedEntityRecord( 'postType', 'page', pageId ),\n\t\t\tlastError: select( coreDataStore ).getLastEntitySaveError( 'postType', 'page', pageId ),\n\t\t\tisSaving: select( coreDataStore ).isSavingEntityRecord( 'postType', 'page', pageId ),\n\t\t\thasEdits: select( coreDataStore ).hasEditsForEntityRecord( 'postType', 'page', pageId ),\n\t\t} ),\n\t\t[ pageId ]\n\t);\n\n\tconst { saveEditedEntityRecord, editEntityRecord } = useDispatch( coreDataStore );\n\tconst handleSave = async () => {\n\t\tconst savedRecord = await saveEditedEntityRecord( 'postType', 'page', pageId );\n\t\tif ( savedRecord ) {\n\t\t\tonSaveFinished();\n\t\t}\n\t};\n\tconst handleChange = ( title ) =>  editEntityRecord( 'postType', 'page', page.id, { title } );\n\n\treturn (\n\t\t<div className=\"my-gutenberg-form\">\n\t\t\t<TextControl\n\t\t\t\tlabel=\"Page title:\"\n\t\t\t\tvalue={ page.title }\n\t\t\t\tonChange={ handleChange }\n\t\t\t\/>\n\t\t\t{ lastError ? (\n\t\t\t\t<div className=\"form-error\">Error: { lastError.message }<\/div>\n\t\t\t) : (\n\t\t\t\tfalse\n\t\t\t) }\n\t\t\t<div className=\"form-buttons\">\n\t\t\t\t<Button\n\t\t\t\t\tonClick={ handleSave }\n\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\tdisabled={ ! hasEdits || isSaving }\n\t\t\t\t>\n\t\t\t\t\t{ isSaving ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<Spinner\/>\n\t\t\t\t\t\t\tSaving\n\t\t\t\t\t\t<\/>\n\t\t\t\t\t) : 'Save' }\n\t\t\t\t<\/Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={ onCancel }\n\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\tdisabled={ isSaving }\n\t\t\t\t>\n\t\t\t\t\tCancel\n\t\t\t\t<\/Button>\n\t\t\t<\/div>\n\t\t<\/div>\n\t);\n}\n```\n\n## What's next?\n\n* **Previous part:** [Building a list of pages](\/docs\/how-to-guides\/data-basics\/2-building-a-list-of-pages.md)\n* **Next part:** Building a *New Page* form (coming soon)\n* (optional) Review the [finished app](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/data-basics-59c8f8) in the block-development-examples repository\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/data-basics\/2-building-a-list-of-pages.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Building a list of pages<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In this part, we will build a filterable list of all WordPress pages. This is what the app will look like at the end of this section:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/part1-finished.jpg\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s see how we can get there step by step.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Step 1: Build the PagesList component<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s start by building a minimal React component to display the list of pages:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function MyFirstApp() {\n\tconst pages = &#91;{ id: 'mock', title: 'Sample page' }]\n\treturn <pageslist pages=\"{\" }=\"\">;\n}\n\nfunction PagesList( { pages } ) {\n\treturn (\n\t\t<ul>\n\t\t\t{ pages?.map( page => (\n\t\t\t\t<li key=\"{\" page.id=\"\" }=\"\">\n\t\t\t\t\t{ page.title }\n\t\t\t\t<\/li>\n\t\t\t) ) }\n\t\t<\/ul>\n\t);\n}\n<\/pageslist><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note that this component does not fetch any data yet, only presents the hardcoded list of pages. When you refresh the page, you should see the following:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/simple-list.jpg\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Step 2: Fetch the data<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The hard-coded sample page isn\u2019t very useful. We want to display your actual WordPress pages so let\u2019s fetch the actual list of pages from the <a href=\"https:\/\/developer.wordpress.org\/rest-api\/\">WordPress REST API<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before we start, let\u2019s confirm we actually have some pages to fetch. Within WPAdmin, Navigate to Pages using the sidebar menu and ensure it shows at least four or five Pages:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/pages-list.jpg\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>If it doesn\u2019t, go ahead and create a few pages \u2013 you can use the same titles as on the screenshot above. Be sure to <em>publish<\/em> and not just <em>save<\/em> them.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now that we have the data to work with, let\u2019s dive into the code. We will take advantage of the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/core-data\"><code>@wordpress\/core-data<\/code><\/a> package which provides resolvers, selectors, and actions to work with the WordPress core API. <code>@wordpress\/core-data<\/code> builds on top of the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/data\"><code>@wordpress\/data<\/code><\/a> package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To fetch the list of pages, we will use the <a href=\"\/docs\/reference-guides\/data\/data-core\/#getentityrecords\"><code>getEntityRecords<\/code><\/a> selector. In broad strokes, it will issue the correct API request, cache the results, and return the list of the records we need. Here\u2019s how to use it:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.data.select( 'core' ).getEntityRecords( 'postType', 'page' )\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If you run that following snippet in your browser\u2019s dev tools, you will see it returns <code>null<\/code>. Why? The pages are only requested by the <code>getEntityRecords<\/code> resolver after first running the <em>selector<\/em>. If you wait a moment and re-run it, it will return the list of all pages.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Note: To run this type of command directly make sure your browser is displaying an instance of the block editor (any page will do). Otherwise the <code>select( 'core' )<\/code> function won't be available, and you'll get an error.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Similarly, the <code>MyFirstApp<\/code> component needs to re-run the selector once the data is available. That\u2019s exactly what the <code>useSelect<\/code> hook does:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useSelect } from '@wordpress\/data';\nimport { store as coreDataStore } from '@wordpress\/core-data';\n\nfunction MyFirstApp() {\n\tconst pages = useSelect(\n\t\tselect =>\n\t\t\tselect( coreDataStore ).getEntityRecords( 'postType', 'page' ),\n\t\t&#91;]\n\t);\n\t\/\/ ...\n}\n\nfunction PagesList({ pages }) {\n\t\/\/ ...\n\t<li key=\"{page.id}\">\n\t\t{page.title.rendered}\n\t<\/li>\n\t\/\/ ...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note that we use an <code>import<\/code> statement inside index.js. This enables the plugin to automatically load the dependencies using <code>wp_enqueue_script<\/code>. Any references to <code>coreDataStore<\/code> are compiled to the same <code>wp.data<\/code> reference we use in browser's devtools.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>useSelect<\/code> takes two arguments: a callback and dependencies. In broad strokes, it re-runs the callback whenever either the dependencies or the underlying data store changes. You can learn more about <a href=\"\/packages\/data\/README.md#useselect\">useSelect<\/a> in the <a href=\"\/packages\/data\/README.md#useselect\">data module documentation<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Putting it together, we get the following code:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useSelect } from '@wordpress\/data';\nimport { store as coreDataStore } from '@wordpress\/core-data';\nimport { decodeEntities } from '@wordpress\/html-entities';\n\nfunction MyFirstApp() {\n\tconst pages = useSelect(\n\t\tselect =>\n\t\t\tselect( coreDataStore ).getEntityRecords( 'postType', 'page' ),\n\t\t&#91;]\n\t);\n\treturn <pageslist pages=\"{\" }=\"\">;\n}\n\nfunction PagesList( { pages } ) {\n\treturn (\n\t\t<ul>\n\t\t\t{ pages?.map( page => (\n\t\t\t\t<li key=\"{\" page.id=\"\" }=\"\">\n\t\t\t\t\t{ decodeEntities( page.title.rendered ) }\n\t\t\t\t<\/li>\n\t\t\t) ) }\n\t\t<\/ul>\n\t)\n}\n<\/pageslist><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note that post title may contain HTML entities like <code>&amp;aacute;<\/code>, so we need to use the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-html-entities\/\"><code>decodeEntities<\/code><\/a> function to replace them with the symbols they represent like <code>\u00e1<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Refreshing the page should display a list similar to this one:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/fetch-the-data.jpg\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Step 3: Turn it into a table<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function PagesList( { pages } ) {\n\treturn (\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n<table classname=\"wp-list-table widefat fixed striped table-view-list\">\t\t\t<thead>\t\t\t\t<tr>\t\t\t\t\t<th>Title<\/th>\t\t\t\t<\/tr>\t\t\t<\/thead>\t\t\t<tbody>\t\t\t\t\t<tr key=\"{\" page.id=\"\" }=\"\">\t\t\t\t\t\t<td>{ decodeEntities( page.title.rendered ) }<\/td>\t\t\t\t\t<\/tr>\t\t\t<\/tbody>\t\t<\/table>\t\t\t\t{ pages?.map( page => (\t\t\t\t) ) }\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/make-a-table.jpg\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Step 4: Add a search box<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The list of pages is short for now; however, the longer it grows, the harder it is to work with. WordPress admins typically solves this problem with a search box \u2013 let\u2019s implement one too!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s start by adding a search field:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useState } from 'react';\nimport { SearchControl } from '@wordpress\/components';\n\nfunction MyFirstApp() {\n\tconst &#91;searchTerm, setSearchTerm] = useState( '' );\n\t\/\/ ...\n\treturn (\n\t\t<div>\n\t\t\t<searchcontrol<br>\t\t\t\tonChange={ setSearchTerm }\n\t\t\t\tvalue={ searchTerm }\n\t\t\t\/>\n\t\t\t{\/* ... *\/ }\n\t\t<\/searchcontrol<br><\/div>\n\t)\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note that instead of using an <code>input<\/code> tag, we took advantage of the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/components\/search-control\/\">SearchControl<\/a> component. This is what it looks like:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/filter-field.jpg\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>The field starts empty, and the contents are stored in the <code>searchTerm<\/code> state value. If you aren\u2019t familiar with the <a href=\"https:\/\/reactjs.org\/docs\/hooks-state.html\">useState<\/a> hook, you can learn more in <a href=\"https:\/\/reactjs.org\/docs\/hooks-state.html\">React\u2019s documentation<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We can now request only the pages matching the <code>searchTerm<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After checking with the <a href=\"https:\/\/developer.wordpress.org\/rest-api\/reference\/pages\/\">WordPress API documentation<\/a>, we see that the <a href=\"https:\/\/developer.wordpress.org\/rest-api\/reference\/pages\/\">\/wp\/v2\/pages<\/a> endpoint accepts a <code>search<\/code> query parameter and uses it to  <em>limit results to those matching a string<\/em>. But how can we use it? We can pass custom query parameters as the third argument to <code>getEntityRecords<\/code> as below:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp.data.select( 'core' ).getEntityRecords( 'postType', 'page', { search: 'home' } )\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Running that snippet in your browser\u2019s dev tools will trigger a request to <code>\/wp\/v2\/pages?search=home<\/code> instead of just <code>\/wp\/v2\/pages<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s mirror this in our <code>useSelect<\/code> call as follows:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useSelect } from '@wordpress\/data';\nimport { store as coreDataStore } from '@wordpress\/core-data';\n\nfunction MyFirstApp() {\n\t\/\/ ...\n\tconst { pages } = useSelect( select => {\n\t\tconst query = {};\n\t\tif ( searchTerm ) {\n\t\t\tquery.search = searchTerm;\n\t\t}\n\t\treturn {\n\t\t\tpages: select( coreDataStore ).getEntityRecords( 'postType', 'page', query )\n\t\t}\n\t}, &#91;searchTerm] );\n\n\t\/\/ ...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The <code>searchTerm<\/code> is now used as a <code>search<\/code> query parameter when provided. Note that <code>searchTerm<\/code> is also specified inside the list of <code>useSelect<\/code> dependencies to make sure <code>getEntityRecords<\/code> is re-run when the <code>searchTerm<\/code> changes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally, here\u2019s how <code>MyFirstApp<\/code> looks once we wire it all together:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useState } from 'react';\nimport { createRoot } from 'react-dom';\nimport { SearchControl } from '@wordpress\/components';\nimport { useSelect } from '@wordpress\/data';\nimport { store as coreDataStore } from '@wordpress\/core-data';\n\nfunction MyFirstApp() {\n\tconst &#91;searchTerm, setSearchTerm] = useState( '' );\n\tconst pages = useSelect( select => {\n\t\tconst query = {};\n\t\tif ( searchTerm ) {\n\t\t\tquery.search = searchTerm;\n\t\t}\n\t\treturn select( coreDataStore ).getEntityRecords( 'postType', 'page', query );\n\t}, &#91;searchTerm] );\n\n\treturn (\n\t\t<div>\n\t\t\t<searchcontrol<br>\t\t\t\tonChange={ setSearchTerm }\n\t\t\t\tvalue={ searchTerm }\n\t\t\t\/>\n\t\t\t<pageslist pages=\"{\" }=\"\">\n\t\t<\/pageslist><\/searchcontrol<br><\/div>\n\t)\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Voila! We can now filter the results:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/filter.jpg\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Using core-data instead vs calling the API directly<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s take a pause for a moment to consider the downsides of an alternative approach we could have taken - working with the API directly. Imagine we sent the API requests directly:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import apiFetch from '@wordpress\/api-fetch';\nfunction MyFirstApp() {\n\t\/\/ ...\n\tconst &#91;pages, setPages] = useState( &#91;] );\n\tuseEffect( () => {\n\t\tconst url = '\/wp-json\/wp\/v2\/pages?search=' + searchTerm;\n\t\tapiFetch( { url } )\n\t\t\t.then( setPages )\n\t}, &#91;searchTerm] );\n\t\/\/ ...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Working outside of core-data, we would need to solve two problems here.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Firstly, out-of-order updates. Searching for \u201eAbout\u201d would trigger five API requests filtering for <code>A<\/code>, <code>Ab<\/code>, <code>Abo<\/code>, <code>Abou<\/code>, and <code>About<\/code>. These requests could finish in a different order than they started. It is possible that <em>search=A<\/em> would resolve after _ search=About_ and thus we\u2019d display the wrong data.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Gutenberg data helps by handling the asynchronous part behind the scenes. <code>useSelect<\/code> remembers the most recent call and returns only the data we expect.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Secondly, every keystroke would trigger an API request. If you typed <code>About<\/code>, deleted it, and retyped it, it would issue 10 requests in total even though we could reuse the data.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Gutenberg data helps by caching the responses to API requests triggered by <code>getEntityRecords()<\/code>  and reuses them on subsequent calls. This is especially important when other components rely on the same entity records.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>All in all, the utilities built into core-data are designed to solve the typical problems so that you can focus on your application instead.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Step 5: Loading Indicator<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There is one problem with our search feature. We can\u2019t be quite sure whether it\u2019s still searching or showing no results:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/unclear-status.jpg\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>A few messages like  <em>Loading\u2026<\/em> or <em>No results<\/em> would clear it up. Let\u2019s implement them! First,  <code>PagesList<\/code> has to be aware of the current status:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { SearchControl, Spinner } from '@wordpress\/components';\nfunction PagesList( { hasResolved, pages } ) {\n\tif ( !hasResolved ) {\n\t\treturn <spinner>\n\t}\n\tif ( !pages?.length ) {\n\t\treturn <div>No results<\/div>\n\t}\n\t\/\/ ...\n}\n\nfunction MyFirstApp() {\n\t\/\/ ...\n\n\treturn (\n\t\t<div>\n\t\t\t\/\/ ...\n\t\t\t<pageslist hasresolved=\"{\" }=\"\" pages=\"{\">\n\t\t<\/pageslist><\/div>\n\t)\n}\n<\/spinner><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note that instead of building a custom loading indicator, we took advantage of the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/components\/spinner\/\">Spinner<\/a> component.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We still need to know whether the pages selector <code>hasResolved<\/code> or not. We can find out using the  <code>hasFinishedResolution<\/code> selector:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>wp.data.select('core').hasFinishedResolution( 'getEntityRecords', [ 'postType', 'page', { search: 'home' } ] )<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It takes the name of the selector and the <em>exact same arguments you passed to that selector<\/em> and returns either <code>true<\/code> if the data was already loaded or <code>false<\/code> if we\u2019re still waiting. Let\u2019s add it to <code>useSelect<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useSelect } from '@wordpress\/data';\nimport { store as coreDataStore } from '@wordpress\/core-data';\n\nfunction MyFirstApp() {\n\t\/\/ ...\n\tconst { pages, hasResolved } = useSelect( select => {\n\t\t\/\/ ...\n\t\treturn {\n\t\t\tpages: select( coreDataStore ).getEntityRecords( 'postType', 'page', query ),\n\t\t\thasResolved:\n\t\t\t\tselect( coreDataStore ).hasFinishedResolution( 'getEntityRecords', &#91;'postType', 'page', query] ),\n\t\t}\n\t}, &#91;searchTerm] );\n\n\t\/\/ ...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>There is just one last problem. It is easy to make a typo and end up passing different arguments to <code>getEntityRecords<\/code> and <code>hasFinishedResolution<\/code>. It is critical that they are identical. We can remove this risk by storing the arguments in a variable:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useSelect } from '@wordpress\/data';\nimport { store as coreDataStore } from '@wordpress\/core-data';\nfunction MyFirstApp() {\n\t\/\/ ...\n\tconst { pages, hasResolved } = useSelect( select => {\n\t\t\/\/ ...\n\t\tconst selectorArgs = &#91; 'postType', 'page', query ];\n\t\treturn {\n\t\t\tpages: select( coreDataStore ).getEntityRecords( ...selectorArgs ),\n\t\t\thasResolved:\n\t\t\t\tselect( coreDataStore ).hasFinishedResolution( 'getEntityRecords', selectorArgs ),\n\t\t}\n\t}, &#91;searchTerm] );\n\n\t\/\/ ...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>And voil\u00e0! That's it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Wiring it all together<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>All the pieces are in place, great! Here\u2019s the complete JavaScript code of our app:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useState } from 'react';\nimport { createRoot } from 'react-dom';\nimport { SearchControl, Spinner } from '@wordpress\/components';\nimport { useSelect } from '@wordpress\/data';\nimport { store as coreDataStore } from '@wordpress\/core-data';\nimport { decodeEntities } from '@wordpress\/html-entities';\n\nfunction MyFirstApp() {\n\tconst &#91; searchTerm, setSearchTerm ] = useState( '' );\n\tconst { pages, hasResolved } = useSelect(\n\t\t( select ) => {\n\t\t\tconst query = {};\n\t\t\tif ( searchTerm ) {\n\t\t\t\tquery.search = searchTerm;\n\t\t\t}\n\t\t\tconst selectorArgs = &#91; 'postType', 'page', query ];\n\t\t\treturn {\n\t\t\t\tpages: select( coreDataStore ).getEntityRecords(\n\t\t\t\t\t...selectorArgs\n\t\t\t\t),\n\t\t\t\thasResolved: select( coreDataStore ).hasFinishedResolution(\n\t\t\t\t\t'getEntityRecords',\n\t\t\t\t\tselectorArgs\n\t\t\t\t),\n\t\t\t};\n\t\t},\n\t\t&#91; searchTerm ]\n\t);\n\n\treturn (\n\t\t<div>\n\t\t\t<searchcontrol onchange=\"{\" setsearchterm=\"\" }=\"\" value=\"{\" searchterm=\"\">\n\t\t\t<pageslist hasresolved=\"{\" }=\"\" pages=\"{\">\n\t\t<\/pageslist><\/searchcontrol><\/div>\n\t);\n}\n\nfunction PagesList( { hasResolved, pages } ) {\n\tif ( ! hasResolved ) {\n\t\treturn <spinner>;\n\t}\n\tif ( ! pages?.length ) {\n\t\treturn <div>No results<\/div>;\n\t}\n\n\treturn (\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n<table classname=\"wp-list-table widefat fixed striped table-view-list\">\t\t\t<thead>\t\t\t\t<tr>\t\t\t\t\t<td>Title<\/td>\t\t\t\t<\/tr>\t\t\t<\/thead>\t\t\t<tbody>\t\t\t\t\t<tr key=\"{\" page.id=\"\" }=\"\">\t\t\t\t\t\t<td>{ decodeEntities( page.title.rendered ) }<\/td>\t\t\t\t\t<\/tr>\t\t\t<\/tbody>\t\t<\/table>\t\t\t\t{ pages?.map( ( page ) => (\t\t\t\t) ) }\n\t);\n}\n\nconst root = createRoot(\n\tdocument.querySelector( '#my-first-gutenberg-app' )\n);\nwindow.addEventListener(\n\t'load',\n\tfunction () {\n\t\troot.render(\n\t\t\t<myfirstapp>\n\t\t);\n\t},\n\tfalse\n);\n<\/myfirstapp><\/spinner><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>All that\u2019s left is to refresh the page and enjoy the brand new status indicator:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/indicator.jpg\"><br><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/no-results.jpg\"><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">What's next?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Previous part:<\/strong> <a href=\"\/docs\/how-to-guides\/data-basics\/1-data-basics-setup.md\">Setup<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Next part:<\/strong> <a href=\"\/docs\/how-to-guides\/data-basics\/3-building-an-edit-form.md\">Building an edit form<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>(optional) Review the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/data-basics-59c8f8\">finished app<\/a> in the block-development-examples repository<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Building a list of pages\n\nIn this part, we will build a filterable list of all WordPress pages. This is what the app will look like at the end of this section:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/part1-finished.jpg)\n\nLet\u2019s see how we can get there step by step.\n\n## Step 1: Build the PagesList component\n\nLet\u2019s start by building a minimal React component to display the list of pages:\n\n```js\nfunction MyFirstApp() {\n\tconst pages = [{ id: 'mock', title: 'Sample page' }]\n\treturn <PagesList pages={ pages }\/>;\n}\n\nfunction PagesList( { pages } ) {\n\treturn (\n\t\t<ul>\n\t\t\t{ pages?.map( page => (\n\t\t\t\t<li key={ page.id }>\n\t\t\t\t\t{ page.title }\n\t\t\t\t<\/li>\n\t\t\t) ) }\n\t\t<\/ul>\n\t);\n}\n```\n\nNote that this component does not fetch any data yet, only presents the hardcoded list of pages. When you refresh the page, you should see the following:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/simple-list.jpg)\n\n## Step 2: Fetch the data\n\nThe hard-coded sample page isn\u2019t very useful. We want to display your actual WordPress pages so let\u2019s fetch the actual list of pages from the [WordPress REST API](https:\/\/developer.wordpress.org\/rest-api\/).\n\nBefore we start, let\u2019s confirm we actually have some pages to fetch. Within WPAdmin, Navigate to Pages using the sidebar menu and ensure it shows at least four or five Pages:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/pages-list.jpg)\n\nIf it doesn\u2019t, go ahead and create a few pages \u2013 you can use the same titles as on the screenshot above. Be sure to _publish_ and not just _save_ them.\n\nNow that we have the data to work with, let\u2019s dive into the code. We will take advantage of the [`@wordpress\/core-data`](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/core-data) package which provides resolvers, selectors, and actions to work with the WordPress core API. `@wordpress\/core-data` builds on top of the [`@wordpress\/data`](https:\/\/github.com\/WordPress\/gutenberg\/tree\/trunk\/packages\/data) package.\n\nTo fetch the list of pages, we will use the [`getEntityRecords`](\/docs\/reference-guides\/data\/data-core\/#getentityrecords) selector. In broad strokes, it will issue the correct API request, cache the results, and return the list of the records we need. Here\u2019s how to use it:\n\n```js\nwp.data.select( 'core' ).getEntityRecords( 'postType', 'page' )\n```\n\nIf you run that following snippet in your browser\u2019s dev tools, you will see it returns `null`. Why? The pages are only requested by the `getEntityRecords` resolver after first running the _selector_. If you wait a moment and re-run it, it will return the list of all pages.\n\n*Note: To run this type of command directly make sure your browser is displaying an instance of the block editor (any page will do). Otherwise the `select( 'core' )` function won't be available, and you'll get an error.*\n\nSimilarly, the `MyFirstApp` component needs to re-run the selector once the data is available. That\u2019s exactly what the `useSelect` hook does:\n\n```js\nimport { useSelect } from '@wordpress\/data';\nimport { store as coreDataStore } from '@wordpress\/core-data';\n\nfunction MyFirstApp() {\n\tconst pages = useSelect(\n\t\tselect =>\n\t\t\tselect( coreDataStore ).getEntityRecords( 'postType', 'page' ),\n\t\t[]\n\t);\n\t\/\/ ...\n}\n\nfunction PagesList({ pages }) {\n\t\/\/ ...\n\t<li key={page.id}>\n\t\t{page.title.rendered}\n\t<\/li>\n\t\/\/ ...\n}\n```\n\nNote that we use an `import` statement inside index.js. This enables the plugin to automatically load the dependencies using `wp_enqueue_script`. Any references to `coreDataStore` are compiled to the same `wp.data` reference we use in browser's devtools.\n\n`useSelect` takes two arguments: a callback and dependencies. In broad strokes, it re-runs the callback whenever either the dependencies or the underlying data store changes. You can learn more about [useSelect](\/packages\/data\/README.md#useselect) in the [data module documentation](\/packages\/data\/README.md#useselect).\n\nPutting it together, we get the following code:\n\n```js\nimport { useSelect } from '@wordpress\/data';\nimport { store as coreDataStore } from '@wordpress\/core-data';\nimport { decodeEntities } from '@wordpress\/html-entities';\n\nfunction MyFirstApp() {\n\tconst pages = useSelect(\n\t\tselect =>\n\t\t\tselect( coreDataStore ).getEntityRecords( 'postType', 'page' ),\n\t\t[]\n\t);\n\treturn <PagesList pages={ pages }\/>;\n}\n\nfunction PagesList( { pages } ) {\n\treturn (\n\t\t<ul>\n\t\t\t{ pages?.map( page => (\n\t\t\t\t<li key={ page.id }>\n\t\t\t\t\t{ decodeEntities( page.title.rendered ) }\n\t\t\t\t<\/li>\n\t\t\t) ) }\n\t\t<\/ul>\n\t)\n}\n```\n\nNote that post title may contain HTML entities like `&aacute;`, so we need to use the [`decodeEntities`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/packages\/packages-html-entities\/) function to replace them with the symbols they represent like `\u00e1`.\n\nRefreshing the page should display a list similar to this one:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/fetch-the-data.jpg)\n\n## Step 3: Turn it into a table\n\n```js\nfunction PagesList( { pages } ) {\n\treturn (\n\t\t<table className=\"wp-list-table widefat fixed striped table-view-list\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>Title<\/th>\n\t\t\t\t<\/tr>\n\t\t\t<\/thead>\n\t\t\t<tbody>\n\t\t\t\t{ pages?.map( page => (\n\t\t\t\t\t<tr key={ page.id }>\n\t\t\t\t\t\t<td>{ decodeEntities( page.title.rendered ) }<\/td>\n\t\t\t\t\t<\/tr>\n\t\t\t\t) ) }\n\t\t\t<\/tbody>\n\t\t<\/table>\n\t);\n}\n```\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/make-a-table.jpg)\n\n## Step 4: Add a search box\n\nThe list of pages is short for now; however, the longer it grows, the harder it is to work with. WordPress admins typically solves this problem with a search box \u2013 let\u2019s implement one too!\n\nLet\u2019s start by adding a search field:\n\n```js\nimport { useState } from 'react';\nimport { SearchControl } from '@wordpress\/components';\n\nfunction MyFirstApp() {\n\tconst [searchTerm, setSearchTerm] = useState( '' );\n\t\/\/ ...\n\treturn (\n\t\t<div>\n\t\t\t<SearchControl\n\t\t\t\tonChange={ setSearchTerm }\n\t\t\t\tvalue={ searchTerm }\n\t\t\t\/>\n\t\t\t{\/* ... *\/ }\n\t\t<\/div>\n\t)\n}\n```\n\nNote that instead of using an `input` tag, we took advantage of the [SearchControl](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/components\/search-control\/) component. This is what it looks like:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/filter-field.jpg)\n\nThe field starts empty, and the contents are stored in the `searchTerm` state value. If you aren\u2019t familiar with the [useState](https:\/\/reactjs.org\/docs\/hooks-state.html) hook, you can learn more in [React\u2019s documentation](https:\/\/reactjs.org\/docs\/hooks-state.html).\n\nWe can now request only the pages matching the `searchTerm`.\n\nAfter checking with the [WordPress API documentation](https:\/\/developer.wordpress.org\/rest-api\/reference\/pages\/), we see that the [\/wp\/v2\/pages](https:\/\/developer.wordpress.org\/rest-api\/reference\/pages\/) endpoint accepts a `search` query parameter and uses it to  _limit results to those matching a string_. But how can we use it? We can pass custom query parameters as the third argument to `getEntityRecords` as below:\n\n```js\nwp.data.select( 'core' ).getEntityRecords( 'postType', 'page', { search: 'home' } )\n```\n\nRunning that snippet in your browser\u2019s dev tools will trigger a request to `\/wp\/v2\/pages?search=home` instead of just `\/wp\/v2\/pages`.\n\nLet\u2019s mirror this in our `useSelect` call as follows:\n\n```js\nimport { useSelect } from '@wordpress\/data';\nimport { store as coreDataStore } from '@wordpress\/core-data';\n\nfunction MyFirstApp() {\n\t\/\/ ...\n\tconst { pages } = useSelect( select => {\n\t\tconst query = {};\n\t\tif ( searchTerm ) {\n\t\t\tquery.search = searchTerm;\n\t\t}\n\t\treturn {\n\t\t\tpages: select( coreDataStore ).getEntityRecords( 'postType', 'page', query )\n\t\t}\n\t}, [searchTerm] );\n\n\t\/\/ ...\n}\n```\n\nThe `searchTerm` is now used as a `search` query parameter when provided. Note that `searchTerm` is also specified inside the list of `useSelect` dependencies to make sure `getEntityRecords` is re-run when the `searchTerm` changes.\n\nFinally, here\u2019s how `MyFirstApp` looks once we wire it all together:\n\n```js\nimport { useState } from 'react';\nimport { createRoot } from 'react-dom';\nimport { SearchControl } from '@wordpress\/components';\nimport { useSelect } from '@wordpress\/data';\nimport { store as coreDataStore } from '@wordpress\/core-data';\n\nfunction MyFirstApp() {\n\tconst [searchTerm, setSearchTerm] = useState( '' );\n\tconst pages = useSelect( select => {\n\t\tconst query = {};\n\t\tif ( searchTerm ) {\n\t\t\tquery.search = searchTerm;\n\t\t}\n\t\treturn select( coreDataStore ).getEntityRecords( 'postType', 'page', query );\n\t}, [searchTerm] );\n\n\treturn (\n\t\t<div>\n\t\t\t<SearchControl\n\t\t\t\tonChange={ setSearchTerm }\n\t\t\t\tvalue={ searchTerm }\n\t\t\t\/>\n\t\t\t<PagesList pages={ pages }\/>\n\t\t<\/div>\n\t)\n}\n```\n\nVoila! We can now filter the results:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/filter.jpg)\n\n### Using core-data instead vs calling the API directly\n\nLet\u2019s take a pause for a moment to consider the downsides of an alternative approach we could have taken - working with the API directly. Imagine we sent the API requests directly:\n\n```js\nimport apiFetch from '@wordpress\/api-fetch';\nfunction MyFirstApp() {\n\t\/\/ ...\n\tconst [pages, setPages] = useState( [] );\n\tuseEffect( () => {\n\t\tconst url = '\/wp-json\/wp\/v2\/pages?search=' + searchTerm;\n\t\tapiFetch( { url } )\n\t\t\t.then( setPages )\n\t}, [searchTerm] );\n\t\/\/ ...\n}\n```\n\nWorking outside of core-data, we would need to solve two problems here.\n\nFirstly, out-of-order updates. Searching for \u201eAbout\u201d would trigger five API requests filtering for `A`, `Ab`, `Abo`, `Abou`, and `About`. These requests could finish in a different order than they started. It is possible that _search=A_ would resolve after _ search=About_ and thus we\u2019d display the wrong data.\n\nGutenberg data helps by handling the asynchronous part behind the scenes. `useSelect` remembers the most recent call and returns only the data we expect.\n\nSecondly, every keystroke would trigger an API request. If you typed `About`, deleted it, and retyped it, it would issue 10 requests in total even though we could reuse the data.\n\nGutenberg data helps by caching the responses to API requests triggered by `getEntityRecords()`  and reuses them on subsequent calls. This is especially important when other components rely on the same entity records.\n\nAll in all, the utilities built into core-data are designed to solve the typical problems so that you can focus on your application instead.\n\n## Step 5: Loading Indicator\n\nThere is one problem with our search feature. We can\u2019t be quite sure whether it\u2019s still searching or showing no results:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/unclear-status.jpg)\n\nA few messages like  _Loading\u2026_ or _No results_ would clear it up. Let\u2019s implement them! First,  `PagesList` has to be aware of the current status:\n\n```js\nimport { SearchControl, Spinner } from '@wordpress\/components';\nfunction PagesList( { hasResolved, pages } ) {\n\tif ( !hasResolved ) {\n\t\treturn <Spinner\/>\n\t}\n\tif ( !pages?.length ) {\n\t\treturn <div>No results<\/div>\n\t}\n\t\/\/ ...\n}\n\nfunction MyFirstApp() {\n\t\/\/ ...\n\n\treturn (\n\t\t<div>\n\t\t\t\/\/ ...\n\t\t\t<PagesList hasResolved={ hasResolved } pages={ pages }\/>\n\t\t<\/div>\n\t)\n}\n```\n\nNote that instead of building a custom loading indicator, we took advantage of the [Spinner](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/components\/spinner\/) component.\n\nWe still need to know whether the pages selector `hasResolved` or not. We can find out using the  `hasFinishedResolution` selector:\n\n`wp.data.select('core').hasFinishedResolution( 'getEntityRecords', [ 'postType', 'page', { search: 'home' } ] )`\n\nIt takes the name of the selector and the _exact same arguments you passed to that selector_ and returns either `true` if the data was already loaded or `false` if we\u2019re still waiting. Let\u2019s add it to `useSelect`:\n\n```js\nimport { useSelect } from '@wordpress\/data';\nimport { store as coreDataStore } from '@wordpress\/core-data';\n\nfunction MyFirstApp() {\n\t\/\/ ...\n\tconst { pages, hasResolved } = useSelect( select => {\n\t\t\/\/ ...\n\t\treturn {\n\t\t\tpages: select( coreDataStore ).getEntityRecords( 'postType', 'page', query ),\n\t\t\thasResolved:\n\t\t\t\tselect( coreDataStore ).hasFinishedResolution( 'getEntityRecords', ['postType', 'page', query] ),\n\t\t}\n\t}, [searchTerm] );\n\n\t\/\/ ...\n}\n```\n\nThere is just one last problem. It is easy to make a typo and end up passing different arguments to `getEntityRecords` and `hasFinishedResolution`. It is critical that they are identical. We can remove this risk by storing the arguments in a variable:\n\n```js\nimport { useSelect } from '@wordpress\/data';\nimport { store as coreDataStore } from '@wordpress\/core-data';\nfunction MyFirstApp() {\n\t\/\/ ...\n\tconst { pages, hasResolved } = useSelect( select => {\n\t\t\/\/ ...\n\t\tconst selectorArgs = [ 'postType', 'page', query ];\n\t\treturn {\n\t\t\tpages: select( coreDataStore ).getEntityRecords( ...selectorArgs ),\n\t\t\thasResolved:\n\t\t\t\tselect( coreDataStore ).hasFinishedResolution( 'getEntityRecords', selectorArgs ),\n\t\t}\n\t}, [searchTerm] );\n\n\t\/\/ ...\n}\n```\n\nAnd voil\u00e0! That's it.\n\n### Wiring it all together\n\nAll the pieces are in place, great! Here\u2019s the complete JavaScript code of our app:\n\n```js\nimport { useState } from 'react';\nimport { createRoot } from 'react-dom';\nimport { SearchControl, Spinner } from '@wordpress\/components';\nimport { useSelect } from '@wordpress\/data';\nimport { store as coreDataStore } from '@wordpress\/core-data';\nimport { decodeEntities } from '@wordpress\/html-entities';\n\nfunction MyFirstApp() {\n\tconst [ searchTerm, setSearchTerm ] = useState( '' );\n\tconst { pages, hasResolved } = useSelect(\n\t\t( select ) => {\n\t\t\tconst query = {};\n\t\t\tif ( searchTerm ) {\n\t\t\t\tquery.search = searchTerm;\n\t\t\t}\n\t\t\tconst selectorArgs = [ 'postType', 'page', query ];\n\t\t\treturn {\n\t\t\t\tpages: select( coreDataStore ).getEntityRecords(\n\t\t\t\t\t...selectorArgs\n\t\t\t\t),\n\t\t\t\thasResolved: select( coreDataStore ).hasFinishedResolution(\n\t\t\t\t\t'getEntityRecords',\n\t\t\t\t\tselectorArgs\n\t\t\t\t),\n\t\t\t};\n\t\t},\n\t\t[ searchTerm ]\n\t);\n\n\treturn (\n\t\t<div>\n\t\t\t<SearchControl onChange={ setSearchTerm } value={ searchTerm } \/>\n\t\t\t<PagesList hasResolved={ hasResolved } pages={ pages } \/>\n\t\t<\/div>\n\t);\n}\n\nfunction PagesList( { hasResolved, pages } ) {\n\tif ( ! hasResolved ) {\n\t\treturn <Spinner \/>;\n\t}\n\tif ( ! pages?.length ) {\n\t\treturn <div>No results<\/div>;\n\t}\n\n\treturn (\n\t\t<table className=\"wp-list-table widefat fixed striped table-view-list\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Title<\/td>\n\t\t\t\t<\/tr>\n\t\t\t<\/thead>\n\t\t\t<tbody>\n\t\t\t\t{ pages?.map( ( page ) => (\n\t\t\t\t\t<tr key={ page.id }>\n\t\t\t\t\t\t<td>{ decodeEntities( page.title.rendered ) }<\/td>\n\t\t\t\t\t<\/tr>\n\t\t\t\t) ) }\n\t\t\t<\/tbody>\n\t\t<\/table>\n\t);\n}\n\nconst root = createRoot(\n\tdocument.querySelector( '#my-first-gutenberg-app' )\n);\nwindow.addEventListener(\n\t'load',\n\tfunction () {\n\t\troot.render(\n\t\t\t<MyFirstApp \/>\n\t\t);\n\t},\n\tfalse\n);\n```\n\nAll that\u2019s left is to refresh the page and enjoy the brand new status indicator:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/indicator.jpg)\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/no-results.jpg)\n\n## What's next?\n\n* **Previous part:** [Setup](\/docs\/how-to-guides\/data-basics\/1-data-basics-setup.md)\n* **Next part:** [Building an edit form](\/docs\/how-to-guides\/data-basics\/3-building-an-edit-form.md)\n* (optional) Review the [finished app](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/data-basics-59c8f8) in the block-development-examples repository\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/data-basics\/4-building-a-create-page-form.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Part 4: Building a Create page form<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In the <a href=\"\/docs\/how-to-guides\/data-basics\/3-building-an-edit-form.md\">previous part<\/a> we created an <em>Edit page<\/em> feature, and in this part we will add a <em>Create page<\/em> feature. Here's a glimpse of what we're going to build:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/create-form\/create-form-with-text.png\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 1: Add a <em>Create a new page<\/em> button<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s start by building a button to display the <em>create page<\/em> form. It\u2019s similar to an <em>Edit<\/em> button we have built in the <a href=\"\/docs\/how-to-guides\/data-basics\/3-building-an-edit-form.md\">part 3<\/a>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useDispatch } from '@wordpress\/data';\nimport { Button, Modal, TextControl } from '@wordpress\/components';\n\nfunction CreatePageButton() {\n\tconst &#91;isOpen, setOpen] = useState( false );\n\tconst openModal = () => setOpen( true );\n\tconst closeModal = () => setOpen( false );\n\treturn (\n\t\t&lt;>\n\t\t\t<button onclick=\"{\" openmodal=\"\" }=\"\" variant=\"primary\">\n\t\t\t\tCreate a new Page\n\t\t\t<\/button>\n\t\t\t{ isOpen &amp;&amp; (\n\t\t\t\t<modal onrequestclose=\"{\" closemodal=\"\" }=\"\" title=\"Create a new page\">\n\t\t\t\t\t<createpageform<br>\t\t\t\t\t\tonCancel={ closeModal }\n\t\t\t\t\t\tonSaveFinished={ closeModal }\n\t\t\t\t\t\/>\n\t\t\t\t<\/createpageform<br><\/modal>\n\t\t\t) }\n\t\t\n\t);\n}\n\nfunction CreatePageForm() {\n\t\/\/ Empty for now\n\treturn <div>;\n}\n\n<\/div><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Great! Now let\u2019s make <code>MyFirstApp<\/code> display our shiny new button:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function MyFirstApp() {\n\t\/\/ ...\n\treturn (\n\t\t<div>\n\t\t\t<div classname=\"list-controls\">\n\t\t\t\t<searchcontrol onchange=\"{\" setsearchterm=\"\" }=\"\" value=\"{\" searchterm=\"\">\n\t\t\t\t<createpagebutton>\n\t\t\t<\/createpagebutton><\/searchcontrol><\/div>\n\t\t\t<pageslist hasresolved=\"{\" }=\"\" pages=\"{\">\n\t\t<\/pageslist><\/div>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The final result should look as follows:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/create-form\/create-button.png\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 2: Extract a controlled PageForm<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now that the button is in place, we can focus entirely on building the form. This tutorial is about managing data, so we will not build a complete page editor. Instead, the form will only contain one field: post title.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Luckily, the <code>EditPageForm<\/code> we built in <a href=\"\/docs\/how-to-guides\/data-basics\/3-building-an-edit-form.md\">part three<\/a> already takes us 80% of the way there. The bulk of the user interface is already available, and we will reuse it in the <code>CreatePageForm<\/code>. Let\u2019s start by extracting the form UI into a separate component:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\t\/\/ ...\n\treturn (\n\t\t<pageform<br>\t\t\ttitle={ page.title }\n\t\t\tonChangeTitle={ handleChange }\n\t\t\thasEdits={ hasEdits }\n\t\t\tlastError={ lastError }\n\t\t\tisSaving={ isSaving }\n\t\t\tonCancel={ onCancel }\n\t\t\tonSave={ handleSave }\n\t\t\/>\n\t);\n}\n\nfunction PageForm( { title, onChangeTitle, hasEdits, lastError, isSaving, onCancel, onSave } ) {\n\treturn (\n\t\t<div classname=\"my-gutenberg-form\">\n\t\t\t<textcontrol<br>\t\t\t\tlabel=\"Page title:\"\n\t\t\t\tvalue={ title }\n\t\t\t\tonChange={ onChangeTitle }\n\t\t\t\/>\n\t\t\t{ lastError ? (\n\t\t\t\t<div classname=\"form-error\">Error: { lastError.message }<\/div>\n\t\t\t) : (\n\t\t\t\tfalse\n\t\t\t) }\n\t\t\t<div classname=\"form-buttons\">\n\t\t\t\t<button<br>\t\t\t\t\tonClick={ onSave }\n\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\tdisabled={ !hasEdits || isSaving }\n\t\t\t\t>\n\t\t\t\t\t{ isSaving ? (\n\t\t\t\t\t\t&lt;>\n\t\t\t\t\t\t\t<spinner>\n\t\t\t\t\t\t\tSaving\n\t\t\t\t\t\t\n\t\t\t\t\t) : 'Save' }\n\t\t\t\t\n\t\t\t\t<button<br>\t\t\t\t\tonClick={ onCancel }\n\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\tdisabled={ isSaving }\n\t\t\t\t>\n\t\t\t\t\tCancel\n\t\t\t\t\n\t\t\t<\/button<br><\/spinner><\/button<br><\/div>\n\t\t<\/textcontrol<br><\/div>\n\t);\n}\n<\/pageform<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This code quality change should not alter anything about how the application works. Let\u2019s try to edit a page just to be sure:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/create-form\/edit-page-form.png\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Great! The edit form is still there, and now we have a building block to power the new <code>CreatePageForm<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 3: Build a CreatePageForm<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The only thing that <code>CreatePageForm<\/code> component must do is to provide the following seven properties needed to render the <code>PageForm<\/code> component:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>title<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>onChangeTitle<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>hasEdits<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>lastError<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>isSaving<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>onCancel<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>onSave<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s see how we can do that:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Title, onChangeTitle, hasEdits<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>EditPageForm<\/code> updated and saved an existing entity record that lived in the Redux state. Because of that, we relied on the <code>editedEntityRecords<\/code> selector.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In case of the <code>CreatePageForm<\/code> however, there is no pre-existing entity record. There is only an empty form. Anything that the user types is local to that form, which means we can keep track of it using the React\u2019s <code>useState<\/code> hook:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function CreatePageForm( { onCancel, onSaveFinished } ) {\n\tconst &#91;title, setTitle] = useState();\n\tconst handleChange = ( title ) => setTitle( title );\n\treturn (\n\t\t<pageform<br>\t\t\ttitle={ title }\n\t\t\tonChangeTitle={ setTitle }\n\t\t\thasEdits={ !!title }\n\t\t\t{ \/* ... *\/ }\n\t\t\/>\n\t);\n}\n<\/pageform<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">onSave, onCancel<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In the <code>EditPageForm<\/code>, we dispatched the <code>saveEditedEntityRecord('postType', 'page', pageId )<\/code> action to save the edits that lived in the Redux state.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the <code>CreatePageForm<\/code> however, we do not have any edits in the Redux state, nor we do have a <code>pageId<\/code>. The action we need to dispatch in this case is called <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/data\/data-core\/#saveentityrecord\"><code>saveEntityRecord<\/code><\/a> (without the word <em>Edited<\/em> in the name) and it accepts an object representing the new entity record instead of a <code>pageId<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The data passed to <code>saveEntityRecord<\/code> is sent via a POST request to the appropriate REST API endpoint. For example, dispatching the following action:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>saveEntityRecord( 'postType', 'page', { title: \"Test\" } );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Triggers a POST request to the <a href=\"https:\/\/developer.wordpress.org\/rest-api\/reference\/pages\/\"><code>\/wp\/v2\/pages<\/code> WordPress REST API<\/a> endpoint with a  single field in the request body: <code>title=Test<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now that we know more about <code>saveEntityRecord<\/code>, let's use it in <code>CreatePageForm<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function CreatePageForm( { onSaveFinished, onCancel } ) {\n\t\/\/ ...\n\tconst { saveEntityRecord } = useDispatch( coreDataStore );\n\tconst handleSave = async () => {\n\t\tconst savedRecord = await saveEntityRecord(\n\t\t\t'postType',\n\t\t\t'page',\n\t\t\t{ title }\n\t\t);\n\t\tif ( savedRecord ) {\n\t\t\tonSaveFinished();\n\t\t}\n\t};\n\treturn (\n\t\t<pageform<br>\t\t\t{ \/* ... *\/ }\n\t\t\tonSave={ handleSave }\n\t\t\tonCancel={ onCancel }\n\t\t\/>\n\t);\n}\n<\/pageform<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>There is one more detail to address: our newly created pages are not yet picked up by the <code>PagesList<\/code>. Accordingly to the REST API documentation, the <code>\/wp\/v2\/pages<\/code> endpoint creates (<code>POST<\/code> requests) pages with <code>status=draft<\/code> by default, but <em>returns<\/em> (<code>GET<\/code> requests) pages with <code>status=publish<\/code>. The solution is to pass the <code>status<\/code> parameter explicitly:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function CreatePageForm( { onSaveFinished, onCancel } ) {\n\t\/\/ ...\n\tconst { saveEntityRecord } = useDispatch( coreDataStore );\n\tconst handleSave = async () => {\n\t\tconst savedRecord = await saveEntityRecord(\n\t\t\t'postType',\n\t\t\t'page',\n\t\t\t{ title, status: 'publish' }\n\t\t);\n\t\tif ( savedRecord ) {\n\t\t\tonSaveFinished();\n\t\t}\n\t};\n\treturn (\n\t\t<pageform<br>\t\t\t{ \/* ... *\/ }\n\t\t\tonSave={ handleSave }\n\t\t\tonCancel={ onCancel }\n\t\t\/>\n\t);\n}\n<\/pageform<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Go ahead and apply that change to your local <code>CreatePageForm<\/code> component, and let\u2019s tackle the remaining two props.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">lastError, isSaving<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>EditPageForm<\/code>  retrieved the error and progress information via the <code>getLastEntitySaveError<\/code> and <code>isSavingEntityRecord<\/code> selectors. In both cases, it passed the following three arguments: <code>( 'postType', 'page', pageId )<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In <code>CreatePageForm<\/code> however, we do not have a <code>pageId<\/code>. What now? We can skip the <code>pageId<\/code> argument to retrieve the information about the entity record without any id \u2013 this will be the newly created one. The <code>useSelect<\/code> call is thus very similar to the one from <code>EditPageForm<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function CreatePageForm( { onCancel, onSaveFinished } ) {\n\t\/\/ ...\n\tconst { lastError, isSaving } = useSelect(\n\t\t( select ) => ( {\n\t\t\t\/\/ Notice the missing pageId argument:\n\t\t\tlastError: select( coreDataStore )\n\t\t\t\t.getLastEntitySaveError( 'postType', 'page' ),\n\t\t\t\/\/ Notice the missing pageId argument\n\t\t\tisSaving: select( coreDataStore )\n\t\t\t\t.isSavingEntityRecord( 'postType', 'page' ),\n\t\t} ),\n\t\t&#91;]\n\t);\n\t\/\/ ...\n\treturn (\n\t\t<pageform<br>\t\t\t{ \/* ... *\/ }\n\t\t\tlastError={ lastError }\n\t\t\tisSaving={ isSaving }\n\t\t\/>\n\t);\n}\n<\/pageform<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>And that\u2019s it! Here's what our new form looks like in action:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/create-form\/create-saving.png\"><br><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/create-form\/created-item.png\"><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Wiring it all together<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Here\u2019s everything we built in this chapter in one place:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function CreatePageForm( { onCancel, onSaveFinished } ) {\n\tconst &#91;title, setTitle] = useState();\n\tconst { lastError, isSaving } = useSelect(\n\t\t( select ) => ( {\n\t\t\tlastError: select( coreDataStore )\n\t\t\t\t.getLastEntitySaveError( 'postType', 'page' ),\n\t\t\tisSaving: select( coreDataStore )\n\t\t\t\t.isSavingEntityRecord( 'postType', 'page' ),\n\t\t} ),\n\t\t&#91;]\n\t);\n\n\tconst { saveEntityRecord } = useDispatch( coreDataStore );\n\tconst handleSave = async () => {\n\t\tconst savedRecord = await saveEntityRecord(\n\t\t\t'postType',\n\t\t\t'page',\n\t\t\t{ title, status: 'publish' }\n\t\t);\n\t\tif ( savedRecord ) {\n\t\t\tonSaveFinished();\n\t\t}\n\t};\n\n\treturn (\n\t\t<pageform<br>\t\t\ttitle={ title }\n\t\t\tonChangeTitle={ setTitle }\n\t\t\thasEdits={ !!title }\n\t\t\tonSave={ handleSave }\n\t\t\tlastError={ lastError }\n\t\t\tonCancel={ onCancel }\n\t\t\tisSaving={ isSaving }\n\t\t\/>\n\t);\n}\n\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\tconst { page, lastError, isSaving, hasEdits } = useSelect(\n\t\t( select ) => ( {\n\t\t\tpage: select( coreDataStore ).getEditedEntityRecord( 'postType', 'page', pageId ),\n\t\t\tlastError: select( coreDataStore ).getLastEntitySaveError( 'postType', 'page', pageId ),\n\t\t\tisSaving: select( coreDataStore ).isSavingEntityRecord( 'postType', 'page', pageId ),\n\t\t\thasEdits: select( coreDataStore ).hasEditsForEntityRecord( 'postType', 'page', pageId ),\n\t\t} ),\n\t\t&#91;pageId]\n\t);\n\n\tconst { saveEditedEntityRecord, editEntityRecord } = useDispatch( coreDataStore );\n\tconst handleSave = async () => {\n\t\tconst savedRecord = await saveEditedEntityRecord( 'postType', 'page', pageId );\n\t\tif ( savedRecord ) {\n\t\t\tonSaveFinished();\n\t\t}\n\t};\n\tconst handleChange = ( title ) => editEntityRecord( 'postType', 'page', page.id, { title } );\n\n\treturn (\n\t\t<pageform<br>\t\t\ttitle={ page.title }\n\t\t\tonChangeTitle={ handleChange }\n\t\t\thasEdits={ hasEdits }\n\t\t\tlastError={ lastError }\n\t\t\tisSaving={ isSaving }\n\t\t\tonCancel={ onCancel }\n\t\t\tonSave={ handleSave }\n\t\t\/>\n\t);\n}\n\nfunction PageForm( { title, onChangeTitle, hasEdits, lastError, isSaving, onCancel, onSave } ) {\n\treturn (\n\t\t<div classname=\"my-gutenberg-form\">\n\t\t\t<textcontrol<br>\t\t\t\tlabel=\"Page title:\"\n\t\t\t\tvalue={ title }\n\t\t\t\tonChange={ onChangeTitle }\n\t\t\t\/>\n\t\t\t{ lastError ? (\n\t\t\t\t<div classname=\"form-error\">Error: { lastError.message }<\/div>\n\t\t\t) : (\n\t\t\t\tfalse\n\t\t\t) }\n\t\t\t<div classname=\"form-buttons\">\n\t\t\t\t<button<br>\t\t\t\t\tonClick={ onSave }\n\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\tdisabled={ !hasEdits || isSaving }\n\t\t\t\t>\n\t\t\t\t\t{ isSaving ? (\n\t\t\t\t\t\t&lt;>\n\t\t\t\t\t\t\t<spinner>\n\t\t\t\t\t\t\tSaving\n\t\t\t\t\t\t\n\t\t\t\t\t) : 'Save' }\n\t\t\t\t\n\t\t\t\t<button<br>\t\t\t\t\tonClick={ onCancel }\n\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\tdisabled={ isSaving }\n\t\t\t\t>\n\t\t\t\t\tCancel\n\t\t\t\t\n\t\t\t<\/button<br><\/spinner><\/button<br><\/div>\n\t\t<\/textcontrol<br><\/div>\n\t);\n}\n<\/pageform<br><\/pageform<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>All that\u2019s left is to refresh the page and enjoy the form:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/create-form\/create-form-with-text.png\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">What's next?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Next part:<\/strong> <a href=\"\/docs\/how-to-guides\/data-basics\/5-adding-a-delete-button.md\">Adding a delete button<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Previous part:<\/strong> <a href=\"\/docs\/how-to-guides\/data-basics\/3-building-an-edit-form.md\">Building an edit form<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>(optional) Review the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/data-basics-59c8f8\">finished app<\/a> in the block-development-examples repository<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Part 4: Building a Create page form\n\nIn the [previous part](\/docs\/how-to-guides\/data-basics\/3-building-an-edit-form.md) we created an *Edit page* feature, and in this part we will add a *Create page* feature. Here's a glimpse of what we're going to build:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/create-form\/create-form-with-text.png)\n\n### Step 1: Add a _Create a new page_ button\n\nLet\u2019s start by building a button to display the _create page_ form. It\u2019s similar to an _Edit_ button we have built in the [part 3](\/docs\/how-to-guides\/data-basics\/3-building-an-edit-form.md):\n\n```js\nimport { useDispatch } from '@wordpress\/data';\nimport { Button, Modal, TextControl } from '@wordpress\/components';\n\nfunction CreatePageButton() {\n\tconst [isOpen, setOpen] = useState( false );\n\tconst openModal = () => setOpen( true );\n\tconst closeModal = () => setOpen( false );\n\treturn (\n\t\t<>\n\t\t\t<Button onClick={ openModal } variant=\"primary\">\n\t\t\t\tCreate a new Page\n\t\t\t<\/Button>\n\t\t\t{ isOpen && (\n\t\t\t\t<Modal onRequestClose={ closeModal } title=\"Create a new page\">\n\t\t\t\t\t<CreatePageForm\n\t\t\t\t\t\tonCancel={ closeModal }\n\t\t\t\t\t\tonSaveFinished={ closeModal }\n\t\t\t\t\t\/>\n\t\t\t\t<\/Modal>\n\t\t\t) }\n\t\t<\/>\n\t);\n}\n\nfunction CreatePageForm() {\n\t\/\/ Empty for now\n\treturn <div\/>;\n}\n\n```\n\nGreat! Now let\u2019s make `MyFirstApp` display our shiny new button:\n\n```js\nfunction MyFirstApp() {\n\t\/\/ ...\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"list-controls\">\n\t\t\t\t<SearchControl onChange={ setSearchTerm } value={ searchTerm }\/>\n\t\t\t\t<CreatePageButton\/>\n\t\t\t<\/div>\n\t\t\t<PagesList hasResolved={ hasResolved } pages={ pages }\/>\n\t\t<\/div>\n\t);\n}\n```\n\nThe final result should look as follows:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/create-form\/create-button.png)\n\n### Step 2: Extract a controlled PageForm\n\nNow that the button is in place, we can focus entirely on building the form. This tutorial is about managing data, so we will not build a complete page editor. Instead, the form will only contain one field: post title.\n\nLuckily, the `EditPageForm` we built in [part three](\/docs\/how-to-guides\/data-basics\/3-building-an-edit-form.md) already takes us 80% of the way there. The bulk of the user interface is already available, and we will reuse it in the `CreatePageForm`. Let\u2019s start by extracting the form UI into a separate component:\n\n```js\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\t\/\/ ...\n\treturn (\n\t\t<PageForm\n\t\t\ttitle={ page.title }\n\t\t\tonChangeTitle={ handleChange }\n\t\t\thasEdits={ hasEdits }\n\t\t\tlastError={ lastError }\n\t\t\tisSaving={ isSaving }\n\t\t\tonCancel={ onCancel }\n\t\t\tonSave={ handleSave }\n\t\t\/>\n\t);\n}\n\nfunction PageForm( { title, onChangeTitle, hasEdits, lastError, isSaving, onCancel, onSave } ) {\n\treturn (\n\t\t<div className=\"my-gutenberg-form\">\n\t\t\t<TextControl\n\t\t\t\tlabel=\"Page title:\"\n\t\t\t\tvalue={ title }\n\t\t\t\tonChange={ onChangeTitle }\n\t\t\t\/>\n\t\t\t{ lastError ? (\n\t\t\t\t<div className=\"form-error\">Error: { lastError.message }<\/div>\n\t\t\t) : (\n\t\t\t\tfalse\n\t\t\t) }\n\t\t\t<div className=\"form-buttons\">\n\t\t\t\t<Button\n\t\t\t\t\tonClick={ onSave }\n\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\tdisabled={ !hasEdits || isSaving }\n\t\t\t\t>\n\t\t\t\t\t{ isSaving ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<Spinner\/>\n\t\t\t\t\t\t\tSaving\n\t\t\t\t\t\t<\/>\n\t\t\t\t\t) : 'Save' }\n\t\t\t\t<\/Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={ onCancel }\n\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\tdisabled={ isSaving }\n\t\t\t\t>\n\t\t\t\t\tCancel\n\t\t\t\t<\/Button>\n\t\t\t<\/div>\n\t\t<\/div>\n\t);\n}\n```\n\nThis code quality change should not alter anything about how the application works. Let\u2019s try to edit a page just to be sure:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/create-form\/edit-page-form.png)\n\nGreat! The edit form is still there, and now we have a building block to power the new `CreatePageForm`.\n\n### Step 3: Build a CreatePageForm\n\nThe only thing that `CreatePageForm` component must do is to provide the following seven properties needed to render the `PageForm` component:\n\n* title\n* onChangeTitle\n* hasEdits\n* lastError\n* isSaving\n* onCancel\n* onSave\n\nLet\u2019s see how we can do that:\n\n#### Title, onChangeTitle, hasEdits\n\nThe `EditPageForm` updated and saved an existing entity record that lived in the Redux state. Because of that, we relied on the `editedEntityRecords` selector.\n\nIn case of the `CreatePageForm` however, there is no pre-existing entity record. There is only an empty form. Anything that the user types is local to that form, which means we can keep track of it using the React\u2019s `useState` hook:\n\n```js\nfunction CreatePageForm( { onCancel, onSaveFinished } ) {\n\tconst [title, setTitle] = useState();\n\tconst handleChange = ( title ) => setTitle( title );\n\treturn (\n\t\t<PageForm\n\t\t\ttitle={ title }\n\t\t\tonChangeTitle={ setTitle }\n\t\t\thasEdits={ !!title }\n\t\t\t{ \/* ... *\/ }\n\t\t\/>\n\t);\n}\n```\n\n#### onSave, onCancel\n\nIn the `EditPageForm`, we dispatched the `saveEditedEntityRecord('postType', 'page', pageId )` action to save the edits that lived in the Redux state.\n\nIn the `CreatePageForm` however, we do not have any edits in the Redux state, nor we do have a `pageId`. The action we need to dispatch in this case is called [`saveEntityRecord`](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/data\/data-core\/#saveentityrecord) (without the word _Edited_ in the name) and it accepts an object representing the new entity record instead of a `pageId`.\n\nThe data passed to `saveEntityRecord` is sent via a POST request to the appropriate REST API endpoint. For example, dispatching the following action:\n\n```js\nsaveEntityRecord( 'postType', 'page', { title: \"Test\" } );\n```\n\nTriggers a POST request to the [`\/wp\/v2\/pages` WordPress REST API](https:\/\/developer.wordpress.org\/rest-api\/reference\/pages\/) endpoint with a  single field in the request body: `title=Test`.\n\nNow that we know more about `saveEntityRecord`, let's use it in `CreatePageForm`.\n\n```js\nfunction CreatePageForm( { onSaveFinished, onCancel } ) {\n\t\/\/ ...\n\tconst { saveEntityRecord } = useDispatch( coreDataStore );\n\tconst handleSave = async () => {\n\t\tconst savedRecord = await saveEntityRecord(\n\t\t\t'postType',\n\t\t\t'page',\n\t\t\t{ title }\n\t\t);\n\t\tif ( savedRecord ) {\n\t\t\tonSaveFinished();\n\t\t}\n\t};\n\treturn (\n\t\t<PageForm\n\t\t\t{ \/* ... *\/ }\n\t\t\tonSave={ handleSave }\n\t\t\tonCancel={ onCancel }\n\t\t\/>\n\t);\n}\n```\n\nThere is one more detail to address: our newly created pages are not yet picked up by the `PagesList`. Accordingly to the REST API documentation, the `\/wp\/v2\/pages` endpoint creates (`POST` requests) pages with `status=draft` by default, but _returns_ (`GET` requests) pages with `status=publish`. The solution is to pass the `status` parameter explicitly:\n\n```js\nfunction CreatePageForm( { onSaveFinished, onCancel } ) {\n\t\/\/ ...\n\tconst { saveEntityRecord } = useDispatch( coreDataStore );\n\tconst handleSave = async () => {\n\t\tconst savedRecord = await saveEntityRecord(\n\t\t\t'postType',\n\t\t\t'page',\n\t\t\t{ title, status: 'publish' }\n\t\t);\n\t\tif ( savedRecord ) {\n\t\t\tonSaveFinished();\n\t\t}\n\t};\n\treturn (\n\t\t<PageForm\n\t\t\t{ \/* ... *\/ }\n\t\t\tonSave={ handleSave }\n\t\t\tonCancel={ onCancel }\n\t\t\/>\n\t);\n}\n```\n\nGo ahead and apply that change to your local `CreatePageForm` component, and let\u2019s tackle the remaining two props.\n\n#### lastError, isSaving\n\nThe `EditPageForm`  retrieved the error and progress information via the `getLastEntitySaveError` and `isSavingEntityRecord` selectors. In both cases, it passed the following three arguments: `( 'postType', 'page', pageId )`.\n\nIn `CreatePageForm` however, we do not have a `pageId`. What now? We can skip the `pageId` argument to retrieve the information about the entity record without any id \u2013 this will be the newly created one. The `useSelect` call is thus very similar to the one from `EditPageForm`:\n\n```js\nfunction CreatePageForm( { onCancel, onSaveFinished } ) {\n\t\/\/ ...\n\tconst { lastError, isSaving } = useSelect(\n\t\t( select ) => ( {\n\t\t\t\/\/ Notice the missing pageId argument:\n\t\t\tlastError: select( coreDataStore )\n\t\t\t\t.getLastEntitySaveError( 'postType', 'page' ),\n\t\t\t\/\/ Notice the missing pageId argument\n\t\t\tisSaving: select( coreDataStore )\n\t\t\t\t.isSavingEntityRecord( 'postType', 'page' ),\n\t\t} ),\n\t\t[]\n\t);\n\t\/\/ ...\n\treturn (\n\t\t<PageForm\n\t\t\t{ \/* ... *\/ }\n\t\t\tlastError={ lastError }\n\t\t\tisSaving={ isSaving }\n\t\t\/>\n\t);\n}\n```\n\nAnd that\u2019s it! Here's what our new form looks like in action:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/create-form\/create-saving.png)\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/create-form\/created-item.png)\n\n### Wiring it all together\n\nHere\u2019s everything we built in this chapter in one place:\n\n```js\nfunction CreatePageForm( { onCancel, onSaveFinished } ) {\n\tconst [title, setTitle] = useState();\n\tconst { lastError, isSaving } = useSelect(\n\t\t( select ) => ( {\n\t\t\tlastError: select( coreDataStore )\n\t\t\t\t.getLastEntitySaveError( 'postType', 'page' ),\n\t\t\tisSaving: select( coreDataStore )\n\t\t\t\t.isSavingEntityRecord( 'postType', 'page' ),\n\t\t} ),\n\t\t[]\n\t);\n\n\tconst { saveEntityRecord } = useDispatch( coreDataStore );\n\tconst handleSave = async () => {\n\t\tconst savedRecord = await saveEntityRecord(\n\t\t\t'postType',\n\t\t\t'page',\n\t\t\t{ title, status: 'publish' }\n\t\t);\n\t\tif ( savedRecord ) {\n\t\t\tonSaveFinished();\n\t\t}\n\t};\n\n\treturn (\n\t\t<PageForm\n\t\t\ttitle={ title }\n\t\t\tonChangeTitle={ setTitle }\n\t\t\thasEdits={ !!title }\n\t\t\tonSave={ handleSave }\n\t\t\tlastError={ lastError }\n\t\t\tonCancel={ onCancel }\n\t\t\tisSaving={ isSaving }\n\t\t\/>\n\t);\n}\n\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\tconst { page, lastError, isSaving, hasEdits } = useSelect(\n\t\t( select ) => ( {\n\t\t\tpage: select( coreDataStore ).getEditedEntityRecord( 'postType', 'page', pageId ),\n\t\t\tlastError: select( coreDataStore ).getLastEntitySaveError( 'postType', 'page', pageId ),\n\t\t\tisSaving: select( coreDataStore ).isSavingEntityRecord( 'postType', 'page', pageId ),\n\t\t\thasEdits: select( coreDataStore ).hasEditsForEntityRecord( 'postType', 'page', pageId ),\n\t\t} ),\n\t\t[pageId]\n\t);\n\n\tconst { saveEditedEntityRecord, editEntityRecord } = useDispatch( coreDataStore );\n\tconst handleSave = async () => {\n\t\tconst savedRecord = await saveEditedEntityRecord( 'postType', 'page', pageId );\n\t\tif ( savedRecord ) {\n\t\t\tonSaveFinished();\n\t\t}\n\t};\n\tconst handleChange = ( title ) => editEntityRecord( 'postType', 'page', page.id, { title } );\n\n\treturn (\n\t\t<PageForm\n\t\t\ttitle={ page.title }\n\t\t\tonChangeTitle={ handleChange }\n\t\t\thasEdits={ hasEdits }\n\t\t\tlastError={ lastError }\n\t\t\tisSaving={ isSaving }\n\t\t\tonCancel={ onCancel }\n\t\t\tonSave={ handleSave }\n\t\t\/>\n\t);\n}\n\nfunction PageForm( { title, onChangeTitle, hasEdits, lastError, isSaving, onCancel, onSave } ) {\n\treturn (\n\t\t<div className=\"my-gutenberg-form\">\n\t\t\t<TextControl\n\t\t\t\tlabel=\"Page title:\"\n\t\t\t\tvalue={ title }\n\t\t\t\tonChange={ onChangeTitle }\n\t\t\t\/>\n\t\t\t{ lastError ? (\n\t\t\t\t<div className=\"form-error\">Error: { lastError.message }<\/div>\n\t\t\t) : (\n\t\t\t\tfalse\n\t\t\t) }\n\t\t\t<div className=\"form-buttons\">\n\t\t\t\t<Button\n\t\t\t\t\tonClick={ onSave }\n\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\tdisabled={ !hasEdits || isSaving }\n\t\t\t\t>\n\t\t\t\t\t{ isSaving ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<Spinner\/>\n\t\t\t\t\t\t\tSaving\n\t\t\t\t\t\t<\/>\n\t\t\t\t\t) : 'Save' }\n\t\t\t\t<\/Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={ onCancel }\n\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\tdisabled={ isSaving }\n\t\t\t\t>\n\t\t\t\t\tCancel\n\t\t\t\t<\/Button>\n\t\t\t<\/div>\n\t\t<\/div>\n\t);\n}\n```\n\nAll that\u2019s left is to refresh the page and enjoy the form:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/create-form\/create-form-with-text.png)\n\n## What's next?\n\n* **Next part:** [Adding a delete button](\/docs\/how-to-guides\/data-basics\/5-adding-a-delete-button.md)\n* **Previous part:** [Building an edit form](\/docs\/how-to-guides\/data-basics\/3-building-an-edit-form.md)\n* (optional) Review the [finished app](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/data-basics-59c8f8) in the block-development-examples repository\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/data-basics\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Create your First App with Gutenberg Data<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This tutorial aims to get you comfortable with the Gutenberg data layer. It guides you through building a simple React application that enables the user to manage their WordPress pages. The finished app will look like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/playground.wordpress.net\/?blueprint-url=https:\/\/raw.githubusercontent.com\/WordPress\/block-development-examples\/trunk\/plugins\/data-basics-59c8f8\/_playground\/blueprint.json\" title=\"Opens demo in WordPress Playground\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/part1-finished.jpg\">Open demo in WordPress Playground<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You may review the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/data-basics-59c8f8\">finished app<\/a> in the block-development-examples repository.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Table of Contents<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/how-to-guides\/data-basics\/1-data-basics-setup.md\">Setup<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/how-to-guides\/data-basics\/2-building-a-list-of-pages.md\">Building a basic list of pages<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/how-to-guides\/data-basics\/3-building-an-edit-form.md\">Building an edit form<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/how-to-guides\/data-basics\/4-building-a-create-page-form.md\">Building a <em>create page<\/em> form<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/how-to-guides\/data-basics\/5-adding-a-delete-button.md\">Adding a delete button<\/a><\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->",
        "markdown": "# Create your First App with Gutenberg Data\n\nThis tutorial aims to get you comfortable with the Gutenberg data layer. It guides you through building a simple React application that enables the user to manage their WordPress pages. The finished app will look like this:\n\n\n[![Open demo in WordPress Playground](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/list-of-pages\/part1-finished.jpg)](https:\/\/playground.wordpress.net\/?blueprint-url=https:\/\/raw.githubusercontent.com\/WordPress\/block-development-examples\/trunk\/plugins\/data-basics-59c8f8\/_playground\/blueprint.json \"Opens demo in WordPress Playground\")\n\nYou may review the [finished app](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/data-basics-59c8f8) in the block-development-examples repository.\n\n### Table of Contents\n\n1. [Setup](\/docs\/how-to-guides\/data-basics\/1-data-basics-setup.md)\n2. [Building a basic list of pages](\/docs\/how-to-guides\/data-basics\/2-building-a-list-of-pages.md)\n3. [Building an edit form](\/docs\/how-to-guides\/data-basics\/3-building-an-edit-form.md)\n4. [Building a _create page_ form](\/docs\/how-to-guides\/data-basics\/4-building-a-create-page-form.md)\n5. [Adding a delete button](\/docs\/how-to-guides\/data-basics\/5-adding-a-delete-button.md)\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/data-basics\/1-data-basics-setup.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Setup<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We will build the application as a WordPress plugin, which means you need to have WordPress itself installed. One way to do this is by following the instructions on the <a href=\"\/docs\/contributors\/code\/getting-started-with-code-contribution.md\">Getting Started<\/a> page. Once your setup is complete, you can follow along with the rest of this tutorial.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Also, this tutorial will lean heavily on Redux concepts such as state, actions, and selectors. If you are not familiar with them, you may want to start by reviewing <a href=\"https:\/\/redux.js.org\/introduction\/getting-started\">Getting Started With Redux<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Creating a plugin<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We'll do all the development inside of a WordPress plugin. Let's start by creating a <code>wp-content\/plugins\/my-first-gutenberg-app<\/code> directory in your local WordPress environment. We will need to create four files inside that directory:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>my-first-gutenberg-app.php \u2013 to create a new admin page<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>src\/index.js \u2013 for our JavaScript application<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>style.css \u2013 for the minimal stylesheet<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>package.json \u2013 for the build process<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Go ahead and create these files using the following snippets:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>src\/index.js:<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { createRoot } from 'react-dom';\n\nfunction MyFirstApp() {\n\treturn <span>Hello from JavaScript!<\/span>;\n}\n\nconst root = createRoot( document.getElementById( 'my-first-gutenberg-app' ) );\nwindow.addEventListener(\n\t'load',\n\tfunction () {\n\t\troot.render(\n\t\t\t<myfirstapp>,\n\t\t);\n\t},\n\tfalse\n);\n<\/myfirstapp><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>style.css:<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>.toplevel_page_my-first-gutenberg-app #wpcontent {\n\tbackground: #fff;\n\theight: 1000px;\n}\nbutton .components-spinner {\n\twidth: 15px;\n\theight: 15px;\n\tmargin-top: 0;\n\tmargin-bottom: 0;\n\tmargin-left: 0;\n}\n.form-buttons {\n\tdisplay: flex;\n}\n.my-gutenberg-form .form-buttons {\n\tmargin-top: 20px;\n\tmargin-left: 1px;\n}\n.form-error {\n\tcolor: #cc1818;\n}\n.form-buttons button {\n\tmargin-right: 4px;\n}\n.form-buttons .components-spinner {\n\tmargin-top: 0;\n}\n#my-first-gutenberg-app {\n\tmax-width: 500px;\n}\n#my-first-gutenberg-app ul,\n#my-first-gutenberg-app ul li {\n\tlist-style-type: disc;\n}\n#my-first-gutenberg-app ul {\n\tpadding-left: 20px;\n}\n#my-first-gutenberg-app .components-search-control__input {\n\theight: 36px;\n\tmargin-left: 0;\n}\n\n#my-first-gutenberg-app .list-controls {\n\tdisplay: flex;\n\twidth: 100%;\n}\n\n#my-first-gutenberg-app .list-controls .components-search-control {\n\tflex-grow: 1;\n\tmargin-right: 8px;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>my-first-gutenberg-app.php:<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/**\n * Plugin Name: My first Gutenberg App\n *\n *\/\n\nfunction my_admin_menu() {\n\t\/\/ Create a new admin page for our app.\n\tadd_menu_page(\n\t\t__( 'My first Gutenberg app', 'gutenberg' ),\n\t\t__( 'My first Gutenberg app', 'gutenberg' ),\n\t\t'manage_options',\n\t\t'my-first-gutenberg-app',\n\t\tfunction () {\n\t\t\techo '\n\t\t\t<h2>Pages<\/h2>\n\t\t\t<div id=\"my-first-gutenberg-app\">\n\t\t';\n\t\t},\n\t\t'dashicons-schedule',\n\t\t3\n\t);\n}\n\nadd_action( 'admin_menu', 'my_admin_menu' );\n\nfunction load_custom_wp_admin_scripts( $hook ) {\n\t\/\/ Load only on ?page=my-first-gutenberg-app.\n\tif ( 'toplevel_page_my-first-gutenberg-app' !== $hook ) {\n\t\treturn;\n\t}\n\n\t\/\/ Load the required WordPress packages.\n\n\t\/\/ Automatically load imported dependencies and assets version.\n\t$asset_file = include plugin_dir_path( __FILE__ ) . 'build\/index.asset.php';\n\n\t\/\/ Enqueue CSS dependencies.\n\tforeach ( $asset_file&#91;'dependencies'] as $style ) {\n\t\twp_enqueue_style( $style );\n\t}\n\n\t\/\/ Load our app.js.\n\twp_register_script(\n\t\t'my-first-gutenberg-app',\n\t\tplugins_url( 'build\/index.js', __FILE__ ),\n\t\t$asset_file&#91;'dependencies'],\n\t\t$asset_file&#91;'version']\n\t);\n\twp_enqueue_script( 'my-first-gutenberg-app' );\n\n\t\/\/ Load our style.css.\n\twp_register_style(\n\t\t'my-first-gutenberg-app',\n\t\tplugins_url( 'style.css', __FILE__ ),\n\t\tarray(),\n\t\t$asset_file&#91;'version']\n\t);\n\twp_enqueue_style( 'my-first-gutenberg-app' );\n}\n\nadd_action( 'admin_enqueue_scripts', 'load_custom_wp_admin_scripts' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>package.json:<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n  \"name\": \"09-code-data-basics-esnext\",\n  \"version\": \"1.1.0\",\n  \"private\": true,\n  \"description\": \"My first Gutenberg App\",\n  \"author\": \"The WordPress Contributors\",\n  \"license\": \"GPL-2.0-or-later\",\n  \"keywords\": &#91;\n    \"WordPress\",\n    \"block\"\n  ],\n  \"homepage\": \"https:\/\/github.com\/WordPress\/gutenberg-examples\/\",\n  \"repository\": \"git+https:\/\/github.com\/WordPress\/gutenberg-examples.git\",\n  \"bugs\": {\n    \"url\": \"https:\/\/github.com\/WordPress\/gutenberg-examples\/issues\"\n  },\n  \"main\": \"build\/index.js\",\n  \"devDependencies\": {\n    \"@wordpress\/scripts\": \"^24.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"wp-scripts build\",\n    \"format\": \"wp-scripts format\",\n    \"lint:js\": \"wp-scripts lint-js\",\n    \"packages-update\": \"wp-scripts packages-update\",\n    \"start\": \"wp-scripts start\"\n  }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Setting up the build pipeline<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This tutorial will proceed assuming the reader is familiar with ESNext syntax and the concept of build tools (like webpack). If that sounds confusing, you may want to review the <a href=\"\/docs\/how-to-guides\/javascript\/js-build-setup.md\">Getting started with JavaScript Build Setup<\/a> first.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To install the build tool, navigate to the plugin directory using your terminal and run <code>npm install<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once all the dependencies are in place, all that's left is to run <code>npm start<\/code> and voila! A watcher will run in the terminal. You can then edit away in your text editor; after each save, it will automatically build.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Testing if it worked<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you now go to the Plugins page, you should see a plugin called <strong>My first Gutenberg App<\/strong>. Go ahead and activate it. A new menu item labeled <em>My first Gutenberg app<\/em> should show up. Once you click it, you will see a page that says <em>Hello from JavaScript!<\/em>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/setup\/hello-from-js.jpg\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Congratulations! You are now ready to start building the app!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">What's next?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Previous part: <a href=\"\/docs\/how-to-guides\/data-basics\/README.md\">Introduction<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Next part: <a href=\"\/docs\/how-to-guides\/data-basics\/2-building-a-list-of-pages.md\">Building a basic list of pages<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>(optional) Review the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/data-basics-59c8f8\">finished app<\/a> in the block-development-examples repository<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Setup\n\nWe will build the application as a WordPress plugin, which means you need to have WordPress itself installed. One way to do this is by following the instructions on the [Getting Started](\/docs\/contributors\/code\/getting-started-with-code-contribution.md) page. Once your setup is complete, you can follow along with the rest of this tutorial.\n\nAlso, this tutorial will lean heavily on Redux concepts such as state, actions, and selectors. If you are not familiar with them, you may want to start by reviewing [Getting Started With Redux](https:\/\/redux.js.org\/introduction\/getting-started).\n\n## Creating a plugin\n\nWe'll do all the development inside of a WordPress plugin. Let's start by creating a `wp-content\/plugins\/my-first-gutenberg-app` directory in your local WordPress environment. We will need to create four files inside that directory:\n\n-   my-first-gutenberg-app.php \u2013 to create a new admin page\n-   src\/index.js \u2013 for our JavaScript application\n-   style.css \u2013 for the minimal stylesheet\n-   package.json \u2013 for the build process\n\nGo ahead and create these files using the following snippets:\n\n**src\/index.js:**\n\n```js\nimport { createRoot } from 'react-dom';\n\nfunction MyFirstApp() {\n\treturn <span>Hello from JavaScript!<\/span>;\n}\n\nconst root = createRoot( document.getElementById( 'my-first-gutenberg-app' ) );\nwindow.addEventListener(\n\t'load',\n\tfunction () {\n\t\troot.render(\n\t\t\t<MyFirstApp \/>,\n\t\t);\n\t},\n\tfalse\n);\n```\n\n**style.css:**\n\n```css\n.toplevel_page_my-first-gutenberg-app #wpcontent {\n\tbackground: #fff;\n\theight: 1000px;\n}\nbutton .components-spinner {\n\twidth: 15px;\n\theight: 15px;\n\tmargin-top: 0;\n\tmargin-bottom: 0;\n\tmargin-left: 0;\n}\n.form-buttons {\n\tdisplay: flex;\n}\n.my-gutenberg-form .form-buttons {\n\tmargin-top: 20px;\n\tmargin-left: 1px;\n}\n.form-error {\n\tcolor: #cc1818;\n}\n.form-buttons button {\n\tmargin-right: 4px;\n}\n.form-buttons .components-spinner {\n\tmargin-top: 0;\n}\n#my-first-gutenberg-app {\n\tmax-width: 500px;\n}\n#my-first-gutenberg-app ul,\n#my-first-gutenberg-app ul li {\n\tlist-style-type: disc;\n}\n#my-first-gutenberg-app ul {\n\tpadding-left: 20px;\n}\n#my-first-gutenberg-app .components-search-control__input {\n\theight: 36px;\n\tmargin-left: 0;\n}\n\n#my-first-gutenberg-app .list-controls {\n\tdisplay: flex;\n\twidth: 100%;\n}\n\n#my-first-gutenberg-app .list-controls .components-search-control {\n\tflex-grow: 1;\n\tmargin-right: 8px;\n}\n```\n\n**my-first-gutenberg-app.php:**\n\n```php\n<?php\n\/**\n * Plugin Name: My first Gutenberg App\n *\n *\/\n\nfunction my_admin_menu() {\n\t\/\/ Create a new admin page for our app.\n\tadd_menu_page(\n\t\t__( 'My first Gutenberg app', 'gutenberg' ),\n\t\t__( 'My first Gutenberg app', 'gutenberg' ),\n\t\t'manage_options',\n\t\t'my-first-gutenberg-app',\n\t\tfunction () {\n\t\t\techo '\n\t\t\t<h2>Pages<\/h2>\n\t\t\t<div id=\"my-first-gutenberg-app\"><\/div>\n\t\t';\n\t\t},\n\t\t'dashicons-schedule',\n\t\t3\n\t);\n}\n\nadd_action( 'admin_menu', 'my_admin_menu' );\n\nfunction load_custom_wp_admin_scripts( $hook ) {\n\t\/\/ Load only on ?page=my-first-gutenberg-app.\n\tif ( 'toplevel_page_my-first-gutenberg-app' !== $hook ) {\n\t\treturn;\n\t}\n\n\t\/\/ Load the required WordPress packages.\n\n\t\/\/ Automatically load imported dependencies and assets version.\n\t$asset_file = include plugin_dir_path( __FILE__ ) . 'build\/index.asset.php';\n\n\t\/\/ Enqueue CSS dependencies.\n\tforeach ( $asset_file['dependencies'] as $style ) {\n\t\twp_enqueue_style( $style );\n\t}\n\n\t\/\/ Load our app.js.\n\twp_register_script(\n\t\t'my-first-gutenberg-app',\n\t\tplugins_url( 'build\/index.js', __FILE__ ),\n\t\t$asset_file['dependencies'],\n\t\t$asset_file['version']\n\t);\n\twp_enqueue_script( 'my-first-gutenberg-app' );\n\n\t\/\/ Load our style.css.\n\twp_register_style(\n\t\t'my-first-gutenberg-app',\n\t\tplugins_url( 'style.css', __FILE__ ),\n\t\tarray(),\n\t\t$asset_file['version']\n\t);\n\twp_enqueue_style( 'my-first-gutenberg-app' );\n}\n\nadd_action( 'admin_enqueue_scripts', 'load_custom_wp_admin_scripts' );\n```\n\n**package.json:**\n\n```json\n{\n  \"name\": \"09-code-data-basics-esnext\",\n  \"version\": \"1.1.0\",\n  \"private\": true,\n  \"description\": \"My first Gutenberg App\",\n  \"author\": \"The WordPress Contributors\",\n  \"license\": \"GPL-2.0-or-later\",\n  \"keywords\": [\n    \"WordPress\",\n    \"block\"\n  ],\n  \"homepage\": \"https:\/\/github.com\/WordPress\/gutenberg-examples\/\",\n  \"repository\": \"git+https:\/\/github.com\/WordPress\/gutenberg-examples.git\",\n  \"bugs\": {\n    \"url\": \"https:\/\/github.com\/WordPress\/gutenberg-examples\/issues\"\n  },\n  \"main\": \"build\/index.js\",\n  \"devDependencies\": {\n    \"@wordpress\/scripts\": \"^24.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"wp-scripts build\",\n    \"format\": \"wp-scripts format\",\n    \"lint:js\": \"wp-scripts lint-js\",\n    \"packages-update\": \"wp-scripts packages-update\",\n    \"start\": \"wp-scripts start\"\n  }\n}\n```\n\n## Setting up the build pipeline\n\nThis tutorial will proceed assuming the reader is familiar with ESNext syntax and the concept of build tools (like webpack). If that sounds confusing, you may want to review the [Getting started with JavaScript Build Setup](\/docs\/how-to-guides\/javascript\/js-build-setup.md) first.\n\nTo install the build tool, navigate to the plugin directory using your terminal and run `npm install`.\n\nOnce all the dependencies are in place, all that's left is to run `npm start` and voila! A watcher will run in the terminal. You can then edit away in your text editor; after each save, it will automatically build.\n\n## Testing if it worked\n\nIf you now go to the Plugins page, you should see a plugin called **My first Gutenberg App**. Go ahead and activate it. A new menu item labeled _My first Gutenberg app_ should show up. Once you click it, you will see a page that says _Hello from JavaScript!_:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/setup\/hello-from-js.jpg)\n\nCongratulations! You are now ready to start building the app!\n\n## What's next?\n\n-   Previous part: [Introduction](\/docs\/how-to-guides\/data-basics\/README.md)\n-   Next part: [Building a basic list of pages](\/docs\/how-to-guides\/data-basics\/2-building-a-list-of-pages.md)\n-   (optional) Review the [finished app](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/data-basics-59c8f8) in the block-development-examples repository\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/data-basics\/5-adding-a-delete-button.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Adding a delete button<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In the <a href=\"\/docs\/how-to-guides\/data-basics\/3-building-an-edit-form.md\">previous part<\/a> we added an ability to create new pages,<br>and in this part we will add a <em>Delete<\/em> feature to our app.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here's a glimpse of what we're going to build:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/delete-button\/delete-button.png\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 1: Add a <em>Delete<\/em> button<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let's start by creating the <code>DeletePageButton<\/code> component and updating the user interface of our <code>PagesList<\/code> component:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { Button } from '@wordpress\/components';\nimport { decodeEntities } from '@wordpress\/html-entities';\n\nconst DeletePageButton = () => (\n\t<button variant=\"primary\">\n\t\tDelete\n\t<\/button>\n)\n\nfunction PagesList( { hasResolved, pages } ) {\n\tif ( ! hasResolved ) {\n\t\treturn <spinner>;\n\t}\n\tif ( ! pages?.length ) {\n\t\treturn <div>No results<\/div>;\n\t}\n\n\treturn (\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table classname=\"wp-list-table widefat fixed striped table-view-list\">\t\t\t<thead>\t\t\t\t<tr>\t\t\t\t\t<td>Title<\/td>\t\t\t\t\t<td style=\"{{width:\" 190}}=\"\">Actions<\/td>\t\t\t\t<\/tr>\t\t\t<\/thead>\t\t\t<tbody>\t\t\t\t\t<tr key=\"{page.id}\">\t\t\t\t\t\t<td>{ decodeEntities( page.title.rendered ) }<\/td>\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div classname=\"form-buttons\">\n\t\t\t\t\t\t\t\t<pageeditbutton pageid=\"{\" page.id=\"\" }=\"\">\n\t\t\t\t\t\t\t\t{\/* \u2193 This is the only change in the PagesList component *\/}\n\t\t\t\t\t\t\t\t<deletepagebutton pageid=\"{\" page.id=\"\" }=\"\">\n\t\t\t\t\t\t\t<\/deletepagebutton><\/pageeditbutton><\/div>\n\t\t\t\t\t\t<\/td>\t\t\t\t\t<\/tr>\t\t\t<\/tbody>\t\t<\/table>\t\t\t\t{ pages?.map( ( page ) => (\t\t\t\t) ) }\n\t);\n}\n<\/spinner><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This is what the PagesList should look like now:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/delete-button\/delete-button.png\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 2: Wire the button to a delete action<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In Gutenberg data, we delete entity records from the WordPress REST API using the <code>deleteEntityRecord<\/code> action. It sends the request, processes the result, and updates the cached data in the Redux state.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here's how you can try deleting entity records in your browser's dev tools:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ We need a valid page ID to call deleteEntityRecord, so let's get the first available one using getEntityRecords.\nconst pageId = wp.data.select( 'core' ).getEntityRecords( 'postType', 'page' )&#91;0].id;\n\n\/\/ Now let's delete that page:\nconst promise = wp.data.dispatch( 'core' ).deleteEntityRecord( 'postType', 'page', pageId );\n\n\/\/ promise gets resolved or rejected when the API request succeeds or fails.\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Once the REST API request is finished, you will notice one of the pages has disappeared from the list. This is because that list is populated by the <code>useSelect()<\/code> hook and the <code>select( coreDataStore ).getEntityRecords( 'postType', 'page' )<\/code> selector. Anytime the underlying data changes, the list gets re-rendered with fresh data. That's pretty convenient!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let's dispatch that action when <code>DeletePageButton<\/code> is clicked:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const DeletePageButton = ({ pageId }) => {\n\tconst { deleteEntityRecord } = useDispatch( coreDataStore );\n\tconst handleDelete = () => deleteEntityRecord( 'postType', 'page', pageId );\n\treturn (\n\t\t<button variant=\"primary\" onclick=\"{\" handledelete=\"\" }=\"\">\n\t\t\tDelete\n\t\t<\/button>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 3: Add visual feedback<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It may take a few moments for the REST API request to finish after clicking the <em>Delete<\/em> button. Let's communicate that with a <code>&lt;Spinner \/><\/code> component similarly to what we did in the previous parts of this tutorial.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We'll need the <code>isDeletingEntityRecord<\/code> selector for that. It is similar to the <code>isSavingEntityRecord<\/code> selector we've already seen in <a href=\"\/docs\/how-to-guides\/data-basics\/3-building-an-edit-form.md\">part 3<\/a>: it returns <code>true<\/code> or <code>false<\/code> and never issues any HTTP requests:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const DeletePageButton = ({ pageId }) => {\n\t\/\/ ...\n\tconst { isDeleting } = useSelect(\n\t\tselect => ({\n\t\t\tisDeleting: select( coreDataStore ).isDeletingEntityRecord( 'postType', 'page', pageId ),\n\t\t}),\n\t\t&#91; pageId ]\n\t)\n\treturn (\n\t\t<button variant=\"primary\" onclick=\"{\" handledelete=\"\" }=\"\" disabled=\"{\" isdeleting=\"\">\n\t\t\t{ isDeleting ? (\n\t\t\t\t&lt;>\n\t\t\t\t\t<spinner>\n\t\t\t\t\tDeleting...\n\t\t\t\t\n\t\t\t) : 'Delete' }\n\t\t<\/spinner><\/button>\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Here's what it looks like in action:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/delete-button\/deleting-in-progress.png\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 4: Handle errors<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We optimistically assumed that a <em>delete<\/em> operation would always succeed. Unfortunately, under the hood, it is a REST API request that can fail in many ways:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>The website can be down.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The delete request may be invalid.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The page could have been deleted by someone else in the meantime.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>To tell the user when any of these errors happen, we need to extract the error information using the <code>getLastEntityDeleteError<\/code> selector:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ Replace 9 with an actual page ID\nwp.data.select( 'core' ).getLastEntityDeleteError( 'postType', 'page', 9 )\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Here's how we can apply it in <code>DeletePageButton<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useEffect } from 'react';\nconst DeletePageButton = ({ pageId }) => {\n\t\/\/ ...\n\tconst { error, \/* ... *\/ } = useSelect(\n\t\tselect => ( {\n\t\t\terror: select( coreDataStore ).getLastEntityDeleteError( 'postType', 'page', pageId ),\n\t\t\t\/\/ ...\n\t\t} ),\n\t\t&#91;pageId]\n\t);\n\tuseEffect( () => {\n\t\tif ( error ) {\n\t\t\t\/\/ Display the error\n\t\t}\n\t}, &#91;error] )\n\n\t\/\/ ...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The <code>error<\/code> object comes from the <code>@wordpress\/api-fetch<\/code> and contains information about the error. It has the following properties:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>message<\/code> \u2013 a human-readable error message such as <code>Invalid post ID<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>code<\/code> \u2013 a string-based error code such as <code>rest_post_invalid_id<\/code>. To learn about all possible error codes you'd need to refer to the <a href=\"https:\/\/github.com\/WordPress\/wordpress-develop\/blob\/2648a5f984b8abf06872151898e3a61d3458a628\/src\/wp-includes\/rest-api\/endpoints\/class-wp-rest-revisions-controller.php#L226-L230\"><code>\/v2\/pages<\/code> endpoint's source code<\/a>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>data<\/code> (optional) \u2013 error details, contains the <code>code<\/code> property containing the HTTP response code for the failed request.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>There are many ways to turn that object into an error message, but in this tutorial, we will display the <code>error.message<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>WordPress has an established pattern of displaying status information using the <code>Snackbar<\/code> component. Here's what it looks like <strong>in the Widgets editor<\/strong>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/delete-button\/snackbar-example.png\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Let's use the same type of notifications in our plugin! There are two parts to this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Displaying notifications<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Dispatching notifications<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Displaying notifications<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Our application only knows how to display pages but does not know how to display notifications. Let's tell it!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>WordPress conveniently provides us with all the React components we need to render notifications. A <a href=\"https:\/\/wordpress.github.io\/gutenberg\/?path=\/story\/components-snackbar--default\">component called <code>Snackbar<\/code><\/a> represents a single notification:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/delete-button\/snackbar.png\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>We won't use <code>Snackbar<\/code> directly, though. We'll use the <code>SnackbarList<\/code> component, which can display multiple notices using smooth animations and automatically hide them after a few seconds. In fact, WordPress uses the same component used in the Widgets editor and other wp-admin pages!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let's create our own <code>Notifications<\/code> components:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { SnackbarList } from '@wordpress\/components';\nimport { store as noticesStore } from '@wordpress\/notices';\n\nfunction Notifications() {\n\tconst notices = &#91;]; \/\/ We'll come back here in a second!\n\n\treturn (\n\t\t<snackbarlist<br>\t\t\tnotices={ notices }\n\t\t\tclassName=\"components-editor-notices__snackbar\"\n\t\t\/>\n\t);\n}\n<\/snackbarlist<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The basic structure is in place, but the list of notifications it renders is empty. How do we populate it? We'll lean on the same package as WordPress: <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/895ca1f6a7d7e492974ea55f693aecbeb1d5bbe3\/docs\/reference-guides\/data\/data-core-notices.md\"><code>@wordpress\/notices<\/code><\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here's how:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { SnackbarList } from '@wordpress\/components';\nimport { store as noticesStore } from '@wordpress\/notices';\n\nfunction Notifications() {\n\tconst notices = useSelect(\n\t\t( select ) => select( noticesStore ).getNotices(),\n\t\t&#91;]\n\t);\n\tconst { removeNotice } = useDispatch( noticesStore );\n\tconst snackbarNotices = notices.filter( ({ type }) => type === 'snackbar' );\n\n\treturn (\n\t\t<snackbarlist<br>\t\t\tnotices={ snackbarNotices }\n\t\t\tclassName=\"components-editor-notices__snackbar\"\n\t\t\tonRemove={ removeNotice }\n\t\t\/>\n\t);\n}\n\nfunction MyFirstApp() {\n\t\/\/ ...\n\treturn (\n\t\t<div>\n\t\t\t{\/* ... *\/}\n\t\t\t<notifications>\n\t\t<\/notifications><\/div>\n\t);\n}\n<\/snackbarlist<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This tutorial is focused on managing the pages and won't discuss the above snippet in detail. If you're interested in the details of <code>@wordpress\/notices<\/code>, the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/data\/data-core-notices\/\">handbook page<\/a> is a good place to start.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now we're ready to tell the user about any errors that may have occurred.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Dispatching notifications<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>With the SnackbarNotices component in place, we're ready to dispatch some notifications! Here's how:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useEffect } from 'react';\nimport { store as noticesStore } from '@wordpress\/notices';\nfunction DeletePageButton( { pageId } ) {\n\tconst { createSuccessNotice, createErrorNotice } = useDispatch( noticesStore );\n\t\/\/ useSelect returns a list of selectors if you pass the store handle\n\t\/\/ instead of a callback:\n\tconst { getLastEntityDeleteError } = useSelect( coreDataStore )\n\tconst handleDelete = async () => {\n\t\tconst success = await deleteEntityRecord( 'postType', 'page', pageId);\n\t\tif ( success ) {\n\t\t\t\/\/ Tell the user the operation succeeded:\n\t\t\tcreateSuccessNotice( \"The page was deleted!\", {\n\t\t\t\ttype: 'snackbar',\n\t\t\t} );\n\t\t} else {\n\t\t\t\/\/ We use the selector directly to get the fresh error *after* the deleteEntityRecord\n\t\t\t\/\/ have failed.\n\t\t\tconst lastError = getLastEntityDeleteError( 'postType', 'page', pageId );\n\t\t\tconst message = ( lastError?.message || 'There was an error.' ) + ' Please refresh the page and try again.'\n\t\t\t\/\/ Tell the user how exactly the operation has failed:\n\t\t\tcreateErrorNotice( message, {\n\t\t\t\ttype: 'snackbar',\n\t\t\t} );\n\t\t}\n\t}\n\t\/\/ ...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Great! <code>DeletePageButton<\/code> is now fully aware of errors. Let's see that error message in action. We'll trigger an invalid delete and let it fail. One way to do this is to multiply the <code>pageId<\/code> by a large number:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function DeletePageButton( { pageId, onCancel, onSaveFinished } ) {\n\tpageId = pageId * 1000;\n\t\/\/ ...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Once you refresh the page and click any <code>Delete<\/code> button, you should see the following error message:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/delete-button\/snackbar-error.png\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Fantastic! We can now <strong>remove the <code>pageId = pageId * 1000;<\/code> line.<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let's now try actually deleting a page. Here's what you should see after refreshing your browser and clicking the Delete button:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/delete-button\/snackbar-success.png\" alt=\"\"\/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>And that's it!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Wiring it all together<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>All the pieces are in place, great! Here\u2019s all the changes we've made in this chapter:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { useState, useEffect } from 'react';\nimport { useSelect, useDispatch } from '@wordpress\/data';\nimport { Button, Modal, TextControl } from '@wordpress\/components';\n\nfunction MyFirstApp() {\n\tconst &#91;searchTerm, setSearchTerm] = useState( '' );\n\tconst { pages, hasResolved } = useSelect(\n\t\t( select ) => {\n\t\t\tconst query = {};\n\t\t\tif ( searchTerm ) {\n\t\t\t\tquery.search = searchTerm;\n\t\t\t}\n\t\t\tconst selectorArgs = &#91;'postType', 'page', query];\n\t\t\tconst pages = select( coreDataStore ).getEntityRecords( ...selectorArgs );\n\t\t\treturn {\n\t\t\t\tpages,\n\t\t\t\thasResolved: select( coreDataStore ).hasFinishedResolution(\n\t\t\t\t\t'getEntityRecords',\n\t\t\t\t\tselectorArgs,\n\t\t\t\t),\n\t\t\t};\n\t\t},\n\t\t&#91;searchTerm],\n\t);\n\n\treturn (\n\t\t<div>\n\t\t\t<div classname=\"list-controls\">\n\t\t\t\t<searchcontrol onchange=\"{\" setsearchterm=\"\" }=\"\" value=\"{\" searchterm=\"\">\n\t\t\t\t<pagecreatebutton>\n\t\t\t<\/pagecreatebutton><\/searchcontrol><\/div>\n\t\t\t<pageslist hasresolved=\"{\" }=\"\" pages=\"{\">\n\t\t\t<notifications>\n\t\t<\/notifications><\/pageslist><\/div>\n\t);\n}\n\nfunction SnackbarNotices() {\n\tconst notices = useSelect(\n\t\t( select ) => select( noticesStore ).getNotices(),\n\t\t&#91;]\n\t);\n\tconst { removeNotice } = useDispatch( noticesStore );\n\tconst snackbarNotices = notices.filter( ( { type } ) => type === 'snackbar' );\n\n\treturn (\n\t\t<snackbarlist<br>\t\t\tnotices={ snackbarNotices }\n\t\t\tclassName=\"components-editor-notices__snackbar\"\n\t\t\tonRemove={ removeNotice }\n\t\t\/>\n\t);\n}\n\nfunction PagesList( { hasResolved, pages } ) {\n\tif ( !hasResolved ) {\n\t\treturn <spinner>;\n\t}\n\tif ( !pages?.length ) {\n\t\treturn <div>No results<\/div>;\n\t}\n\n\treturn (\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table classname=\"wp-list-table widefat fixed striped table-view-list\">\t\t\t<thead>\t\t\t\t<tr>\t\t\t\t\t<td>Title<\/td>\t\t\t\t\t<td 190=\"\" style=\"{\" {=\"\" width:=\"\" }=\"\">Actions<\/td>\t\t\t\t<\/tr>\t\t\t<\/thead>\t\t\t<tbody>\t\t\t\t\t<tr key=\"{\" page.id=\"\" }=\"\">\t\t\t\t\t\t<td>{ page.title.rendered }<\/td>\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div classname=\"form-buttons\">\n\t\t\t\t\t\t\t\t<pageeditbutton pageid=\"{\" page.id=\"\" }=\"\">\n\t\t\t\t\t\t\t\t<deletepagebutton pageid=\"{\" page.id=\"\" }=\"\">\n\t\t\t\t\t\t\t<\/deletepagebutton><\/pageeditbutton><\/div>\n\t\t\t\t\t\t<\/td>\t\t\t\t\t<\/tr>\t\t\t<\/tbody>\t\t<\/table>\t\t\t\t{ pages?.map( ( page ) => (\t\t\t\t) ) }\n\t);\n}\n\nfunction DeletePageButton( { pageId } ) {\n\tconst { createSuccessNotice, createErrorNotice } = useDispatch( noticesStore );\n\t\/\/ useSelect returns a list of selectors if you pass the store handle\n\t\/\/ instead of a callback:\n\tconst { getLastEntityDeleteError } = useSelect( coreDataStore )\n\tconst handleDelete = async () => {\n\t\tconst success = await deleteEntityRecord( 'postType', 'page', pageId);\n\t\tif ( success ) {\n\t\t\t\/\/ Tell the user the operation succeeded:\n\t\t\tcreateSuccessNotice( \"The page was deleted!\", {\n\t\t\t\ttype: 'snackbar',\n\t\t\t} );\n\t\t} else {\n\t\t\t\/\/ We use the selector directly to get the error at this point in time.\n\t\t\t\/\/ Imagine we fetched the error like this:\n\t\t\t\/\/     const { lastError } = useSelect( function() { \/* ... *\/ } );\n\t\t\t\/\/ Then, lastError would be null inside of handleDelete.\n\t\t\t\/\/ Why? Because we'd refer to the version of it that was computed\n\t\t\t\/\/ before the handleDelete was even called.\n\t\t\tconst lastError = getLastEntityDeleteError( 'postType', 'page', pageId );\n\t\t\tconst message = ( lastError?.message || 'There was an error.' ) + ' Please refresh the page and try again.'\n\t\t\t\/\/ Tell the user how exactly the operation have failed:\n\t\t\tcreateErrorNotice( message, {\n\t\t\t\ttype: 'snackbar',\n\t\t\t} );\n\t\t}\n\t}\n\n\tconst { deleteEntityRecord } = useDispatch( coreDataStore );\n\tconst { isDeleting } = useSelect(\n\t\tselect => ( {\n\t\t\tisDeleting: select( coreDataStore ).isDeletingEntityRecord( 'postType', 'page', pageId ),\n\t\t} ),\n\t\t&#91; pageId ]\n\t);\n\n\treturn (\n\t\t<button variant=\"primary\" onclick=\"{\" handledelete=\"\" }=\"\" disabled=\"{\" isdeleting=\"\">\n\t\t\t{ isDeleting ? (\n\t\t\t\t&lt;>\n\t\t\t\t\t<spinner>\n\t\t\t\t\tDeleting...\n\t\t\t\t\n\t\t\t) : 'Delete' }\n\t\t<\/spinner><\/button>\n\t);\n}\n<\/spinner><\/snackbarlist<br><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">What's next?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Previous part:<\/strong> <a href=\"\/docs\/how-to-guides\/data-basics\/4-building-a-create-page-form.md\">Building a <em>Create page form<\/em><\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>(optional) Review the <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/data-basics-59c8f8\">finished app<\/a> in the block-development-examples repository<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Adding a delete button\n\nIn the [previous part](\/docs\/how-to-guides\/data-basics\/3-building-an-edit-form.md) we added an ability to create new pages,\nand in this part we will add a *Delete* feature to our app.\n\nHere's a glimpse of what we're going to build:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/delete-button\/delete-button.png)\n\n### Step 1: Add a _Delete_ button\n\nLet's start by creating the `DeletePageButton` component and updating the user interface of our `PagesList` component:\n\n```js\nimport { Button } from '@wordpress\/components';\nimport { decodeEntities } from '@wordpress\/html-entities';\n\nconst DeletePageButton = () => (\n\t<Button variant=\"primary\">\n\t\tDelete\n\t<\/Button>\n)\n\nfunction PagesList( { hasResolved, pages } ) {\n\tif ( ! hasResolved ) {\n\t\treturn <Spinner \/>;\n\t}\n\tif ( ! pages?.length ) {\n\t\treturn <div>No results<\/div>;\n\t}\n\n\treturn (\n\t\t<table className=\"wp-list-table widefat fixed striped table-view-list\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Title<\/td>\n\t\t\t\t\t<td style={{width: 190}}>Actions<\/td>\n\t\t\t\t<\/tr>\n\t\t\t<\/thead>\n\t\t\t<tbody>\n\t\t\t\t{ pages?.map( ( page ) => (\n\t\t\t\t\t<tr key={page.id}>\n\t\t\t\t\t\t<td>{ decodeEntities( page.title.rendered ) }<\/td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div className=\"form-buttons\">\n\t\t\t\t\t\t\t\t<PageEditButton pageId={ page.id } \/>\n\t\t\t\t\t\t\t\t{\/* \u2193 This is the only change in the PagesList component *\/}\n\t\t\t\t\t\t\t\t<DeletePageButton pageId={ page.id }\/>\n\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t<\/td>\n\t\t\t\t\t<\/tr>\n\t\t\t\t) ) }\n\t\t\t<\/tbody>\n\t\t<\/table>\n\t);\n}\n```\n\nThis is what the PagesList should look like now:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/delete-button\/delete-button.png)\n\n### Step 2: Wire the button to a delete action\n\nIn Gutenberg data, we delete entity records from the WordPress REST API using the `deleteEntityRecord` action. It sends the request, processes the result, and updates the cached data in the Redux state.\n\nHere's how you can try deleting entity records in your browser's dev tools:\n\n```js\n\/\/ We need a valid page ID to call deleteEntityRecord, so let's get the first available one using getEntityRecords.\nconst pageId = wp.data.select( 'core' ).getEntityRecords( 'postType', 'page' )[0].id;\n\n\/\/ Now let's delete that page:\nconst promise = wp.data.dispatch( 'core' ).deleteEntityRecord( 'postType', 'page', pageId );\n\n\/\/ promise gets resolved or rejected when the API request succeeds or fails.\n```\n\nOnce the REST API request is finished, you will notice one of the pages has disappeared from the list. This is because that list is populated by the `useSelect()` hook and the `select( coreDataStore ).getEntityRecords( 'postType', 'page' )` selector. Anytime the underlying data changes, the list gets re-rendered with fresh data. That's pretty convenient!\n\nLet's dispatch that action when `DeletePageButton` is clicked:\n\n```js\nconst DeletePageButton = ({ pageId }) => {\n\tconst { deleteEntityRecord } = useDispatch( coreDataStore );\n\tconst handleDelete = () => deleteEntityRecord( 'postType', 'page', pageId );\n\treturn (\n\t\t<Button variant=\"primary\" onClick={ handleDelete }>\n\t\t\tDelete\n\t\t<\/Button>\n\t);\n}\n```\n\n### Step 3: Add visual feedback\n\nIt may take a few moments for the REST API request to finish after clicking the _Delete_ button. Let's communicate that with a `<Spinner \/>` component similarly to what we did in the previous parts of this tutorial.\n\nWe'll need the `isDeletingEntityRecord` selector for that. It is similar to the `isSavingEntityRecord` selector we've already seen in [part 3](\/docs\/how-to-guides\/data-basics\/3-building-an-edit-form.md): it returns `true` or `false` and never issues any HTTP requests:\n\n```js\nconst DeletePageButton = ({ pageId }) => {\n\t\/\/ ...\n\tconst { isDeleting } = useSelect(\n\t\tselect => ({\n\t\t\tisDeleting: select( coreDataStore ).isDeletingEntityRecord( 'postType', 'page', pageId ),\n\t\t}),\n\t\t[ pageId ]\n\t)\n\treturn (\n\t\t<Button variant=\"primary\" onClick={ handleDelete } disabled={ isDeleting }>\n\t\t\t{ isDeleting ? (\n\t\t\t\t<>\n\t\t\t\t\t<Spinner \/>\n\t\t\t\t\tDeleting...\n\t\t\t\t<\/>\n\t\t\t) : 'Delete' }\n\t\t<\/Button>\n\t);\n}\n```\n\nHere's what it looks like in action:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/delete-button\/deleting-in-progress.png)\n\n### Step 4: Handle errors\n\nWe optimistically assumed that a *delete* operation would always succeed. Unfortunately, under the hood, it is a REST API request that can fail in many ways:\n\n* The website can be down.\n* The delete request may be invalid.\n* The page could have been deleted by someone else in the meantime.\n\nTo tell the user when any of these errors happen, we need to extract the error information using the `getLastEntityDeleteError` selector:\n\n```js\n\/\/ Replace 9 with an actual page ID\nwp.data.select( 'core' ).getLastEntityDeleteError( 'postType', 'page', 9 )\n```\n\nHere's how we can apply it in `DeletePageButton`:\n\n```js\nimport { useEffect } from 'react';\nconst DeletePageButton = ({ pageId }) => {\n\t\/\/ ...\n\tconst { error, \/* ... *\/ } = useSelect(\n\t\tselect => ( {\n\t\t\terror: select( coreDataStore ).getLastEntityDeleteError( 'postType', 'page', pageId ),\n\t\t\t\/\/ ...\n\t\t} ),\n\t\t[pageId]\n\t);\n\tuseEffect( () => {\n\t\tif ( error ) {\n\t\t\t\/\/ Display the error\n\t\t}\n\t}, [error] )\n\n\t\/\/ ...\n}\n```\n\nThe `error` object comes from the `@wordpress\/api-fetch` and contains information about the error. It has the following properties:\n\n* `message` \u2013 a human-readable error message such as `Invalid post ID`.\n* `code` \u2013 a string-based error code such as `rest_post_invalid_id`. To learn about all possible error codes you'd need to refer to the [`\/v2\/pages` endpoint's source code](https:\/\/github.com\/WordPress\/wordpress-develop\/blob\/2648a5f984b8abf06872151898e3a61d3458a628\/src\/wp-includes\/rest-api\/endpoints\/class-wp-rest-revisions-controller.php#L226-L230).\n* `data` (optional) \u2013 error details, contains the `code` property containing the HTTP response code for the failed request.\n\nThere are many ways to turn that object into an error message, but in this tutorial, we will display the `error.message`.\n\nWordPress has an established pattern of displaying status information using the `Snackbar` component. Here's what it looks like **in the Widgets editor**:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/delete-button\/snackbar-example.png)\n\nLet's use the same type of notifications in our plugin! There are two parts to this:\n\n1. Displaying notifications\n2. Dispatching notifications\n\n#### Displaying notifications\n\nOur application only knows how to display pages but does not know how to display notifications. Let's tell it!\n\nWordPress conveniently provides us with all the React components we need to render notifications. A [component called `Snackbar`](https:\/\/wordpress.github.io\/gutenberg\/?path=\/story\/components-snackbar--default) represents a single notification:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/delete-button\/snackbar.png)\n\nWe won't use `Snackbar` directly, though. We'll use the `SnackbarList` component, which can display multiple notices using smooth animations and automatically hide them after a few seconds. In fact, WordPress uses the same component used in the Widgets editor and other wp-admin pages!\n\nLet's create our own `Notifications` components:\n\n```js\nimport { SnackbarList } from '@wordpress\/components';\nimport { store as noticesStore } from '@wordpress\/notices';\n\nfunction Notifications() {\n\tconst notices = []; \/\/ We'll come back here in a second!\n\n\treturn (\n\t\t<SnackbarList\n\t\t\tnotices={ notices }\n\t\t\tclassName=\"components-editor-notices__snackbar\"\n\t\t\/>\n\t);\n}\n```\n\nThe basic structure is in place, but the list of notifications it renders is empty. How do we populate it? We'll lean on the same package as WordPress: [`@wordpress\/notices`](https:\/\/github.com\/WordPress\/gutenberg\/blob\/895ca1f6a7d7e492974ea55f693aecbeb1d5bbe3\/docs\/reference-guides\/data\/data-core-notices.md).\n\nHere's how:\n\n```js\nimport { SnackbarList } from '@wordpress\/components';\nimport { store as noticesStore } from '@wordpress\/notices';\n\nfunction Notifications() {\n\tconst notices = useSelect(\n\t\t( select ) => select( noticesStore ).getNotices(),\n\t\t[]\n\t);\n\tconst { removeNotice } = useDispatch( noticesStore );\n\tconst snackbarNotices = notices.filter( ({ type }) => type === 'snackbar' );\n\n\treturn (\n\t\t<SnackbarList\n\t\t\tnotices={ snackbarNotices }\n\t\t\tclassName=\"components-editor-notices__snackbar\"\n\t\t\tonRemove={ removeNotice }\n\t\t\/>\n\t);\n}\n\nfunction MyFirstApp() {\n\t\/\/ ...\n\treturn (\n\t\t<div>\n\t\t\t{\/* ... *\/}\n\t\t\t<Notifications \/>\n\t\t<\/div>\n\t);\n}\n```\n\nThis tutorial is focused on managing the pages and won't discuss the above snippet in detail. If you're interested in the details of `@wordpress\/notices`, the [handbook page](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/data\/data-core-notices\/) is a good place to start.\n\nNow we're ready to tell the user about any errors that may have occurred.\n\n#### Dispatching notifications\n\nWith the SnackbarNotices component in place, we're ready to dispatch some notifications! Here's how:\n\n```js\nimport { useEffect } from 'react';\nimport { store as noticesStore } from '@wordpress\/notices';\nfunction DeletePageButton( { pageId } ) {\n\tconst { createSuccessNotice, createErrorNotice } = useDispatch( noticesStore );\n\t\/\/ useSelect returns a list of selectors if you pass the store handle\n\t\/\/ instead of a callback:\n\tconst { getLastEntityDeleteError } = useSelect( coreDataStore )\n\tconst handleDelete = async () => {\n\t\tconst success = await deleteEntityRecord( 'postType', 'page', pageId);\n\t\tif ( success ) {\n\t\t\t\/\/ Tell the user the operation succeeded:\n\t\t\tcreateSuccessNotice( \"The page was deleted!\", {\n\t\t\t\ttype: 'snackbar',\n\t\t\t} );\n\t\t} else {\n\t\t\t\/\/ We use the selector directly to get the fresh error *after* the deleteEntityRecord\n\t\t\t\/\/ have failed.\n\t\t\tconst lastError = getLastEntityDeleteError( 'postType', 'page', pageId );\n\t\t\tconst message = ( lastError?.message || 'There was an error.' ) + ' Please refresh the page and try again.'\n\t\t\t\/\/ Tell the user how exactly the operation has failed:\n\t\t\tcreateErrorNotice( message, {\n\t\t\t\ttype: 'snackbar',\n\t\t\t} );\n\t\t}\n\t}\n\t\/\/ ...\n}\n```\n\nGreat! `DeletePageButton` is now fully aware of errors. Let's see that error message in action. We'll trigger an invalid delete and let it fail. One way to do this is to multiply the `pageId` by a large number:\n\n```js\nfunction DeletePageButton( { pageId, onCancel, onSaveFinished } ) {\n\tpageId = pageId * 1000;\n\t\/\/ ...\n}\n```\n\nOnce you refresh the page and click any `Delete` button, you should see the following error message:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/delete-button\/snackbar-error.png)\n\nFantastic! We can now **remove the `pageId = pageId * 1000;` line.**\n\nLet's now try actually deleting a page. Here's what you should see after refreshing your browser and clicking the Delete button:\n\n![](https:\/\/raw.githubusercontent.com\/WordPress\/gutenberg\/HEAD\/docs\/how-to-guides\/data-basics\/media\/delete-button\/snackbar-success.png)\n\nAnd that's it!\n\n### Wiring it all together\n\nAll the pieces are in place, great! Here\u2019s all the changes we've made in this chapter:\n\n```js\nimport { useState, useEffect } from 'react';\nimport { useSelect, useDispatch } from '@wordpress\/data';\nimport { Button, Modal, TextControl } from '@wordpress\/components';\n\nfunction MyFirstApp() {\n\tconst [searchTerm, setSearchTerm] = useState( '' );\n\tconst { pages, hasResolved } = useSelect(\n\t\t( select ) => {\n\t\t\tconst query = {};\n\t\t\tif ( searchTerm ) {\n\t\t\t\tquery.search = searchTerm;\n\t\t\t}\n\t\t\tconst selectorArgs = ['postType', 'page', query];\n\t\t\tconst pages = select( coreDataStore ).getEntityRecords( ...selectorArgs );\n\t\t\treturn {\n\t\t\t\tpages,\n\t\t\t\thasResolved: select( coreDataStore ).hasFinishedResolution(\n\t\t\t\t\t'getEntityRecords',\n\t\t\t\t\tselectorArgs,\n\t\t\t\t),\n\t\t\t};\n\t\t},\n\t\t[searchTerm],\n\t);\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"list-controls\">\n\t\t\t\t<SearchControl onChange={ setSearchTerm } value={ searchTerm }\/>\n\t\t\t\t<PageCreateButton\/>\n\t\t\t<\/div>\n\t\t\t<PagesList hasResolved={ hasResolved } pages={ pages }\/>\n\t\t\t<Notifications \/>\n\t\t<\/div>\n\t);\n}\n\nfunction SnackbarNotices() {\n\tconst notices = useSelect(\n\t\t( select ) => select( noticesStore ).getNotices(),\n\t\t[]\n\t);\n\tconst { removeNotice } = useDispatch( noticesStore );\n\tconst snackbarNotices = notices.filter( ( { type } ) => type === 'snackbar' );\n\n\treturn (\n\t\t<SnackbarList\n\t\t\tnotices={ snackbarNotices }\n\t\t\tclassName=\"components-editor-notices__snackbar\"\n\t\t\tonRemove={ removeNotice }\n\t\t\/>\n\t);\n}\n\nfunction PagesList( { hasResolved, pages } ) {\n\tif ( !hasResolved ) {\n\t\treturn <Spinner\/>;\n\t}\n\tif ( !pages?.length ) {\n\t\treturn <div>No results<\/div>;\n\t}\n\n\treturn (\n\t\t<table className=\"wp-list-table widefat fixed striped table-view-list\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Title<\/td>\n\t\t\t\t\t<td style={ { width: 190 } }>Actions<\/td>\n\t\t\t\t<\/tr>\n\t\t\t<\/thead>\n\t\t\t<tbody>\n\t\t\t\t{ pages?.map( ( page ) => (\n\t\t\t\t\t<tr key={ page.id }>\n\t\t\t\t\t\t<td>{ page.title.rendered }<\/td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div className=\"form-buttons\">\n\t\t\t\t\t\t\t\t<PageEditButton pageId={ page.id }\/>\n\t\t\t\t\t\t\t\t<DeletePageButton pageId={ page.id }\/>\n\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t<\/td>\n\t\t\t\t\t<\/tr>\n\t\t\t\t) ) }\n\t\t\t<\/tbody>\n\t\t<\/table>\n\t);\n}\n\nfunction DeletePageButton( { pageId } ) {\n\tconst { createSuccessNotice, createErrorNotice } = useDispatch( noticesStore );\n\t\/\/ useSelect returns a list of selectors if you pass the store handle\n\t\/\/ instead of a callback:\n\tconst { getLastEntityDeleteError } = useSelect( coreDataStore )\n\tconst handleDelete = async () => {\n\t\tconst success = await deleteEntityRecord( 'postType', 'page', pageId);\n\t\tif ( success ) {\n\t\t\t\/\/ Tell the user the operation succeeded:\n\t\t\tcreateSuccessNotice( \"The page was deleted!\", {\n\t\t\t\ttype: 'snackbar',\n\t\t\t} );\n\t\t} else {\n\t\t\t\/\/ We use the selector directly to get the error at this point in time.\n\t\t\t\/\/ Imagine we fetched the error like this:\n\t\t\t\/\/     const { lastError } = useSelect( function() { \/* ... *\/ } );\n\t\t\t\/\/ Then, lastError would be null inside of handleDelete.\n\t\t\t\/\/ Why? Because we'd refer to the version of it that was computed\n\t\t\t\/\/ before the handleDelete was even called.\n\t\t\tconst lastError = getLastEntityDeleteError( 'postType', 'page', pageId );\n\t\t\tconst message = ( lastError?.message || 'There was an error.' ) + ' Please refresh the page and try again.'\n\t\t\t\/\/ Tell the user how exactly the operation have failed:\n\t\t\tcreateErrorNotice( message, {\n\t\t\t\ttype: 'snackbar',\n\t\t\t} );\n\t\t}\n\t}\n\n\tconst { deleteEntityRecord } = useDispatch( coreDataStore );\n\tconst { isDeleting } = useSelect(\n\t\tselect => ( {\n\t\t\tisDeleting: select( coreDataStore ).isDeletingEntityRecord( 'postType', 'page', pageId ),\n\t\t} ),\n\t\t[ pageId ]\n\t);\n\n\treturn (\n\t\t<Button variant=\"primary\" onClick={ handleDelete } disabled={ isDeleting }>\n\t\t\t{ isDeleting ? (\n\t\t\t\t<>\n\t\t\t\t\t<Spinner \/>\n\t\t\t\t\tDeleting...\n\t\t\t\t<\/>\n\t\t\t) : 'Delete' }\n\t\t<\/Button>\n\t);\n}\n```\n\n## What's next?\n\n* **Previous part:** [Building a *Create page form*](\/docs\/how-to-guides\/data-basics\/4-building-a-create-page-form.md)\n* (optional) Review the [finished app](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/data-basics-59c8f8) in the block-development-examples repository\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/metabox.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Meta Boxes<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Overview<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Prior to the block editor, custom meta boxes were used to extend the editor. Now there are new ways to extend, giving more power to the developer and a better experience for the authors. It is recommended to port older custom meta boxes to one of these new methods to create a more unified and consistent experience for those using the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The block editor does support most existing meta boxes, see <a href=\"#backward-compatibility\">the backward compatibility section below<\/a> for details .<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you are interested in working with the post meta outside the editor, check out the <a href=\"\/docs\/how-to-guides\/sidebar-tutorial\/plugin-sidebar-0.md\">Sidebar Tutorial<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Use blocks to store meta<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Typically, blocks store attribute values in the serialized block HTML. However, you can also create a block that saves its attribute values as post meta, that can be accessed programmatically anywhere in your template.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This guide shows how to create a block that prompts a user for a single value, and saves it to post meta.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Before you start<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This guide assumes you are already familiar with WordPress plugins, post meta, and basic JavaScript. Review the <a href=\"\/docs\/how-to-guides\/javascript\/README.md\">Getting started with JavaScript tutorial<\/a> for an introduction.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The guide will walk through creating a basic block, but recommended to go through the <a href=\"\/docs\/getting-started\/devenv\/get-started-with-create-block.md\">Create Block tutorial<\/a> for a deeper understanding of creating custom blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You will need:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>WordPress development environment,<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>A minimal plugin activated and ready to edit<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>JavaScript setup for building and enqueuing<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>A <a href=\"https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/meta-block-bb1e55\">complete meta-block example<\/a> is available that you can use as a reference for your setup.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Step-by-step guide<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"#step-1-register-meta-field\">Register Meta Field<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#step-2-add-meta-block\">Add Meta Block<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#step-3-use-post-meta-data\">Use Post Meta Data<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"#step-4-use-block-templates-optional\">Finishing Touches<\/a><\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 1: Register meta field<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A post meta field is a WordPress object used to store extra data about a post. You need to first register a new meta field prior to use. See Managing <a href=\"https:\/\/developer.wordpress.org\/plugins\/metadata\/managing-post-metadata\/\">Post Metadata<\/a> to learn more about post meta.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When registering the field, note the <code>show_in_rest<\/code> parameter. This ensures the data will be included in the REST API, which the block editor uses to load and save meta data. See the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/register_post_meta\/\"><code>register_post_meta<\/code><\/a> function definition for extra information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Additionally, your post type needs to support <code>custom-fields<\/code> for <code>register_post_meta<\/code> function to work<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To register the field, add the following to your PHP plugin:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/\/ register custom meta tag field\nfunction myguten_register_post_meta() {\n\tregister_post_meta( 'post', 'myguten_meta_block_field', array(\n\t\t'show_in_rest' => true,\n\t\t'single' => true,\n\t\t'type' => 'string',\n\t) );\n}\nadd_action( 'init', 'myguten_register_post_meta' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 2: Add meta block<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>With the meta field registered in the previous step, next create a new block to display the field value to the user.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The hook <code>useEntityProp<\/code> can be used by the blocks to get or change meta values.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Add this code to the JavaScript <code>src\/index.js<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { registerBlockType } from '@wordpress\/blocks';\nimport { TextControl } from '@wordpress\/components';\nimport { useSelect } from '@wordpress\/data';\nimport { useEntityProp } from '@wordpress\/core-data';\nimport { useBlockProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'myguten\/meta-block', {\n\tedit: ( { setAttributes, attributes } ) => {\n\t\tconst blockProps = useBlockProps();\n\t\tconst postType = useSelect(\n\t\t\t( select ) => select( 'core\/editor' ).getCurrentPostType(),\n\t\t\t&#91;]\n\t\t);\n\n\t\tconst &#91; meta, setMeta ] = useEntityProp( 'postType', postType, 'meta' );\n\n\t\tconst metaFieldValue = meta&#91; 'myguten_meta_block_field' ];\n\t\tconst updateMetaValue = ( newValue ) => {\n\t\t\tsetMeta( { ...meta, myguten_meta_block_field: newValue } );\n\t\t};\n\n\t\treturn (\n\t\t\t<div {=\"\" ...blockprops=\"\" }=\"\">\n\t\t\t\t<textcontrol<br>\t\t\t\t\tlabel=\"Meta Block Field\"\n\t\t\t\t\tvalue={ metaFieldValue }\n\t\t\t\t\tonChange={ updateMetaValue }\n\t\t\t\t\/>\n\t\t\t<\/textcontrol<br><\/div>\n\t\t);\n\t},\n\n\t\/\/ No information saved to the block.\n\t\/\/ Data is saved to post meta via the hook.\n\tsave: () => {\n\t\treturn null;\n\t},\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Confirm this works by creating a post and add the Meta Block. You will see your field that you can type a value in. When you save the post, either as a draft or published, the post meta value will be saved too. You can verify by<br>saving and reloading your draft, the form will still be filled in on reload.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You could also confirm the data is saved by checking the database table <code>wp_postmeta<\/code> and confirm the new post id contains the new field data.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Troubleshooting<\/strong>: Be sure to build your code between changes, you updated the PHP code from Step 1, and JavaScript files are enqueued. Check the build output and developer console for errors.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 3: Use post meta data<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You can use the post meta data stored in the last step in multiple ways.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Use post meta in PHP<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The first example uses the value from the post meta field and appends it to the end of the post content wrapped in a <code>H4<\/code> tag.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function myguten_content_filter( $content ) {\n\t$value = get_post_meta( get_the_ID(), 'myguten_meta_block_field', true );\n\tif ( $value ) {\n\t\treturn sprintf( \"%s <h4> %s <\/h4>\", $content, esc_html( $value ) );\n\t} else {\n\t\treturn $content;\n\t}\n}\nadd_filter( 'the_content', 'myguten_content_filter' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Use post meta in a block<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You can also use the post meta data in other blocks. For this example the data is loaded at the end of every Paragraph block when it is rendered, ie. shown to the user. You can replace this for any core or custom block types as needed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In PHP, use the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/register_block_type\/\">register_block_type<\/a> function to set a callback when the block is rendered to include the meta value.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function myguten_render_paragraph( $block_attributes, $content ) {\n\t$value = get_post_meta( get_the_ID(), 'myguten_meta_block_field', true );\n\t\/\/ check value is set before outputting\n\tif ( $value ) {\n\t\treturn sprintf( \"%s (%s)\", $content, esc_html( $value ) );\n\t} else {\n\t\treturn $content;\n\t}\n}\n\nregister_block_type( 'core\/paragraph', array(\n\t'api_version' => 3,\n\t'render_callback' => 'myguten_render_paragraph',\n) );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Step 4: Use block templates (optional)<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>One problem using a meta block is the block is easy for an author to forget, since it requires being added to each post. You solve this by using <a href=\"\/docs\/reference-guides\/block-api\/block-templates.md\">block templates<\/a>. A block template is a predefined list of block items per post type. Templates allow you to specify a default initial state for a post type.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For this example, you use a template to automatically insert the meta block at the top of a post.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Add the following code to the <code>myguten-meta-block.php<\/code> file:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function myguten_register_template() {\n    $post_type_object = get_post_type_object( 'post' );\n    $post_type_object->template = array(\n        array( 'myguten\/meta-block' ),\n    );\n}\nadd_action( 'init', 'myguten_register_template' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can also add other block types in the array, including placeholders, or even lock down a post to a set of specific blocks. Templates are a powerful tool for controlling the editing experience, see the documentation linked above for more.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This guide showed how using blocks you can read and write to post meta. See the section below for backward compatibility with existing meta boxes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Backward compatibility<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Testing, converting, and maintaining existing meta boxes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Before converting meta boxes to blocks, it may be easier to test if a meta box works with the block editor, and explicitly mark it as such.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If a meta box <em>doesn't<\/em> work with the block editor, and updating it to work correctly is not an option, the next step is to add the <code>__block_editor_compatible_meta_box<\/code> argument to the meta box declaration:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_meta_box( 'my-meta-box', 'My Meta Box', 'my_meta_box_callback',\n\tnull, 'normal', 'high',\n\tarray(\n\t\t'__block_editor_compatible_meta_box' => false,\n\t)\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>WordPress won't show the meta box but a message saying that it isn't compatible with the block editor, including a link to the Classic Editor plugin. By default, <code>__block_editor_compatible_meta_box<\/code> is <code>true<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After a meta box is converted to a block, it can be declared as existing for backward compatibility:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_meta_box( 'my-meta-box', 'My Meta Box', 'my_meta_box_callback',\n\tnull, 'normal', 'high',\n\tarray(\n\t\t'__back_compat_meta_box' => true,\n\t)\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When the block editor is used, this meta box will no longer be displayed in the meta box area, as it now only exists for backward compatibility purposes. It will display as before in the classic editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Meta box data collection<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>On each block editor page load, we register an action that collects the meta box data to determine if an area is empty. The original global state is reset upon collection of meta box data.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>See <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/register_and_do_post_meta_boxes\/\"><code>register_and_do_post_meta_boxes<\/code><\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It will run through the functions and hooks that <code>post.php<\/code> runs to register meta boxes; namely <code>add_meta_boxes<\/code>, <code>add_meta_boxes_{$post->post_type}<\/code>, and <code>do_meta_boxes<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Meta boxes are filtered to strip out any core meta boxes, standard custom taxonomy meta boxes, and any meta boxes that have declared themselves as only existing for backward compatibility purposes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then each location for this particular type of meta box is checked for whether it is active. If it is not empty a value of true is stored, if it is empty a value of false is stored. This meta box location data is then dispatched by the editor Redux store in <code>INITIALIZE_META_BOX_STATE<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Ideally, this could be done at instantiation of the editor and help simplify this flow. However, it is not possible to know the meta box state before <code>admin_enqueue_scripts<\/code>, where we are calling <code>initializeEditor()<\/code>. This will have to do, unless we want to move <code>initializeEditor()<\/code> to fire in the footer or at some point after <code>admin_head<\/code>. With recent changes to editor bootstrapping this might now be possible. Test with ACF to make sure.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Redux and React meta box management<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When rendering the block editor, the meta boxes are rendered to a hidden div <code>#metaboxes<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>The Redux store will hold all meta boxes as inactive by default<\/em>. When<br><code>INITIALIZE_META_BOX_STATE<\/code> comes in, the store will update any active meta box areas by setting the <code>isActive<\/code> flag to <code>true<\/code>. Once this happens React will check for the new props sent in by Redux on the <code>MetaBox<\/code> component. If that <code>MetaBox<\/code> is now active, instead of rendering null, a <code>MetaBoxArea<\/code> component will be rendered. The <code>MetaBox<\/code> component is the container component that mediates between the <code>MetaBoxArea<\/code> and the Redux Store. <em>If no meta boxes are active, nothing happens. This will be the default behavior, as all core meta boxes have been stripped.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">MetaBoxArea component<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When the component renders it will store a reference to the meta boxes container and retrieve the meta boxes HTML from the prefetch location.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When the post is updated, only meta box areas that are active will be submitted. This prevents unnecessary requests. No extra revisions are created by the meta box submissions. A Redux action will trigger on <code>REQUEST_POST_UPDATE<\/code> for any active meta box. See <code>editor\/effects.js<\/code>. The <code>REQUEST_META_BOX_UPDATES<\/code> action will set that meta box's state to <code>isUpdating<\/code>. The <code>isUpdating<\/code> prop will be sent into the <code>MetaBoxArea<\/code> and cause a form submission.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When the meta box area is saving, we display an updating overlay, to prevent users from changing the form values while a save is in progress.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>An example save url would look like:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>mysite.com\/wp-admin\/post.php?post=1&amp;action=edit&amp;meta-box-loader=1<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This url is automatically passed into React via a <code>_wpMetaBoxUrl<\/code> global variable.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This page mimics the <code>post.php<\/code> post form, so when it is submitted it will fire all of the normal hooks and actions, and have the proper global state to correctly fire any PHP meta box mumbo jumbo without needing to modify any existing code. On successful submission, React will signal a <code>handleMetaBoxReload<\/code> to remove the updating overlay.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Common compatibility issues<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Most PHP meta boxes should continue to work in the block editor, but some meta boxes that include advanced functionality could break. Here are some common reasons why meta boxes might not work as expected in the block editor:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Plugins relying on selectors that target the post title, post content fields, and other metaboxes (of the old editor).<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Plugins relying on TinyMCE's API because there's no longer a single TinyMCE instance to talk to in the block editor.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Plugins making updates to their DOM on \"submit\" or on \"save\".<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Please also note that if your plugin triggers a PHP warning or notice to be output on the page, this will cause the HTML document type (<code>&lt;!DOCTYPE html><\/code>) to be output incorrectly. This will cause the browser to render using \"Quirks Mode\", which is a compatibility layer that gets enabled when the browser doesn't know what type of document it is parsing. The block editor is not meant to work in this mode, but it can <em>appear<\/em> to be working just fine. If you encounter issues such as <em>meta boxes overlaying the editor<\/em> or other layout issues, please check the raw page source of your document to see that the document type definition is the first thing output on the page. There will also be a warning in the JavaScript console, noting the issue.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Meta Boxes\n\n## Overview\n\nPrior to the block editor, custom meta boxes were used to extend the editor. Now there are new ways to extend, giving more power to the developer and a better experience for the authors. It is recommended to port older custom meta boxes to one of these new methods to create a more unified and consistent experience for those using the editor.\n\nThe block editor does support most existing meta boxes, see [the backward compatibility section below](#backward-compatibility) for details .\n\nIf you are interested in working with the post meta outside the editor, check out the [Sidebar Tutorial](\/docs\/how-to-guides\/sidebar-tutorial\/plugin-sidebar-0.md).\n\n### Use blocks to store meta\n\nTypically, blocks store attribute values in the serialized block HTML. However, you can also create a block that saves its attribute values as post meta, that can be accessed programmatically anywhere in your template.\n\nThis guide shows how to create a block that prompts a user for a single value, and saves it to post meta.\n\n## Before you start\n\nThis guide assumes you are already familiar with WordPress plugins, post meta, and basic JavaScript. Review the [Getting started with JavaScript tutorial](\/docs\/how-to-guides\/javascript\/README.md) for an introduction.\n\nThe guide will walk through creating a basic block, but recommended to go through the [Create Block tutorial](\/docs\/getting-started\/devenv\/get-started-with-create-block.md) for a deeper understanding of creating custom blocks.\n\nYou will need:\n\n-   WordPress development environment,\n-   A minimal plugin activated and ready to edit\n-   JavaScript setup for building and enqueuing\n\nA [complete meta-block example](https:\/\/github.com\/WordPress\/block-development-examples\/tree\/trunk\/plugins\/meta-block-bb1e55) is available that you can use as a reference for your setup.\n\n## Step-by-step guide\n\n1. [Register Meta Field](#step-1-register-meta-field)\n2. [Add Meta Block](#step-2-add-meta-block)\n3. [Use Post Meta Data](#step-3-use-post-meta-data)\n4. [Finishing Touches](#step-4-use-block-templates-optional)\n\n### Step 1: Register meta field\n\nA post meta field is a WordPress object used to store extra data about a post. You need to first register a new meta field prior to use. See Managing [Post Metadata](https:\/\/developer.wordpress.org\/plugins\/metadata\/managing-post-metadata\/) to learn more about post meta.\n\nWhen registering the field, note the `show_in_rest` parameter. This ensures the data will be included in the REST API, which the block editor uses to load and save meta data. See the [`register_post_meta`](https:\/\/developer.wordpress.org\/reference\/functions\/register_post_meta\/) function definition for extra information.\n\nAdditionally, your post type needs to support `custom-fields` for `register_post_meta` function to work\n\nTo register the field, add the following to your PHP plugin:\n\n```php\n<?php\n\/\/ register custom meta tag field\nfunction myguten_register_post_meta() {\n\tregister_post_meta( 'post', 'myguten_meta_block_field', array(\n\t\t'show_in_rest' => true,\n\t\t'single' => true,\n\t\t'type' => 'string',\n\t) );\n}\nadd_action( 'init', 'myguten_register_post_meta' );\n```\n\n### Step 2: Add meta block\n\nWith the meta field registered in the previous step, next create a new block to display the field value to the user.\n\nThe hook `useEntityProp` can be used by the blocks to get or change meta values.\n\nAdd this code to the JavaScript `src\/index.js`:\n\n```js\nimport { registerBlockType } from '@wordpress\/blocks';\nimport { TextControl } from '@wordpress\/components';\nimport { useSelect } from '@wordpress\/data';\nimport { useEntityProp } from '@wordpress\/core-data';\nimport { useBlockProps } from '@wordpress\/block-editor';\n\nregisterBlockType( 'myguten\/meta-block', {\n\tedit: ( { setAttributes, attributes } ) => {\n\t\tconst blockProps = useBlockProps();\n\t\tconst postType = useSelect(\n\t\t\t( select ) => select( 'core\/editor' ).getCurrentPostType(),\n\t\t\t[]\n\t\t);\n\n\t\tconst [ meta, setMeta ] = useEntityProp( 'postType', postType, 'meta' );\n\n\t\tconst metaFieldValue = meta[ 'myguten_meta_block_field' ];\n\t\tconst updateMetaValue = ( newValue ) => {\n\t\t\tsetMeta( { ...meta, myguten_meta_block_field: newValue } );\n\t\t};\n\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<TextControl\n\t\t\t\t\tlabel=\"Meta Block Field\"\n\t\t\t\t\tvalue={ metaFieldValue }\n\t\t\t\t\tonChange={ updateMetaValue }\n\t\t\t\t\/>\n\t\t\t<\/div>\n\t\t);\n\t},\n\n\t\/\/ No information saved to the block.\n\t\/\/ Data is saved to post meta via the hook.\n\tsave: () => {\n\t\treturn null;\n\t},\n} );\n```\n\nConfirm this works by creating a post and add the Meta Block. You will see your field that you can type a value in. When you save the post, either as a draft or published, the post meta value will be saved too. You can verify by\nsaving and reloading your draft, the form will still be filled in on reload.\n\nYou could also confirm the data is saved by checking the database table `wp_postmeta` and confirm the new post id contains the new field data.\n\n**Troubleshooting**: Be sure to build your code between changes, you updated the PHP code from Step 1, and JavaScript files are enqueued. Check the build output and developer console for errors.\n\n### Step 3: Use post meta data\n\nYou can use the post meta data stored in the last step in multiple ways.\n\n#### Use post meta in PHP\n\nThe first example uses the value from the post meta field and appends it to the end of the post content wrapped in a `H4` tag.\n\n```php\nfunction myguten_content_filter( $content ) {\n\t$value = get_post_meta( get_the_ID(), 'myguten_meta_block_field', true );\n\tif ( $value ) {\n\t\treturn sprintf( \"%s <h4> %s <\/h4>\", $content, esc_html( $value ) );\n\t} else {\n\t\treturn $content;\n\t}\n}\nadd_filter( 'the_content', 'myguten_content_filter' );\n```\n\n#### Use post meta in a block\n\nYou can also use the post meta data in other blocks. For this example the data is loaded at the end of every Paragraph block when it is rendered, ie. shown to the user. You can replace this for any core or custom block types as needed.\n\nIn PHP, use the [register_block_type](https:\/\/developer.wordpress.org\/reference\/functions\/register_block_type\/) function to set a callback when the block is rendered to include the meta value.\n\n```php\nfunction myguten_render_paragraph( $block_attributes, $content ) {\n\t$value = get_post_meta( get_the_ID(), 'myguten_meta_block_field', true );\n\t\/\/ check value is set before outputting\n\tif ( $value ) {\n\t\treturn sprintf( \"%s (%s)\", $content, esc_html( $value ) );\n\t} else {\n\t\treturn $content;\n\t}\n}\n\nregister_block_type( 'core\/paragraph', array(\n\t'api_version' => 3,\n\t'render_callback' => 'myguten_render_paragraph',\n) );\n```\n\n### Step 4: Use block templates (optional)\n\nOne problem using a meta block is the block is easy for an author to forget, since it requires being added to each post. You solve this by using [block templates](\/docs\/reference-guides\/block-api\/block-templates.md). A block template is a predefined list of block items per post type. Templates allow you to specify a default initial state for a post type.\n\nFor this example, you use a template to automatically insert the meta block at the top of a post.\n\nAdd the following code to the `myguten-meta-block.php` file:\n\n```php\nfunction myguten_register_template() {\n    $post_type_object = get_post_type_object( 'post' );\n    $post_type_object->template = array(\n        array( 'myguten\/meta-block' ),\n    );\n}\nadd_action( 'init', 'myguten_register_template' );\n```\n\nYou can also add other block types in the array, including placeholders, or even lock down a post to a set of specific blocks. Templates are a powerful tool for controlling the editing experience, see the documentation linked above for more.\n\n## Conclusion\n\nThis guide showed how using blocks you can read and write to post meta. See the section below for backward compatibility with existing meta boxes.\n\n## Backward compatibility\n\n### Testing, converting, and maintaining existing meta boxes\n\nBefore converting meta boxes to blocks, it may be easier to test if a meta box works with the block editor, and explicitly mark it as such.\n\nIf a meta box _doesn't_ work with the block editor, and updating it to work correctly is not an option, the next step is to add the `__block_editor_compatible_meta_box` argument to the meta box declaration:\n\n```php\nadd_meta_box( 'my-meta-box', 'My Meta Box', 'my_meta_box_callback',\n\tnull, 'normal', 'high',\n\tarray(\n\t\t'__block_editor_compatible_meta_box' => false,\n\t)\n);\n```\n\nWordPress won't show the meta box but a message saying that it isn't compatible with the block editor, including a link to the Classic Editor plugin. By default, `__block_editor_compatible_meta_box` is `true`.\n\nAfter a meta box is converted to a block, it can be declared as existing for backward compatibility:\n\n```php\nadd_meta_box( 'my-meta-box', 'My Meta Box', 'my_meta_box_callback',\n\tnull, 'normal', 'high',\n\tarray(\n\t\t'__back_compat_meta_box' => true,\n\t)\n);\n```\n\nWhen the block editor is used, this meta box will no longer be displayed in the meta box area, as it now only exists for backward compatibility purposes. It will display as before in the classic editor.\n\n### Meta box data collection\n\nOn each block editor page load, we register an action that collects the meta box data to determine if an area is empty. The original global state is reset upon collection of meta box data.\n\nSee [`register_and_do_post_meta_boxes`](https:\/\/developer.wordpress.org\/reference\/functions\/register_and_do_post_meta_boxes\/).\n\nIt will run through the functions and hooks that `post.php` runs to register meta boxes; namely `add_meta_boxes`, `add_meta_boxes_{$post->post_type}`, and `do_meta_boxes`.\n\nMeta boxes are filtered to strip out any core meta boxes, standard custom taxonomy meta boxes, and any meta boxes that have declared themselves as only existing for backward compatibility purposes.\n\nThen each location for this particular type of meta box is checked for whether it is active. If it is not empty a value of true is stored, if it is empty a value of false is stored. This meta box location data is then dispatched by the editor Redux store in `INITIALIZE_META_BOX_STATE`.\n\nIdeally, this could be done at instantiation of the editor and help simplify this flow. However, it is not possible to know the meta box state before `admin_enqueue_scripts`, where we are calling `initializeEditor()`. This will have to do, unless we want to move `initializeEditor()` to fire in the footer or at some point after `admin_head`. With recent changes to editor bootstrapping this might now be possible. Test with ACF to make sure.\n\n### Redux and React meta box management\n\nWhen rendering the block editor, the meta boxes are rendered to a hidden div `#metaboxes`.\n\n_The Redux store will hold all meta boxes as inactive by default_. When\n`INITIALIZE_META_BOX_STATE` comes in, the store will update any active meta box areas by setting the `isActive` flag to `true`. Once this happens React will check for the new props sent in by Redux on the `MetaBox` component. If that `MetaBox` is now active, instead of rendering null, a `MetaBoxArea` component will be rendered. The `MetaBox` component is the container component that mediates between the `MetaBoxArea` and the Redux Store. _If no meta boxes are active, nothing happens. This will be the default behavior, as all core meta boxes have been stripped._\n\n#### MetaBoxArea component\n\nWhen the component renders it will store a reference to the meta boxes container and retrieve the meta boxes HTML from the prefetch location.\n\nWhen the post is updated, only meta box areas that are active will be submitted. This prevents unnecessary requests. No extra revisions are created by the meta box submissions. A Redux action will trigger on `REQUEST_POST_UPDATE` for any active meta box. See `editor\/effects.js`. The `REQUEST_META_BOX_UPDATES` action will set that meta box's state to `isUpdating`. The `isUpdating` prop will be sent into the `MetaBoxArea` and cause a form submission.\n\nWhen the meta box area is saving, we display an updating overlay, to prevent users from changing the form values while a save is in progress.\n\nAn example save url would look like:\n\n`mysite.com\/wp-admin\/post.php?post=1&action=edit&meta-box-loader=1`\n\nThis url is automatically passed into React via a `_wpMetaBoxUrl` global variable.\n\nThis page mimics the `post.php` post form, so when it is submitted it will fire all of the normal hooks and actions, and have the proper global state to correctly fire any PHP meta box mumbo jumbo without needing to modify any existing code. On successful submission, React will signal a `handleMetaBoxReload` to remove the updating overlay.\n\n### Common compatibility issues\n\nMost PHP meta boxes should continue to work in the block editor, but some meta boxes that include advanced functionality could break. Here are some common reasons why meta boxes might not work as expected in the block editor:\n\n-   Plugins relying on selectors that target the post title, post content fields, and other metaboxes (of the old editor).\n-   Plugins relying on TinyMCE's API because there's no longer a single TinyMCE instance to talk to in the block editor.\n-   Plugins making updates to their DOM on \"submit\" or on \"save\".\n\nPlease also note that if your plugin triggers a PHP warning or notice to be output on the page, this will cause the HTML document type (`<!DOCTYPE html>`) to be output incorrectly. This will cause the browser to render using \"Quirks Mode\", which is a compatibility layer that gets enabled when the browser doesn't know what type of document it is parsing. The block editor is not meant to work in this mode, but it can _appear_ to be working just fine. If you encounter issues such as _meta boxes overlaying the editor_ or other layout issues, please check the raw page source of your document to see that the document type definition is the first thing output on the page. There will also be a warning in the JavaScript console, noting the issue.\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/themes\/global-settings-and-styles.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Global Settings &amp; Styles (theme.json)<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>WordPress 5.8 comes with <a href=\"https:\/\/make.wordpress.org\/core\/2021\/06\/25\/introducing-theme-json-in-wordpress-5-8\/\">a new mechanism<\/a> to configure the editor that enables a finer-grained control and introduces the first step in managing styles for future WordPress releases: the <code>theme.json<\/code> file. Then <code>theme.json<\/code> <a href=\"https:\/\/make.wordpress.org\/core\/2022\/01\/08\/updates-for-settings-styles-and-theme-json\/\">evolved to a v2<\/a> with WordPress 5.9 release. This page documents its format.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Rationale<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Block Editor API has evolved at different velocities and there are some growing pains, specially in areas that affect themes. Examples of this are: the ability to <a href=\"https:\/\/make.wordpress.org\/core\/2020\/01\/23\/controlling-the-block-editor\/\">control the editor programmatically<\/a>, or <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\/9534\">a block style system<\/a> that facilitates user, theme, and core style preferences.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This describes the current efforts to consolidate the various APIs related to styles into a single point \u2013 a <code>theme.json<\/code> file that should be located inside the root of the theme directory.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Settings for the block editor<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Instead of the proliferation of theme support flags or alternative methods, the <code>theme.json<\/code> files provides a canonical way to define the settings of the block editor. These settings includes things like:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>What customization options should be made available or hidden from the user.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>What are the default colors, font sizes... available to the user.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Defines the default layout of the editor (widths and available alignments).<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Settings can be controlled per block<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For more granularity, these settings also work at the block level in <code>theme.json<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Examples of what can be achieved are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Use a particular preset for a block (e.g.: table) but the common one for the rest of blocks.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Enable font size UI controls for all blocks but the headings block.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>etc.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Styles are managed<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>By using the <code>theme.json<\/code> file to set style properties in a structured way, the Block Editor can \"manage\" the CSS that comes from different origins (user, theme, and core CSS). For example, if a theme and a user set the font size for paragraphs, we only enqueue the style coming from the user and not the theme's.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some of the advantages are:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Reduce the amount of CSS enqueued.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Prevent specificity wars.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">CSS Custom Properties: presets &amp; custom<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There are some areas of styling that would benefit from having shared values that can change across a site.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To address this need, we've started to experiment with CSS Custom Properties, aka CSS Variables, in some places:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Presets<\/strong>: <a href=\"\/docs\/how-to-guides\/themes\/theme-support.md#block-color-palettes\">color palettes<\/a>, <a href=\"\/docs\/how-to-guides\/themes\/theme-support.md#block-font-sizes\">font sizes<\/a>, or <a href=\"\/docs\/how-to-guides\/themes\/theme-support.md#block-gradient-presets\">gradients<\/a> declared by the theme are converted to CSS Custom Properties and enqueued both the front-end and the editors.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>{% codetabs %}<br>{% Input %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"palette\": &#91;\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Black\",\n\t\t\t\t\t\"slug\": \"black\",\n\t\t\t\t\t\"color\": \"#000000\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"White\",\n\t\t\t\t\t\"slug\": \"white\",\n\t\t\t\t\t\"color\": \"#ffffff\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% Output %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>body {\n\t--wp--preset--color--black: #000000;\n\t--wp--preset--color--white: #ffffff;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% end %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Custom properties<\/strong>: there's also a mechanism to create your own CSS Custom Properties.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>{% codetabs %}<br>{% Input %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"custom\": {\n\t\t\t\"line-height\": {\n\t\t\t\t\"body\": 1.7,\n\t\t\t\t\"heading\": 1.3\n\t\t\t}\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% Output %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>body {\n\t--wp--custom--line-height--body: 1.7;\n\t--wp--custom--line-height--heading: 1.3;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% end %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Specification<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This specification is the same for the three different origins that use this format: core, themes, and users. Themes can override core's defaults by creating a file called <code>theme.json<\/code>. Users, via the site editor, will also be able to override theme's or core's preferences via an user interface that is being worked on.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 2,\n\t\"settings\": {},\n\t\"styles\": {},\n\t\"customTemplates\": {},\n\t\"templateParts\": {}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Version<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This field describes the format of the <code>theme.json<\/code> file. The current version is <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/theme-json-living\/\">v2<\/a>, <a href=\"https:\/\/make.wordpress.org\/core\/2022\/01\/08\/updates-for-settings-styles-and-theme-json\/\">introduced in WordPress 5.9<\/a>. It also works with the current Gutenberg plugin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you have used <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/theme-json-v1\/\">v1<\/a> previously, you don\u2019t need to update the version in the v1 file to v2, as it\u2019ll be <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/theme-json-migrations\/\">migrated<\/a> into v2 at runtime for you.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Settings<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<div class=\"callout callout-alert\">\nThe Gutenberg plugin extends the settings available from WordPress 5.8, so they can be used with other WordPress versions and they go through a maturation process before being ported to core.\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>The tabs below show WordPress 5.8 supported settings and the ones supported by the Gutenberg plugin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>The settings section has the following structure:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>{% codetabs %}<br>{% WordPress %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"border\": {\n\t\t\t\"radius\": false,\n\t\t\t\"color\": false,\n\t\t\t\"style\": false,\n\t\t\t\"width\": false\n\t\t},\n\t\t\"color\": {\n\t\t\t\"custom\": true,\n\t\t\t\"customDuotone\": true,\n\t\t\t\"customGradient\": true,\n\t\t\t\"duotone\": &#91;],\n\t\t\t\"gradients\": &#91;],\n\t\t\t\"link\": false,\n\t\t\t\"palette\": &#91;],\n\t\t\t\"text\": true,\n\t\t\t\"background\": true,\n\t\t\t\"defaultGradients\": true,\n\t\t\t\"defaultPalette\": true\n\t\t},\n\t\t\"custom\": {},\n\t\t\"layout\": {\n\t\t\t\"contentSize\": \"800px\",\n\t\t\t\"wideSize\": \"1000px\"\n\t\t},\n\t\t\"spacing\": {\n\t\t\t\"margin\": false,\n\t\t\t\"padding\": false,\n\t\t\t\"blockGap\": null,\n\t\t\t\"units\": &#91; \"px\", \"em\", \"rem\", \"vh\", \"vw\" ]\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"customFontSize\": true,\n\t\t\t\"lineHeight\": false,\n\t\t\t\"dropCap\": true,\n\t\t\t\"fluid\": false,\n\t\t\t\"fontStyle\": true,\n\t\t\t\"fontWeight\": true,\n\t\t\t\"letterSpacing\": true,\n\t\t\t\"textDecoration\": true,\n\t\t\t\"textTransform\": true,\n\t\t\t\"fontSizes\": &#91;],\n\t\t\t\"fontFamilies\": &#91;]\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/paragraph\": {\n\t\t\t\t\"color\": {},\n\t\t\t\t\"custom\": {},\n\t\t\t\t\"layout\": {},\n\t\t\t\t\"spacing\": {},\n\t\t\t\t\"typography\": {}\n\t\t\t},\n\t\t\t\"core\/heading\": {},\n\t\t\t\"etc\": {}\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% Gutenberg %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"appearanceTools\": false,\n\t\t\"border\": {\n\t\t\t\"color\": false,\n\t\t\t\"radius\": false,\n\t\t\t\"style\": false,\n\t\t\t\"width\": false\n\t\t},\n\t\t\"color\": {\n\t\t\t\"background\": true,\n\t\t\t\"custom\": true,\n\t\t\t\"customDuotone\": true,\n\t\t\t\"customGradient\": true,\n\t\t\t\"defaultGradients\": true,\n\t\t\t\"defaultPalette\": true,\n\t\t\t\"duotone\": &#91;],\n\t\t\t\"gradients\": &#91;],\n\t\t\t\"link\": false,\n\t\t\t\"palette\": &#91;],\n\t\t\t\"text\": true\n\t\t},\n\t\t\"custom\": {},\n\t\t\"dimensions\": {\n\t\t\t\"aspectRatio\": false,\n\t\t\t\"minHeight\": false,\n\t\t},\n\t\t\"layout\": {\n\t\t\t\"contentSize\": \"800px\",\n\t\t\t\"wideSize\": \"1000px\"\n\t\t},\n\t\t\"spacing\": {\n\t\t\t\"blockGap\": null,\n\t\t\t\"margin\": false,\n\t\t\t\"padding\": false,\n\t\t\t\"customSpacingSize\": true,\n\t\t\t\"units\": &#91; \"px\", \"em\", \"rem\", \"vh\", \"vw\" ],\n\t\t\t\"spacingScale\": {\n\t\t\t\t\"operator\": \"*\",\n\t\t\t\t\"increment\": 1.5,\n\t\t\t\t\"steps\": 7,\n\t\t\t\t\"mediumStep\": 1.5,\n\t\t\t\t\"unit\": \"rem\"\n\t\t\t},\n\t\t\t\"spacingSizes\": &#91;]\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"customFontSize\": true,\n\t\t\t\"dropCap\": true,\n\t\t\t\"fluid\": false,\n\t\t\t\"fontFamilies\": &#91;],\n\t\t\t\"fontSizes\": &#91;],\n\t\t\t\"fontStyle\": true,\n\t\t\t\"fontWeight\": true,\n\t\t\t\"letterSpacing\": true,\n\t\t\t\"lineHeight\": false,\n\t\t\t\"textColumns\": false,\n\t\t\t\"textDecoration\": true,\n\t\t\t\"textTransform\": true\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/paragraph\": {\n\t\t\t\t\"border\": {},\n\t\t\t\t\"color\": {},\n\t\t\t\t\"custom\": {},\n\t\t\t\t\"layout\": {},\n\t\t\t\t\"spacing\": {},\n\t\t\t\t\"typography\": {}\n\t\t\t},\n\t\t\t\"core\/heading\": {},\n\t\t\t\"etc\": {}\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% end %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Each block can configure any of these settings separately, providing a more fine-grained control over what exists via <code>add_theme_support<\/code>. The settings declared at the top-level affect to all blocks, unless a particular block overwrites it. It's a way to provide inheritance and configure all blocks at once.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note, however, that not all settings are relevant for all blocks. The settings section provides an opt-in\/opt-out mechanism for themes, but it's the block's responsibility to add support for the features that are relevant to it. For example, if a block doesn't implement the <code>dropCap<\/code> feature, a theme can't enable it for such a block through <code>theme.json<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Opt-in into UI controls<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There's one special setting property, <code>appearanceTools<\/code>, which is a boolean and its default value is false. Themes can use this setting to enable the following ones:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>background: backgroundImage, backgroundSize<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>border: color, radius, style, width<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>color: link<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>dimensions: aspectRatio, minHeight<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>position: sticky<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>spacing: blockGap, margin, padding<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>typography: lineHeight<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Backward compatibility with add_theme_support<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To retain backward compatibility, the existing <code>add_theme_support<\/code> declarations that configure the block editor are retrofit in the proper categories for the top-level section. For example, if a theme uses <code>add_theme_support('disable-custom-colors')<\/code>, it'll be the same as setting <code>settings.color.custom<\/code> to <code>false<\/code>. If the <code>theme.json<\/code> contains any settings, these will take precedence over the values declared via <code>add_theme_support<\/code>. This is the complete list of equivalences:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>| add_theme_support           | theme.json setting                                        |<br>| --------------------------- | --------------------------------------------------------- |<br>| <code>custom-line-height<\/code>        | Set <code>typography.lineHeight<\/code> to <code>true<\/code>.              |<br>| <code>custom-spacing<\/code>            | Set <code>spacing.padding<\/code> to <code>true<\/code>.                    |<br>| <code>custom-units<\/code>              | Provide the list of units via <code>spacing.units<\/code>.            |<br>| <code>disable-custom-colors<\/code>     | Set <code>color.custom<\/code> to <code>false<\/code>.                            |<br>| <code>disable-custom-font-sizes<\/code> | Set <code>typography.customFontSize<\/code> to <code>false<\/code>.               |<br>| <code>disable-custom-gradients<\/code>  | Set <code>color.customGradient<\/code> to <code>false<\/code>.                    |<br>| <code>editor-color-palette<\/code>      | Provide the list of colors via <code>color.palette<\/code>.           |<br>| <code>editor-font-sizes<\/code>         | Provide the list of font size via <code>typography.fontSizes<\/code>. |<br>| <code>editor-gradient-presets<\/code>   | Provide the list of gradients via <code>color.gradients<\/code>.      |<br>| <code>appearance-tools<\/code>          | Set <code>appearanceTools<\/code> to <code>true<\/code>.                          |<br>| <code>border<\/code>                    | Set <code>border: color, radius, style, width<\/code> to <code>true<\/code>.      |<br>| <code>link-color <\/code>               | Set <code>color.link<\/code> to <code>true<\/code>.                               |<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Presets<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Presets are part of the settings section. They are values that are shown to the user via some UI controls. By defining them via <code>theme.json<\/code> the engine can do more for themes, such as automatically translate the preset name or enqueue the corresponding CSS classes and custom properties.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following presets can be defined via <code>theme.json<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>color.duotone<\/code>: doesn't generate classes or custom properties.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>color.gradients<\/code>: generates a single class and custom property per preset value.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>color.palette<\/code>:<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>generates 3 classes per preset value: color, background-color, and border-color.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>generates a single custom property per preset value.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>spacing.spacingScale<\/code>: used to generate an array of spacing preset sizes for use with padding, margin, and gap settings.<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>operator<\/code>: specifies how to calculate the steps with either <code>*<\/code> for multiplier, or <code>+<\/code> for sum.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>increment<\/code>: the amount to increment each step by. Core by default uses a 'perfect 5th' multiplier of <code>1.5<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>steps<\/code>: the number of steps to generate in the spacing scale. The default is 7. To prevent the generation of the spacing presets, and to disable the related UI, this can be set to <code>0<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>mediumStep<\/code>: the steps in the scale are generated descending and ascending from a medium step, so this should be the size value of the medium space, without the unit. The default medium step is <code>1.5rem<\/code> so the mediumStep value is <code>1.5<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>unit<\/code>: the unit the scale uses, eg. <code>px, rem, em, %<\/code>. The default is <code>rem<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>spacing.spacingSizes<\/code>: themes can choose to include a static <code>spacing.spacingSizes<\/code> array of spacing preset sizes if they have a sequence of sizes that can't be generated via an increment or multiplier.<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>name<\/code>: a human readable name for the size, eg. <code>Small, Medium, Large<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>slug<\/code>: the machine readable name. In order to provide the best cross site\/theme compatibility the slugs should be in the format, \"10\",\"20\",\"30\",\"40\",\"50\",\"60\", with \"50\" representing the <code>Medium<\/code> size value.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>size<\/code>: the size, including the unit, eg. <code>1.5rem<\/code>. It is possible to include fluid values like <code>clamp(2rem, 10vw, 20rem)<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>typography.fontSizes<\/code>: generates a single class and custom property per preset value.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>typography.fontFamilies<\/code>: generates a single custom property per preset value.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The naming schema for the classes and the custom properties is as follows:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Custom Properties: <code>--wp--preset--{preset-category}--{preset-slug}<\/code> such as <code>--wp--preset--color--black<\/code><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Classes: <code>.has-{preset-slug}-{preset-category}<\/code> such as <code>.has-black-color<\/code>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>{% codetabs %}<br>{% Input %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"duotone\": &#91;\n\t\t\t\t{\n\t\t\t\t\t\"colors\": &#91; \"#000\", \"#FFF\" ],\n\t\t\t\t\t\"slug\": \"black-and-white\",\n\t\t\t\t\t\"name\": \"Black and White\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"gradients\": &#91;\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"blush-bordeaux\",\n\t\t\t\t\t\"gradient\": \"linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%)\",\n\t\t\t\t\t\"name\": \"Blush bordeaux\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"blush-light-purple\",\n\t\t\t\t\t\"gradient\": \"linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%)\",\n\t\t\t\t\t\"name\": \"Blush light purple\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"palette\": &#91;\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"strong-magenta\",\n\t\t\t\t\t\"color\": \"#a156b4\",\n\t\t\t\t\t\"name\": \"Strong magenta\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"very-dark-grey\",\n\t\t\t\t\t\"color\": \"rgb(131, 12, 8)\",\n\t\t\t\t\t\"name\": \"Very dark grey\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"fontFamilies\": &#91;\n\t\t\t\t{\n\t\t\t\t\t\"fontFamily\": \"-apple-system,BlinkMacSystemFont,\\\"Segoe UI\\\",Roboto,Oxygen-Sans,Ubuntu,Cantarell, \\\"Helvetica Neue\\\",sans-serif\",\n\t\t\t\t\t\"slug\": \"system-font\",\n\t\t\t\t\t\"name\": \"System Font\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"fontFamily\": \"Helvetica Neue, Helvetica, Arial, sans-serif\",\n\t\t\t\t\t\"slug\": \"helvetica-arial\",\n\t\t\t\t\t\"name\": \"Helvetica or Arial\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"fontSizes\": &#91;\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"big\",\n\t\t\t\t\t\"size\": 32,\n\t\t\t\t\t\"name\": \"Big\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"x-large\",\n\t\t\t\t\t\"size\": 46,\n\t\t\t\t\t\"name\": \"Large\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"spacing\": {\n\t\t\t\"spacingScale\": {\n\t\t\t\t\"operator\": \"*\",\n\t\t\t\t\"increment\": 1.5,\n\t\t\t\t\"steps\": 7,\n\t\t\t\t\"mediumStep\": 1.5,\n\t\t\t\t\"unit\": \"rem\"\n\t\t\t},\n\t\t\t\"spacingSizes\": &#91;\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"40\",\n\t\t\t\t\t\"size\": \"1rem\",\n\t\t\t\t\t\"name\": \"Small\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"50\",\n\t\t\t\t\t\"size\": \"1.5rem\",\n\t\t\t\t\t\"name\": \"Medium\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"60\",\n\t\t\t\t\t\"size\": \"2rem\",\n\t\t\t\t\t\"name\": \"Large\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/group\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"palette\": &#91;\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"slug\": \"black\",\n\t\t\t\t\t\t\t\"color\": \"#000000\",\n\t\t\t\t\t\t\t\"name\": \"Black\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"slug\": \"white\",\n\t\t\t\t\t\t\t\"color\": \"#ffffff\",\n\t\t\t\t\t\t\t\"name\": \"White\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% Output %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/* Top-level custom properties *\/\nbody {\n\t--wp--preset--color--strong-magenta: #a156b4;\n\t--wp--preset--color--very-dark-grey: #444;\n\t--wp--preset--gradient--blush-bordeaux: linear-gradient( 135deg, rgb( 254, 205, 165 ) 0%, rgb( 254, 45, 45 ) 50%, rgb( 107, 0, 62 ) 100% );\n\t--wp--preset--gradient--blush-light-purple: linear-gradient( 135deg, rgb( 255, 206, 236 ) 0%, rgb( 152, 150, 240 ) 100% );\n\t--wp--preset--font-size--x-large: 46;\n\t--wp--preset--font-size--big: 32;\n\t--wp--preset--font-family--helvetica-arial: Helvetica Neue, Helvetica, Arial, sans-serif;\n\t--wp--preset--font-family--system: -apple-system,BlinkMacSystemFont,\\\"Segoe UI\\\",Roboto,Oxygen-Sans,Ubuntu,Cantarell, \\\"Helvetica Neue\\\",sans-serif;\n\t--wp--preset--spacing--20: 0.44rem;\n\t--wp--preset--spacing--30: 0.67rem;\n\t--wp--preset--spacing--40: 1rem;\n\t--wp--preset--spacing--50: 1.5rem;\n\t--wp--preset--spacing--60: 2.25rem;\n\t--wp--preset--spacing--70: 3.38rem;\n\t--wp--preset--spacing--80: 5.06rem;\n}\n\n\/* Block-level custom properties (bounded to the group block) *\/\n.wp-block-group {\n\t--wp--preset--color--black: #000000;\n\t--wp--preset--color--white: #ffffff;\n}\n\n\/* Top-level classes *\/\n.has-strong-magenta-color { color: #a156b4 !important; }\n.has-strong-magenta-background-color { background-color: #a156b4 !important; }\n.has-strong-magenta-border-color { border-color: #a156b4 !important; }\n.has-very-dark-grey-color { color: #444 !important; }\n.has-very-dark-grey-background-color { background-color: #444 !important; }\n.has-very-dark-grey-border-color { border-color: #444 !important; }\n.has-blush-bordeaux-background { background: linear-gradient( 135deg, rgb( 254, 205, 165 ) 0%, rgb( 254, 45, 45 ) 50%, rgb( 107, 0, 62 ) 100% ) !important; }\n.has-blush-light-purple-background { background: linear-gradient( 135deg, rgb( 255, 206, 236 ) 0%, rgb( 152, 150, 240 ) 100% ) !important; }\n.has-big-font-size { font-size: 32; }\n.has-normal-font-size { font-size: 16; }\n\n\/* Block-level classes (bounded to the group block) *\/\n.wp-block-group.has-black-color { color: #a156b4 !important; }\n.wp-block-group.has-black-background-color { background-color: #a156b4 !important; }\n.wp-block-group.has-black-border-color { border-color: #a156b4 !important; }\n.wp-block-group.has-white-color { color: #444 !important; }\n.wp-block-group.has-white-background-color { background-color: #444 !important; }\n.wp-block-group.has-white-border-color { border-color: #444 !important; }\n\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% end %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To maintain backward compatibility, the presets declared via <code>add_theme_support<\/code> will also generate the CSS Custom Properties. If the <code>theme.json<\/code> contains any presets, these will take precedence over the ones declared via <code>add_theme_support<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Preset classes are attached to the content of a post by some user action. That's why the engine will add <code>!important<\/code> to these, because user styles should take precedence over theme styles.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Custom<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In addition to create CSS Custom Properties for the presets, the <code>theme.json<\/code> also allows for themes to create their own, so they don't have to be enqueued separately. Any values declared within the <code>custom<\/code> field will be transformed to CSS Custom Properties following this naming schema: <code>--wp--custom--&lt;variable-name><\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>{% codetabs %}<br>{% Input %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"custom\": {\n\t\t\t\"baseFont\": 16,\n\t\t\t\"lineHeight\": {\n\t\t\t\t\"small\": 1.2,\n\t\t\t\t\"medium\": 1.4,\n\t\t\t\t\"large\": 1.8\n\t\t\t}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/group\": {\n\t\t\t\t\"custom\": {\n\t\t\t\t\t\"baseFont\": 32\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% Output %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>body {\n\t--wp--custom--base-font: 16;\n\t--wp--custom--line-height--small: 1.2;\n\t--wp--custom--line-height--medium: 1.4;\n\t--wp--custom--line-height--large: 1.8;\n}\n.wp-block-group {\n\t--wp--custom--base-font: 32;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% end %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note that the name of the variable is created by adding <code>--<\/code> in between each nesting level and <code>camelCase<\/code> fields are transformed to <code>kebab-case<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Settings examples<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Enable custom colors only for the paragraph block:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"custom\": false\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/paragraph\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"custom\": true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Disable border radius for the button block:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"blocks\": {\n\t\t\t\"core\/button\": {\n\t\t\t\t\"border\": {\n\t\t\t\t\t\"radius\": false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Provide the group block a different palette than the rest:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"palette\": &#91;\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"black\",\n\t\t\t\t\t\"color\": \"#000000\",\n\t\t\t\t\t\"name\": \"Black\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"white\",\n\t\t\t\t\t\"color\": \"#FFFFFF\",\n\t\t\t\t\t\"name\": \"White\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"red\",\n\t\t\t\t\t\"color\": \"#FF0000\",\n\t\t\t\t\t\"name\": \"Red\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"green\",\n\t\t\t\t\t\"color\": \"#00FF00\",\n\t\t\t\t\t\"name\": \"Green\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"blue\",\n\t\t\t\t\t\"color\": \"#0000FF\",\n\t\t\t\t\t\"name\": \"Blue\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/group\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"palette\": &#91;\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"slug\": \"black\",\n\t\t\t\t\t\t\t\"color\": \"#000000\",\n\t\t\t\t\t\t\t\"name\": \"Black\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"slug\": \"white\",\n\t\t\t\t\t\t\t\"color\": \"#FFF\",\n\t\t\t\t\t\t\t\"name\": \"White\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Styles<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<div class=\"callout callout-alert\">\nThe Gutenberg plugin extends the styles available from WordPress 5.8, so they can be used with other WordPress versions and they go through a maturation process before being ported to core.\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>The tabs below show WordPress 5.8 supported styles and the ones supported by the Gutenberg plugin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:html -->\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Each block declares which style properties it exposes via the <a href=\"\/docs\/reference-guides\/block-api\/block-supports.md\">block supports mechanism<\/a>. The support declarations are used to automatically generate the UI controls for the block in the editor. Themes can use any style property via the <code>theme.json<\/code> for any block \u2015 it's the theme's responsibility to verify that it works properly according to the block markup, etc.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>{% codetabs %}<br>{% WordPress %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 2,\n\t\"styles\": {\n\t\t\"border\": {\n\t\t\t\"radius\": \"value\",\n\t\t\t\"color\": \"value\",\n\t\t\t\"style\": \"value\",\n\t\t\t\"width\": \"value\"\n\t\t},\n\t\t\"filter\": {\n\t\t\t\"duotone\": \"value\"\n\t\t},\n\t\t\"color\": {\n\t\t\t\"background\": \"value\",\n\t\t\t\"gradient\": \"value\",\n\t\t\t\"text\": \"value\"\n\t\t},\n\t\t\"spacing\": {\n\t\t\t\"blockGap\": \"value\",\n\t\t\t\"margin\": {\n\t\t\t\t\"top\": \"value\",\n\t\t\t\t\"right\": \"value\",\n\t\t\t\t\"bottom\": \"value\",\n\t\t\t\t\"left\": \"value\",\n\t\t\t},\n\t\t\t\"padding\": {\n\t\t\t\t\"top\": \"value\",\n\t\t\t\t\"right\": \"value\",\n\t\t\t\t\"bottom\": \"value\",\n\t\t\t\t\"left\": \"value\"\n\t\t\t}\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"fontSize\": \"value\",\n\t\t\t\"fontStyle\": \"value\",\n\t\t\t\"fontWeight\": \"value\",\n\t\t\t\"letterSpacing\": \"value\",\n\t\t\t\"lineHeight\": \"value\",\n\t\t\t\"textDecoration\": \"value\",\n\t\t\t\"textTransform\": \"value\"\n\t\t},\n\t\t\"elements\": {\n\t\t\t\"link\": {\n\t\t\t\t\"border\": {},\n\t\t\t\t\"color\": {},\n\t\t\t\t\"spacing\": {},\n\t\t\t\t\"typography\": {}\n\t\t\t},\n\t\t\t\"h1\": {},\n\t\t\t\"h2\": {},\n\t\t\t\"h3\": {},\n\t\t\t\"h4\": {},\n\t\t\t\"h5\": {},\n\t\t\t\"h6\": {}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/group\": {\n\t\t\t\t\"border\": {},\n\t\t\t\t\"color\": {},\n\t\t\t\t\"spacing\": {},\n\t\t\t\t\"typography\": {},\n\t\t\t\t\"elements\": {\n\t\t\t\t\t\"link\": {},\n\t\t\t\t\t\"h1\": {},\n\t\t\t\t\t\"h2\": {},\n\t\t\t\t\t\"h3\": {},\n\t\t\t\t\t\"h4\": {},\n\t\t\t\t\t\"h5\": {},\n\t\t\t\t\t\"h6\": {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"etc\": {}\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% Gutenberg %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 2,\n\t\"styles\": {\n\t\t\"border\": {\n\t\t\t\"color\": \"value\",\n\t\t\t\"radius\": \"value\",\n\t\t\t\"style\": \"value\",\n\t\t\t\"width\": \"value\"\n\t\t},\n\t\t\"color\": {\n\t\t\t\"background\": \"value\",\n\t\t\t\"gradient\": \"value\",\n\t\t\t\"text\": \"value\"\n\t\t},\n\t\t\"dimensions\": {\n\t\t\t\"aspectRatio\": \"value\",\n\t\t\t\"minHeight\": \"value\"\n\t\t},\n\t\t\"filter\": {\n\t\t\t\"duotone\": \"value\"\n\t\t},\n\t\t\"spacing\": {\n\t\t\t\"blockGap\": \"value\",\n\t\t\t\"margin\": {\n\t\t\t\t\"top\": \"value\",\n\t\t\t\t\"right\": \"value\",\n\t\t\t\t\"bottom\": \"value\",\n\t\t\t\t\"left\": \"value\"\n\t\t\t},\n\t\t\t\"padding\": {\n\t\t\t\t\"top\": \"value\",\n\t\t\t\t\"right\": \"value\",\n\t\t\t\t\"bottom\": \"value\",\n\t\t\t\t\"left\": \"value\"\n\t\t\t}\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"fontFamily\": \"value\",\n\t\t\t\"fontSize\": \"value\",\n\t\t\t\"fontStyle\": \"value\",\n\t\t\t\"fontWeight\": \"value\",\n\t\t\t\"letterSpacing\": \"value\",\n\t\t\t\"lineHeight\": \"value\",\n\t\t\t\"textColumns\": \"value\",\n\t\t\t\"textDecoration\": \"value\",\n\t\t\t\"textTransform\": \"value\"\n\t\t},\n\t\t\"elements\": {\n\t\t\t\"link\": {\n\t\t\t\t\"border\": {},\n\t\t\t\t\"color\": {},\n\t\t\t\t\"spacing\": {},\n\t\t\t\t\"typography\": {}\n\t\t\t},\n\t\t\t\"h1\": {},\n\t\t\t\"h2\": {},\n\t\t\t\"h3\": {},\n\t\t\t\"h4\": {},\n\t\t\t\"h5\": {},\n\t\t\t\"h6\": {},\n\t\t\t\"heading\": {},\n\t\t\t\"button\": {},\n\t\t\t\"caption\": {}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/group\": {\n\t\t\t\t\"border\": {},\n\t\t\t\t\"color\": {},\n\t\t\t\t\"dimensions\": {},\n\t\t\t\t\"spacing\": {},\n\t\t\t\t\"typography\": {},\n\t\t\t\t\"elements\": {\n\t\t\t\t\t\"link\": {},\n\t\t\t\t\t\"h1\": {},\n\t\t\t\t\t\"h2\": {},\n\t\t\t\t\t\"h3\": {},\n\t\t\t\t\t\"h4\": {},\n\t\t\t\t\t\"h5\": {},\n\t\t\t\t\t\"h6\": {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"etc\": {}\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% end %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Top-level styles<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Styles found at the top-level will be enqueued using the <code>body<\/code> selector.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>{% codetabs %}<br>{% Input %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 1,\n\t\"styles\": {\n\t\t\"color\": {\n\t\t\t\"text\": \"var(--wp--preset--color--primary)\"\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% Output %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>body {\n\tcolor: var( --wp--preset--color--primary );\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% end %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block styles<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Styles found within a block will be enqueued using the block selector.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>By default, the block selector is generated based on its name such as <code>.wp-block-&lt;blockname-without-namespace><\/code>. For example, <code>.wp-block-group<\/code> for the <code>core\/group<\/code> block. There are some blocks that want to opt-out from this default behavior. They can do so by explicitly telling the system which selector to use for them via the <code>__experimentalSelector<\/code> key within the <code>supports<\/code> section of its <code>block.json<\/code> file. Note that the block needs to be registered server-side for the <code>__experimentalSelector<\/code> field to be available to the style engine.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>{% codetabs %}<br>{% Input %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 1,\n\t\"styles\": {\n\t\t\"color\": {\n\t\t\t\"text\": \"var(--wp--preset--color--primary)\"\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/paragraph\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"text\": \"var(--wp--preset--color--secondary)\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"core\/group\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"text\": \"var(--wp--preset--color--tertiary)\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% Output %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>body {\n\tcolor: var( --wp--preset--color--primary );\n}\np { \/* The core\/paragraph opts out from the default behaviour and uses p as a selector. *\/\n\tcolor: var( --wp--preset--color--secondary );\n}\n.wp-block-group {\n\tcolor: var( --wp--preset--color--tertiary );\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% end %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Referencing a style<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block can be styled using a reference to a root level style. This feature is supported by Gutenberg.<br>If you register a background color for the root using styles.color.background:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\"styles\": {\n\t\t\"color\": {\n\t\t\t\"background\": \"var(--wp--preset--color--primary)\"\n\t\t}\n\t}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can use <code>ref: \"styles.color.background\"<\/code>  to re-use the style for a block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"color\": {\n\t\t\"text\": { \"ref\": \"styles.color.background\" }\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Element styles<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In addition to top-level and block-level styles, there's the concept of elements that can be used in both places. There's a closed set of them:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Supported by Gutenberg:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>button<\/code>: maps to the <code>wp-element-button<\/code> CSS class. Also maps to <code>wp-block-button__link<\/code> for backwards compatibility.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>caption<\/code>: maps to the <code>.wp-element-caption, .wp-block-audio figcaption, .wp-block-embed figcaption, .wp-block-gallery figcaption, .wp-block-image figcaption, .wp-block-table figcaption, .wp-block-video figcaption<\/code> CSS classes.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>heading<\/code>: maps to all headings, the <code>h1 to h6<\/code> CSS selectors.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Supported by WordPress:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>h1<\/code>: maps to the <code>h1<\/code> CSS selector.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>h2<\/code>: maps to the <code>h2<\/code> CSS selector.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>h3<\/code>: maps to the <code>h3<\/code> CSS selector.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>h4<\/code>: maps to the <code>h4<\/code> CSS selector.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>h5<\/code>: maps to the <code>h5<\/code> CSS selector.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>h6<\/code>: maps to the <code>h6<\/code> CSS selector.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>link<\/code>: maps to the <code>a<\/code> CSS selector.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>If they're found in the top-level the element selector will be used. If they're found within a block, the selector to be used will be the element's appended to the corresponding block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>{% codetabs %}<br>{% Input %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 1,\n\t\"styles\": {\n\t\t\"typography\": {\n\t\t\t\"fontSize\": \"var(--wp--preset--font-size--normal)\"\n\t\t},\n\t\t\"elements\": {\n\t\t\t\"h1\": {\n\t\t\t\t\"typography\": {\n\t\t\t\t\t\"fontSize\": \"var(--wp--preset--font-size--huge)\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"h2\": {\n\t\t\t\t\"typography\": {\n\t\t\t\t\t\"fontSize\": \"var(--wp--preset--font-size--big)\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"h3\": {\n\t\t\t\t\"typography\": {\n\t\t\t\t\t\"fontSize\": \"var(--wp--preset--font-size--medium)\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/group\": {\n\t\t\t\t\"elements\": {\n\t\t\t\t\t\"h2\": {\n\t\t\t\t\t\t\"typography\": {\n\t\t\t\t\t\t\t\"fontSize\": \"var(--wp--preset--font-size--small)\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"h3\": {\n\t\t\t\t\t\t\"typography\": {\n\t\t\t\t\t\t\t\"fontSize\": \"var(--wp--preset--font-size--smaller)\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% Output %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>body {\n\tfont-size: var( --wp--preset--font-size--normal );\n}\nh1 {\n\tfont-size: var( --wp--preset--font-size--huge );\n}\nh2 {\n\tfont-size: var( --wp--preset--font-size--big );\n}\nh3 {\n\tfont-size: var( --wp--preset--font-size--medium );\n}\n.wp-block-group h2 {\n\tfont-size: var( --wp--preset--font-size--small );\n}\n.wp-block-group h3 {\n\tfont-size: var( --wp--preset--font-size--smaller );\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% end %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":5} -->\n<h5 class=\"wp-block-heading\">Element pseudo selectors<\/h5>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pseudo selectors <code>:hover<\/code>, <code>:focus<\/code>, <code>:visited<\/code>, <code>:active<\/code>, <code>:link<\/code>, <code>:any-link<\/code> are supported by Gutenberg.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\"elements\": {\n\t\t\"link\": {\n\t\t\t\"color\": {\n\t\t\t\t\"text\": \"green\"\n\t\t\t},\n\t\t\t\":hover\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"text\": \"hotpink\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Variations<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A block can have a \"style variation\", as defined per the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-registration\/#styles-optional\">block.json specification<\/a>. Theme authors can define the style attributes for an existing style variation using the theme.json file. Styles for unregistered style variations will be ignored.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note that variations are a \"block concept\", they only exist bound to blocks. The <code>theme.json<\/code> specification respects that distinction by only allowing <code>variations<\/code> at the block-level but not at the top-level. It's also worth highlighting that only variations defined in the <code>block.json<\/code> file of the block are considered \"registered\": so far, the style variations added via <code>register_block_style<\/code> or in the client are ignored, see <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/issues\/49602\">this issue<\/a> for more information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, this is how to provide styles for the existing <code>plain<\/code> variation for the <code>core\/quote<\/code> block:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 2,\n\t\"styles\":{\n\t\t\"blocks\": {\n\t\t\t\"core\/quote\": {\n\t\t\t\t\"variations\": {\n\t\t\t\t\t\"plain\": {\n\t\t\t\t\t\t\"color\": {\n\t\t\t\t\t\t\t\"background\": \"red\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The resulting CSS output is this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>.wp-block-quote.is-style-plain {\n\tbackground-color: red;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">customTemplates<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<div class=\"callout callout-alert\">Supported in WordPress from version 5.9.<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Within this field themes can list the custom templates present in the <code>templates<\/code> folder. For example, for a custom template named <code>my-custom-template.html<\/code>, the <code>theme.json<\/code> can declare what post types can use it and what's the title to show the user:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>name: mandatory.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>title: mandatory, translatable.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>postTypes: optional, only applies to the <code>page<\/code> by default.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n    \"version\": 2,\n\t\"customTemplates\": &#91;\n\t\t{\n\t\t\t\"name\": \"my-custom-template\",\n\t\t\t\"title\": \"The template title\",\n\t\t\t\"postTypes\": &#91;\n\t\t\t\t\"page\",\n\t\t\t\t\"post\",\n\t\t\t\t\"my-cpt\"\n\t\t\t]\n\t\t}\n\t]\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">templateParts<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<div class=\"callout callout-alert\">Supported in WordPress from version 5.9.<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Within this field themes can list the template parts present in the <code>parts<\/code> folder. For example, for a template part named <code>my-template-part.html<\/code>, the <code>theme.json<\/code> can declare the area term for the template part entity which is responsible for rendering the corresponding block variation (Header block, Footer block, etc.) in the editor. Defining this area term in the json will allow the setting to persist across all uses of that template part entity, as opposed to a block attribute that would only affect one block. Defining area as a block attribute is not recommended as this is only used 'behind the scenes' to aid in bridging the gap between placeholder flows and entity creation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Currently block variations exist for \"header\" and \"footer\" values of the area term, any other values and template parts not defined in the json will default to the general template part block. Variations will be denoted by specific icons within the editor's interface, will default to the corresponding semantic HTML element for the wrapper (this can also be overridden by the <code>tagName<\/code> attribute set on the template part block), and will contextualize the template part allowing more custom flows in future editor improvements.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>name: mandatory.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>title: optional, translatable.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>area: optional, will be set to <code>uncategorized<\/code> by default and trigger no block variation.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n    \"version\": 2,\n\t\"templateParts\": &#91;\n\t\t{\n\t\t\t\"name\": \"my-template-part\",\n\t\t\t\"title\": \"Header\",\n\t\t\t\"area\": \"header\"\n\t\t}\n\t]\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">patterns<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:html -->\n<div class=\"callout callout-alert\">Supported in WordPress from version 6.0 using <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/theme-json-living\/\">version 2<\/a> of <code>theme.json<\/code>.<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Within this field themes can list patterns to register from <a href=\"https:\/\/wordpress.org\/patterns\/\">Pattern Directory<\/a>. The <code>patterns<\/code> field is an array of pattern <code>slugs<\/code> from the Pattern Directory. Pattern slugs can be extracted by the <code>url<\/code> in single pattern view at the Pattern Directory. For example in this url <code>https:\/\/wordpress.org\/patterns\/pattern\/partner-logos<\/code> the slug is <code>partner-logos<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 2,\n\t\"patterns\": &#91; \"short-text-surrounded-by-round-images\", \"partner-logos\" ]\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Developing with theme.json<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It can be difficult to remember the theme.json settings and properties while you develop, so a JSON scheme was created to help. The schema is available at https:\/\/schemas.wp.org\/trunk\/theme.json<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Code editors can pick up the schema and can provide help like tooltips, autocomplete, or schema validation in the editor. To use the schema in Visual Studio Code, add <code>\"$schema\": \"https:\/\/schemas.wp.org\/trunk\/theme.json\"<\/code> to the beginning of your theme.json file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https:\/\/developer.wordpress.org\/files\/2021\/11\/theme-json-schema-updated.gif\" alt=\"\"\/><figcaption class=\"wp-element-caption\">Example using validation with schema<\/figcaption><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Frequently Asked Questions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">The naming schema of CSS Custom Properties<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>One thing you may have noticed is the naming schema used for the CSS Custom Properties the system creates, including the use of double hyphen, <code>--<\/code>, to separate the different \"concepts\". Take the following examples.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Presets<\/strong> such as <code>--wp--preset--color--black<\/code> can be divided into the following chunks:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>--wp<\/code>: prefix to namespace the CSS variable.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>preset <\/code>: indicates is a CSS variable that belongs to the presets.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>color<\/code>: indicates which preset category the variable belongs to. It can be <code>color<\/code>, <code>font-size<\/code>, <code>gradients<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>black<\/code>: the <code>slug<\/code> of the particular preset value.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Custom<\/strong> properties such as <code>--wp--custom--line-height--body<\/code>, which can be divided into the following chunks:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>--wp<\/code>: prefix to namespace the CSS variable.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>custom<\/code>: indicates is a \"free-form\" CSS variable created by the theme.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>line-height--body<\/code>: the result of converting the \"custom\" object keys into a string.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The <code>--<\/code> as a separator has two functions:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>Readability, for human understanding. It can be thought as similar to the BEM naming schema, it separates \"categories\".<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Parsability, for machine understanding. Using a defined structure allows machines to understand the meaning of the property <code>--wp--preset--color--black<\/code>: it's a value bounded to the color preset whose slug is \"black\", which then gives us room to do more things with them.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Why using <code>--<\/code> as a separator?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We could have used any other separator, such as a single <code>-<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>However, that'd have been problematic, as it'd have been impossible to tell how <code>--wp-custom-line-height-template-header<\/code> should be converted back into an object, unless we force theme authors not to use <code>-<\/code> in their variable names.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>By reserving <code>--<\/code> as a category separator and let theme authors use <code>-<\/code> for word-boundaries, the naming is clearer: <code>--wp--custom--line-height--template-header<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">How settings under \"custom\" create new CSS Custom Properties<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The algorithm to create CSS Variables out of the settings under the \"custom\" key works this way:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is for clarity, but also because we want a mechanism to parse back a variable name such <code>--wp--custom--line-height--body<\/code> to its object form in theme.json. We use the same separation for presets.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>{% codetabs %}<br>{% Input %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"custom\": {\n\t\t\t\"lineHeight\": {\n\t\t\t\t\"body\": 1.7\n\t\t\t},\n\t\t\t\"font-primary\": \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif\"\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% Output %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>body {\n\t--wp--custom--line-height--body: 1.7;\n\t--wp--custom--font-primary: \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif\";\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>{% end %}<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A few notes about this process:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>camelCased<\/code> keys are transformed into its <code>kebab-case<\/code> form, as to follow the CSS property naming schema. Example: <code>lineHeight<\/code> is transformed into <code>line-height<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Keys at different depth levels are separated by <code>--<\/code>. That's why <code>line-height<\/code> and <code>body<\/code> are separated by <code>--<\/code>.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>You shouldn't use <code>--<\/code> in the names of the keys within the <code>custom<\/code> object. Example, <strong>don't do<\/strong> this:<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"custom\": {\n\t\t\t\"line--height\": { \/\/ DO NOT DO THIS\n\t\t\t\t\"body\": 1.7\n\t\t\t}\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Global Stylesheet<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In WordPress 5.8, the CSS for some of the presets defined by WordPress (font sizes, colors, and gradients) was loaded twice for most themes: in the block-library stylesheet plus in the global stylesheet. Additionally, there were slight differences in the CSS in both places.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In WordPress 5.9 release, CSS of presets are consolidated into the global stylesheet, that is now loaded for all themes. Each preset value generates a single CSS Custom Property and a class, as in:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/* CSS Custom Properties for the preset values *\/\nbody {\n  --wp--preset--<preset_type>--<preset_slug>: <default_value>;\n  --wp--preset--color--pale-pink: #f78da7;\n  --wp--preset--font-size--large: 36px;\n  \/* etc. *\/\n}\n\n\/* CSS classes for the preset values *\/\n.has-<preset_slug>-<preset_type> { ... }\n.has-pale-pink-color { color: var(--wp--preset--color--pale-pink) !important; }\n.has-large-font-size { font-size: var(--wp--preset--font-size--large) !important; }\n<\/preset_type><\/preset_slug><\/default_value><\/preset_slug><\/preset_type><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>For themes to override the default values they can use the <code>theme.json<\/code> and provide the same slug. Themes that do not use a <code>theme.json<\/code> can still override the default values by enqueuing some CSS that sets the corresponding CSS Custom Property.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><code>Example<\/code> (sets a new value for the default large font size):<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>body {\n --wp--preset--font-size--large: <new_value>;\n}\n<\/new_value><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Specificity for link colors provided by the user<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In v1, when a user selected a link color for a specific block we attached a class to that block in the form of <code>.wp-element-&lt;ID><\/code> and then enqueued the following style:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>.wp-element-<id> a { color: <user_color_value> !important; }\n<\/user_color_value><\/id><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>While this preserved user preferences at all times, the specificity was too strong and conflicted with some blocks with legit uses of an HTML element that shouldn\u2019t be considered links. To <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/pull\/34689\">address this issue<\/a>, in WordPress 5.9 release, the <code>!important<\/code> was removed and updated the corresponding blocks to style the a elements with a specificity higher than the user link color, which now is:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>.wp-element-<id> a { color: <user_color_value>; }\n<\/user_color_value><\/id><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>As a result of this change, it\u2019s now the block author and theme author\u2019s responsibility to make sure the user choices are respected at all times and that the link color provided by the user (specificity 011) is not overridden.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">What is blockGap and how can I use it?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For blocks that contain inner blocks, such as Group, Columns, Buttons, and Social Icons, <code>blockGap<\/code> controls the spacing between inner blocks. For <code>blockGap<\/code> to work, the block must also opt in to the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-supports\/#layout\"><code>layout<\/code> block support<\/a>, which provides layout styles that can be adjusted via the block spacing controls. Depending on the layout of the block, the <code>blockGap<\/code> value will be output as either a vertical margin or a <code>gap<\/code> value. In the editor, the control for the <code>blockGap<\/code> value is called <em>Block spacing<\/em>, located in the Dimensions panel.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"spacing\": {\n\t\t\t\"blockGap\": true,\n\t\t}\n\t},\n\t\"styles\": {\n\t\t\"spacing\": {\n\t\t\t\"blockGap\": \"1.5rem\"\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The setting for <code>blockGap<\/code> is either a boolean or <code>null<\/code> value and is <code>null<\/code> by default. This allows an extra level of control over style output. The <code>settings.spacing.blockGap<\/code> setting in a <code>theme.json<\/code> file accepts the following values:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>true<\/code>: Opt into displaying <em>Block spacing<\/em> controls in the editor UI and output <code>blockGap<\/code> styles.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>false<\/code>: Opt out of displaying <em>Block spacing<\/em> controls in the editor UI, with <code>blockGap<\/code> styles stored in <code>theme.json<\/code> still being rendered. This allows themes to use <code>blockGap<\/code> values without allowing users to make changes within the editor.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>null<\/code> (default): Opt out of displaying <em>Block spacing<\/em> controls, <em>and<\/em> prevent the output of <code>blockGap<\/code> styles.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The value defined for the root <code>styles.spacing.blockGap<\/code> style is also output as a CSS property, named <code>--wp--style--block-gap<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Why does it take so long to update the styles in the browser?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When you are actively developing with theme.json you may notice it takes 30+ seconds for your changes to show up in the browser, this is because <code>theme.json<\/code> is cached. To remove this caching issue, set either <a href=\"https:\/\/wordpress.org\/documentation\/article\/debugging-in-wordpress\/#wp_debug\"><code>WP_DEBUG<\/code><\/a> or <a href=\"https:\/\/wordpress.org\/documentation\/article\/debugging-in-wordpress\/#script_debug\"><code>SCRIPT_DEBUG<\/code><\/a> to 'true' in your <a href=\"https:\/\/wordpress.org\/documentation\/article\/editing-wp-config-php\/\"><code>wp-config.php<\/code><\/a>. This tells WordPress to skip the cache and always use fresh data.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Global Settings & Styles (theme.json)\n\nWordPress 5.8 comes with [a new mechanism](https:\/\/make.wordpress.org\/core\/2021\/06\/25\/introducing-theme-json-in-wordpress-5-8\/) to configure the editor that enables a finer-grained control and introduces the first step in managing styles for future WordPress releases: the `theme.json` file. Then `theme.json` [evolved to a v2](https:\/\/make.wordpress.org\/core\/2022\/01\/08\/updates-for-settings-styles-and-theme-json\/) with WordPress 5.9 release. This page documents its format.\n\n## Rationale\n\nThe Block Editor API has evolved at different velocities and there are some growing pains, specially in areas that affect themes. Examples of this are: the ability to [control the editor programmatically](https:\/\/make.wordpress.org\/core\/2020\/01\/23\/controlling-the-block-editor\/), or [a block style system](https:\/\/github.com\/WordPress\/gutenberg\/issues\/9534) that facilitates user, theme, and core style preferences.\n\nThis describes the current efforts to consolidate the various APIs related to styles into a single point \u2013 a `theme.json` file that should be located inside the root of the theme directory.\n\n### Settings for the block editor\n\nInstead of the proliferation of theme support flags or alternative methods, the `theme.json` files provides a canonical way to define the settings of the block editor. These settings includes things like:\n\n-   What customization options should be made available or hidden from the user.\n-   What are the default colors, font sizes... available to the user.\n-   Defines the default layout of the editor (widths and available alignments).\n\n### Settings can be controlled per block\n\nFor more granularity, these settings also work at the block level in `theme.json`.\n\nExamples of what can be achieved are:\n\n-   Use a particular preset for a block (e.g.: table) but the common one for the rest of blocks.\n-   Enable font size UI controls for all blocks but the headings block.\n-   etc.\n\n### Styles are managed\n\nBy using the `theme.json` file to set style properties in a structured way, the Block Editor can \"manage\" the CSS that comes from different origins (user, theme, and core CSS). For example, if a theme and a user set the font size for paragraphs, we only enqueue the style coming from the user and not the theme's.\n\nSome of the advantages are:\n\n- Reduce the amount of CSS enqueued.\n- Prevent specificity wars.\n\n### CSS Custom Properties: presets & custom\n\nThere are some areas of styling that would benefit from having shared values that can change across a site.\n\nTo address this need, we've started to experiment with CSS Custom Properties, aka CSS Variables, in some places:\n\n- **Presets**: [color palettes](\/docs\/how-to-guides\/themes\/theme-support.md#block-color-palettes), [font sizes](\/docs\/how-to-guides\/themes\/theme-support.md#block-font-sizes), or [gradients](\/docs\/how-to-guides\/themes\/theme-support.md#block-gradient-presets) declared by the theme are converted to CSS Custom Properties and enqueued both the front-end and the editors.\n\n{% codetabs %}\n{% Input %}\n\n```json\n{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"palette\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Black\",\n\t\t\t\t\t\"slug\": \"black\",\n\t\t\t\t\t\"color\": \"#000000\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"White\",\n\t\t\t\t\t\"slug\": \"white\",\n\t\t\t\t\t\"color\": \"#ffffff\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n{% Output %}\n\n```css\nbody {\n\t--wp--preset--color--black: #000000;\n\t--wp--preset--color--white: #ffffff;\n}\n```\n\n{% end %}\n\n-   **Custom properties**: there's also a mechanism to create your own CSS Custom Properties.\n\n{% codetabs %}\n{% Input %}\n\n```json\n{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"custom\": {\n\t\t\t\"line-height\": {\n\t\t\t\t\"body\": 1.7,\n\t\t\t\t\"heading\": 1.3\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n{% Output %}\n\n```css\nbody {\n\t--wp--custom--line-height--body: 1.7;\n\t--wp--custom--line-height--heading: 1.3;\n}\n```\n\n{% end %}\n\n## Specification\n\nThis specification is the same for the three different origins that use this format: core, themes, and users. Themes can override core's defaults by creating a file called `theme.json`. Users, via the site editor, will also be able to override theme's or core's preferences via an user interface that is being worked on.\n\n```json\n{\n\t\"version\": 2,\n\t\"settings\": {},\n\t\"styles\": {},\n\t\"customTemplates\": {},\n\t\"templateParts\": {}\n}\n```\n\n### Version\n\nThis field describes the format of the `theme.json` file. The current version is [v2](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/theme-json-living\/), [introduced in WordPress 5.9](https:\/\/make.wordpress.org\/core\/2022\/01\/08\/updates-for-settings-styles-and-theme-json\/). It also works with the current Gutenberg plugin.\n\nIf you have used [v1](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/theme-json-v1\/) previously, you don\u2019t need to update the version in the v1 file to v2, as it\u2019ll be [migrated](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/theme-json-migrations\/) into v2 at runtime for you.\n\n\n### Settings\n\n<div class=\"callout callout-alert\">\nThe Gutenberg plugin extends the settings available from WordPress 5.8, so they can be used with other WordPress versions and they go through a maturation process before being ported to core.\n\nThe tabs below show WordPress 5.8 supported settings and the ones supported by the Gutenberg plugin.\n<\/div>\n\nThe settings section has the following structure:\n\n{% codetabs %}\n{% WordPress %}\n\n```json\n{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"border\": {\n\t\t\t\"radius\": false,\n\t\t\t\"color\": false,\n\t\t\t\"style\": false,\n\t\t\t\"width\": false\n\t\t},\n\t\t\"color\": {\n\t\t\t\"custom\": true,\n\t\t\t\"customDuotone\": true,\n\t\t\t\"customGradient\": true,\n\t\t\t\"duotone\": [],\n\t\t\t\"gradients\": [],\n\t\t\t\"link\": false,\n\t\t\t\"palette\": [],\n\t\t\t\"text\": true,\n\t\t\t\"background\": true,\n\t\t\t\"defaultGradients\": true,\n\t\t\t\"defaultPalette\": true\n\t\t},\n\t\t\"custom\": {},\n\t\t\"layout\": {\n\t\t\t\"contentSize\": \"800px\",\n\t\t\t\"wideSize\": \"1000px\"\n\t\t},\n\t\t\"spacing\": {\n\t\t\t\"margin\": false,\n\t\t\t\"padding\": false,\n\t\t\t\"blockGap\": null,\n\t\t\t\"units\": [ \"px\", \"em\", \"rem\", \"vh\", \"vw\" ]\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"customFontSize\": true,\n\t\t\t\"lineHeight\": false,\n\t\t\t\"dropCap\": true,\n\t\t\t\"fluid\": false,\n\t\t\t\"fontStyle\": true,\n\t\t\t\"fontWeight\": true,\n\t\t\t\"letterSpacing\": true,\n\t\t\t\"textDecoration\": true,\n\t\t\t\"textTransform\": true,\n\t\t\t\"fontSizes\": [],\n\t\t\t\"fontFamilies\": []\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/paragraph\": {\n\t\t\t\t\"color\": {},\n\t\t\t\t\"custom\": {},\n\t\t\t\t\"layout\": {},\n\t\t\t\t\"spacing\": {},\n\t\t\t\t\"typography\": {}\n\t\t\t},\n\t\t\t\"core\/heading\": {},\n\t\t\t\"etc\": {}\n\t\t}\n\t}\n}\n```\n\n{% Gutenberg %}\n\n```json\n{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"appearanceTools\": false,\n\t\t\"border\": {\n\t\t\t\"color\": false,\n\t\t\t\"radius\": false,\n\t\t\t\"style\": false,\n\t\t\t\"width\": false\n\t\t},\n\t\t\"color\": {\n\t\t\t\"background\": true,\n\t\t\t\"custom\": true,\n\t\t\t\"customDuotone\": true,\n\t\t\t\"customGradient\": true,\n\t\t\t\"defaultGradients\": true,\n\t\t\t\"defaultPalette\": true,\n\t\t\t\"duotone\": [],\n\t\t\t\"gradients\": [],\n\t\t\t\"link\": false,\n\t\t\t\"palette\": [],\n\t\t\t\"text\": true\n\t\t},\n\t\t\"custom\": {},\n\t\t\"dimensions\": {\n\t\t\t\"aspectRatio\": false,\n\t\t\t\"minHeight\": false,\n\t\t},\n\t\t\"layout\": {\n\t\t\t\"contentSize\": \"800px\",\n\t\t\t\"wideSize\": \"1000px\"\n\t\t},\n\t\t\"spacing\": {\n\t\t\t\"blockGap\": null,\n\t\t\t\"margin\": false,\n\t\t\t\"padding\": false,\n\t\t\t\"customSpacingSize\": true,\n\t\t\t\"units\": [ \"px\", \"em\", \"rem\", \"vh\", \"vw\" ],\n\t\t\t\"spacingScale\": {\n\t\t\t\t\"operator\": \"*\",\n\t\t\t\t\"increment\": 1.5,\n\t\t\t\t\"steps\": 7,\n\t\t\t\t\"mediumStep\": 1.5,\n\t\t\t\t\"unit\": \"rem\"\n\t\t\t},\n\t\t\t\"spacingSizes\": []\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"customFontSize\": true,\n\t\t\t\"dropCap\": true,\n\t\t\t\"fluid\": false,\n\t\t\t\"fontFamilies\": [],\n\t\t\t\"fontSizes\": [],\n\t\t\t\"fontStyle\": true,\n\t\t\t\"fontWeight\": true,\n\t\t\t\"letterSpacing\": true,\n\t\t\t\"lineHeight\": false,\n\t\t\t\"textColumns\": false,\n\t\t\t\"textDecoration\": true,\n\t\t\t\"textTransform\": true\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/paragraph\": {\n\t\t\t\t\"border\": {},\n\t\t\t\t\"color\": {},\n\t\t\t\t\"custom\": {},\n\t\t\t\t\"layout\": {},\n\t\t\t\t\"spacing\": {},\n\t\t\t\t\"typography\": {}\n\t\t\t},\n\t\t\t\"core\/heading\": {},\n\t\t\t\"etc\": {}\n\t\t}\n\t}\n}\n```\n{% end %}\n\nEach block can configure any of these settings separately, providing a more fine-grained control over what exists via `add_theme_support`. The settings declared at the top-level affect to all blocks, unless a particular block overwrites it. It's a way to provide inheritance and configure all blocks at once.\n\nNote, however, that not all settings are relevant for all blocks. The settings section provides an opt-in\/opt-out mechanism for themes, but it's the block's responsibility to add support for the features that are relevant to it. For example, if a block doesn't implement the `dropCap` feature, a theme can't enable it for such a block through `theme.json`.\n\n### Opt-in into UI controls\n\nThere's one special setting property, `appearanceTools`, which is a boolean and its default value is false. Themes can use this setting to enable the following ones:\n\n- background: backgroundImage, backgroundSize\n- border: color, radius, style, width\n- color: link\n- dimensions: aspectRatio, minHeight\n- position: sticky\n- spacing: blockGap, margin, padding\n- typography: lineHeight\n\n#### Backward compatibility with add_theme_support\n\nTo retain backward compatibility, the existing `add_theme_support` declarations that configure the block editor are retrofit in the proper categories for the top-level section. For example, if a theme uses `add_theme_support('disable-custom-colors')`, it'll be the same as setting `settings.color.custom` to `false`. If the `theme.json` contains any settings, these will take precedence over the values declared via `add_theme_support`. This is the complete list of equivalences:\n\n| add_theme_support           | theme.json setting                                        |\n| --------------------------- | --------------------------------------------------------- |\n| `custom-line-height`        | Set `typography.lineHeight` to `true`.              |\n| `custom-spacing`            | Set `spacing.padding` to `true`.                    |\n| `custom-units`              | Provide the list of units via `spacing.units`.            |\n| `disable-custom-colors`     | Set `color.custom` to `false`.                            |\n| `disable-custom-font-sizes` | Set `typography.customFontSize` to `false`.               |\n| `disable-custom-gradients`  | Set `color.customGradient` to `false`.                    |\n| `editor-color-palette`      | Provide the list of colors via `color.palette`.           |\n| `editor-font-sizes`         | Provide the list of font size via `typography.fontSizes`. |\n| `editor-gradient-presets`   | Provide the list of gradients via `color.gradients`.      |\n| `appearance-tools`          | Set `appearanceTools` to `true`.                          |\n| `border`                    | Set `border: color, radius, style, width` to `true`.      |\n| `link-color `               | Set `color.link` to `true`.                               |\n\n#### Presets\n\nPresets are part of the settings section. They are values that are shown to the user via some UI controls. By defining them via `theme.json` the engine can do more for themes, such as automatically translate the preset name or enqueue the corresponding CSS classes and custom properties.\n\nThe following presets can be defined via `theme.json`:\n\n- `color.duotone`: doesn't generate classes or custom properties.\n- `color.gradients`: generates a single class and custom property per preset value.\n- `color.palette`:\n    - generates 3 classes per preset value: color, background-color, and border-color.\n    - generates a single custom property per preset value.\n- `spacing.spacingScale`: used to generate an array of spacing preset sizes for use with padding, margin, and gap settings.\n    - `operator`: specifies how to calculate the steps with either `*` for multiplier, or `+` for sum.\n    - `increment`: the amount to increment each step by. Core by default uses a 'perfect 5th' multiplier of `1.5`.\n    - `steps`: the number of steps to generate in the spacing scale. The default is 7. To prevent the generation of the spacing presets, and to disable the related UI, this can be set to `0`.\n    - `mediumStep`: the steps in the scale are generated descending and ascending from a medium step, so this should be the size value of the medium space, without the unit. The default medium step is `1.5rem` so the mediumStep value is `1.5`.\n    - `unit`: the unit the scale uses, eg. `px, rem, em, %`. The default is `rem`.\n- `spacing.spacingSizes`: themes can choose to include a static `spacing.spacingSizes` array of spacing preset sizes if they have a sequence of sizes that can't be generated via an increment or multiplier.\n    - `name`: a human readable name for the size, eg. `Small, Medium, Large`.\n    - `slug`: the machine readable name. In order to provide the best cross site\/theme compatibility the slugs should be in the format, \"10\",\"20\",\"30\",\"40\",\"50\",\"60\", with \"50\" representing the `Medium` size value.\n    - `size`: the size, including the unit, eg. `1.5rem`. It is possible to include fluid values like `clamp(2rem, 10vw, 20rem)`.\n- `typography.fontSizes`: generates a single class and custom property per preset value.\n- `typography.fontFamilies`: generates a single custom property per preset value.\n\nThe naming schema for the classes and the custom properties is as follows:\n\n- Custom Properties: `--wp--preset--{preset-category}--{preset-slug}` such as `--wp--preset--color--black`\n- Classes: `.has-{preset-slug}-{preset-category}` such as `.has-black-color`.\n\n\n{% codetabs %}\n{% Input %}\n\n```json\n{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"duotone\": [\n\t\t\t\t{\n\t\t\t\t\t\"colors\": [ \"#000\", \"#FFF\" ],\n\t\t\t\t\t\"slug\": \"black-and-white\",\n\t\t\t\t\t\"name\": \"Black and White\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"gradients\": [\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"blush-bordeaux\",\n\t\t\t\t\t\"gradient\": \"linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%)\",\n\t\t\t\t\t\"name\": \"Blush bordeaux\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"blush-light-purple\",\n\t\t\t\t\t\"gradient\": \"linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%)\",\n\t\t\t\t\t\"name\": \"Blush light purple\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"palette\": [\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"strong-magenta\",\n\t\t\t\t\t\"color\": \"#a156b4\",\n\t\t\t\t\t\"name\": \"Strong magenta\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"very-dark-grey\",\n\t\t\t\t\t\"color\": \"rgb(131, 12, 8)\",\n\t\t\t\t\t\"name\": \"Very dark grey\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"fontFamilies\": [\n\t\t\t\t{\n\t\t\t\t\t\"fontFamily\": \"-apple-system,BlinkMacSystemFont,\\\"Segoe UI\\\",Roboto,Oxygen-Sans,Ubuntu,Cantarell, \\\"Helvetica Neue\\\",sans-serif\",\n\t\t\t\t\t\"slug\": \"system-font\",\n\t\t\t\t\t\"name\": \"System Font\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"fontFamily\": \"Helvetica Neue, Helvetica, Arial, sans-serif\",\n\t\t\t\t\t\"slug\": \"helvetica-arial\",\n\t\t\t\t\t\"name\": \"Helvetica or Arial\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"fontSizes\": [\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"big\",\n\t\t\t\t\t\"size\": 32,\n\t\t\t\t\t\"name\": \"Big\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"x-large\",\n\t\t\t\t\t\"size\": 46,\n\t\t\t\t\t\"name\": \"Large\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"spacing\": {\n\t\t\t\"spacingScale\": {\n\t\t\t\t\"operator\": \"*\",\n\t\t\t\t\"increment\": 1.5,\n\t\t\t\t\"steps\": 7,\n\t\t\t\t\"mediumStep\": 1.5,\n\t\t\t\t\"unit\": \"rem\"\n\t\t\t},\n\t\t\t\"spacingSizes\": [\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"40\",\n\t\t\t\t\t\"size\": \"1rem\",\n\t\t\t\t\t\"name\": \"Small\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"50\",\n\t\t\t\t\t\"size\": \"1.5rem\",\n\t\t\t\t\t\"name\": \"Medium\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"60\",\n\t\t\t\t\t\"size\": \"2rem\",\n\t\t\t\t\t\"name\": \"Large\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/group\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"palette\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"slug\": \"black\",\n\t\t\t\t\t\t\t\"color\": \"#000000\",\n\t\t\t\t\t\t\t\"name\": \"Black\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"slug\": \"white\",\n\t\t\t\t\t\t\t\"color\": \"#ffffff\",\n\t\t\t\t\t\t\t\"name\": \"White\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n{% Output %}\n\n```css\n\/* Top-level custom properties *\/\nbody {\n\t--wp--preset--color--strong-magenta: #a156b4;\n\t--wp--preset--color--very-dark-grey: #444;\n\t--wp--preset--gradient--blush-bordeaux: linear-gradient( 135deg, rgb( 254, 205, 165 ) 0%, rgb( 254, 45, 45 ) 50%, rgb( 107, 0, 62 ) 100% );\n\t--wp--preset--gradient--blush-light-purple: linear-gradient( 135deg, rgb( 255, 206, 236 ) 0%, rgb( 152, 150, 240 ) 100% );\n\t--wp--preset--font-size--x-large: 46;\n\t--wp--preset--font-size--big: 32;\n\t--wp--preset--font-family--helvetica-arial: Helvetica Neue, Helvetica, Arial, sans-serif;\n\t--wp--preset--font-family--system: -apple-system,BlinkMacSystemFont,\\\"Segoe UI\\\",Roboto,Oxygen-Sans,Ubuntu,Cantarell, \\\"Helvetica Neue\\\",sans-serif;\n\t--wp--preset--spacing--20: 0.44rem;\n\t--wp--preset--spacing--30: 0.67rem;\n\t--wp--preset--spacing--40: 1rem;\n\t--wp--preset--spacing--50: 1.5rem;\n\t--wp--preset--spacing--60: 2.25rem;\n\t--wp--preset--spacing--70: 3.38rem;\n\t--wp--preset--spacing--80: 5.06rem;\n}\n\n\/* Block-level custom properties (bounded to the group block) *\/\n.wp-block-group {\n\t--wp--preset--color--black: #000000;\n\t--wp--preset--color--white: #ffffff;\n}\n\n\/* Top-level classes *\/\n.has-strong-magenta-color { color: #a156b4 !important; }\n.has-strong-magenta-background-color { background-color: #a156b4 !important; }\n.has-strong-magenta-border-color { border-color: #a156b4 !important; }\n.has-very-dark-grey-color { color: #444 !important; }\n.has-very-dark-grey-background-color { background-color: #444 !important; }\n.has-very-dark-grey-border-color { border-color: #444 !important; }\n.has-blush-bordeaux-background { background: linear-gradient( 135deg, rgb( 254, 205, 165 ) 0%, rgb( 254, 45, 45 ) 50%, rgb( 107, 0, 62 ) 100% ) !important; }\n.has-blush-light-purple-background { background: linear-gradient( 135deg, rgb( 255, 206, 236 ) 0%, rgb( 152, 150, 240 ) 100% ) !important; }\n.has-big-font-size { font-size: 32; }\n.has-normal-font-size { font-size: 16; }\n\n\/* Block-level classes (bounded to the group block) *\/\n.wp-block-group.has-black-color { color: #a156b4 !important; }\n.wp-block-group.has-black-background-color { background-color: #a156b4 !important; }\n.wp-block-group.has-black-border-color { border-color: #a156b4 !important; }\n.wp-block-group.has-white-color { color: #444 !important; }\n.wp-block-group.has-white-background-color { background-color: #444 !important; }\n.wp-block-group.has-white-border-color { border-color: #444 !important; }\n\n```\n{% end %}\n\nTo maintain backward compatibility, the presets declared via `add_theme_support` will also generate the CSS Custom Properties. If the `theme.json` contains any presets, these will take precedence over the ones declared via `add_theme_support`.\n\nPreset classes are attached to the content of a post by some user action. That's why the engine will add `!important` to these, because user styles should take precedence over theme styles.\n\n#### Custom\n\nIn addition to create CSS Custom Properties for the presets, the `theme.json` also allows for themes to create their own, so they don't have to be enqueued separately. Any values declared within the `custom` field will be transformed to CSS Custom Properties following this naming schema: `--wp--custom--<variable-name>`.\n\nFor example:\n\n{% codetabs %}\n{% Input %}\n\n```json\n{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"custom\": {\n\t\t\t\"baseFont\": 16,\n\t\t\t\"lineHeight\": {\n\t\t\t\t\"small\": 1.2,\n\t\t\t\t\"medium\": 1.4,\n\t\t\t\t\"large\": 1.8\n\t\t\t}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/group\": {\n\t\t\t\t\"custom\": {\n\t\t\t\t\t\"baseFont\": 32\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n{% Output %}\n\n```css\nbody {\n\t--wp--custom--base-font: 16;\n\t--wp--custom--line-height--small: 1.2;\n\t--wp--custom--line-height--medium: 1.4;\n\t--wp--custom--line-height--large: 1.8;\n}\n.wp-block-group {\n\t--wp--custom--base-font: 32;\n}\n```\n\n{% end %}\n\nNote that the name of the variable is created by adding `--` in between each nesting level and `camelCase` fields are transformed to `kebab-case`.\n\n#### Settings examples\n\n- Enable custom colors only for the paragraph block:\n\n```json\n{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"custom\": false\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/paragraph\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"custom\": true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n- Disable border radius for the button block:\n\n```json\n{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"blocks\": {\n\t\t\t\"core\/button\": {\n\t\t\t\t\"border\": {\n\t\t\t\t\t\"radius\": false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n- Provide the group block a different palette than the rest:\n\n```json\n{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"palette\": [\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"black\",\n\t\t\t\t\t\"color\": \"#000000\",\n\t\t\t\t\t\"name\": \"Black\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"white\",\n\t\t\t\t\t\"color\": \"#FFFFFF\",\n\t\t\t\t\t\"name\": \"White\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"red\",\n\t\t\t\t\t\"color\": \"#FF0000\",\n\t\t\t\t\t\"name\": \"Red\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"green\",\n\t\t\t\t\t\"color\": \"#00FF00\",\n\t\t\t\t\t\"name\": \"Green\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"blue\",\n\t\t\t\t\t\"color\": \"#0000FF\",\n\t\t\t\t\t\"name\": \"Blue\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/group\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"palette\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"slug\": \"black\",\n\t\t\t\t\t\t\t\"color\": \"#000000\",\n\t\t\t\t\t\t\t\"name\": \"Black\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"slug\": \"white\",\n\t\t\t\t\t\t\t\"color\": \"#FFF\",\n\t\t\t\t\t\t\t\"name\": \"White\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### Styles\n\n<div class=\"callout callout-alert\">\nThe Gutenberg plugin extends the styles available from WordPress 5.8, so they can be used with other WordPress versions and they go through a maturation process before being ported to core.\n\nThe tabs below show WordPress 5.8 supported styles and the ones supported by the Gutenberg plugin.\n<\/div>\n\nEach block declares which style properties it exposes via the [block supports mechanism](\/docs\/reference-guides\/block-api\/block-supports.md). The support declarations are used to automatically generate the UI controls for the block in the editor. Themes can use any style property via the `theme.json` for any block \u2015 it's the theme's responsibility to verify that it works properly according to the block markup, etc.\n\n{% codetabs %}\n{% WordPress %}\n\n```json\n{\n\t\"version\": 2,\n\t\"styles\": {\n\t\t\"border\": {\n\t\t\t\"radius\": \"value\",\n\t\t\t\"color\": \"value\",\n\t\t\t\"style\": \"value\",\n\t\t\t\"width\": \"value\"\n\t\t},\n\t\t\"filter\": {\n\t\t\t\"duotone\": \"value\"\n\t\t},\n\t\t\"color\": {\n\t\t\t\"background\": \"value\",\n\t\t\t\"gradient\": \"value\",\n\t\t\t\"text\": \"value\"\n\t\t},\n\t\t\"spacing\": {\n\t\t\t\"blockGap\": \"value\",\n\t\t\t\"margin\": {\n\t\t\t\t\"top\": \"value\",\n\t\t\t\t\"right\": \"value\",\n\t\t\t\t\"bottom\": \"value\",\n\t\t\t\t\"left\": \"value\",\n\t\t\t},\n\t\t\t\"padding\": {\n\t\t\t\t\"top\": \"value\",\n\t\t\t\t\"right\": \"value\",\n\t\t\t\t\"bottom\": \"value\",\n\t\t\t\t\"left\": \"value\"\n\t\t\t}\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"fontSize\": \"value\",\n\t\t\t\"fontStyle\": \"value\",\n\t\t\t\"fontWeight\": \"value\",\n\t\t\t\"letterSpacing\": \"value\",\n\t\t\t\"lineHeight\": \"value\",\n\t\t\t\"textDecoration\": \"value\",\n\t\t\t\"textTransform\": \"value\"\n\t\t},\n\t\t\"elements\": {\n\t\t\t\"link\": {\n\t\t\t\t\"border\": {},\n\t\t\t\t\"color\": {},\n\t\t\t\t\"spacing\": {},\n\t\t\t\t\"typography\": {}\n\t\t\t},\n\t\t\t\"h1\": {},\n\t\t\t\"h2\": {},\n\t\t\t\"h3\": {},\n\t\t\t\"h4\": {},\n\t\t\t\"h5\": {},\n\t\t\t\"h6\": {}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/group\": {\n\t\t\t\t\"border\": {},\n\t\t\t\t\"color\": {},\n\t\t\t\t\"spacing\": {},\n\t\t\t\t\"typography\": {},\n\t\t\t\t\"elements\": {\n\t\t\t\t\t\"link\": {},\n\t\t\t\t\t\"h1\": {},\n\t\t\t\t\t\"h2\": {},\n\t\t\t\t\t\"h3\": {},\n\t\t\t\t\t\"h4\": {},\n\t\t\t\t\t\"h5\": {},\n\t\t\t\t\t\"h6\": {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"etc\": {}\n\t\t}\n\t}\n}\n```\n{% Gutenberg %}\n\n```json\n{\n\t\"version\": 2,\n\t\"styles\": {\n\t\t\"border\": {\n\t\t\t\"color\": \"value\",\n\t\t\t\"radius\": \"value\",\n\t\t\t\"style\": \"value\",\n\t\t\t\"width\": \"value\"\n\t\t},\n\t\t\"color\": {\n\t\t\t\"background\": \"value\",\n\t\t\t\"gradient\": \"value\",\n\t\t\t\"text\": \"value\"\n\t\t},\n\t\t\"dimensions\": {\n\t\t\t\"aspectRatio\": \"value\",\n\t\t\t\"minHeight\": \"value\"\n\t\t},\n\t\t\"filter\": {\n\t\t\t\"duotone\": \"value\"\n\t\t},\n\t\t\"spacing\": {\n\t\t\t\"blockGap\": \"value\",\n\t\t\t\"margin\": {\n\t\t\t\t\"top\": \"value\",\n\t\t\t\t\"right\": \"value\",\n\t\t\t\t\"bottom\": \"value\",\n\t\t\t\t\"left\": \"value\"\n\t\t\t},\n\t\t\t\"padding\": {\n\t\t\t\t\"top\": \"value\",\n\t\t\t\t\"right\": \"value\",\n\t\t\t\t\"bottom\": \"value\",\n\t\t\t\t\"left\": \"value\"\n\t\t\t}\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"fontFamily\": \"value\",\n\t\t\t\"fontSize\": \"value\",\n\t\t\t\"fontStyle\": \"value\",\n\t\t\t\"fontWeight\": \"value\",\n\t\t\t\"letterSpacing\": \"value\",\n\t\t\t\"lineHeight\": \"value\",\n\t\t\t\"textColumns\": \"value\",\n\t\t\t\"textDecoration\": \"value\",\n\t\t\t\"textTransform\": \"value\"\n\t\t},\n\t\t\"elements\": {\n\t\t\t\"link\": {\n\t\t\t\t\"border\": {},\n\t\t\t\t\"color\": {},\n\t\t\t\t\"spacing\": {},\n\t\t\t\t\"typography\": {}\n\t\t\t},\n\t\t\t\"h1\": {},\n\t\t\t\"h2\": {},\n\t\t\t\"h3\": {},\n\t\t\t\"h4\": {},\n\t\t\t\"h5\": {},\n\t\t\t\"h6\": {},\n\t\t\t\"heading\": {},\n\t\t\t\"button\": {},\n\t\t\t\"caption\": {}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/group\": {\n\t\t\t\t\"border\": {},\n\t\t\t\t\"color\": {},\n\t\t\t\t\"dimensions\": {},\n\t\t\t\t\"spacing\": {},\n\t\t\t\t\"typography\": {},\n\t\t\t\t\"elements\": {\n\t\t\t\t\t\"link\": {},\n\t\t\t\t\t\"h1\": {},\n\t\t\t\t\t\"h2\": {},\n\t\t\t\t\t\"h3\": {},\n\t\t\t\t\t\"h4\": {},\n\t\t\t\t\t\"h5\": {},\n\t\t\t\t\t\"h6\": {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"etc\": {}\n\t\t}\n\t}\n}\n```\n{% end %}\n### Top-level styles\n\nStyles found at the top-level will be enqueued using the `body` selector.\n\n{% codetabs %}\n{% Input %}\n\n```json\n{\n\t\"version\": 1,\n\t\"styles\": {\n\t\t\"color\": {\n\t\t\t\"text\": \"var(--wp--preset--color--primary)\"\n\t\t}\n\t}\n}\n```\n\n{% Output %}\n\n```css\nbody {\n\tcolor: var( --wp--preset--color--primary );\n}\n```\n\n{% end %}\n### Block styles\n\nStyles found within a block will be enqueued using the block selector.\n\nBy default, the block selector is generated based on its name such as `.wp-block-<blockname-without-namespace>`. For example, `.wp-block-group` for the `core\/group` block. There are some blocks that want to opt-out from this default behavior. They can do so by explicitly telling the system which selector to use for them via the `__experimentalSelector` key within the `supports` section of its `block.json` file. Note that the block needs to be registered server-side for the `__experimentalSelector` field to be available to the style engine.\n\n{% codetabs %}\n{% Input %}\n\n```json\n{\n\t\"version\": 1,\n\t\"styles\": {\n\t\t\"color\": {\n\t\t\t\"text\": \"var(--wp--preset--color--primary)\"\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/paragraph\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"text\": \"var(--wp--preset--color--secondary)\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"core\/group\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"text\": \"var(--wp--preset--color--tertiary)\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n{% Output %}\n\n```css\nbody {\n\tcolor: var( --wp--preset--color--primary );\n}\np { \/* The core\/paragraph opts out from the default behaviour and uses p as a selector. *\/\n\tcolor: var( --wp--preset--color--secondary );\n}\n.wp-block-group {\n\tcolor: var( --wp--preset--color--tertiary );\n}\n```\n{% end %}\n\n#### Referencing a style\n\nA block can be styled using a reference to a root level style. This feature is supported by Gutenberg.\nIf you register a background color for the root using styles.color.background:\n\n```JSON\n\"styles\": {\n\t\t\"color\": {\n\t\t\t\"background\": \"var(--wp--preset--color--primary)\"\n\t\t}\n\t}\n```\n\nYou can use `ref: \"styles.color.background\"`  to re-use the style for a block:\n\n```JSON\n{\n\t\"color\": {\n\t\t\"text\": { \"ref\": \"styles.color.background\" }\n\t}\n}\n```\n\n#### Element styles\n\nIn addition to top-level and block-level styles, there's the concept of elements that can be used in both places. There's a closed set of them:\n\nSupported by Gutenberg:\n\n- `button`: maps to the `wp-element-button` CSS class. Also maps to `wp-block-button__link` for backwards compatibility.\n- `caption`: maps to the `.wp-element-caption, .wp-block-audio figcaption, .wp-block-embed figcaption, .wp-block-gallery figcaption, .wp-block-image figcaption, .wp-block-table figcaption, .wp-block-video figcaption` CSS classes.\n- `heading`: maps to all headings, the `h1 to h6` CSS selectors.\n\nSupported by WordPress:\n\n- `h1`: maps to the `h1` CSS selector.\n- `h2`: maps to the `h2` CSS selector.\n- `h3`: maps to the `h3` CSS selector.\n- `h4`: maps to the `h4` CSS selector.\n- `h5`: maps to the `h5` CSS selector.\n- `h6`: maps to the `h6` CSS selector.\n- `link`: maps to the `a` CSS selector.\n\nIf they're found in the top-level the element selector will be used. If they're found within a block, the selector to be used will be the element's appended to the corresponding block.\n\n\n{% codetabs %}\n{% Input %}\n\n```json\n{\n\t\"version\": 1,\n\t\"styles\": {\n\t\t\"typography\": {\n\t\t\t\"fontSize\": \"var(--wp--preset--font-size--normal)\"\n\t\t},\n\t\t\"elements\": {\n\t\t\t\"h1\": {\n\t\t\t\t\"typography\": {\n\t\t\t\t\t\"fontSize\": \"var(--wp--preset--font-size--huge)\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"h2\": {\n\t\t\t\t\"typography\": {\n\t\t\t\t\t\"fontSize\": \"var(--wp--preset--font-size--big)\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"h3\": {\n\t\t\t\t\"typography\": {\n\t\t\t\t\t\"fontSize\": \"var(--wp--preset--font-size--medium)\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core\/group\": {\n\t\t\t\t\"elements\": {\n\t\t\t\t\t\"h2\": {\n\t\t\t\t\t\t\"typography\": {\n\t\t\t\t\t\t\t\"fontSize\": \"var(--wp--preset--font-size--small)\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"h3\": {\n\t\t\t\t\t\t\"typography\": {\n\t\t\t\t\t\t\t\"fontSize\": \"var(--wp--preset--font-size--smaller)\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n{% Output %}\n\n```css\nbody {\n\tfont-size: var( --wp--preset--font-size--normal );\n}\nh1 {\n\tfont-size: var( --wp--preset--font-size--huge );\n}\nh2 {\n\tfont-size: var( --wp--preset--font-size--big );\n}\nh3 {\n\tfont-size: var( --wp--preset--font-size--medium );\n}\n.wp-block-group h2 {\n\tfont-size: var( --wp--preset--font-size--small );\n}\n.wp-block-group h3 {\n\tfont-size: var( --wp--preset--font-size--smaller );\n}\n```\n{% end %}\n##### Element pseudo selectors\n\nPseudo selectors `:hover`, `:focus`, `:visited`, `:active`, `:link`, `:any-link` are supported by Gutenberg.\n\n```json\n\"elements\": {\n\t\t\"link\": {\n\t\t\t\"color\": {\n\t\t\t\t\"text\": \"green\"\n\t\t\t},\n\t\t\t\":hover\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"text\": \"hotpink\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n#### Variations\n\nA block can have a \"style variation\", as defined per the [block.json specification](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-registration\/#styles-optional). Theme authors can define the style attributes for an existing style variation using the theme.json file. Styles for unregistered style variations will be ignored.\n\nNote that variations are a \"block concept\", they only exist bound to blocks. The `theme.json` specification respects that distinction by only allowing `variations` at the block-level but not at the top-level. It's also worth highlighting that only variations defined in the `block.json` file of the block are considered \"registered\": so far, the style variations added via `register_block_style` or in the client are ignored, see [this issue](https:\/\/github.com\/WordPress\/gutenberg\/issues\/49602) for more information.\n\nFor example, this is how to provide styles for the existing `plain` variation for the `core\/quote` block:\n\n```json\n{\n\t\"version\": 2,\n\t\"styles\":{\n\t\t\"blocks\": {\n\t\t\t\"core\/quote\": {\n\t\t\t\t\"variations\": {\n\t\t\t\t\t\"plain\": {\n\t\t\t\t\t\t\"color\": {\n\t\t\t\t\t\t\t\"background\": \"red\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nThe resulting CSS output is this:\n\n```css\n.wp-block-quote.is-style-plain {\n\tbackground-color: red;\n}\n```\n\n### customTemplates\n\n<div class=\"callout callout-alert\">Supported in WordPress from version 5.9.<\/div>\n\nWithin this field themes can list the custom templates present in the `templates` folder. For example, for a custom template named `my-custom-template.html`, the `theme.json` can declare what post types can use it and what's the title to show the user:\n\n- name: mandatory.\n- title: mandatory, translatable.\n- postTypes: optional, only applies to the `page` by default.\n\n```json\n{\n    \"version\": 2,\n\t\"customTemplates\": [\n\t\t{\n\t\t\t\"name\": \"my-custom-template\",\n\t\t\t\"title\": \"The template title\",\n\t\t\t\"postTypes\": [\n\t\t\t\t\"page\",\n\t\t\t\t\"post\",\n\t\t\t\t\"my-cpt\"\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n### templateParts\n\n<div class=\"callout callout-alert\">Supported in WordPress from version 5.9.<\/div>\n\nWithin this field themes can list the template parts present in the `parts` folder. For example, for a template part named `my-template-part.html`, the `theme.json` can declare the area term for the template part entity which is responsible for rendering the corresponding block variation (Header block, Footer block, etc.) in the editor. Defining this area term in the json will allow the setting to persist across all uses of that template part entity, as opposed to a block attribute that would only affect one block. Defining area as a block attribute is not recommended as this is only used 'behind the scenes' to aid in bridging the gap between placeholder flows and entity creation.\n\nCurrently block variations exist for \"header\" and \"footer\" values of the area term, any other values and template parts not defined in the json will default to the general template part block. Variations will be denoted by specific icons within the editor's interface, will default to the corresponding semantic HTML element for the wrapper (this can also be overridden by the `tagName` attribute set on the template part block), and will contextualize the template part allowing more custom flows in future editor improvements.\n\n- name: mandatory.\n- title: optional, translatable.\n- area: optional, will be set to `uncategorized` by default and trigger no block variation.\n\n```json\n{\n    \"version\": 2,\n\t\"templateParts\": [\n\t\t{\n\t\t\t\"name\": \"my-template-part\",\n\t\t\t\"title\": \"Header\",\n\t\t\t\"area\": \"header\"\n\t\t}\n\t]\n}\n```\n\n### patterns\n\n<div class=\"callout callout-alert\">Supported in WordPress from version 6.0 using <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/theme-json-reference\/theme-json-living\/\">version 2<\/a> of <code>theme.json<\/code>.<\/div>\n\nWithin this field themes can list patterns to register from [Pattern Directory](https:\/\/wordpress.org\/patterns\/). The `patterns` field is an array of pattern `slugs` from the Pattern Directory. Pattern slugs can be extracted by the `url` in single pattern view at the Pattern Directory. For example in this url `https:\/\/wordpress.org\/patterns\/pattern\/partner-logos` the slug is `partner-logos`.\n\n```json\n{\n\t\"version\": 2,\n\t\"patterns\": [ \"short-text-surrounded-by-round-images\", \"partner-logos\" ]\n}\n```\n\n## Developing with theme.json\n\nIt can be difficult to remember the theme.json settings and properties while you develop, so a JSON scheme was created to help. The schema is available at https:\/\/schemas.wp.org\/trunk\/theme.json\n\nCode editors can pick up the schema and can provide help like tooltips, autocomplete, or schema validation in the editor. To use the schema in Visual Studio Code, add `\"$schema\": \"https:\/\/schemas.wp.org\/trunk\/theme.json\"` to the beginning of your theme.json file.\n\n![Example using validation with schema](https:\/\/developer.wordpress.org\/files\/2021\/11\/theme-json-schema-updated.gif)\n\n\n## Frequently Asked Questions\n\n### The naming schema of CSS Custom Properties\n\nOne thing you may have noticed is the naming schema used for the CSS Custom Properties the system creates, including the use of double hyphen, `--`, to separate the different \"concepts\". Take the following examples.\n\n**Presets** such as `--wp--preset--color--black` can be divided into the following chunks:\n\n- `--wp`: prefix to namespace the CSS variable.\n- `preset `: indicates is a CSS variable that belongs to the presets.\n- `color`: indicates which preset category the variable belongs to. It can be `color`, `font-size`, `gradients`.\n- `black`: the `slug` of the particular preset value.\n\n**Custom** properties such as `--wp--custom--line-height--body`, which can be divided into the following chunks:\n\n- `--wp`: prefix to namespace the CSS variable.\n- `custom`: indicates is a \"free-form\" CSS variable created by the theme.\n- `line-height--body`: the result of converting the \"custom\" object keys into a string.\n\nThe `--` as a separator has two functions:\n\n- Readability, for human understanding. It can be thought as similar to the BEM naming schema, it separates \"categories\".\n- Parsability, for machine understanding. Using a defined structure allows machines to understand the meaning of the property `--wp--preset--color--black`: it's a value bounded to the color preset whose slug is \"black\", which then gives us room to do more things with them.\n\n### Why using `--` as a separator?\n\nWe could have used any other separator, such as a single `-`.\n\nHowever, that'd have been problematic, as it'd have been impossible to tell how `--wp-custom-line-height-template-header` should be converted back into an object, unless we force theme authors not to use `-` in their variable names.\n\nBy reserving `--` as a category separator and let theme authors use `-` for word-boundaries, the naming is clearer: `--wp--custom--line-height--template-header`.\n\n### How settings under \"custom\" create new CSS Custom Properties\n\nThe algorithm to create CSS Variables out of the settings under the \"custom\" key works this way:\n\nThis is for clarity, but also because we want a mechanism to parse back a variable name such `--wp--custom--line-height--body` to its object form in theme.json. We use the same separation for presets.\n\nFor example:\n\n{% codetabs %}\n{% Input %}\n\n```json\n{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"custom\": {\n\t\t\t\"lineHeight\": {\n\t\t\t\t\"body\": 1.7\n\t\t\t},\n\t\t\t\"font-primary\": \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif\"\n\t\t}\n\t}\n}\n```\n\n{% Output %}\n\n```css\nbody {\n\t--wp--custom--line-height--body: 1.7;\n\t--wp--custom--font-primary: \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif\";\n}\n```\n{% end %}\n\nA few notes about this process:\n\n- `camelCased` keys are transformed into its `kebab-case` form, as to follow the CSS property naming schema. Example: `lineHeight` is transformed into `line-height`.\n- Keys at different depth levels are separated by `--`. That's why `line-height` and `body` are separated by `--`.\n- You shouldn't use `--` in the names of the keys within the `custom` object. Example, **don't do** this:\n\n```json\n{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"custom\": {\n\t\t\t\"line--height\": { \/\/ DO NOT DO THIS\n\t\t\t\t\"body\": 1.7\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### Global Stylesheet\n\nIn WordPress 5.8, the CSS for some of the presets defined by WordPress (font sizes, colors, and gradients) was loaded twice for most themes: in the block-library stylesheet plus in the global stylesheet. Additionally, there were slight differences in the CSS in both places.\n\nIn WordPress 5.9 release, CSS of presets are consolidated into the global stylesheet, that is now loaded for all themes. Each preset value generates a single CSS Custom Property and a class, as in:\n\n```css\n\/* CSS Custom Properties for the preset values *\/\nbody {\n  --wp--preset--<PRESET_TYPE>--<PRESET_SLUG>: <DEFAULT_VALUE>;\n  --wp--preset--color--pale-pink: #f78da7;\n  --wp--preset--font-size--large: 36px;\n  \/* etc. *\/\n}\n\n\/* CSS classes for the preset values *\/\n.has-<PRESET_SLUG>-<PRESET_TYPE> { ... }\n.has-pale-pink-color { color: var(--wp--preset--color--pale-pink) !important; }\n.has-large-font-size { font-size: var(--wp--preset--font-size--large) !important; }\n```\n\nFor themes to override the default values they can use the `theme.json` and provide the same slug. Themes that do not use a `theme.json` can still override the default values by enqueuing some CSS that sets the corresponding CSS Custom Property.\n\n`Example` (sets a new value for the default large font size):\n\n```css\nbody {\n --wp--preset--font-size--large: <NEW_VALUE>;\n}\n```\n\n### Specificity for link colors provided by the user\n\nIn v1, when a user selected a link color for a specific block we attached a class to that block in the form of `.wp-element-<ID>` and then enqueued the following style:\n\n```css\n.wp-element-<ID> a { color: <USER_COLOR_VALUE> !important; }\n```\n\nWhile this preserved user preferences at all times, the specificity was too strong and conflicted with some blocks with legit uses of an HTML element that shouldn\u2019t be considered links. To [address this issue](https:\/\/github.com\/WordPress\/gutenberg\/pull\/34689), in WordPress 5.9 release, the `!important` was removed and updated the corresponding blocks to style the a elements with a specificity higher than the user link color, which now is:\n\n```css\n.wp-element-<ID> a { color: <USER_COLOR_VALUE>; }\n```\n\nAs a result of this change, it\u2019s now the block author and theme author\u2019s responsibility to make sure the user choices are respected at all times and that the link color provided by the user (specificity 011) is not overridden.\n\n### What is blockGap and how can I use it?\n\nFor blocks that contain inner blocks, such as Group, Columns, Buttons, and Social Icons, `blockGap` controls the spacing between inner blocks. For `blockGap` to work, the block must also opt in to the [`layout` block support](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-supports\/#layout), which provides layout styles that can be adjusted via the block spacing controls. Depending on the layout of the block, the `blockGap` value will be output as either a vertical margin or a `gap` value. In the editor, the control for the `blockGap` value is called _Block spacing_, located in the Dimensions panel.\n\n```json\n{\n\t\"version\": 2,\n\t\"settings\": {\n\t\t\"spacing\": {\n\t\t\t\"blockGap\": true,\n\t\t}\n\t},\n\t\"styles\": {\n\t\t\"spacing\": {\n\t\t\t\"blockGap\": \"1.5rem\"\n\t\t}\n\t}\n}\n```\n\nThe setting for `blockGap` is either a boolean or `null` value and is `null` by default. This allows an extra level of control over style output. The `settings.spacing.blockGap` setting in a `theme.json` file accepts the following values:\n\n- `true`: Opt into displaying _Block spacing_ controls in the editor UI and output `blockGap` styles.\n- `false`: Opt out of displaying _Block spacing_ controls in the editor UI, with `blockGap` styles stored in `theme.json` still being rendered. This allows themes to use `blockGap` values without allowing users to make changes within the editor.\n- `null` (default): Opt out of displaying _Block spacing_ controls, _and_ prevent the output of `blockGap` styles.\n\nThe value defined for the root `styles.spacing.blockGap` style is also output as a CSS property, named `--wp--style--block-gap`.\n\n### Why does it take so long to update the styles in the browser?\n\nWhen you are actively developing with theme.json you may notice it takes 30+ seconds for your changes to show up in the browser, this is because `theme.json` is cached. To remove this caching issue, set either [`WP_DEBUG`](https:\/\/wordpress.org\/documentation\/article\/debugging-in-wordpress\/#wp_debug) or [`SCRIPT_DEBUG`](https:\/\/wordpress.org\/documentation\/article\/debugging-in-wordpress\/#script_debug) to 'true' in your [`wp-config.php`](https:\/\/wordpress.org\/documentation\/article\/editing-wp-config-php\/). This tells WordPress to skip the cache and always use fresh data.\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/themes\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Themes<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The block editor provides a number of options for theme designers and developers, to interact with it, including theme-defined color settings, font size control, and much more.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Types of themes<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Classic theme<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In terms of block editor terminology this is any theme that defines its templates in the traditional <code>.php<\/code> file format, and that doesn't have an <code>index.html<\/code> format template in the <code>\/block-templates<\/code> or <code>\/templates<\/code> folders. A <code>Classic<\/code> theme has the ability to provide configuration and styling options to the block editor, and block content, via <a href=\"\/docs\/how-to-guides\/themes\/theme-support.md\">Theme Supports<\/a>, or by including a <a href=\"\/docs\/how-to-guides\/themes\/global-settings-and-styles.md\">theme.json<\/a> file. A theme does not have to be a <code>Block<\/code> theme in order to take advantage of some of the flexibility provided by the use of a <code>theme.json<\/code> file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block theme<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is any theme that has, at a minimum, an <code>index.html<\/code> format template in the <code>\/block-templates<\/code> or <code>\/templates<\/code> folders, and with templates  provided in form of block content markup. While many <code>Block<\/code> themes will make use of a <code>theme.json<\/code> file to provide configuration and styling settings, a <code>theme.json<\/code> is not a requirement of <code>Block<\/code> themes. The advantage of <code>Block<\/code> themes is that the block editor can be used to edit all areas of the site: headers, footers, sidebars, etc.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Full site editing (FSE)<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There isn't an FSE specific theme type. In WordPress > 5.9 FSE is enabled for any <code>Block<\/code> theme, ie. any theme that has an <code>index.html<\/code> format template in the <code>\/block-templates<\/code> or <code>\/templates<\/code> folders.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Contents<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/how-to-guides\/themes\/global-settings-and-styles.md\">Global Settings (theme.json)<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/how-to-guides\/themes\/theme-support.md\">Theme Support<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Themes\n\nThe block editor provides a number of options for theme designers and developers, to interact with it, including theme-defined color settings, font size control, and much more.\n\n## Types of themes\n\n### Classic theme\n\nIn terms of block editor terminology this is any theme that defines its templates in the traditional `.php` file format, and that doesn't have an `index.html` format template in the `\/block-templates` or `\/templates` folders. A `Classic` theme has the ability to provide configuration and styling options to the block editor, and block content, via [Theme Supports](\/docs\/how-to-guides\/themes\/theme-support.md), or by including a [theme.json](\/docs\/how-to-guides\/themes\/global-settings-and-styles.md) file. A theme does not have to be a `Block` theme in order to take advantage of some of the flexibility provided by the use of a `theme.json` file.\n\n### Block theme\n\nThis is any theme that has, at a minimum, an `index.html` format template in the `\/block-templates` or `\/templates` folders, and with templates  provided in form of block content markup. While many `Block` themes will make use of a `theme.json` file to provide configuration and styling settings, a `theme.json` is not a requirement of `Block` themes. The advantage of `Block` themes is that the block editor can be used to edit all areas of the site: headers, footers, sidebars, etc.\n\n### Full site editing (FSE)\n\nThere isn't an FSE specific theme type. In WordPress > 5.9 FSE is enabled for any `Block` theme, ie. any theme that has an `index.html` format template in the `\/block-templates` or `\/templates` folders.\n\n**Contents**\n\n- [Global Settings (theme.json)](\/docs\/how-to-guides\/themes\/global-settings-and-styles.md)\n- [Theme Support](\/docs\/how-to-guides\/themes\/theme-support.md)\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/themes\/theme-support.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Theme Support<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The new Blocks include baseline support in all themes, enhancements to opt-in to and the ability to extend and customize.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are a few new concepts to consider when building themes:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><strong>Editor Color Palette<\/strong> - A default set of colors is provided, but themes can register their own and optionally lock users into picking from the defined palette.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Editor Text Size Palette<\/strong> - A default set of sizes is provided, but themes can register their own and optionally lock users into picking from preselected sizes.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Responsive Embeds<\/strong> - Themes must opt-in to responsive embeds.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Frontend &amp; Editor Styles<\/strong> - To get the most out of blocks, theme authors will want to make sure Core styles look good and opt-in, or write their own styles to best fit their theme.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Block Tools<\/strong> - Themes can opt-in to several block tools like line height, custom units.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Core Block Patterns<\/strong> - Themes can opt-out of the default block patterns.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>By default, blocks provide their styles to enable basic support for blocks in themes without any change. They also <a href=\"#default-block-styles\">provide opt-in opinionated styles<\/a>. Themes can add\/override these styles, or they can provide no styles at all, and rely fully on what the blocks provide.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some advanced block features require opt-in support in the theme itself as it's difficult for the block to provide these styles, they may require some architecting of the theme itself, in order to work well.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To opt-in for one of these features, call <code>add_theme_support<\/code> in the <code>functions.php<\/code> file of the theme. For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function mytheme_setup_theme_supported_features() {\n\tadd_theme_support( 'editor-color-palette', array(\n\t\tarray(\n\t\t\t'name'  => esc_attr__( 'strong magenta', 'themeLangDomain' ),\n\t\t\t'slug'  => 'strong-magenta',\n\t\t\t'color' => '#a156b4',\n\t\t),\n\t\tarray(\n\t\t\t'name'  => esc_attr__( 'light grayish magenta', 'themeLangDomain' ),\n\t\t\t'slug'  => 'light-grayish-magenta',\n\t\t\t'color' => '#d0a5db',\n\t\t),\n\t\tarray(\n\t\t\t'name'  => esc_attr__( 'very light gray', 'themeLangDomain' ),\n\t\t\t'slug'  => 'very-light-gray',\n\t\t\t'color' => '#eee',\n\t\t),\n\t\tarray(\n\t\t\t'name'  => esc_attr__( 'very dark gray', 'themeLangDomain' ),\n\t\t\t'slug'  => 'very-dark-gray',\n\t\t\t'color' => '#444',\n\t\t),\n\t) );\n}\n\nadd_action( 'after_setup_theme', 'mytheme_setup_theme_supported_features' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Opt-in features<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Default block styles<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Core blocks include default structural styles. These are loaded in both the editor and the front end by default. An example of these styles is the CSS that powers the columns block. Without these rules, the block would result in a broken layout containing no columns at all.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Opinionated block styles<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The block editor allows themes to opt in to slightly more opinionated styles for the front end. An example of these styles is the default color bar to the left of blockquotes. If you'd like to use these opinionated styles in a classic theme, add theme support for <code>wp-block-styles<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support( 'wp-block-styles' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can see the CSS that will be included in the <a href=\"https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/theme.scss\">block library theme file<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For block themes or themes providing a <code>theme.json<\/code> file, it is not recommended to use this theme support. Instead, to ensure there is no styling conflict between global styles rules and block styles, add the desired block styles to the theme's <code>theme.json<\/code> file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Wide Alignment:<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Some blocks such as the image block have the possibility to define a \"wide\" or \"full\" alignment by adding the corresponding classname to the block's wrapper ( <code>alignwide<\/code> or <code>alignfull<\/code> ). A theme can opt-in for this feature by calling:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support( 'align-wide' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>For more information about this function, see <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/add_theme_support\/\">the developer docs on <code>add_theme_support()<\/code><\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Wide Alignments and Floats<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It can be difficult to create a responsive layout that accommodates wide images, a sidebar, a centered column, and floated elements that stay within that centered column.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The block editor adds additional markup to floated images to make styling them easier.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here's the markup for an <code>Image<\/code> with a caption:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><figure class=\"wp-block-image\">\n\t<img src=\"...\" alt=\"\" width=\"200px\">\n\t<figcaption>Short image caption.<\/figcaption>\n<\/figure>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Here's the markup for a left-floated image:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><div class=\"wp-block-image\">\n\t<figure class=\"alignleft\">\n\t\t<img src=\"...\" alt=\"\" width=\"200px\">\n\t\t<figcaption>Short image caption.<\/figcaption>\n\t<\/figure>\n<\/div>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Here's an example <a href=\"https:\/\/codepen.io\/joen\/pen\/zLWvrW\">codepen<\/a> using the above markup to achieve a responsive layout that features a sidebar, wide images, and floated elements with bounded captions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block Color Palettes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Different blocks have the possibility of customizing colors. The block editor provides a default palette, but a theme can overwrite it and provide its own:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support( 'editor-color-palette', array(\n\tarray(\n\t\t'name'  => esc_attr__( 'strong magenta', 'themeLangDomain' ),\n\t\t'slug'  => 'strong-magenta',\n\t\t'color' => '#a156b4',\n\t),\n\tarray(\n\t\t'name'  => esc_attr__( 'light grayish magenta', 'themeLangDomain' ),\n\t\t'slug'  => 'light-grayish-magenta',\n\t\t'color' => '#d0a5db',\n\t),\n\tarray(\n\t\t'name'  => esc_attr__( 'very light gray', 'themeLangDomain' ),\n\t\t'slug'  => 'very-light-gray',\n\t\t'color' => '#eee',\n\t),\n\tarray(\n\t\t'name'  => esc_attr__( 'very dark gray', 'themeLangDomain' ),\n\t\t'slug'  => 'very-dark-gray',\n\t\t'color' => '#444',\n\t),\n) );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>name<\/code> is a human-readable label (demonstrated above) that appears in the tooltip and provides a meaningful description of the color to users. It is especially important for those who rely on screen readers or would otherwise have difficulty perceiving the color. <code>slug<\/code> is a unique identifier for the color and is used to generate the CSS classes used by the block editor color palette. <code>color<\/code> is the hexadecimal code to specify the color.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some colors change dynamically \u2014 such as \"Primary\" and \"Secondary\" color \u2014 such as in the Twenty Nineteen theme and cannot be described programmatically. In spite of that, it is still advisable to provide meaningful <code>name<\/code>s for at least the default values when applicable.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The colors will be shown in order on the palette, and there's no limit to how many can be specified.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Themes are responsible for creating the classes that apply the colors in different contexts. Core blocks use \"color\", \"background-color\", and \"border-color\" contexts. So to correctly apply \"strong magenta\" to all contexts of core blocks a theme should implement the classes itself. The class name is built appending 'has-', followed by the class name <em>using<\/em> kebab case and ending with the context name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>.has-strong-magenta-color {\n\tcolor: #a156b4;\n}\n\n.has-strong-magenta-background-color {\n\tbackground-color: #a156b4;\n}\n\n.has-strong-magenta-border-color {\n\tborder-color: #a156b4;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Starting in WordPress 5.9, to override color values defined by core, themes without a <code>theme.json<\/code> have to set their values via CSS Custom Properties instead of providing the classes. The CSS Custom Properties use the following naming <code>--wp--preset--color--&lt;slug><\/code>. See more info in <a href=\"https:\/\/make.wordpress.org\/core\/2022\/01\/08\/updates-for-settings-styles-and-theme-json\/\">this devnote<\/a>. For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>:root {\n\t--wp--preset--color--cyan-bluish-gray: <new_value>;\n\t--wp--preset--color--pale-pink: <new_value>;\n}\n<\/new_value><\/new_value><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block Gradient Presets<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Different blocks have the possibility of selecting from a list of predefined gradients. The block editor provides a default gradient presets, but a theme can overwrite them and provide its own:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support(\n\t'editor-gradient-presets',\n\tarray(\n\t\tarray(\n\t\t\t'name'     => esc_attr__( 'Vivid cyan blue to vivid purple', 'themeLangDomain' ),\n\t\t\t'gradient' => 'linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',\n\t\t\t'slug'     => 'vivid-cyan-blue-to-vivid-purple'\n\t\t),\n\t\tarray(\n\t\t\t'name'     => esc_attr__( 'Vivid green cyan to vivid cyan blue', 'themeLangDomain' ),\n\t\t\t'gradient' => 'linear-gradient(135deg,rgba(0,208,132,1) 0%,rgba(6,147,227,1) 100%)',\n\t\t\t'slug'     =>  'vivid-green-cyan-to-vivid-cyan-blue',\n\t\t),\n\t\tarray(\n\t\t\t'name'     => esc_attr__( 'Light green cyan to vivid green cyan', 'themeLangDomain' ),\n\t\t\t'gradient' => 'linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%)',\n\t\t\t'slug'     => 'light-green-cyan-to-vivid-green-cyan',\n\t\t),\n\t\tarray(\n\t\t\t'name'     => esc_attr__( 'Luminous vivid amber to luminous vivid orange', 'themeLangDomain' ),\n\t\t\t'gradient' => 'linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%)',\n\t\t\t'slug'     => 'luminous-vivid-amber-to-luminous-vivid-orange',\n\t\t),\n\t\tarray(\n\t\t\t'name'     => esc_attr__( 'Luminous vivid orange to vivid red', 'themeLangDomain' ),\n\t\t\t'gradient' => 'linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%)',\n\t\t\t'slug'     => 'luminous-vivid-orange-to-vivid-red',\n\t\t),\n\t)\n);\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>name<\/code> is a human-readable label (demonstrated above) that appears in the tooltip and provides a meaningful description of the gradient to users. It is especially important for those who rely on screen readers or would otherwise have difficulty perceiving the color. <code>gradient<\/code> is a CSS value of a gradient applied to a background-image of the block. Details of valid gradient types can be found in the <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/CSS_Images\/Using_CSS_gradients\">mozilla documentation<\/a>. <code>slug<\/code> is a unique identifier for the gradient and is used to generate the CSS classes used by the block editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Themes are responsible for creating the classes that apply the gradients. So to correctly apply \"Vivid cyan blue to vivid purple\" a theme should implement the following class:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>.has-vivid-cyan-blue-to-vivid-purple-gradient-background {\n\tbackground: linear-gradient(\n\t\t135deg,\n\t\trgba( 6, 147, 227, 1 ) 0%,\n\t\trgb( 155, 81, 224 ) 100%\n\t);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Starting in WordPress 5.9, to override gradient values defined by core, themes without a <code>theme.json<\/code> have to set their values via CSS Custom Properties instead of providing the classes. The CSS Custom Properties use the following naming <code>--wp--preset--gradient--&lt;slug><\/code>. See more info in <a href=\"https:\/\/make.wordpress.org\/core\/2022\/01\/08\/updates-for-settings-styles-and-theme-json\/\">this devnote<\/a>. For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>:root {\n\t--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: <new_value>;\n\t--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: <new_value>;\n}\n<\/new_value><\/new_value><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Block Font Sizes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Blocks may allow the user to configure the font sizes they use, e.g., the paragraph block. The block provides a default set of font sizes, but a theme can overwrite it and provide its own:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support( 'editor-font-sizes', array(\n\tarray(\n\t\t'name' => esc_attr__( 'Small', 'themeLangDomain' ),\n\t\t'size' => 12,\n\t\t'slug' => 'small'\n\t),\n\tarray(\n\t\t'name' => esc_attr__( 'Regular', 'themeLangDomain' ),\n\t\t'size' => 16,\n\t\t'slug' => 'regular'\n\t),\n\tarray(\n\t\t'name' => esc_attr__( 'Large', 'themeLangDomain' ),\n\t\t'size' => 36,\n\t\t'slug' => 'large'\n\t),\n\tarray(\n\t\t'name' => esc_attr__( 'Huge', 'themeLangDomain' ),\n\t\t'size' => 50,\n\t\t'slug' => 'huge'\n\t)\n) );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The font sizes are rendered on the font size picker in the order themes provide them.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Themes are responsible for creating the classes that apply the correct font size styles.<br>The class name is built appending 'has-', followed by the font size name <em>using<\/em> kebab case and ending with <code>-font-size<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As an example for the regular font size, a theme may provide the following class.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>.has-regular-font-size {\n\tfont-size: 16px;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:html -->\n<div class=\"callout callout-info\">\n<strong>Note:<\/strong> The slugs `default` and `custom` are reserved and cannot be used by themes.\n<\/div>\n<!-- \/wp:html -->\n\n<!-- wp:paragraph -->\n<p>Starting in WordPress 5.9, to override font size values defined by core, themes without a <code>theme.json<\/code> have to set their values via CSS Custom Properties instead of providing the classes. The CSS Custom Properties use the following naming <code>--wp--preset--font-size--&lt;slug><\/code>. See more info in <a href=\"https:\/\/make.wordpress.org\/core\/2022\/01\/08\/updates-for-settings-styles-and-theme-json\/\">this devnote<\/a>. For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>:root {\n\t--wp--preset--font-size--small: <new_value>;\n\t--wp--preset--font-size--large: <new_value>;\n}\n<\/new_value><\/new_value><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Disabling custom font sizes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Themes can disable the ability to set custom font sizes with the following code:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support( 'disable-custom-font-sizes' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When set, users will be restricted to the default sizes provided in the block editor or the sizes provided via the <code>editor-font-sizes<\/code> theme support setting.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Disabling custom colors in block Color Palettes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>By default, the color palette offered to blocks allows the user to select a custom color different from the editor or theme default colors.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Themes can disable this feature using:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support( 'disable-custom-colors' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This flag will make sure users are only able to choose colors from the <code>editor-color-palette<\/code> the theme provided or from the editor default colors if the theme did not provide one.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Disabling custom gradients<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Themes can disable the ability to set a custom gradient with the following code:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support( 'disable-custom-gradients' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>When set, users will be restricted to the default gradients provided in the block editor or the gradients provided via the <code>editor-gradient-presets<\/code> theme support setting.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Disabling base layout styles<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em><strong>Note:<\/strong> Since WordPress 6.1.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Themes can opt out of generated block layout styles that provide default structural styles for core blocks including Group, Columns, Buttons, and Social Icons. By using the following code, these themes commit to providing their own structural styling, as using this feature will result in core blocks displaying incorrectly in both the editor and site frontend:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support( 'disable-layout-styles' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>For themes looking to customize <code>blockGap<\/code> styles or block spacing, see <a href=\"\/docs\/how-to-guides\/themes\/global-settings-and-styles.md#what-is-blockgap-and-how-can-i-use-it\">the developer docs on Global Settings &amp; Styles<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Supporting custom line heights<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Some blocks like paragraph and headings support customizing the line height. Themes can enable support for this feature with the following code:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support( 'custom-line-height' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Support custom units<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In addition to pixels, users can use other units to define sizes, paddings... The available units are: px, em, rem, vh, vw. Themes can disable support for this feature with the following code:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support( 'custom-units', array() );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Themes can also filter the available custom units.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support( 'custom-units', 'rem', 'em' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Disabling the default block patterns.<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>WordPress comes with a number of block patterns built-in, themes can opt-out of the bundled patterns and provide their own set using the following code:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>remove_theme_support( 'core-block-patterns' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Editor styles<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The block editor supports the theme's <a href=\"https:\/\/codex.wordpress.org\/Editor_Style\">editor styles<\/a>, however it works a little differently than in the classic editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the classic editor, the editor stylesheet is loaded directly into the iframe of the WYSIWYG editor, with no changes. The block editor, however, doesn't use iframes. To make sure your styles are applied only to the content of the editor, we automatically transform your editor styles by selectively rewriting or adjusting certain CSS selectors. This also allows the block editor to leverage your editor style in block variation previews.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, if you write <code>body { ... }<\/code> in your editor style, this is rewritten to <code>.editor-styles-wrapper { ... }<\/code>. This also means that you should <em>not<\/em> target any of the editor class names directly.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Because it works a little differently, you need to opt-in to this by adding an extra snippet to your theme, in addition to the add_editor_style function:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support( 'editor-styles' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You shouldn't need to change your editor styles too much; most themes can add the snippet above and get similar results in the classic editor and inside the block editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Enqueuing the editor style<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Use the <code>add_editor_style<\/code> function to enqueue and load CSS on the editor screen. For the classic editor, this was the only function needed to add style to the editor. For the new block editor, you first need to <code>add_theme_support( 'editor-styles');<\/code> mentioned above.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_editor_style( 'style-editor.css' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Adding that to your <code>functions.php<\/code> file will add the stylesheet <code>style-editor.css<\/code> to the queue of stylesheets to be loaded in the editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Basic colors<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You can style the editor like any other webpage. Here's how to change the background color and the font color to blue:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/* Add this to your `style-editor.css` file *\/\nbody {\n\tbackground-color: #d3ebf3;\n\tcolor: #00005d;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Changing the width of the editor<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To change the main column width of the editor, add the following CSS to <code>style-editor.css<\/code>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/* Main column width *\/\n.wp-block {\n\tmax-width: 720px;\n}\n\n\/* Width of \"wide\" blocks *\/\n.wp-block&#91;data-align='wide'] {\n\tmax-width: 1080px;\n}\n\n\/* Width of \"full-wide\" blocks *\/\n.wp-block&#91;data-align='full'] {\n\tmax-width: none;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You can use those editor widths to match those in your theme. You can use any CSS width unit, including <code>%<\/code> or <code>px<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Further reading: <a href=\"\/docs\/how-to-guides\/block-tutorial\/applying-styles-with-stylesheets.md\">Applying Styles with Stylesheets<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Responsive embedded content<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The embed blocks automatically apply styles to embedded content to reflect the aspect ratio of content that is embedded in an iFrame. A block styled with the aspect ratio responsive styles would look like:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code><figure class=\"wp-embed-aspect-16-9 wp-has-aspect-ratio\">...<\/figure>\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>To make the content resize and keep its aspect ratio, the <code>&lt;body><\/code> element needs the <code>wp-embed-responsive<\/code> class. This is not set by default, and requires the theme to opt in to the <code>responsive-embeds<\/code> feature:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support( 'responsive-embeds' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Spacing control<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Some blocks can have padding controls. This is off by default, and requires the theme to opt in by declaring support:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support( 'custom-spacing' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Link color control<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Link support has been made stable as part of WordPress 5.8. It's <code>false<\/code> by default and themes can enable it via the <a href=\"\/docs\/how-to-guides\/curating-the-editor-experience\/theme-json.md\">theme.json file<\/a>:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>{\n\t\"version\": 1,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"link\": true\n\t\t}\n\t}\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Alternatively, with the Gutenberg plugin active, the old legacy support <code>add_theme_support( 'experimental-link-color' )<\/code> would also work. This fallback would be removed when the Gutenberg plugin requires WordPress 5.9 as the minimum version.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>When the user sets the link color of a block, a new style will be added in the form of:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>.wp-elements-<uuid> a {\n\tcolor: <link-color> !important;\n}\n<\/link-color><\/uuid><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>where<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><code>&lt;uuid><\/code> is a random number<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>&lt;link-color><\/code> is either <code>var(--wp--preset--color--slug)<\/code> (if the user selected a preset value) or a raw color value (if the user selected a custom value)<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The block will get attached the class <code>.wp-elements-&lt;uuid><\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Appearance Tools<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Use this setting to enable the following Global Styles settings:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>border: color, radius, style, width<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>color: link<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>spacing: blockGap, margin, padding<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>typography: lineHeight<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>dimensions: aspectRatio, minHeight<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>position: sticky<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support( 'appearance-tools' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Border<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Use this to enable all border settings:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support( 'border' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Link color<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Use this to enable the link color setting:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support( 'link-color' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Block Based Template Parts<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Block Based Template parts allow administrators to edit parts of the site using blocks. This is off by default, and requires the theme to opt in by declaring support:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_theme_support( 'block-template-parts' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This feature is only relevant for non block based themes, as block based themes already support block based template parts as part of the site editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The standalone template part editor does not allow editors to create new, or delete existing template parts. This is because the theme manually needs to include the template part in the PHP template.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can find out more about block based template parts in the <a href=\"https:\/\/developer.wordpress.org\/themes\/block-themes\/templates-and-template-parts\/#block-c5fa39a2-a27d-4bd2-98d0-dc6249a0801a\">themes handbook block template and template parts section<\/a>.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Theme Support\n\nThe new Blocks include baseline support in all themes, enhancements to opt-in to and the ability to extend and customize.\n\nThere are a few new concepts to consider when building themes:\n\n-   **Editor Color Palette** - A default set of colors is provided, but themes can register their own and optionally lock users into picking from the defined palette.\n-   **Editor Text Size Palette** - A default set of sizes is provided, but themes can register their own and optionally lock users into picking from preselected sizes.\n-   **Responsive Embeds** - Themes must opt-in to responsive embeds.\n-   **Frontend & Editor Styles** - To get the most out of blocks, theme authors will want to make sure Core styles look good and opt-in, or write their own styles to best fit their theme.\n-   **Block Tools** - Themes can opt-in to several block tools like line height, custom units.\n-   **Core Block Patterns** - Themes can opt-out of the default block patterns.\n\nBy default, blocks provide their styles to enable basic support for blocks in themes without any change. They also [provide opt-in opinionated styles](#default-block-styles). Themes can add\/override these styles, or they can provide no styles at all, and rely fully on what the blocks provide.\n\nSome advanced block features require opt-in support in the theme itself as it's difficult for the block to provide these styles, they may require some architecting of the theme itself, in order to work well.\n\nTo opt-in for one of these features, call `add_theme_support` in the `functions.php` file of the theme. For example:\n\n```php\nfunction mytheme_setup_theme_supported_features() {\n\tadd_theme_support( 'editor-color-palette', array(\n\t\tarray(\n\t\t\t'name'  => esc_attr__( 'strong magenta', 'themeLangDomain' ),\n\t\t\t'slug'  => 'strong-magenta',\n\t\t\t'color' => '#a156b4',\n\t\t),\n\t\tarray(\n\t\t\t'name'  => esc_attr__( 'light grayish magenta', 'themeLangDomain' ),\n\t\t\t'slug'  => 'light-grayish-magenta',\n\t\t\t'color' => '#d0a5db',\n\t\t),\n\t\tarray(\n\t\t\t'name'  => esc_attr__( 'very light gray', 'themeLangDomain' ),\n\t\t\t'slug'  => 'very-light-gray',\n\t\t\t'color' => '#eee',\n\t\t),\n\t\tarray(\n\t\t\t'name'  => esc_attr__( 'very dark gray', 'themeLangDomain' ),\n\t\t\t'slug'  => 'very-dark-gray',\n\t\t\t'color' => '#444',\n\t\t),\n\t) );\n}\n\nadd_action( 'after_setup_theme', 'mytheme_setup_theme_supported_features' );\n```\n\n## Opt-in features\n\n## Default block styles\n\nCore blocks include default structural styles. These are loaded in both the editor and the front end by default. An example of these styles is the CSS that powers the columns block. Without these rules, the block would result in a broken layout containing no columns at all.\n\n### Opinionated block styles\n\nThe block editor allows themes to opt in to slightly more opinionated styles for the front end. An example of these styles is the default color bar to the left of blockquotes. If you'd like to use these opinionated styles in a classic theme, add theme support for `wp-block-styles`:\n\n```php\nadd_theme_support( 'wp-block-styles' );\n```\n\nYou can see the CSS that will be included in the [block library theme file](https:\/\/github.com\/WordPress\/gutenberg\/blob\/trunk\/packages\/block-library\/src\/theme.scss).\n\nFor block themes or themes providing a `theme.json` file, it is not recommended to use this theme support. Instead, to ensure there is no styling conflict between global styles rules and block styles, add the desired block styles to the theme's `theme.json` file.\n\n### Wide Alignment:\n\nSome blocks such as the image block have the possibility to define a \"wide\" or \"full\" alignment by adding the corresponding classname to the block's wrapper ( `alignwide` or `alignfull` ). A theme can opt-in for this feature by calling:\n\n```php\nadd_theme_support( 'align-wide' );\n```\n\nFor more information about this function, see [the developer docs on `add_theme_support()`](https:\/\/developer.wordpress.org\/reference\/functions\/add_theme_support\/).\n\n### Wide Alignments and Floats\n\nIt can be difficult to create a responsive layout that accommodates wide images, a sidebar, a centered column, and floated elements that stay within that centered column.\n\nThe block editor adds additional markup to floated images to make styling them easier.\n\nHere's the markup for an `Image` with a caption:\n\n```html\n<figure class=\"wp-block-image\">\n\t<img src=\"...\" alt=\"\" width=\"200px\" \/>\n\t<figcaption>Short image caption.<\/figcaption>\n<\/figure>\n```\n\nHere's the markup for a left-floated image:\n\n```html\n<div class=\"wp-block-image\">\n\t<figure class=\"alignleft\">\n\t\t<img src=\"...\" alt=\"\" width=\"200px\" \/>\n\t\t<figcaption>Short image caption.<\/figcaption>\n\t<\/figure>\n<\/div>\n```\n\nHere's an example [codepen](https:\/\/codepen.io\/joen\/pen\/zLWvrW) using the above markup to achieve a responsive layout that features a sidebar, wide images, and floated elements with bounded captions.\n\n### Block Color Palettes\n\nDifferent blocks have the possibility of customizing colors. The block editor provides a default palette, but a theme can overwrite it and provide its own:\n\n```php\nadd_theme_support( 'editor-color-palette', array(\n\tarray(\n\t\t'name'  => esc_attr__( 'strong magenta', 'themeLangDomain' ),\n\t\t'slug'  => 'strong-magenta',\n\t\t'color' => '#a156b4',\n\t),\n\tarray(\n\t\t'name'  => esc_attr__( 'light grayish magenta', 'themeLangDomain' ),\n\t\t'slug'  => 'light-grayish-magenta',\n\t\t'color' => '#d0a5db',\n\t),\n\tarray(\n\t\t'name'  => esc_attr__( 'very light gray', 'themeLangDomain' ),\n\t\t'slug'  => 'very-light-gray',\n\t\t'color' => '#eee',\n\t),\n\tarray(\n\t\t'name'  => esc_attr__( 'very dark gray', 'themeLangDomain' ),\n\t\t'slug'  => 'very-dark-gray',\n\t\t'color' => '#444',\n\t),\n) );\n```\n\n`name` is a human-readable label (demonstrated above) that appears in the tooltip and provides a meaningful description of the color to users. It is especially important for those who rely on screen readers or would otherwise have difficulty perceiving the color. `slug` is a unique identifier for the color and is used to generate the CSS classes used by the block editor color palette. `color` is the hexadecimal code to specify the color.\n\nSome colors change dynamically \u2014 such as \"Primary\" and \"Secondary\" color \u2014 such as in the Twenty Nineteen theme and cannot be described programmatically. In spite of that, it is still advisable to provide meaningful `name`s for at least the default values when applicable.\n\nThe colors will be shown in order on the palette, and there's no limit to how many can be specified.\n\nThemes are responsible for creating the classes that apply the colors in different contexts. Core blocks use \"color\", \"background-color\", and \"border-color\" contexts. So to correctly apply \"strong magenta\" to all contexts of core blocks a theme should implement the classes itself. The class name is built appending 'has-', followed by the class name _using_ kebab case and ending with the context name.\n\n```css\n.has-strong-magenta-color {\n\tcolor: #a156b4;\n}\n\n.has-strong-magenta-background-color {\n\tbackground-color: #a156b4;\n}\n\n.has-strong-magenta-border-color {\n\tborder-color: #a156b4;\n}\n```\n\nStarting in WordPress 5.9, to override color values defined by core, themes without a `theme.json` have to set their values via CSS Custom Properties instead of providing the classes. The CSS Custom Properties use the following naming `--wp--preset--color--<slug>`. See more info in [this devnote](https:\/\/make.wordpress.org\/core\/2022\/01\/08\/updates-for-settings-styles-and-theme-json\/). For example:\n\n```css\n:root {\n\t--wp--preset--color--cyan-bluish-gray: <new_value>;\n\t--wp--preset--color--pale-pink: <new_value>;\n}\n```\n\n### Block Gradient Presets\n\nDifferent blocks have the possibility of selecting from a list of predefined gradients. The block editor provides a default gradient presets, but a theme can overwrite them and provide its own:\n\n```php\nadd_theme_support(\n\t'editor-gradient-presets',\n\tarray(\n\t\tarray(\n\t\t\t'name'     => esc_attr__( 'Vivid cyan blue to vivid purple', 'themeLangDomain' ),\n\t\t\t'gradient' => 'linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',\n\t\t\t'slug'     => 'vivid-cyan-blue-to-vivid-purple'\n\t\t),\n\t\tarray(\n\t\t\t'name'     => esc_attr__( 'Vivid green cyan to vivid cyan blue', 'themeLangDomain' ),\n\t\t\t'gradient' => 'linear-gradient(135deg,rgba(0,208,132,1) 0%,rgba(6,147,227,1) 100%)',\n\t\t\t'slug'     =>  'vivid-green-cyan-to-vivid-cyan-blue',\n\t\t),\n\t\tarray(\n\t\t\t'name'     => esc_attr__( 'Light green cyan to vivid green cyan', 'themeLangDomain' ),\n\t\t\t'gradient' => 'linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%)',\n\t\t\t'slug'     => 'light-green-cyan-to-vivid-green-cyan',\n\t\t),\n\t\tarray(\n\t\t\t'name'     => esc_attr__( 'Luminous vivid amber to luminous vivid orange', 'themeLangDomain' ),\n\t\t\t'gradient' => 'linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%)',\n\t\t\t'slug'     => 'luminous-vivid-amber-to-luminous-vivid-orange',\n\t\t),\n\t\tarray(\n\t\t\t'name'     => esc_attr__( 'Luminous vivid orange to vivid red', 'themeLangDomain' ),\n\t\t\t'gradient' => 'linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%)',\n\t\t\t'slug'     => 'luminous-vivid-orange-to-vivid-red',\n\t\t),\n\t)\n);\n```\n\n`name` is a human-readable label (demonstrated above) that appears in the tooltip and provides a meaningful description of the gradient to users. It is especially important for those who rely on screen readers or would otherwise have difficulty perceiving the color. `gradient` is a CSS value of a gradient applied to a background-image of the block. Details of valid gradient types can be found in the [mozilla documentation](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/CSS_Images\/Using_CSS_gradients). `slug` is a unique identifier for the gradient and is used to generate the CSS classes used by the block editor.\n\nThemes are responsible for creating the classes that apply the gradients. So to correctly apply \"Vivid cyan blue to vivid purple\" a theme should implement the following class:\n\n```css\n.has-vivid-cyan-blue-to-vivid-purple-gradient-background {\n\tbackground: linear-gradient(\n\t\t135deg,\n\t\trgba( 6, 147, 227, 1 ) 0%,\n\t\trgb( 155, 81, 224 ) 100%\n\t);\n}\n```\n\nStarting in WordPress 5.9, to override gradient values defined by core, themes without a `theme.json` have to set their values via CSS Custom Properties instead of providing the classes. The CSS Custom Properties use the following naming `--wp--preset--gradient--<slug>`. See more info in [this devnote](https:\/\/make.wordpress.org\/core\/2022\/01\/08\/updates-for-settings-styles-and-theme-json\/). For example:\n\n```css\n:root {\n\t--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: <new_value>;\n\t--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: <new_value>;\n}\n```\n\n### Block Font Sizes\n\nBlocks may allow the user to configure the font sizes they use, e.g., the paragraph block. The block provides a default set of font sizes, but a theme can overwrite it and provide its own:\n\n```php\nadd_theme_support( 'editor-font-sizes', array(\n\tarray(\n\t\t'name' => esc_attr__( 'Small', 'themeLangDomain' ),\n\t\t'size' => 12,\n\t\t'slug' => 'small'\n\t),\n\tarray(\n\t\t'name' => esc_attr__( 'Regular', 'themeLangDomain' ),\n\t\t'size' => 16,\n\t\t'slug' => 'regular'\n\t),\n\tarray(\n\t\t'name' => esc_attr__( 'Large', 'themeLangDomain' ),\n\t\t'size' => 36,\n\t\t'slug' => 'large'\n\t),\n\tarray(\n\t\t'name' => esc_attr__( 'Huge', 'themeLangDomain' ),\n\t\t'size' => 50,\n\t\t'slug' => 'huge'\n\t)\n) );\n```\n\nThe font sizes are rendered on the font size picker in the order themes provide them.\n\nThemes are responsible for creating the classes that apply the correct font size styles.\nThe class name is built appending 'has-', followed by the font size name _using_ kebab case and ending with `-font-size`.\n\nAs an example for the regular font size, a theme may provide the following class.\n\n```css\n.has-regular-font-size {\n\tfont-size: 16px;\n}\n```\n\n<div class=\"callout callout-info\">\n<strong>Note:<\/strong> The slugs `default` and `custom` are reserved and cannot be used by themes.\n<\/div>\n\nStarting in WordPress 5.9, to override font size values defined by core, themes without a `theme.json` have to set their values via CSS Custom Properties instead of providing the classes. The CSS Custom Properties use the following naming `--wp--preset--font-size--<slug>`. See more info in [this devnote](https:\/\/make.wordpress.org\/core\/2022\/01\/08\/updates-for-settings-styles-and-theme-json\/). For example:\n\n```css\n:root {\n\t--wp--preset--font-size--small: <new_value>;\n\t--wp--preset--font-size--large: <new_value>;\n}\n```\n\n### Disabling custom font sizes\n\nThemes can disable the ability to set custom font sizes with the following code:\n\n```php\nadd_theme_support( 'disable-custom-font-sizes' );\n```\n\nWhen set, users will be restricted to the default sizes provided in the block editor or the sizes provided via the `editor-font-sizes` theme support setting.\n\n### Disabling custom colors in block Color Palettes\n\nBy default, the color palette offered to blocks allows the user to select a custom color different from the editor or theme default colors.\n\nThemes can disable this feature using:\n\n```php\nadd_theme_support( 'disable-custom-colors' );\n```\n\nThis flag will make sure users are only able to choose colors from the `editor-color-palette` the theme provided or from the editor default colors if the theme did not provide one.\n\n### Disabling custom gradients\n\nThemes can disable the ability to set a custom gradient with the following code:\n\n```php\nadd_theme_support( 'disable-custom-gradients' );\n```\n\nWhen set, users will be restricted to the default gradients provided in the block editor or the gradients provided via the `editor-gradient-presets` theme support setting.\n\n### Disabling base layout styles\n\n_**Note:** Since WordPress 6.1._\n\nThemes can opt out of generated block layout styles that provide default structural styles for core blocks including Group, Columns, Buttons, and Social Icons. By using the following code, these themes commit to providing their own structural styling, as using this feature will result in core blocks displaying incorrectly in both the editor and site frontend:\n\n```php\nadd_theme_support( 'disable-layout-styles' );\n```\n\nFor themes looking to customize `blockGap` styles or block spacing, see [the developer docs on Global Settings & Styles](\/docs\/how-to-guides\/themes\/global-settings-and-styles.md#what-is-blockgap-and-how-can-i-use-it).\n\n### Supporting custom line heights\n\nSome blocks like paragraph and headings support customizing the line height. Themes can enable support for this feature with the following code:\n\n```php\nadd_theme_support( 'custom-line-height' );\n```\n\n### Support custom units\n\nIn addition to pixels, users can use other units to define sizes, paddings... The available units are: px, em, rem, vh, vw. Themes can disable support for this feature with the following code:\n\n```php\nadd_theme_support( 'custom-units', array() );\n```\n\nThemes can also filter the available custom units.\n\n```php\nadd_theme_support( 'custom-units', 'rem', 'em' );\n```\n\n### Disabling the default block patterns.\n\nWordPress comes with a number of block patterns built-in, themes can opt-out of the bundled patterns and provide their own set using the following code:\n\n```php\nremove_theme_support( 'core-block-patterns' );\n```\n\n## Editor styles\n\nThe block editor supports the theme's [editor styles](https:\/\/codex.wordpress.org\/Editor_Style), however it works a little differently than in the classic editor.\n\nIn the classic editor, the editor stylesheet is loaded directly into the iframe of the WYSIWYG editor, with no changes. The block editor, however, doesn't use iframes. To make sure your styles are applied only to the content of the editor, we automatically transform your editor styles by selectively rewriting or adjusting certain CSS selectors. This also allows the block editor to leverage your editor style in block variation previews.\n\nFor example, if you write `body { ... }` in your editor style, this is rewritten to `.editor-styles-wrapper { ... }`. This also means that you should _not_ target any of the editor class names directly.\n\nBecause it works a little differently, you need to opt-in to this by adding an extra snippet to your theme, in addition to the add_editor_style function:\n\n```php\nadd_theme_support( 'editor-styles' );\n```\n\nYou shouldn't need to change your editor styles too much; most themes can add the snippet above and get similar results in the classic editor and inside the block editor.\n\n### Enqueuing the editor style\n\nUse the `add_editor_style` function to enqueue and load CSS on the editor screen. For the classic editor, this was the only function needed to add style to the editor. For the new block editor, you first need to `add_theme_support( 'editor-styles');` mentioned above.\n\n```php\nadd_editor_style( 'style-editor.css' );\n```\n\nAdding that to your `functions.php` file will add the stylesheet `style-editor.css` to the queue of stylesheets to be loaded in the editor.\n\n### Basic colors\n\nYou can style the editor like any other webpage. Here's how to change the background color and the font color to blue:\n\n```css\n\/* Add this to your `style-editor.css` file *\/\nbody {\n\tbackground-color: #d3ebf3;\n\tcolor: #00005d;\n}\n```\n\n### Changing the width of the editor\n\nTo change the main column width of the editor, add the following CSS to `style-editor.css`:\n\n```css\n\/* Main column width *\/\n.wp-block {\n\tmax-width: 720px;\n}\n\n\/* Width of \"wide\" blocks *\/\n.wp-block[data-align='wide'] {\n\tmax-width: 1080px;\n}\n\n\/* Width of \"full-wide\" blocks *\/\n.wp-block[data-align='full'] {\n\tmax-width: none;\n}\n```\n\nYou can use those editor widths to match those in your theme. You can use any CSS width unit, including `%` or `px`.\n\nFurther reading: [Applying Styles with Stylesheets](\/docs\/how-to-guides\/block-tutorial\/applying-styles-with-stylesheets.md).\n\n## Responsive embedded content\n\nThe embed blocks automatically apply styles to embedded content to reflect the aspect ratio of content that is embedded in an iFrame. A block styled with the aspect ratio responsive styles would look like:\n\n```html\n<figure class=\"wp-embed-aspect-16-9 wp-has-aspect-ratio\">...<\/figure>\n```\n\nTo make the content resize and keep its aspect ratio, the `<body>` element needs the `wp-embed-responsive` class. This is not set by default, and requires the theme to opt in to the `responsive-embeds` feature:\n\n```php\nadd_theme_support( 'responsive-embeds' );\n```\n\n## Spacing control\n\nSome blocks can have padding controls. This is off by default, and requires the theme to opt in by declaring support:\n\n```php\nadd_theme_support( 'custom-spacing' );\n```\n\n## Link color control\n\nLink support has been made stable as part of WordPress 5.8. It's `false` by default and themes can enable it via the [theme.json file](\/docs\/how-to-guides\/curating-the-editor-experience\/theme-json.md):\n\n```json\n{\n\t\"version\": 1,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"link\": true\n\t\t}\n\t}\n}\n```\n\n> Alternatively, with the Gutenberg plugin active, the old legacy support `add_theme_support( 'experimental-link-color' )` would also work. This fallback would be removed when the Gutenberg plugin requires WordPress 5.9 as the minimum version.\n\nWhen the user sets the link color of a block, a new style will be added in the form of:\n\n```css\n.wp-elements-<uuid> a {\n\tcolor: <link-color> !important;\n}\n```\n\nwhere\n\n- `<uuid>` is a random number\n- `<link-color>` is either `var(--wp--preset--color--slug)` (if the user selected a preset value) or a raw color value (if the user selected a custom value)\n\nThe block will get attached the class `.wp-elements-<uuid>`.\n\n## Appearance Tools\n\nUse this setting to enable the following Global Styles settings:\n\n- border: color, radius, style, width\n- color: link\n- spacing: blockGap, margin, padding\n- typography: lineHeight\n- dimensions: aspectRatio, minHeight\n- position: sticky\n\n```php\nadd_theme_support( 'appearance-tools' );\n```\n\n## Border\n\nUse this to enable all border settings:\n\n```php\nadd_theme_support( 'border' );\n```\n\n## Link color\n\nUse this to enable the link color setting:\n\n```php\nadd_theme_support( 'link-color' );\n```\n\n## Block Based Template Parts\n\nBlock Based Template parts allow administrators to edit parts of the site using blocks. This is off by default, and requires the theme to opt in by declaring support:\n\n```php\nadd_theme_support( 'block-template-parts' );\n```\n\nThis feature is only relevant for non block based themes, as block based themes already support block based template parts as part of the site editor.\n\nThe standalone template part editor does not allow editors to create new, or delete existing template parts. This is because the theme manually needs to include the template part in the PHP template.\n\nYou can find out more about block based template parts in the [themes handbook block template and template parts section](https:\/\/developer.wordpress.org\/themes\/block-themes\/templates-and-template-parts\/#block-c5fa39a2-a27d-4bd2-98d0-dc6249a0801a).\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/feature-flags.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Feature Flags<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>'Feature flags' are variables that allow you to prevent specific code in the Gutenberg project from being shipped to WordPress core, and to run certain experimental features only in the plugin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Introducing <code>process.env.IS_GUTENBERG_PLUGIN<\/code><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The <code>process.env.IS_GUTENBERG_PLUGIN<\/code> is an environment variable whose value 'flags' whether code is running within the Gutenberg plugin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When the codebase is built for the plugin, this variable will be set to <code>true<\/code>. When building for WordPress core, it will be set to <code>false<\/code> or <code>undefined<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Basic usage<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Exporting features<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A plugin-only function or constant should be exported using the following ternary syntax:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function myPluginOnlyFeature() {\n\t\/\/ implementation\n}\n\nexport const pluginOnlyFeature =\n\tprocess.env.IS_GUTENBERG_PLUGIN ? myPluginOnlyFeature : undefined;\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the above example, the <code>pluginOnlyFeature<\/code> export will be <code>undefined<\/code> in non-plugin environments such as WordPress core.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Importing features<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you're attempting to import and call a plugin-only feature, be sure to wrap the function call in an <code>if<\/code> statement to avoid an error:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import { pluginOnlyFeature } from '@wordpress\/foo';\n\nif ( process.env.IS_GUTENBERG_PLUGIN ) {\n\tpluginOnlyFeature();\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">How it works<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>During the webpack build, instances of <code>process.env.IS_GUTENBERG_PLUGIN<\/code> will be replaced using webpack's <a href=\"https:\/\/webpack.js.org\/plugins\/define-plugin\/\">define plugin<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, in the following code \u2013<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>if ( process.env.IS_GUTENBERG_PLUGIN ) {\n\tpluginOnlyFeature();\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>\u2013 the variable <code>process.env.IS_GUTENBERG_PLUGIN<\/code> will be replaced with the boolean <code>true<\/code> during the plugin-only build:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>if ( true ) { \/\/ Wepack has replaced `process.env.IS_GUTENBERG_PLUGIN` with `true`\n\tpluginOnlyFeature();\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This ensures that code within the body of the <code>if<\/code> statement will always be executed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In WordPress core, the <code>process.env.IS_GUTENBERG_PLUGIN<\/code> variable is replaced with <code>undefined<\/code>. The built code looks like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>if ( undefined ) { \/\/ Wepack has replaced `process.env.IS_GUTENBERG_PLUGIN` with `undefined`\n\tpluginOnlyFeature();\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>undefined<\/code> evaluates to <code>false<\/code> so the plugin-only feature will not be executed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Dead code elimination<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For production builds, webpack <a href=\"https:\/\/en.wikipedia.org\/wiki\/Minification_(programming)\">'minifies'<\/a> the code, removing as much unnecessary JavaScript as it can.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>One of the steps involves something known as 'dead code elimination'. For example, when the following code is encountered, webpack determines that the surrounding <code>if<\/code> statement is unnecessary:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>if ( true ) {\n\tpluginOnlyFeature();\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The condition will always evaluate to <code>true<\/code>, so webpack removes it, leaving behind the code that was in the body:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>pluginOnlyFeature(); \/\/ The `if` condition block has been removed. Only the body remains.\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Similarly, when building for WordPress core, the condition in the following <code>if<\/code> statement always resolves to false:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>if ( undefined ) {\n\tpluginOnlyFeature();\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In this case, the minification process will remove the entire <code>if<\/code> statement including the body, ensuring plugin-only code is not included in WordPress core build.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Frequently asked questions<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Why shouldn't I assign the result of an expression involving <code>IS_GUTENBERG_PLUGIN<\/code> to a variable, e.g. <code>const isMyFeatureActive = process.env.IS_GUTENBERG_PLUGIN === 2<\/code>?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Introducing complexity may prevent webpack's minifier from identifying and therefore eliminating dead code. Therefore it is recommended to use the examples in this document to ensure your feature flag functions as intended. For further details, see the <a href=\"#dead-code-elimination\">Dead Code Elimination<\/a> section.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Feature Flags\n\n'Feature flags' are variables that allow you to prevent specific code in the Gutenberg project from being shipped to WordPress core, and to run certain experimental features only in the plugin.\n\n## Introducing `process.env.IS_GUTENBERG_PLUGIN`\n\nThe `process.env.IS_GUTENBERG_PLUGIN` is an environment variable whose value 'flags' whether code is running within the Gutenberg plugin. \n\nWhen the codebase is built for the plugin, this variable will be set to `true`. When building for WordPress core, it will be set to `false` or `undefined`.\n\n## Basic usage\n\n### Exporting features\n\nA plugin-only function or constant should be exported using the following ternary syntax:\n\n```js\nfunction myPluginOnlyFeature() {\n\t\/\/ implementation\n}\n\nexport const pluginOnlyFeature =\n\tprocess.env.IS_GUTENBERG_PLUGIN ? myPluginOnlyFeature : undefined;\n```\n\nIn the above example, the `pluginOnlyFeature` export will be `undefined` in non-plugin environments such as WordPress core.\n\n### Importing features\n\nIf you're attempting to import and call a plugin-only feature, be sure to wrap the function call in an `if` statement to avoid an error:\n\n```js\nimport { pluginOnlyFeature } from '@wordpress\/foo';\n\nif ( process.env.IS_GUTENBERG_PLUGIN ) {\n\tpluginOnlyFeature();\n}\n```\n\n## How it works\n\nDuring the webpack build, instances of `process.env.IS_GUTENBERG_PLUGIN` will be replaced using webpack's [define plugin](https:\/\/webpack.js.org\/plugins\/define-plugin\/).\n\nFor example, in the following code \u2013\n\n```js\nif ( process.env.IS_GUTENBERG_PLUGIN ) {\n\tpluginOnlyFeature();\n}\n```\n\n\u2013 the variable `process.env.IS_GUTENBERG_PLUGIN` will be replaced with the boolean `true` during the plugin-only build:\n\n```js\nif ( true ) { \/\/ Wepack has replaced `process.env.IS_GUTENBERG_PLUGIN` with `true`\n\tpluginOnlyFeature();\n}\n```\n\nThis ensures that code within the body of the `if` statement will always be executed.\n\nIn WordPress core, the `process.env.IS_GUTENBERG_PLUGIN` variable is replaced with `undefined`. The built code looks like this:\n\n```js\nif ( undefined ) { \/\/ Wepack has replaced `process.env.IS_GUTENBERG_PLUGIN` with `undefined`\n\tpluginOnlyFeature();\n}\n```\n\n`undefined` evaluates to `false` so the plugin-only feature will not be executed.\n\n### Dead code elimination\n\nFor production builds, webpack ['minifies'](https:\/\/en.wikipedia.org\/wiki\/Minification_(programming)) the code, removing as much unnecessary JavaScript as it can. \n\nOne of the steps involves something known as 'dead code elimination'. For example, when the following code is encountered, webpack determines that the surrounding `if` statement is unnecessary:\n\n```js\nif ( true ) {\n\tpluginOnlyFeature();\n}\n```\n\nThe condition will always evaluate to `true`, so webpack removes it, leaving behind the code that was in the body:\n\n```js\npluginOnlyFeature(); \/\/ The `if` condition block has been removed. Only the body remains.\n```\n\nSimilarly, when building for WordPress core, the condition in the following `if` statement always resolves to false:\n\n```js\nif ( undefined ) {\n\tpluginOnlyFeature();\n}\n```\n\nIn this case, the minification process will remove the entire `if` statement including the body, ensuring plugin-only code is not included in WordPress core build.\n\n## Frequently asked questions\n\n### Why shouldn't I assign the result of an expression involving `IS_GUTENBERG_PLUGIN` to a variable, e.g. `const isMyFeatureActive = process.env.IS_GUTENBERG_PLUGIN === 2`?\n\nIntroducing complexity may prevent webpack's minifier from identifying and therefore eliminating dead code. Therefore it is recommended to use the examples in this document to ensure your feature flag functions as intended. For further details, see the [Dead Code Elimination](#dead-code-elimination) section.\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/widgets\/overview.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Widgets Block Editor overview<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Widgets Block Editor<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The new Widgets Editor is a WordPress feature which upgrades widget areas to allow using blocks alongside widgets. It offers a new widget management experience built using the familiar WordPress block editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can access the new Widgets Editor by navigating to Appearance \u2192 Widgets or Appearance \u2192 Customize \u2192 Widgets and choose a widget area.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The Widgets Block Editor allows you to insert blocks and widgets into any of the <a href=\"https:\/\/developer.wordpress.org\/themes\/functionality\/sidebars\/\">Widget Areas or Sidebars<\/a> defined by the site's active theme, via a standalone editor or through the Customizer.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Customizer Widgets Block Editor<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The new Widgets Editor also replaces the Widgets section in the Customizer with the new block-based editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can access the Customizer Widgets Block Editor by navigating to Appearance \u2192 Customize, selecting Widgets, and then selecting a Widget Area.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using the new Widgets Editor through the Customizer goes beyond inserting blocks and widgets into a selected Widget Area, making use of the live preview of the changes, to the right of the editor, and of all the other Customizer specific features such as scheduling and sharing changes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Compatibility<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Widgets that were added to a Widget Area before the new Widgets Editor will continue to work - via the Legacy Widget block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The Legacy Widget block is the compatibility mechanism which allows us to edit and preview changes to a classic widget within the new block based Widgets Editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Any third party widgets registered by plugins can still be inserted in widget areas by adding and setting them up through a Legacy Widget block.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The Widgets Editor stores blocks using an underlying \"Block\" widget that is invisible to the user. This means that plugins and themes will continue to work normally, and that the Widgets Block Editor can be disabled without any data loss.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Themes may disable the Widgets Block Editor using <code>remove_theme_support( 'widgets-block-editor' )<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Users may disable the Widgets Block Editor by installing the <a href=\"https:\/\/wordpress.org\/plugins\/classic-widgets\/\">Classic Widgets plugin<\/a>.<\/p>\n<!-- \/wp:paragraph -->",
        "markdown": "# Widgets Block Editor overview\n\n## Widgets Block Editor\n\nThe new Widgets Editor is a WordPress feature which upgrades widget areas to allow using blocks alongside widgets. It offers a new widget management experience built using the familiar WordPress block editor.\n\nYou can access the new Widgets Editor by navigating to Appearance \u2192 Widgets or Appearance \u2192 Customize \u2192 Widgets and choose a widget area.\n\nThe Widgets Block Editor allows you to insert blocks and widgets into any of the [Widget Areas or Sidebars](https:\/\/developer.wordpress.org\/themes\/functionality\/sidebars\/) defined by the site's active theme, via a standalone editor or through the Customizer.\n\n### Customizer Widgets Block Editor\n\nThe new Widgets Editor also replaces the Widgets section in the Customizer with the new block-based editor.\n\nYou can access the Customizer Widgets Block Editor by navigating to Appearance \u2192 Customize, selecting Widgets, and then selecting a Widget Area.\n\nUsing the new Widgets Editor through the Customizer goes beyond inserting blocks and widgets into a selected Widget Area, making use of the live preview of the changes, to the right of the editor, and of all the other Customizer specific features such as scheduling and sharing changes.\n\n## Compatibility\n\nWidgets that were added to a Widget Area before the new Widgets Editor will continue to work - via the Legacy Widget block.\n\nThe Legacy Widget block is the compatibility mechanism which allows us to edit and preview changes to a classic widget within the new block based Widgets Editor.\n\nAny third party widgets registered by plugins can still be inserted in widget areas by adding and setting them up through a Legacy Widget block.\n\nThe Widgets Editor stores blocks using an underlying \"Block\" widget that is invisible to the user. This means that plugins and themes will continue to work normally, and that the Widgets Block Editor can be disabled without any data loss.\n\nThemes may disable the Widgets Block Editor using `remove_theme_support( 'widgets-block-editor' )`.\n\nUsers may disable the Widgets Block Editor by installing the [Classic Widgets plugin](https:\/\/wordpress.org\/plugins\/classic-widgets\/).\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/widgets\/README.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Widgets<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Gutenberg plugin replaces the Widgets Editor screen in WP Admin with a new screen based on the WordPress block editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Contents<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li><a href=\"\/docs\/how-to-guides\/widgets\/overview.md\">Widgets Block Editor overview<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/how-to-guides\/widgets\/opting-out.md\">Restoring the old Widgets Editor<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"\/docs\/how-to-guides\/widgets\/legacy-widget-block.md\">Ensuring compatibility with the Legacy Widget block<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "markdown": "# Widgets\n\nThe Gutenberg plugin replaces the Widgets Editor screen in WP Admin with a new screen based on the WordPress block editor.\n\n**Contents**\n\n- [Widgets Block Editor overview](\/docs\/how-to-guides\/widgets\/overview.md)\n- [Restoring the old Widgets Editor](\/docs\/how-to-guides\/widgets\/opting-out.md)\n- [Ensuring compatibility with the Legacy Widget block](\/docs\/how-to-guides\/widgets\/legacy-widget-block.md)\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/widgets\/legacy-widget-block.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">About the Legacy Widget block<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Legacy Widget block allows users to add, edit and preview third party widgets that are registered by plugins and widgets that were added using the classic Widgets Editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Third party widgets can be added by inserting a Legacy Widget block using the block inserter and selecting the widget from the block's dropdown.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Third party widgets may also be added by searching for the name of the widget in the block inserter and selecting the widget. A variation of the Legacy Widget block will be inserted.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Compatibility with the Legacy Widget block<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">The <code>widget-added<\/code> event<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Legacy Widget block will display the widget's form in a way similar to the Customizer, and so is compatible with most third party widgets.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If the widget uses JavaScript in its form, it is important that events are added to the DOM after the <code>'widget-added'<\/code> jQuery event is triggered on <code>document<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, a widget might want to show a \"Password\" field when the \"Change password\" checkbox is checked.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>( function ( $ ) {\n\t$( document ).on( 'widget-added', function ( $event, $control ) {\n\t\t$control.find( '.change-password' ).on( 'change', function () {\n\t\t\tvar isChecked = $( this ).prop( 'checked' );\n\t\t\t$control.find( '.password' ).toggleClass( 'hidden', ! isChecked );\n\t\t} );\n\t} );\n} )( jQuery );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Note that all of the widget's event handlers are added in the <code>widget-added<\/code> callback.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Displaying \"No preview available.\"<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Legacy Widget block will display a preview of the widget when the Legacy Widget block is not selected.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A \"No preview available.\" message is automatically shown by the Legacy Widget block when the widget's <code>widget()<\/code> function does not render anything or only renders empty HTML elements.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Widgets may take advantage of this by returning early from <code>widget()<\/code> when a preview should not be displayed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class ExampleWidget extends WP_Widget {\n\t...\n\tpublic function widget( $instance ) {\n\t\tif ( ! isset( $instance&#91;'name'] ) ) {\n\t\t\t\/\/ Name is required, so display nothing if we don't have it.\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<h3>Name: <\/h3>\n\t\t...\n\t\t\t}\n\t...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Allowing migration to a block<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You can allow users to easily migrate a Legacy Widget block containing a specific widget to a block or multiple blocks. This allows plugin authors to phase out their widgets in favour of blocks which are more intuitive and can be used in more places.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following steps show how to do this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">1) Display the widget's instance in the REST API<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>First, we need to tell WordPress that it is OK to display your widget's instance array in the REST API.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This can be safely done if:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>You know that all of the values stored by your widget in <code>$instance<\/code> can be represented as JSON; and<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>You know that your widget does not store any private data in <code>$instance<\/code> that should be kept hidden from users that have permission to customize the site.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>If it is safe to do so, then include a widget option named <code>show_instance_in_rest<\/code> with its value set to <code>true<\/code> when registering your widget.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class ExampleWidget extends WP_Widget {\n\t...\n\t\/**\n\t * Sets up the widget\n\t *\/\n\tpublic function __construct() {\n\t\t$widget_ops = array(\n\t\t\t\/\/ ...other options here\n\t\t\t'show_instance_in_rest' => true,\n\t\t\t\/\/ ...other options here\n\t\t);\n\t\tparent::__construct( 'example_widget', 'ExampleWidget', $widget_ops );\n\t}\n\t...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This allows the block editor and other REST API clients to see your widget's instance array by accessing <code>instance.raw<\/code> in the REST API response.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note that <a href=\"https:\/\/core.trac.wordpress.org\/ticket\/53332\">versions of WordPress prior to 5.8.0 allowed you to enable this feature by setting <code>$show_instance_in_rest<\/code> to <code>true<\/code><\/a> in the class that extends <code>WP_Widget<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>class ExampleWidget extends WP_Widget {\n\t...\n\tpublic $show_instance_in_rest = true;\n\t...\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This is now deprecated in favour of the widget option method.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">2) Add a block transform<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now, we can define a <a href=\"https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-transforms\/\">block transform<\/a> which tells the block editor what to replace the Legacy Widget block containing your widget with.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is done by adding JavaScript code to your block's definition. In this example, we define a transform that turns a widget with ID <code>'example_widget'<\/code> into a block with name <code>'example\/block'<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>transforms: {\n\tfrom: &#91;\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: &#91; 'core\/legacy-widget' ],\n\t\t\tisMatch: ( { idBase, instance } ) => {\n\t\t\t\tif ( ! instance?.raw ) {\n\t\t\t\t\t\/\/ Can't transform if raw instance is not shown in REST API.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn idBase === 'example_widget';\n\t\t\t},\n\t\t\ttransform: ( { instance } ) => {\n\t\t\t\treturn createBlock( 'example\/block', {\n\t\t\t\t\tname: instance.raw.name,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t]\n},\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">3) Hide the widget from the Legacy Widget block<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As a final touch, we can tell the Legacy Widget block to hide your widget from the \"Select widget\" dropdown and from the block inserter. This encourages users to use the block that replaces your widget.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This can be done using the <code>widget_types_to_hide_from_legacy_widget_block<\/code> filter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function hide_example_widget( $widget_types ) {\n\t$widget_types&#91;] = 'example_widget';\n\treturn $widget_types;\n}\nadd_filter( 'widget_types_to_hide_from_legacy_widget_block', 'hide_example_widget' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Using the Legacy Widget block in other block editors (Advanced)<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You may optionally allow the Legacy Widget block in other block editors such as<br>the WordPress post editor. This is not enabled by default.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First, ensure that any styles and scripts required by the legacy widgets are<br>loaded onto the page. A convenient way of doing this is to manually perform all<br>of the hooks that ordinarily run when a user browses to the widgets WP Admin<br>screen.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_action( 'admin_print_styles', function() {\n\tif ( get_current_screen()->is_block_editor() ) {\n\t\tdo_action( 'admin_print_styles-widgets.php' );\n\t}\n} );\nadd_action( 'admin_print_scripts', function() {\n\tif ( get_current_screen()->is_block_editor() ) {\n\t\tdo_action( 'load-widgets.php' );\n\t\tdo_action( 'widgets.php' );\n\t\tdo_action( 'sidebar_admin_setup' );\n\t\tdo_action( 'admin_print_scripts-widgets.php' );\n\t}\n} );\nadd_action( 'admin_print_footer_scripts', function() {\n\tif ( get_current_screen()->is_block_editor() ) {\n\t\tdo_action( 'admin_print_footer_scripts-widgets.php' );\n\t}\n} );\nadd_action( 'admin_footer', function() {\n\tif ( get_current_screen()->is_block_editor() ) {\n\t\tdo_action( 'admin_footer-widgets.php' );\n\t}\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then, register the Legacy Widget block using <code>registerLegacyWidgetBlock<\/code> which<br>is defined in the <code>@wordpress\/widgets<\/code> package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_action( 'enqueue_block_editor_assets', function() {\n\twp_enqueue_script( 'wp-widgets' );\n\twp_add_inline_script( 'wp-widgets', 'wp.widgets.registerLegacyWidgetBlock()' );\n} );\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# About the Legacy Widget block\n\nThe Legacy Widget block allows users to add, edit and preview third party widgets that are registered by plugins and widgets that were added using the classic Widgets Editor.\n\nThird party widgets can be added by inserting a Legacy Widget block using the block inserter and selecting the widget from the block's dropdown.\n\nThird party widgets may also be added by searching for the name of the widget in the block inserter and selecting the widget. A variation of the Legacy Widget block will be inserted.\n\n## Compatibility with the Legacy Widget block\n\n### The `widget-added` event\n\nThe Legacy Widget block will display the widget's form in a way similar to the Customizer, and so is compatible with most third party widgets.\n\nIf the widget uses JavaScript in its form, it is important that events are added to the DOM after the `'widget-added'` jQuery event is triggered on `document`.\n\nFor example, a widget might want to show a \"Password\" field when the \"Change password\" checkbox is checked.\n\n```js\n( function ( $ ) {\n\t$( document ).on( 'widget-added', function ( $event, $control ) {\n\t\t$control.find( '.change-password' ).on( 'change', function () {\n\t\t\tvar isChecked = $( this ).prop( 'checked' );\n\t\t\t$control.find( '.password' ).toggleClass( 'hidden', ! isChecked );\n\t\t} );\n\t} );\n} )( jQuery );\n```\n\nNote that all of the widget's event handlers are added in the `widget-added` callback.\n\n### Displaying \"No preview available.\"\n\nThe Legacy Widget block will display a preview of the widget when the Legacy Widget block is not selected.\n\nA \"No preview available.\" message is automatically shown by the Legacy Widget block when the widget's `widget()` function does not render anything or only renders empty HTML elements.\n\nWidgets may take advantage of this by returning early from `widget()` when a preview should not be displayed.\n\n```php\nclass ExampleWidget extends WP_Widget {\n\t...\n\tpublic function widget( $instance ) {\n\t\tif ( ! isset( $instance['name'] ) ) {\n\t\t\t\/\/ Name is required, so display nothing if we don't have it.\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<h3>Name: <?php echo esc_html( $instance['name'] ); ?><\/h3>\n\t\t...\n\t\t<?php\n\t}\n\t...\n}\n```\n\n### Allowing migration to a block\n\nYou can allow users to easily migrate a Legacy Widget block containing a specific widget to a block or multiple blocks. This allows plugin authors to phase out their widgets in favour of blocks which are more intuitive and can be used in more places.\n\nThe following steps show how to do this.\n\n#### 1) Display the widget's instance in the REST API\n\nFirst, we need to tell WordPress that it is OK to display your widget's instance array in the REST API.\n\nThis can be safely done if:\n\n-   You know that all of the values stored by your widget in `$instance` can be represented as JSON; and\n-   You know that your widget does not store any private data in `$instance` that should be kept hidden from users that have permission to customize the site.\n\nIf it is safe to do so, then include a widget option named `show_instance_in_rest` with its value set to `true` when registering your widget.\n\n```php\nclass ExampleWidget extends WP_Widget {\n\t...\n\t\/**\n\t * Sets up the widget\n\t *\/\n\tpublic function __construct() {\n\t\t$widget_ops = array(\n\t\t\t\/\/ ...other options here\n\t\t\t'show_instance_in_rest' => true,\n\t\t\t\/\/ ...other options here\n\t\t);\n\t\tparent::__construct( 'example_widget', 'ExampleWidget', $widget_ops );\n\t}\n\t...\n}\n```\n\nThis allows the block editor and other REST API clients to see your widget's instance array by accessing `instance.raw` in the REST API response.\n\nNote that [versions of WordPress prior to 5.8.0 allowed you to enable this feature by setting `$show_instance_in_rest` to `true`](https:\/\/core.trac.wordpress.org\/ticket\/53332) in the class that extends `WP_Widget`.\n\n```php\nclass ExampleWidget extends WP_Widget {\n\t...\n\tpublic $show_instance_in_rest = true;\n\t...\n}\n```\n\nThis is now deprecated in favour of the widget option method.\n\n#### 2) Add a block transform\n\nNow, we can define a [block transform](https:\/\/developer.wordpress.org\/block-editor\/reference-guides\/block-api\/block-transforms\/) which tells the block editor what to replace the Legacy Widget block containing your widget with.\n\nThis is done by adding JavaScript code to your block's definition. In this example, we define a transform that turns a widget with ID `'example_widget'` into a block with name `'example\/block'`.\n\n```js\ntransforms: {\n\tfrom: [\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core\/legacy-widget' ],\n\t\t\tisMatch: ( { idBase, instance } ) => {\n\t\t\t\tif ( ! instance?.raw ) {\n\t\t\t\t\t\/\/ Can't transform if raw instance is not shown in REST API.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn idBase === 'example_widget';\n\t\t\t},\n\t\t\ttransform: ( { instance } ) => {\n\t\t\t\treturn createBlock( 'example\/block', {\n\t\t\t\t\tname: instance.raw.name,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t]\n},\n```\n\n#### 3) Hide the widget from the Legacy Widget block\n\nAs a final touch, we can tell the Legacy Widget block to hide your widget from the \"Select widget\" dropdown and from the block inserter. This encourages users to use the block that replaces your widget.\n\nThis can be done using the `widget_types_to_hide_from_legacy_widget_block` filter.\n\n```php\nfunction hide_example_widget( $widget_types ) {\n\t$widget_types[] = 'example_widget';\n\treturn $widget_types;\n}\nadd_filter( 'widget_types_to_hide_from_legacy_widget_block', 'hide_example_widget' );\n```\n\n## Using the Legacy Widget block in other block editors (Advanced)\n\nYou may optionally allow the Legacy Widget block in other block editors such as\nthe WordPress post editor. This is not enabled by default.\n\nFirst, ensure that any styles and scripts required by the legacy widgets are\nloaded onto the page. A convenient way of doing this is to manually perform all\nof the hooks that ordinarily run when a user browses to the widgets WP Admin\nscreen.\n\n```php\nadd_action( 'admin_print_styles', function() {\n\tif ( get_current_screen()->is_block_editor() ) {\n\t\tdo_action( 'admin_print_styles-widgets.php' );\n\t}\n} );\nadd_action( 'admin_print_scripts', function() {\n\tif ( get_current_screen()->is_block_editor() ) {\n\t\tdo_action( 'load-widgets.php' );\n\t\tdo_action( 'widgets.php' );\n\t\tdo_action( 'sidebar_admin_setup' );\n\t\tdo_action( 'admin_print_scripts-widgets.php' );\n\t}\n} );\nadd_action( 'admin_print_footer_scripts', function() {\n\tif ( get_current_screen()->is_block_editor() ) {\n\t\tdo_action( 'admin_print_footer_scripts-widgets.php' );\n\t}\n} );\nadd_action( 'admin_footer', function() {\n\tif ( get_current_screen()->is_block_editor() ) {\n\t\tdo_action( 'admin_footer-widgets.php' );\n\t}\n} );\n```\n\nThen, register the Legacy Widget block using `registerLegacyWidgetBlock` which\nis defined in the `@wordpress\/widgets` package.\n\n```php\nadd_action( 'enqueue_block_editor_assets', function() {\n\twp_enqueue_script( 'wp-widgets' );\n\twp_add_inline_script( 'wp-widgets', 'wp.widgets.registerLegacyWidgetBlock()' );\n} );\n```\n"
    },
    {
        "path": "\/markdown\/how-to-guides\/widgets\/opting-out.blockhtml",
        "name": ".",
        "content": "<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Restoring the classic Widgets Editor<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There are several ways to disable the new Widgets Block Editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Using <code>remove_theme_support<\/code><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Themes may disable the Widgets Block Editor by calling <code>remove_theme_support( 'widgets-block-editor' )<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, a theme may have the following PHP code in <code>functions.php<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function example_theme_support() {\n\tremove_theme_support( 'widgets-block-editor' );\n}\nadd_action( 'after_setup_theme', 'example_theme_support' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Using the Classic Widgets plugin<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>End users may disable the Widgets Block Editor by installing and activating the <a href=\"https:\/\/wordpress.org\/plugins\/classic-widgets\/\">Classic Widgets plugin<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With this plugin installed, the Widgets Block Editor can be toggled on and off by deactivating and activating the plugin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Using a filter<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>the <code>use_widgets_block_editor<\/code> filter controls whether or not the Widgets Block Editor is enabled.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, a site administrator may include the following PHP code in a mu-plugin to disable the Widgets Block Editor.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>add_filter( 'use_widgets_block_editor', '__return_false' );\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>For more advanced uses, you may supply your own function. In this example, the Widgets Block Editor is disabled for a specific user.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function example_use_widgets_block_editor( $use_widgets_block_editor ) {\n\tif ( 123 === get_current_user_id() ) {\n\t\treturn false;\n\t}\n\treturn $use_widgets_block_editor;\n}\nadd_filter( 'use_widgets_block_editor', 'example_use_widgets_block_editor' );\n<\/code><\/pre>\n<!-- \/wp:code -->",
        "markdown": "# Restoring the classic Widgets Editor\n\nThere are several ways to disable the new Widgets Block Editor.\n\n## Using `remove_theme_support`\n\nThemes may disable the Widgets Block Editor by calling `remove_theme_support( 'widgets-block-editor' )`.\n\nFor example, a theme may have the following PHP code in `functions.php`.\n\n```php\nfunction example_theme_support() {\n\tremove_theme_support( 'widgets-block-editor' );\n}\nadd_action( 'after_setup_theme', 'example_theme_support' );\n```\n\n## Using the Classic Widgets plugin\n\nEnd users may disable the Widgets Block Editor by installing and activating the [Classic Widgets plugin](https:\/\/wordpress.org\/plugins\/classic-widgets\/).\n\nWith this plugin installed, the Widgets Block Editor can be toggled on and off by deactivating and activating the plugin.\n\n## Using a filter\n\nthe `use_widgets_block_editor` filter controls whether or not the Widgets Block Editor is enabled.\n\nFor example, a site administrator may include the following PHP code in a mu-plugin to disable the Widgets Block Editor.\n\n```php\nadd_filter( 'use_widgets_block_editor', '__return_false' );\n```\n\nFor more advanced uses, you may supply your own function. In this example, the Widgets Block Editor is disabled for a specific user.\n\n```php\nfunction example_use_widgets_block_editor( $use_widgets_block_editor ) {\n\tif ( 123 === get_current_user_id() ) {\n\t\treturn false;\n\t}\n\treturn $use_widgets_block_editor;\n}\nadd_filter( 'use_widgets_block_editor', 'example_use_widgets_block_editor' );\n```\n"
    }
]