<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress/6.6-beta2" created="2024-06-11 19:41" -->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>My WordPress Website</title>
<link>http://127.0.0.1:9400</link>
<description/>
<pubDate>Tue, 11 Jun 2024 19:41:22 +0000</pubDate>
<language>en-US</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://127.0.0.1:9400</wp:base_site_url>
<wp:base_blog_url>http://127.0.0.1:9400</wp:base_blog_url>
<wp:author>
  <wp:author_id>1</wp:author_id>
  <wp:author_login>admin</wp:author_login>
  <wp:author_email>admin@localhost.com</wp:author_email>
  <wp:author_display_name><![CDATA[admin]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<generator>https://wordpress.org/?v=6.6-beta2</generator>
<item>
  <title><![CDATA[unhandled-iframes.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=1</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Pair the site editor's nested iframe to the Service Worker.</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Without the patch below, the site editor initiates network requests that<br>aren't routed through the service worker. That's a known browser issue:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>https://bugs.chromium.org/p/chromium/issues/detail?id=880768</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>https://bugzilla.mozilla.org/show_bug.cgi?id=1293277</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>https://github.com/w3c/ServiceWorker/issues/765</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The problem with iframes using srcDoc and src="about:blank" as they<br>fail to inherit the root site's service worker.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Gutenberg loads the site editor using &lt;iframe srcDoc="&lt;!doctype html"><br>to force the standards mode and not the quirks mode:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>https://github.com/WordPress/gutenberg/pull/38855</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This commit patches the site editor to achieve the same result via</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<iframe src="/doctype.html"> and a doctype.html file containing just
`<!doctype html>`. This allows the iframe to inherit the service worker
and correctly load all the css, js, fonts, images, and other assets.
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Ideally this issue would be fixed directly in Gutenberg and the patch<br>below would be removed.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>See https://github.com/WordPress/wordpress-playground/issues/42 for more details</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Why does this code live in the service worker?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There's many ways to install the Gutenberg plugin:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Install plugin step</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Import a site</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Install Gutenberg from the plugin directory</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Upload a Gutenberg zip</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>It's too difficult to patch Gutenberg in all these cases, so we blanket-patch<br>all the scripts requested over the network whose names seem to indicate they're<br>related to the Gutenberg plugin.</p>
<!-- /wp:paragraph -->
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
  </channel>
</rss>
